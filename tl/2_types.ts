// deno-fmt-ignore-file
import { id, params, TLObject, Params, TLObjectConstructor, ParamDesc, paramDesc, flags, name } from "./1_tl_object.ts";

export abstract class Type_ extends TLObject {
}

// Unknown type (generic)
export abstract class TypeX_ extends Type_ {
  static get [name](): string {
    return "TypeX";
  }
}

export abstract class _ResPQ_ extends Type_ {
}

export abstract class _P_Q_inner_data_ extends Type_ {
}

export abstract class _Server_DH_Params_ extends Type_ {
}

export abstract class _Server_DH_inner_data_ extends Type_ {
}

export abstract class _Client_DH_Inner_Data_ extends Type_ {
}

export abstract class _Set_client_DH_params_answer_ extends Type_ {
}

export abstract class _BindAuthKeyInner_ extends Type_ {
}

export abstract class _RpcError_ extends Type_ {
}

export abstract class _RpcDropAnswer_ extends Type_ {
}

export abstract class _FutureSalt_ extends Type_ {
}

export abstract class _FutureSalts_ extends Type_ {
}

export abstract class _Pong_ extends Type_ {
}

export abstract class _DestroySessionRes_ extends Type_ {
}

export abstract class _NewSession_ extends Type_ {
}

export abstract class _Object_ extends Type_ {
}

export abstract class _MsgsAck_ extends Type_ {
}

export abstract class _BadMsgNotification_ extends Type_ {
}

export abstract class _MsgResendReq_ extends Type_ {
}

export abstract class _MsgsStateReq_ extends Type_ {
}

export abstract class _MsgsStateInfo_ extends Type_ {
}

export abstract class _MsgsAllInfo_ extends Type_ {
}

export abstract class _MsgDetailedInfo_ extends Type_ {
}

export abstract class _DestroyAuthKeyRes_ extends Type_ {
}

export abstract class _HttpWait_ extends Type_ {
}

export abstract class _True_ extends Type_ {
}

export abstract class _Error_ extends Type_ {
}

export abstract class _Null_ extends Type_ {
}

export abstract class _InputPeer_ extends Type_ {
}

export abstract class _InputUser_ extends Type_ {
}

export abstract class _InputContact_ extends Type_ {
}

export abstract class _InputFile_ extends Type_ {
}

export abstract class _InputMedia_ extends Type_ {
}

export abstract class _InputChatPhoto_ extends Type_ {
}

export abstract class _InputGeoPoint_ extends Type_ {
}

export abstract class _InputPhoto_ extends Type_ {
}

export abstract class _InputFileLocation_ extends Type_ {
}

export abstract class _Peer_ extends Type_ {
}

export abstract class _storage_FileType_ extends Type_ {
}

export abstract class _User_ extends Type_ {
}

export abstract class _UserProfilePhoto_ extends Type_ {
}

export abstract class _UserStatus_ extends Type_ {
}

export abstract class _Chat_ extends Type_ {
}

export abstract class _ChatFull_ extends Type_ {
}

export abstract class _ChatParticipant_ extends Type_ {
}

export abstract class _ChatParticipants_ extends Type_ {
}

export abstract class _ChatPhoto_ extends Type_ {
}

export abstract class _Message_ extends Type_ {
}

export abstract class _MessageMedia_ extends Type_ {
}

export abstract class _MessageAction_ extends Type_ {
}

export abstract class _Dialog_ extends Type_ {
}

export abstract class _Photo_ extends Type_ {
}

export abstract class _PhotoSize_ extends Type_ {
}

export abstract class _GeoPoint_ extends Type_ {
}

export abstract class _auth_SentCode_ extends Type_ {
}

export abstract class _auth_Authorization_ extends Type_ {
}

export abstract class _auth_ExportedAuthorization_ extends Type_ {
}

export abstract class _InputNotifyPeer_ extends Type_ {
}

export abstract class _InputPeerNotifySettings_ extends Type_ {
}

export abstract class _PeerNotifySettings_ extends Type_ {
}

export abstract class _PeerSettings_ extends Type_ {
}

export abstract class _WallPaper_ extends Type_ {
}

export abstract class _ReportReason_ extends Type_ {
}

export abstract class _UserFull_ extends Type_ {
}

export abstract class _Contact_ extends Type_ {
}

export abstract class _ImportedContact_ extends Type_ {
}

export abstract class _ContactStatus_ extends Type_ {
}

export abstract class _contacts_Contacts_ extends Type_ {
}

export abstract class _contacts_ImportedContacts_ extends Type_ {
}

export abstract class _contacts_Blocked_ extends Type_ {
}

export abstract class _messages_Dialogs_ extends Type_ {
}

export abstract class _messages_Messages_ extends Type_ {
}

export abstract class _messages_Chats_ extends Type_ {
}

export abstract class _messages_ChatFull_ extends Type_ {
}

export abstract class _messages_AffectedHistory_ extends Type_ {
}

export abstract class _MessagesFilter_ extends Type_ {
}

export abstract class _Update_ extends Type_ {
}

export abstract class _updates_State_ extends Type_ {
}

export abstract class _updates_Difference_ extends Type_ {
}

export abstract class _Updates_ extends Type_ {
}

export abstract class _photos_Photos_ extends Type_ {
}

export abstract class _photos_Photo_ extends Type_ {
}

export abstract class _upload_File_ extends Type_ {
}

export abstract class _DcOption_ extends Type_ {
}

export abstract class _Config_ extends Type_ {
}

export abstract class _NearestDc_ extends Type_ {
}

export abstract class _help_AppUpdate_ extends Type_ {
}

export abstract class _help_InviteText_ extends Type_ {
}

export abstract class _EncryptedChat_ extends Type_ {
}

export abstract class _InputEncryptedChat_ extends Type_ {
}

export abstract class _EncryptedFile_ extends Type_ {
}

export abstract class _InputEncryptedFile_ extends Type_ {
}

export abstract class _EncryptedMessage_ extends Type_ {
}

export abstract class _messages_DhConfig_ extends Type_ {
}

export abstract class _messages_SentEncryptedMessage_ extends Type_ {
}

export abstract class _InputDocument_ extends Type_ {
}

export abstract class _Document_ extends Type_ {
}

export abstract class _help_Support_ extends Type_ {
}

export abstract class _NotifyPeer_ extends Type_ {
}

export abstract class _SendMessageAction_ extends Type_ {
}

export abstract class _contacts_Found_ extends Type_ {
}

export abstract class _InputPrivacyKey_ extends Type_ {
}

export abstract class _PrivacyKey_ extends Type_ {
}

export abstract class _InputPrivacyRule_ extends Type_ {
}

export abstract class _PrivacyRule_ extends Type_ {
}

export abstract class _account_PrivacyRules_ extends Type_ {
}

export abstract class _AccountDaysTTL_ extends Type_ {
}

export abstract class _DocumentAttribute_ extends Type_ {
}

export abstract class _messages_Stickers_ extends Type_ {
}

export abstract class _StickerPack_ extends Type_ {
}

export abstract class _messages_AllStickers_ extends Type_ {
}

export abstract class _messages_AffectedMessages_ extends Type_ {
}

export abstract class _WebPage_ extends Type_ {
}

export abstract class _Authorization_ extends Type_ {
}

export abstract class _account_Authorizations_ extends Type_ {
}

export abstract class _account_Password_ extends Type_ {
}

export abstract class _account_PasswordSettings_ extends Type_ {
}

export abstract class _account_PasswordInputSettings_ extends Type_ {
}

export abstract class _auth_PasswordRecovery_ extends Type_ {
}

export abstract class _ReceivedNotifyMessage_ extends Type_ {
}

export abstract class _ExportedChatInvite_ extends Type_ {
}

export abstract class _ChatInvite_ extends Type_ {
}

export abstract class _InputStickerSet_ extends Type_ {
}

export abstract class _StickerSet_ extends Type_ {
}

export abstract class _messages_StickerSet_ extends Type_ {
}

export abstract class _BotCommand_ extends Type_ {
}

export abstract class _BotInfo_ extends Type_ {
}

export abstract class _KeyboardButton_ extends Type_ {
}

export abstract class _KeyboardButtonRow_ extends Type_ {
}

export abstract class _ReplyMarkup_ extends Type_ {
}

export abstract class _MessageEntity_ extends Type_ {
}

export abstract class _InputChannel_ extends Type_ {
}

export abstract class _contacts_ResolvedPeer_ extends Type_ {
}

export abstract class _MessageRange_ extends Type_ {
}

export abstract class _updates_ChannelDifference_ extends Type_ {
}

export abstract class _ChannelMessagesFilter_ extends Type_ {
}

export abstract class _ChannelParticipant_ extends Type_ {
}

export abstract class _ChannelParticipantsFilter_ extends Type_ {
}

export abstract class _channels_ChannelParticipants_ extends Type_ {
}

export abstract class _channels_ChannelParticipant_ extends Type_ {
}

export abstract class _help_TermsOfService_ extends Type_ {
}

export abstract class _messages_SavedGifs_ extends Type_ {
}

export abstract class _InputBotInlineMessage_ extends Type_ {
}

export abstract class _InputBotInlineResult_ extends Type_ {
}

export abstract class _BotInlineMessage_ extends Type_ {
}

export abstract class _BotInlineResult_ extends Type_ {
}

export abstract class _messages_BotResults_ extends Type_ {
}

export abstract class _ExportedMessageLink_ extends Type_ {
}

export abstract class _MessageFwdHeader_ extends Type_ {
}

export abstract class _auth_CodeType_ extends Type_ {
}

export abstract class _auth_SentCodeType_ extends Type_ {
}

export abstract class _messages_BotCallbackAnswer_ extends Type_ {
}

export abstract class _messages_MessageEditData_ extends Type_ {
}

export abstract class _InputBotInlineMessageID_ extends Type_ {
}

export abstract class _InlineBotSwitchPM_ extends Type_ {
}

export abstract class _messages_PeerDialogs_ extends Type_ {
}

export abstract class _TopPeer_ extends Type_ {
}

export abstract class _TopPeerCategory_ extends Type_ {
}

export abstract class _TopPeerCategoryPeers_ extends Type_ {
}

export abstract class _contacts_TopPeers_ extends Type_ {
}

export abstract class _DraftMessage_ extends Type_ {
}

export abstract class _messages_FeaturedStickers_ extends Type_ {
}

export abstract class _messages_RecentStickers_ extends Type_ {
}

export abstract class _messages_ArchivedStickers_ extends Type_ {
}

export abstract class _messages_StickerSetInstallResult_ extends Type_ {
}

export abstract class _StickerSetCovered_ extends Type_ {
}

export abstract class _MaskCoords_ extends Type_ {
}

export abstract class _InputStickeredMedia_ extends Type_ {
}

export abstract class _Game_ extends Type_ {
}

export abstract class _InputGame_ extends Type_ {
}

export abstract class _HighScore_ extends Type_ {
}

export abstract class _messages_HighScores_ extends Type_ {
}

export abstract class _RichText_ extends Type_ {
}

export abstract class _PageBlock_ extends Type_ {
}

export abstract class _PhoneCallDiscardReason_ extends Type_ {
}

export abstract class _DataJSON_ extends Type_ {
}

export abstract class _LabeledPrice_ extends Type_ {
}

export abstract class _Invoice_ extends Type_ {
}

export abstract class _PaymentCharge_ extends Type_ {
}

export abstract class _PostAddress_ extends Type_ {
}

export abstract class _PaymentRequestedInfo_ extends Type_ {
}

export abstract class _PaymentSavedCredentials_ extends Type_ {
}

export abstract class _WebDocument_ extends Type_ {
}

export abstract class _InputWebDocument_ extends Type_ {
}

export abstract class _InputWebFileLocation_ extends Type_ {
}

export abstract class _upload_WebFile_ extends Type_ {
}

export abstract class _payments_PaymentForm_ extends Type_ {
}

export abstract class _payments_ValidatedRequestedInfo_ extends Type_ {
}

export abstract class _payments_PaymentResult_ extends Type_ {
}

export abstract class _payments_PaymentReceipt_ extends Type_ {
}

export abstract class _payments_SavedInfo_ extends Type_ {
}

export abstract class _InputPaymentCredentials_ extends Type_ {
}

export abstract class _account_TmpPassword_ extends Type_ {
}

export abstract class _ShippingOption_ extends Type_ {
}

export abstract class _InputStickerSetItem_ extends Type_ {
}

export abstract class _InputPhoneCall_ extends Type_ {
}

export abstract class _PhoneCall_ extends Type_ {
}

export abstract class _PhoneConnection_ extends Type_ {
}

export abstract class _PhoneCallProtocol_ extends Type_ {
}

export abstract class _phone_PhoneCall_ extends Type_ {
}

export abstract class _upload_CdnFile_ extends Type_ {
}

export abstract class _CdnPublicKey_ extends Type_ {
}

export abstract class _CdnConfig_ extends Type_ {
}

export abstract class _LangPackString_ extends Type_ {
}

export abstract class _LangPackDifference_ extends Type_ {
}

export abstract class _LangPackLanguage_ extends Type_ {
}

export abstract class _ChannelAdminLogEventAction_ extends Type_ {
}

export abstract class _ChannelAdminLogEvent_ extends Type_ {
}

export abstract class _channels_AdminLogResults_ extends Type_ {
}

export abstract class _ChannelAdminLogEventsFilter_ extends Type_ {
}

export abstract class _PopularContact_ extends Type_ {
}

export abstract class _messages_FavedStickers_ extends Type_ {
}

export abstract class _RecentMeUrl_ extends Type_ {
}

export abstract class _help_RecentMeUrls_ extends Type_ {
}

export abstract class _InputSingleMedia_ extends Type_ {
}

export abstract class _WebAuthorization_ extends Type_ {
}

export abstract class _account_WebAuthorizations_ extends Type_ {
}

export abstract class _InputMessage_ extends Type_ {
}

export abstract class _InputDialogPeer_ extends Type_ {
}

export abstract class _DialogPeer_ extends Type_ {
}

export abstract class _messages_FoundStickerSets_ extends Type_ {
}

export abstract class _FileHash_ extends Type_ {
}

export abstract class _InputClientProxy_ extends Type_ {
}

export abstract class _help_TermsOfServiceUpdate_ extends Type_ {
}

export abstract class _InputSecureFile_ extends Type_ {
}

export abstract class _SecureFile_ extends Type_ {
}

export abstract class _SecureData_ extends Type_ {
}

export abstract class _SecurePlainData_ extends Type_ {
}

export abstract class _SecureValueType_ extends Type_ {
}

export abstract class _SecureValue_ extends Type_ {
}

export abstract class _InputSecureValue_ extends Type_ {
}

export abstract class _SecureValueHash_ extends Type_ {
}

export abstract class _SecureValueError_ extends Type_ {
}

export abstract class _SecureCredentialsEncrypted_ extends Type_ {
}

export abstract class _account_AuthorizationForm_ extends Type_ {
}

export abstract class _account_SentEmailCode_ extends Type_ {
}

export abstract class _help_DeepLinkInfo_ extends Type_ {
}

export abstract class _SavedContact_ extends Type_ {
}

export abstract class _account_Takeout_ extends Type_ {
}

export abstract class _PasswordKdfAlgo_ extends Type_ {
}

export abstract class _SecurePasswordKdfAlgo_ extends Type_ {
}

export abstract class _SecureSecretSettings_ extends Type_ {
}

export abstract class _InputCheckPasswordSRP_ extends Type_ {
}

export abstract class _SecureRequiredType_ extends Type_ {
}

export abstract class _help_PassportConfig_ extends Type_ {
}

export abstract class _InputAppEvent_ extends Type_ {
}

export abstract class _JSONObjectValue_ extends Type_ {
}

export abstract class _JSONValue_ extends Type_ {
}

export abstract class _PageTableCell_ extends Type_ {
}

export abstract class _PageTableRow_ extends Type_ {
}

export abstract class _PageCaption_ extends Type_ {
}

export abstract class _PageListItem_ extends Type_ {
}

export abstract class _PageListOrderedItem_ extends Type_ {
}

export abstract class _PageRelatedArticle_ extends Type_ {
}

export abstract class _Page_ extends Type_ {
}

export abstract class _help_SupportName_ extends Type_ {
}

export abstract class _help_UserInfo_ extends Type_ {
}

export abstract class _PollAnswer_ extends Type_ {
}

export abstract class _Poll_ extends Type_ {
}

export abstract class _PollAnswerVoters_ extends Type_ {
}

export abstract class _PollResults_ extends Type_ {
}

export abstract class _ChatOnlines_ extends Type_ {
}

export abstract class _StatsURL_ extends Type_ {
}

export abstract class _ChatAdminRights_ extends Type_ {
}

export abstract class _ChatBannedRights_ extends Type_ {
}

export abstract class _InputWallPaper_ extends Type_ {
}

export abstract class _account_WallPapers_ extends Type_ {
}

export abstract class _CodeSettings_ extends Type_ {
}

export abstract class _WallPaperSettings_ extends Type_ {
}

export abstract class _AutoDownloadSettings_ extends Type_ {
}

export abstract class _account_AutoDownloadSettings_ extends Type_ {
}

export abstract class _EmojiKeyword_ extends Type_ {
}

export abstract class _EmojiKeywordsDifference_ extends Type_ {
}

export abstract class _EmojiURL_ extends Type_ {
}

export abstract class _EmojiLanguage_ extends Type_ {
}

export abstract class _Folder_ extends Type_ {
}

export abstract class _InputFolderPeer_ extends Type_ {
}

export abstract class _FolderPeer_ extends Type_ {
}

export abstract class _messages_SearchCounter_ extends Type_ {
}

export abstract class _UrlAuthResult_ extends Type_ {
}

export abstract class _ChannelLocation_ extends Type_ {
}

export abstract class _PeerLocated_ extends Type_ {
}

export abstract class _RestrictionReason_ extends Type_ {
}

export abstract class _InputTheme_ extends Type_ {
}

export abstract class _Theme_ extends Type_ {
}

export abstract class _account_Themes_ extends Type_ {
}

export abstract class _auth_LoginToken_ extends Type_ {
}

export abstract class _account_ContentSettings_ extends Type_ {
}

export abstract class _messages_InactiveChats_ extends Type_ {
}

export abstract class _BaseTheme_ extends Type_ {
}

export abstract class _InputThemeSettings_ extends Type_ {
}

export abstract class _ThemeSettings_ extends Type_ {
}

export abstract class _WebPageAttribute_ extends Type_ {
}

export abstract class _messages_VotesList_ extends Type_ {
}

export abstract class _BankCardOpenUrl_ extends Type_ {
}

export abstract class _payments_BankCardData_ extends Type_ {
}

export abstract class _DialogFilter_ extends Type_ {
}

export abstract class _DialogFilterSuggested_ extends Type_ {
}

export abstract class _StatsDateRangeDays_ extends Type_ {
}

export abstract class _StatsAbsValueAndPrev_ extends Type_ {
}

export abstract class _StatsPercentValue_ extends Type_ {
}

export abstract class _StatsGraph_ extends Type_ {
}

export abstract class _stats_BroadcastStats_ extends Type_ {
}

export abstract class _help_PromoData_ extends Type_ {
}

export abstract class _VideoSize_ extends Type_ {
}

export abstract class _StatsGroupTopPoster_ extends Type_ {
}

export abstract class _StatsGroupTopAdmin_ extends Type_ {
}

export abstract class _StatsGroupTopInviter_ extends Type_ {
}

export abstract class _stats_MegagroupStats_ extends Type_ {
}

export abstract class _GlobalPrivacySettings_ extends Type_ {
}

export abstract class _help_CountryCode_ extends Type_ {
}

export abstract class _help_Country_ extends Type_ {
}

export abstract class _help_CountriesList_ extends Type_ {
}

export abstract class _MessageViews_ extends Type_ {
}

export abstract class _messages_MessageViews_ extends Type_ {
}

export abstract class _messages_DiscussionMessage_ extends Type_ {
}

export abstract class _MessageReplyHeader_ extends Type_ {
}

export abstract class _MessageReplies_ extends Type_ {
}

export abstract class _PeerBlocked_ extends Type_ {
}

export abstract class _stats_MessageStats_ extends Type_ {
}

export abstract class _GroupCall_ extends Type_ {
}

export abstract class _InputGroupCall_ extends Type_ {
}

export abstract class _GroupCallParticipant_ extends Type_ {
}

export abstract class _phone_GroupCall_ extends Type_ {
}

export abstract class _phone_GroupParticipants_ extends Type_ {
}

export abstract class _InlineQueryPeerType_ extends Type_ {
}

export abstract class _messages_HistoryImport_ extends Type_ {
}

export abstract class _messages_HistoryImportParsed_ extends Type_ {
}

export abstract class _messages_AffectedFoundMessages_ extends Type_ {
}

export abstract class _ChatInviteImporter_ extends Type_ {
}

export abstract class _messages_ExportedChatInvites_ extends Type_ {
}

export abstract class _messages_ExportedChatInvite_ extends Type_ {
}

export abstract class _messages_ChatInviteImporters_ extends Type_ {
}

export abstract class _ChatAdminWithInvites_ extends Type_ {
}

export abstract class _messages_ChatAdminsWithInvites_ extends Type_ {
}

export abstract class _messages_CheckedHistoryImportPeer_ extends Type_ {
}

export abstract class _phone_JoinAsPeers_ extends Type_ {
}

export abstract class _phone_ExportedGroupCallInvite_ extends Type_ {
}

export abstract class _GroupCallParticipantVideoSourceGroup_ extends Type_ {
}

export abstract class _GroupCallParticipantVideo_ extends Type_ {
}

export abstract class _stickers_SuggestedShortName_ extends Type_ {
}

export abstract class _BotCommandScope_ extends Type_ {
}

export abstract class _account_ResetPasswordResult_ extends Type_ {
}

export abstract class _SponsoredMessage_ extends Type_ {
}

export abstract class _messages_SponsoredMessages_ extends Type_ {
}

export abstract class _SearchResultsCalendarPeriod_ extends Type_ {
}

export abstract class _messages_SearchResultsCalendar_ extends Type_ {
}

export abstract class _SearchResultsPosition_ extends Type_ {
}

export abstract class _messages_SearchResultsPositions_ extends Type_ {
}

export abstract class _channels_SendAsPeers_ extends Type_ {
}

export abstract class _users_UserFull_ extends Type_ {
}

export abstract class _messages_PeerSettings_ extends Type_ {
}

export abstract class _auth_LoggedOut_ extends Type_ {
}

export abstract class _ReactionCount_ extends Type_ {
}

export abstract class _MessageReactions_ extends Type_ {
}

export abstract class _messages_MessageReactionsList_ extends Type_ {
}

export abstract class _AvailableReaction_ extends Type_ {
}

export abstract class _messages_AvailableReactions_ extends Type_ {
}

export abstract class _MessagePeerReaction_ extends Type_ {
}

export abstract class _GroupCallStreamChannel_ extends Type_ {
}

export abstract class _phone_GroupCallStreamChannels_ extends Type_ {
}

export abstract class _phone_GroupCallStreamRtmpUrl_ extends Type_ {
}

export abstract class _AttachMenuBotIconColor_ extends Type_ {
}

export abstract class _AttachMenuBotIcon_ extends Type_ {
}

export abstract class _AttachMenuBot_ extends Type_ {
}

export abstract class _AttachMenuBots_ extends Type_ {
}

export abstract class _AttachMenuBotsBot_ extends Type_ {
}

export abstract class _WebViewResult_ extends Type_ {
}

export abstract class _SimpleWebViewResult_ extends Type_ {
}

export abstract class _WebViewMessageSent_ extends Type_ {
}

export abstract class _BotMenuButton_ extends Type_ {
}

export abstract class _account_SavedRingtones_ extends Type_ {
}

export abstract class _NotificationSound_ extends Type_ {
}

export abstract class _account_SavedRingtone_ extends Type_ {
}

export abstract class _AttachMenuPeerType_ extends Type_ {
}

export abstract class _InputInvoice_ extends Type_ {
}

export abstract class _payments_ExportedInvoice_ extends Type_ {
}

export abstract class _messages_TranscribedAudio_ extends Type_ {
}

export abstract class _help_PremiumPromo_ extends Type_ {
}

export abstract class _InputStorePaymentPurpose_ extends Type_ {
}

export abstract class _PremiumGiftOption_ extends Type_ {
}

export abstract class _PaymentFormMethod_ extends Type_ {
}

export abstract class _EmojiStatus_ extends Type_ {
}

export abstract class _account_EmojiStatuses_ extends Type_ {
}

export abstract class _Reaction_ extends Type_ {
}

export abstract class _ChatReactions_ extends Type_ {
}

export abstract class _messages_Reactions_ extends Type_ {
}

export abstract class _EmailVerifyPurpose_ extends Type_ {
}

export abstract class _EmailVerification_ extends Type_ {
}

export abstract class _account_EmailVerified_ extends Type_ {
}

export abstract class _PremiumSubscriptionOption_ extends Type_ {
}

export abstract class _SendAsPeer_ extends Type_ {
}

export abstract class _MessageExtendedMedia_ extends Type_ {
}

export abstract class _StickerKeyword_ extends Type_ {
}

export abstract class _Username_ extends Type_ {
}

export abstract class _ForumTopic_ extends Type_ {
}

export abstract class _messages_ForumTopics_ extends Type_ {
}

export abstract class _DefaultHistoryTTL_ extends Type_ {
}

export abstract class _ExportedContactToken_ extends Type_ {
}

export abstract class _RequestPeerType_ extends Type_ {
}

export abstract class _EmojiList_ extends Type_ {
}

export abstract class _EmojiGroup_ extends Type_ {
}

export abstract class _messages_EmojiGroups_ extends Type_ {
}

export abstract class _TextWithEntities_ extends Type_ {
}

export abstract class _messages_TranslatedText_ extends Type_ {
}

export abstract class _AutoSaveSettings_ extends Type_ {
}

export abstract class _AutoSaveException_ extends Type_ {
}

export abstract class _account_AutoSaveSettings_ extends Type_ {
}

export abstract class _help_AppConfig_ extends Type_ {
}

export abstract class _InputBotApp_ extends Type_ {
}

export abstract class _BotApp_ extends Type_ {
}

export abstract class _messages_BotApp_ extends Type_ {
}

export abstract class _AppWebViewResult_ extends Type_ {
}

export abstract class _InlineBotWebView_ extends Type_ {
}

export abstract class _ReadParticipantDate_ extends Type_ {
}

export abstract class _InputChatlist_ extends Type_ {
}

export abstract class _ExportedChatlistInvite_ extends Type_ {
}

export abstract class _chatlists_ExportedChatlistInvite_ extends Type_ {
}

export abstract class _chatlists_ExportedInvites_ extends Type_ {
}

export abstract class _chatlists_ChatlistInvite_ extends Type_ {
}

export abstract class _chatlists_ChatlistUpdates_ extends Type_ {
}

export abstract class _bots_BotInfo_ extends Type_ {
}

export abstract class _MessagePeerVote_ extends Type_ {
}

export abstract class _SponsoredWebPage_ extends Type_ {
}

export abstract class _StoryViews_ extends Type_ {
}

export abstract class _StoryItem_ extends Type_ {
}

export abstract class _stories_AllStories_ extends Type_ {
}

export abstract class _stories_Stories_ extends Type_ {
}

export abstract class _StoryView_ extends Type_ {
}

export abstract class _stories_StoryViewsList_ extends Type_ {
}

export abstract class _stories_StoryViews_ extends Type_ {
}

export abstract class _InputReplyTo_ extends Type_ {
}

export abstract class _ExportedStoryLink_ extends Type_ {
}

export abstract class _StoriesStealthMode_ extends Type_ {
}

export abstract class _MediaAreaCoordinates_ extends Type_ {
}

export abstract class _MediaArea_ extends Type_ {
}

export abstract class _PeerStories_ extends Type_ {
}

export abstract class _stories_PeerStories_ extends Type_ {
}

export abstract class _messages_WebPage_ extends Type_ {
}

export abstract class _PremiumGiftCodeOption_ extends Type_ {
}

export abstract class _payments_CheckedGiftCode_ extends Type_ {
}

export abstract class _payments_GiveawayInfo_ extends Type_ {
}

export abstract class _PrepaidGiveaway_ extends Type_ {
}

export abstract class _Boost_ extends Type_ {
}

export abstract class _premium_BoostsList_ extends Type_ {
}

export abstract class _MyBoost_ extends Type_ {
}

export abstract class _premium_MyBoosts_ extends Type_ {
}

export abstract class _premium_BoostsStatus_ extends Type_ {
}

export abstract class _StoryFwdHeader_ extends Type_ {
}

export abstract class _PostInteractionCounters_ extends Type_ {
}

export abstract class _stats_StoryStats_ extends Type_ {
}

export abstract class _PublicForward_ extends Type_ {
}

export abstract class _stats_PublicForwards_ extends Type_ {
}

export abstract class _PeerColor_ extends Type_ {
}

export abstract class _help_PeerColorSet_ extends Type_ {
}

export abstract class _help_PeerColorOption_ extends Type_ {
}

export abstract class _help_PeerColors_ extends Type_ {
}

export abstract class _StoryReaction_ extends Type_ {
}

export abstract class _stories_StoryReactionsList_ extends Type_ {
}

export abstract class _SavedDialog_ extends Type_ {
}

export abstract class _messages_SavedDialogs_ extends Type_ {
}

export abstract class _SavedReactionTag_ extends Type_ {
}

export abstract class _messages_SavedReactionTags_ extends Type_ {
}

export abstract class _OutboxReadDate_ extends Type_ {
}

export class ResPQ_ extends _ResPQ_ {
  nonce: bigint;
  server_nonce: bigint;
  pq: Uint8Array;
  server_public_key_fingerprints: Array<bigint>;

  protected get [id](): number {
    return 0x05162463;
  }

  static get [name](): string {
    return "resPQ"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["pq", Uint8Array, "bytes"],
      ["server_public_key_fingerprints", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.pq, Uint8Array, "bytes"],
      [this.server_public_key_fingerprints, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; pq: Uint8Array; server_public_key_fingerprints: Array<bigint> }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.pq = params.pq;
    this.server_public_key_fingerprints = params.server_public_key_fingerprints;
  }
}

export class P_q_inner_data_dc_ extends _P_Q_inner_data_ {
  pq: Uint8Array;
  p: Uint8Array;
  q: Uint8Array;
  nonce: bigint;
  server_nonce: bigint;
  new_nonce: bigint;
  dc: number;

  protected get [id](): number {
    return 0xA9F55F95;
  }

  static get [name](): string {
    return "p_q_inner_data_dc"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pq", Uint8Array, "bytes"],
      ["p", Uint8Array, "bytes"],
      ["q", Uint8Array, "bytes"],
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["new_nonce", "bigint", "int256"],
      ["dc", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pq, Uint8Array, "bytes"],
      [this.p, Uint8Array, "bytes"],
      [this.q, Uint8Array, "bytes"],
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.new_nonce, "bigint", "int256"],
      [this.dc, "number", "int"],
    ];
  }

  constructor(params: { pq: Uint8Array; p: Uint8Array; q: Uint8Array; nonce: bigint; server_nonce: bigint; new_nonce: bigint; dc: number }) {
    super();
    this.pq = params.pq;
    this.p = params.p;
    this.q = params.q;
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.new_nonce = params.new_nonce;
    this.dc = params.dc;
  }
}

export class P_q_inner_data_temp_dc_ extends _P_Q_inner_data_ {
  pq: Uint8Array;
  p: Uint8Array;
  q: Uint8Array;
  nonce: bigint;
  server_nonce: bigint;
  new_nonce: bigint;
  dc: number;
  expires_in: number;

  protected get [id](): number {
    return 0x56FDDF88;
  }

  static get [name](): string {
    return "p_q_inner_data_temp_dc"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pq", Uint8Array, "bytes"],
      ["p", Uint8Array, "bytes"],
      ["q", Uint8Array, "bytes"],
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["new_nonce", "bigint", "int256"],
      ["dc", "number", "int"],
      ["expires_in", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pq, Uint8Array, "bytes"],
      [this.p, Uint8Array, "bytes"],
      [this.q, Uint8Array, "bytes"],
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.new_nonce, "bigint", "int256"],
      [this.dc, "number", "int"],
      [this.expires_in, "number", "int"],
    ];
  }

  constructor(params: { pq: Uint8Array; p: Uint8Array; q: Uint8Array; nonce: bigint; server_nonce: bigint; new_nonce: bigint; dc: number; expires_in: number }) {
    super();
    this.pq = params.pq;
    this.p = params.p;
    this.q = params.q;
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.new_nonce = params.new_nonce;
    this.dc = params.dc;
    this.expires_in = params.expires_in;
  }
}

export class Server_DH_params_ok_ extends _Server_DH_Params_ {
  nonce: bigint;
  server_nonce: bigint;
  encrypted_answer: Uint8Array;

  protected get [id](): number {
    return 0xD0E8075C;
  }

  static get [name](): string {
    return "server_DH_params_ok"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["encrypted_answer", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.encrypted_answer, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; encrypted_answer: Uint8Array }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.encrypted_answer = params.encrypted_answer;
  }
}

export class Server_DH_inner_data_ extends _Server_DH_inner_data_ {
  nonce: bigint;
  server_nonce: bigint;
  g: number;
  dh_prime: Uint8Array;
  g_a: Uint8Array;
  server_time: number;

  protected get [id](): number {
    return 0xB5890DBA;
  }

  static get [name](): string {
    return "server_DH_inner_data"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["g", "number", "int"],
      ["dh_prime", Uint8Array, "bytes"],
      ["g_a", Uint8Array, "bytes"],
      ["server_time", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.g, "number", "int"],
      [this.dh_prime, Uint8Array, "bytes"],
      [this.g_a, Uint8Array, "bytes"],
      [this.server_time, "number", "int"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; g: number; dh_prime: Uint8Array; g_a: Uint8Array; server_time: number }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.g = params.g;
    this.dh_prime = params.dh_prime;
    this.g_a = params.g_a;
    this.server_time = params.server_time;
  }
}

export class Client_DH_inner_data_ extends _Client_DH_Inner_Data_ {
  nonce: bigint;
  server_nonce: bigint;
  retry_id: bigint;
  g_b: Uint8Array;

  protected get [id](): number {
    return 0x6643B654;
  }

  static get [name](): string {
    return "client_DH_inner_data"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["retry_id", "bigint", "long"],
      ["g_b", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.retry_id, "bigint", "long"],
      [this.g_b, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; retry_id: bigint; g_b: Uint8Array }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.retry_id = params.retry_id;
    this.g_b = params.g_b;
  }
}

export class Dh_gen_ok_ extends _Set_client_DH_params_answer_ {
  nonce: bigint;
  server_nonce: bigint;
  new_nonce_hash1: bigint;

  protected get [id](): number {
    return 0x3BCBF734;
  }

  static get [name](): string {
    return "dh_gen_ok"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["new_nonce_hash1", "bigint", "int128"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.new_nonce_hash1, "bigint", "int128"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; new_nonce_hash1: bigint }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.new_nonce_hash1 = params.new_nonce_hash1;
  }
}

export class Dh_gen_retry_ extends _Set_client_DH_params_answer_ {
  nonce: bigint;
  server_nonce: bigint;
  new_nonce_hash2: bigint;

  protected get [id](): number {
    return 0x46DC1FB9;
  }

  static get [name](): string {
    return "dh_gen_retry"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["new_nonce_hash2", "bigint", "int128"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.new_nonce_hash2, "bigint", "int128"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; new_nonce_hash2: bigint }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.new_nonce_hash2 = params.new_nonce_hash2;
  }
}

export class Dh_gen_fail_ extends _Set_client_DH_params_answer_ {
  nonce: bigint;
  server_nonce: bigint;
  new_nonce_hash3: bigint;

  protected get [id](): number {
    return 0xA69DAE02;
  }

  static get [name](): string {
    return "dh_gen_fail"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "int128"],
      ["server_nonce", "bigint", "int128"],
      ["new_nonce_hash3", "bigint", "int128"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "int128"],
      [this.server_nonce, "bigint", "int128"],
      [this.new_nonce_hash3, "bigint", "int128"],
    ];
  }

  constructor(params: { nonce: bigint; server_nonce: bigint; new_nonce_hash3: bigint }) {
    super();
    this.nonce = params.nonce;
    this.server_nonce = params.server_nonce;
    this.new_nonce_hash3 = params.new_nonce_hash3;
  }
}

export class Bind_auth_key_inner_ extends _BindAuthKeyInner_ {
  nonce: bigint;
  temp_auth_key_id: bigint;
  perm_auth_key_id: bigint;
  temp_session_id: bigint;
  expires_at: number;

  protected get [id](): number {
    return 0x75A3F765;
  }

  static get [name](): string {
    return "bind_auth_key_inner"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["nonce", "bigint", "long"],
      ["temp_auth_key_id", "bigint", "long"],
      ["perm_auth_key_id", "bigint", "long"],
      ["temp_session_id", "bigint", "long"],
      ["expires_at", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.nonce, "bigint", "long"],
      [this.temp_auth_key_id, "bigint", "long"],
      [this.perm_auth_key_id, "bigint", "long"],
      [this.temp_session_id, "bigint", "long"],
      [this.expires_at, "number", "int"],
    ];
  }

  constructor(params: { nonce: bigint; temp_auth_key_id: bigint; perm_auth_key_id: bigint; temp_session_id: bigint; expires_at: number }) {
    super();
    this.nonce = params.nonce;
    this.temp_auth_key_id = params.temp_auth_key_id;
    this.perm_auth_key_id = params.perm_auth_key_id;
    this.temp_session_id = params.temp_session_id;
    this.expires_at = params.expires_at;
  }
}

export class Rpc_error_ extends _RpcError_ {
  error_code: number;
  error_message: string;

  protected get [id](): number {
    return 0x2144CA19;
  }

  static get [name](): string {
    return "rpc_error"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["error_code", "number", "int"],
      ["error_message", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.error_code, "number", "int"],
      [this.error_message, "string", "string"],
    ];
  }

  constructor(params: { error_code: number; error_message: string }) {
    super();
    this.error_code = params.error_code;
    this.error_message = params.error_message;
  }
}

export class Rpc_answer_unknown_ extends _RpcDropAnswer_ {
  protected get [id](): number {
    return 0x5E2AD36E;
  }

  static get [name](): string {
    return "rpc_answer_unknown"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

export class Rpc_answer_dropped_running_ extends _RpcDropAnswer_ {
  protected get [id](): number {
    return 0xCD78E586;
  }

  static get [name](): string {
    return "rpc_answer_dropped_running"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

export class Rpc_answer_dropped_ extends _RpcDropAnswer_ {
  msg_id: bigint;
  seq_no: number;
  bytes: number;

  protected get [id](): number {
    return 0xA43AD8B7;
  }

  static get [name](): string {
    return "rpc_answer_dropped"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_id", "bigint", "long"],
      ["seq_no", "number", "int"],
      ["bytes", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_id, "bigint", "long"],
      [this.seq_no, "number", "int"],
      [this.bytes, "number", "int"],
    ];
  }

  constructor(params: { msg_id: bigint; seq_no: number; bytes: number }) {
    super();
    this.msg_id = params.msg_id;
    this.seq_no = params.seq_no;
    this.bytes = params.bytes;
  }
}

export class Future_salt_ extends _FutureSalt_ {
  valid_since: number;
  valid_until: number;
  salt: bigint;

  protected get [id](): number {
    return 0x0949D9DC;
  }

  static get [name](): string {
    return "future_salt"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["valid_since", "number", "int"],
      ["valid_until", "number", "int"],
      ["salt", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.valid_since, "number", "int"],
      [this.valid_until, "number", "int"],
      [this.salt, "bigint", "long"],
    ];
  }

  constructor(params: { valid_since: number; valid_until: number; salt: bigint }) {
    super();
    this.valid_since = params.valid_since;
    this.valid_until = params.valid_until;
    this.salt = params.salt;
  }
}

export class Future_salts_ extends _FutureSalts_ {
  req_msg_id: bigint;
  now: number;
  salts: Array<enums.FutureSalt>;

  protected get [id](): number {
    return 0xAE500895;
  }

  static get [name](): string {
    return "future_salts"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["req_msg_id", "bigint", "long"],
      ["now", "number", "int"],
      ["salts", [_FutureSalt_], "vector<FutureSalt>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.req_msg_id, "bigint", "long"],
      [this.now, "number", "int"],
      [this.salts, [_FutureSalt_], "vector<FutureSalt>"],
    ];
  }

  constructor(params: { req_msg_id: bigint; now: number; salts: Array<enums.FutureSalt> }) {
    super();
    this.req_msg_id = params.req_msg_id;
    this.now = params.now;
    this.salts = params.salts;
  }
}

export class Pong_ extends _Pong_ {
  msg_id: bigint;
  ping_id: bigint;

  protected get [id](): number {
    return 0x347773C5;
  }

  static get [name](): string {
    return "pong"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_id", "bigint", "long"],
      ["ping_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_id, "bigint", "long"],
      [this.ping_id, "bigint", "long"],
    ];
  }

  constructor(params: { msg_id: bigint; ping_id: bigint }) {
    super();
    this.msg_id = params.msg_id;
    this.ping_id = params.ping_id;
  }
}

export class Destroy_session_ok_ extends _DestroySessionRes_ {
  session_id: bigint;

  protected get [id](): number {
    return 0xE22045FC;
  }

  static get [name](): string {
    return "destroy_session_ok"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["session_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.session_id, "bigint", "long"],
    ];
  }

  constructor(params: { session_id: bigint }) {
    super();
    this.session_id = params.session_id;
  }
}

export class Destroy_session_none_ extends _DestroySessionRes_ {
  session_id: bigint;

  protected get [id](): number {
    return 0x62D350C9;
  }

  static get [name](): string {
    return "destroy_session_none"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["session_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.session_id, "bigint", "long"],
    ];
  }

  constructor(params: { session_id: bigint }) {
    super();
    this.session_id = params.session_id;
  }
}

export class New_session_created_ extends _NewSession_ {
  first_msg_id: bigint;
  unique_id: bigint;
  server_salt: bigint;

  protected get [id](): number {
    return 0x9EC20908;
  }

  static get [name](): string {
    return "new_session_created"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["first_msg_id", "bigint", "long"],
      ["unique_id", "bigint", "long"],
      ["server_salt", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.first_msg_id, "bigint", "long"],
      [this.unique_id, "bigint", "long"],
      [this.server_salt, "bigint", "long"],
    ];
  }

  constructor(params: { first_msg_id: bigint; unique_id: bigint; server_salt: bigint }) {
    super();
    this.first_msg_id = params.first_msg_id;
    this.unique_id = params.unique_id;
    this.server_salt = params.server_salt;
  }
}

export class Gzip_packed_ extends _Object_ {
  packed_data: Uint8Array;

  protected get [id](): number {
    return 0x3072CFA1;
  }

  static get [name](): string {
    return "gzip_packed"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["packed_data", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.packed_data, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { packed_data: Uint8Array }) {
    super();
    this.packed_data = params.packed_data;
  }
}

export class Msgs_ack_ extends _MsgsAck_ {
  msg_ids: Array<bigint>;

  protected get [id](): number {
    return 0x62D6B459;
  }

  static get [name](): string {
    return "msgs_ack"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_ids", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_ids, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { msg_ids: Array<bigint> }) {
    super();
    this.msg_ids = params.msg_ids;
  }
}

export class Bad_msg_notification_ extends _BadMsgNotification_ {
  bad_msg_id: bigint;
  bad_msg_seqno: number;
  error_code: number;

  protected get [id](): number {
    return 0xA7EFF811;
  }

  static get [name](): string {
    return "bad_msg_notification"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bad_msg_id", "bigint", "long"],
      ["bad_msg_seqno", "number", "int"],
      ["error_code", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bad_msg_id, "bigint", "long"],
      [this.bad_msg_seqno, "number", "int"],
      [this.error_code, "number", "int"],
    ];
  }

  constructor(params: { bad_msg_id: bigint; bad_msg_seqno: number; error_code: number }) {
    super();
    this.bad_msg_id = params.bad_msg_id;
    this.bad_msg_seqno = params.bad_msg_seqno;
    this.error_code = params.error_code;
  }
}

export class Bad_server_salt_ extends _BadMsgNotification_ {
  bad_msg_id: bigint;
  bad_msg_seqno: number;
  error_code: number;
  new_server_salt: bigint;

  protected get [id](): number {
    return 0xEDAB447B;
  }

  static get [name](): string {
    return "bad_server_salt"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bad_msg_id", "bigint", "long"],
      ["bad_msg_seqno", "number", "int"],
      ["error_code", "number", "int"],
      ["new_server_salt", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bad_msg_id, "bigint", "long"],
      [this.bad_msg_seqno, "number", "int"],
      [this.error_code, "number", "int"],
      [this.new_server_salt, "bigint", "long"],
    ];
  }

  constructor(params: { bad_msg_id: bigint; bad_msg_seqno: number; error_code: number; new_server_salt: bigint }) {
    super();
    this.bad_msg_id = params.bad_msg_id;
    this.bad_msg_seqno = params.bad_msg_seqno;
    this.error_code = params.error_code;
    this.new_server_salt = params.new_server_salt;
  }
}

export class Msg_resend_req_ extends _MsgResendReq_ {
  msg_ids: Array<bigint>;

  protected get [id](): number {
    return 0x7D861A08;
  }

  static get [name](): string {
    return "msg_resend_req"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_ids", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_ids, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { msg_ids: Array<bigint> }) {
    super();
    this.msg_ids = params.msg_ids;
  }
}

export class Msgs_state_req_ extends _MsgsStateReq_ {
  msg_ids: Array<bigint>;

  protected get [id](): number {
    return 0xDA69FB52;
  }

  static get [name](): string {
    return "msgs_state_req"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_ids", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_ids, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { msg_ids: Array<bigint> }) {
    super();
    this.msg_ids = params.msg_ids;
  }
}

export class Msgs_state_info_ extends _MsgsStateInfo_ {
  req_msg_id: bigint;
  info: Uint8Array;

  protected get [id](): number {
    return 0x04DEB57D;
  }

  static get [name](): string {
    return "msgs_state_info"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["req_msg_id", "bigint", "long"],
      ["info", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.req_msg_id, "bigint", "long"],
      [this.info, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { req_msg_id: bigint; info: Uint8Array }) {
    super();
    this.req_msg_id = params.req_msg_id;
    this.info = params.info;
  }
}

export class Msgs_all_info_ extends _MsgsAllInfo_ {
  msg_ids: Array<bigint>;
  info: Uint8Array;

  protected get [id](): number {
    return 0x8CC0D131;
  }

  static get [name](): string {
    return "msgs_all_info"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_ids", ["bigint"], "Vector<long>"],
      ["info", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_ids, ["bigint"], "Vector<long>"],
      [this.info, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { msg_ids: Array<bigint>; info: Uint8Array }) {
    super();
    this.msg_ids = params.msg_ids;
    this.info = params.info;
  }
}

export class Msg_detailed_info_ extends _MsgDetailedInfo_ {
  msg_id: bigint;
  answer_msg_id: bigint;
  bytes: number;
  status: number;

  protected get [id](): number {
    return 0x276D3EC6;
  }

  static get [name](): string {
    return "msg_detailed_info"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_id", "bigint", "long"],
      ["answer_msg_id", "bigint", "long"],
      ["bytes", "number", "int"],
      ["status", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_id, "bigint", "long"],
      [this.answer_msg_id, "bigint", "long"],
      [this.bytes, "number", "int"],
      [this.status, "number", "int"],
    ];
  }

  constructor(params: { msg_id: bigint; answer_msg_id: bigint; bytes: number; status: number }) {
    super();
    this.msg_id = params.msg_id;
    this.answer_msg_id = params.answer_msg_id;
    this.bytes = params.bytes;
    this.status = params.status;
  }
}

export class Msg_new_detailed_info_ extends _MsgDetailedInfo_ {
  answer_msg_id: bigint;
  bytes: number;
  status: number;

  protected get [id](): number {
    return 0x809DB6DF;
  }

  static get [name](): string {
    return "msg_new_detailed_info"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["answer_msg_id", "bigint", "long"],
      ["bytes", "number", "int"],
      ["status", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.answer_msg_id, "bigint", "long"],
      [this.bytes, "number", "int"],
      [this.status, "number", "int"],
    ];
  }

  constructor(params: { answer_msg_id: bigint; bytes: number; status: number }) {
    super();
    this.answer_msg_id = params.answer_msg_id;
    this.bytes = params.bytes;
    this.status = params.status;
  }
}

export class Destroy_auth_key_ok_ extends _DestroyAuthKeyRes_ {
  protected get [id](): number {
    return 0xF660E1D4;
  }

  static get [name](): string {
    return "destroy_auth_key_ok"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

export class Destroy_auth_key_none_ extends _DestroyAuthKeyRes_ {
  protected get [id](): number {
    return 0x0A9F2259;
  }

  static get [name](): string {
    return "destroy_auth_key_none"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

export class Destroy_auth_key_fail_ extends _DestroyAuthKeyRes_ {
  protected get [id](): number {
    return 0xEA109B13;
  }

  static get [name](): string {
    return "destroy_auth_key_fail"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

export class Http_wait_ extends _HttpWait_ {
  max_delay: number;
  wait_after: number;
  max_wait: number;

  protected get [id](): number {
    return 0x9299359F;
  }

  static get [name](): string {
    return "http_wait"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["max_delay", "number", "int"],
      ["wait_after", "number", "int"],
      ["max_wait", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.max_delay, "number", "int"],
      [this.wait_after, "number", "int"],
      [this.max_wait, "number", "int"],
    ];
  }

  constructor(params: { max_delay: number; wait_after: number; max_wait: number }) {
    super();
    this.max_delay = params.max_delay;
    this.wait_after = params.wait_after;
    this.max_wait = params.max_wait;
  }
}

/** See [predefined identifiers](https://core.telegram.org/mtproto/TL-formal#predefined-identifiers). */
export class True_ extends _True_ {
  protected get [id](): number {
    return 0x3FEDD339;
  }

  static get [name](): string {
    return "true"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Error. */
export class Error_ extends _Error_ {
  /** Error code */
  code: number;
  /** Message */
  text: string;

  protected get [id](): number {
    return 0xC4B9F9BB;
  }

  static get [name](): string {
    return "error"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["code", "number", "int"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.code, "number", "int"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { code: number; text: string }) {
    super();
    this.code = params.code;
    this.text = params.text;
  }
}

/** Corresponds to an arbitrary empty object. */
export class Null_ extends _Null_ {
  protected get [id](): number {
    return 0x56730BCC;
  }

  static get [name](): string {
    return "null"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** An empty constructor, no user or chat is defined. */
export class InputPeerEmpty_ extends _InputPeer_ {
  protected get [id](): number {
    return 0x7F3B18EA;
  }

  static get [name](): string {
    return "inputPeerEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines the current user. */
export class InputPeerSelf_ extends _InputPeer_ {
  protected get [id](): number {
    return 0x7DA07EC9;
  }

  static get [name](): string {
    return "inputPeerSelf"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines a chat for further interaction. */
export class InputPeerChat_ extends _InputPeer_ {
  /** Chat identifier */
  chat_id: bigint;

  protected get [id](): number {
    return 0x35A95CB9;
  }

  static get [name](): string {
    return "inputPeerChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
    ];
  }

  constructor(params: { chat_id: bigint }) {
    super();
    this.chat_id = params.chat_id;
  }
}

/** Defines a user for further interaction. */
export class InputPeerUser_ extends _InputPeer_ {
  /** User identifier */
  user_id: bigint;
  /** **access\_hash** value from the [user](https://core.telegram.org/constructor/user) constructor */
  access_hash: bigint;

  protected get [id](): number {
    return 0xDDE8A54C;
  }

  static get [name](): string {
    return "inputPeerUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint; access_hash: bigint }) {
    super();
    this.user_id = params.user_id;
    this.access_hash = params.access_hash;
  }
}

/** Defines a channel for further interaction. */
export class InputPeerChannel_ extends _InputPeer_ {
  /** Channel identifier */
  channel_id: bigint;
  /** **access\_hash** value from the [channel](https://core.telegram.org/constructor/channel) constructor */
  access_hash: bigint;

  protected get [id](): number {
    return 0x27BCBBFC;
  }

  static get [name](): string {
    return "inputPeerChannel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { channel_id: bigint; access_hash: bigint }) {
    super();
    this.channel_id = params.channel_id;
    this.access_hash = params.access_hash;
  }
}

/** Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat. */
export class InputPeerUserFromMessage_ extends _InputPeer_ {
  /** The chat where the user was seen */
  peer: enums.InputPeer;
  /** The message ID */
  msg_id: number;
  /** The identifier of the user that was seen */
  user_id: bigint;

  protected get [id](): number {
    return 0xA87B0A1C;
  }

  static get [name](): string {
    return "inputPeerUserFromMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["msg_id", "number", "int"],
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.msg_id, "number", "int"],
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; msg_id: number; user_id: bigint }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.user_id = params.user_id;
  }
}

/** Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat. */
export class InputPeerChannelFromMessage_ extends _InputPeer_ {
  /** The chat where the channel's message was seen */
  peer: enums.InputPeer;
  /** The message ID */
  msg_id: number;
  /** The identifier of the channel that was seen */
  channel_id: bigint;

  protected get [id](): number {
    return 0xBD2A0840;
  }

  static get [name](): string {
    return "inputPeerChannelFromMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["msg_id", "number", "int"],
      ["channel_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.msg_id, "number", "int"],
      [this.channel_id, "bigint", "long"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; msg_id: number; channel_id: bigint }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.channel_id = params.channel_id;
  }
}

/** Empty constructor, does not define a user. */
export class InputUserEmpty_ extends _InputUser_ {
  protected get [id](): number {
    return 0xB98886CF;
  }

  static get [name](): string {
    return "inputUserEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines the current user. */
export class InputUserSelf_ extends _InputUser_ {
  protected get [id](): number {
    return 0xF7C1B13F;
  }

  static get [name](): string {
    return "inputUserSelf"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines a user for further interaction. */
export class InputUser_ extends _InputUser_ {
  /** User identifier */
  user_id: bigint;
  /** **access\_hash** value from the [user](https://core.telegram.org/constructor/user) constructor */
  access_hash: bigint;

  protected get [id](): number {
    return 0xF21158C6;
  }

  static get [name](): string {
    return "inputUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint; access_hash: bigint }) {
    super();
    this.user_id = params.user_id;
    this.access_hash = params.access_hash;
  }
}

/** Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat. */
export class InputUserFromMessage_ extends _InputUser_ {
  /** The chat where the user was seen */
  peer: enums.InputPeer;
  /** The message ID */
  msg_id: number;
  /** The identifier of the user that was seen */
  user_id: bigint;

  protected get [id](): number {
    return 0x1DA448E2;
  }

  static get [name](): string {
    return "inputUserFromMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["msg_id", "number", "int"],
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.msg_id, "number", "int"],
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; msg_id: number; user_id: bigint }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.user_id = params.user_id;
  }
}

/** Phone contact. */
export class InputPhoneContact_ extends _InputContact_ {
  /** An arbitrary 64-bit integer: it should be set, for example, to an incremental number when using [contacts.importContacts](https://core.telegram.org/method/contacts.importContacts), in order to retry importing only the contacts that weren't imported successfully, according to the client\_ids returned in [contacts.importedContacts](https://core.telegram.org/constructor/contacts.importedContacts).`retry_contacts`. */
  client_id: bigint;
  /** Phone number */
  phone: string;
  /** Contact's first name */
  first_name: string;
  /** Contact's last name */
  last_name: string;

  protected get [id](): number {
    return 0xF392B7F4;
  }

  static get [name](): string {
    return "inputPhoneContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["client_id", "bigint", "long"],
      ["phone", "string", "string"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.client_id, "bigint", "long"],
      [this.phone, "string", "string"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
    ];
  }

  constructor(params: { client_id: bigint; phone: string; first_name: string; last_name: string }) {
    super();
    this.client_id = params.client_id;
    this.phone = params.phone;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
  }
}

/** Defines a file saved in parts using the method [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart). */
export class InputFile_ extends _InputFile_ {
  /** Random file identifier created by the client */
  id: bigint;
  /** Number of parts saved */
  parts: number;
  /** Full name of the file */
  name: string;
  /** In case the file's [md5-hash](https://en.wikipedia.org/wiki/MD5#MD5_hashes) was passed, contents of the file will be checked prior to use */
  md5_checksum: string;

  protected get [id](): number {
    return 0xF52FF27F;
  }

  static get [name](): string {
    return "inputFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["parts", "number", "int"],
      ["name", "string", "string"],
      ["md5_checksum", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.parts, "number", "int"],
      [this.name, "string", "string"],
      [this.md5_checksum, "string", "string"],
    ];
  }

  constructor(params: { id: bigint; parts: number; name: string; md5_checksum: string }) {
    super();
    this.id = params.id;
    this.parts = params.parts;
    this.name = params.name;
    this.md5_checksum = params.md5_checksum;
  }
}

/** Assigns a big file (over 10 MB in size), saved in part using the method [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart). */
export class InputFileBig_ extends _InputFile_ {
  /** Random file id, created by the client */
  id: bigint;
  /** Number of parts saved */
  parts: number;
  /** Full file name */
  name: string;

  protected get [id](): number {
    return 0xFA4F0BB5;
  }

  static get [name](): string {
    return "inputFileBig"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["parts", "number", "int"],
      ["name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.parts, "number", "int"],
      [this.name, "string", "string"],
    ];
  }

  constructor(params: { id: bigint; parts: number; name: string }) {
    super();
    this.id = params.id;
    this.parts = params.parts;
    this.name = params.name;
  }
}

/** Empty media content of a message. */
export class InputMediaEmpty_ extends _InputMedia_ {
  protected get [id](): number {
    return 0x9664F57F;
  }

  static get [name](): string {
    return "inputMediaEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Photo */
export class InputMediaUploadedPhoto_ extends _InputMedia_ {
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** The [uploaded file](https://core.telegram.org/api/files) */
  file: enums.InputFile;
  /** Attached mask stickers */
  stickers?: Array<enums.InputDocument>;
  /** Time to live in seconds of self-destructing photo */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0x1E287D04;
  }

  static get [name](): string {
    return "inputMediaUploadedPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["spoiler", "true", "flags.2?true"],
      ["file", _InputFile_, "InputFile"],
      ["stickers", [_InputDocument_], "flags.0?Vector<InputDocument>"],
      ["ttl_seconds", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.spoiler ?? null, "true", "flags.2?true"],
      [this.file, _InputFile_, "InputFile"],
      [this.stickers ?? null, [_InputDocument_], "flags.0?Vector<InputDocument>"],
      [this.ttl_seconds ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { spoiler?: true; file: enums.InputFile; stickers?: Array<enums.InputDocument>; ttl_seconds?: number }) {
    super();
    this.spoiler = params.spoiler;
    this.file = params.file;
    this.stickers = params.stickers;
    this.ttl_seconds = params.ttl_seconds;
  }
}

/** Forwarded photo */
export class InputMediaPhoto_ extends _InputMedia_ {
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** Photo to be forwarded */
  id: enums.InputPhoto;
  /** Time to live in seconds of self-destructing photo */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0xB3BA0635;
  }

  static get [name](): string {
    return "inputMediaPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["spoiler", "true", "flags.1?true"],
      ["id", _InputPhoto_, "InputPhoto"],
      ["ttl_seconds", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.spoiler ?? null, "true", "flags.1?true"],
      [this.id, _InputPhoto_, "InputPhoto"],
      [this.ttl_seconds ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { spoiler?: true; id: enums.InputPhoto; ttl_seconds?: number }) {
    super();
    this.spoiler = params.spoiler;
    this.id = params.id;
    this.ttl_seconds = params.ttl_seconds;
  }
}

/** Map. */
export class InputMediaGeoPoint_ extends _InputMedia_ {
  /** GeoPoint */
  geo_point: enums.InputGeoPoint;

  protected get [id](): number {
    return 0xF9C44144;
  }

  static get [name](): string {
    return "inputMediaGeoPoint"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
    ];
  }

  constructor(params: { geo_point: enums.InputGeoPoint }) {
    super();
    this.geo_point = params.geo_point;
  }
}

/** Phone book contact */
export class InputMediaContact_ extends _InputMedia_ {
  /** Phone number */
  phone_number: string;
  /** Contact's first name */
  first_name: string;
  /** Contact's last name */
  last_name: string;
  /** Contact vcard */
  vcard: string;

  protected get [id](): number {
    return 0xF8AB7DFB;
  }

  static get [name](): string {
    return "inputMediaContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_number", "string", "string"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
      ["vcard", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_number, "string", "string"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
      [this.vcard, "string", "string"],
    ];
  }

  constructor(params: { phone_number: string; first_name: string; last_name: string; vcard: string }) {
    super();
    this.phone_number = params.phone_number;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.vcard = params.vcard;
  }
}

/** New document */
export class InputMediaUploadedDocument_ extends _InputMedia_ {
  /** Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example) */
  nosound_video?: true;
  /** Force the media file to be uploaded as document */
  force_file?: true;
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** The [uploaded file](https://core.telegram.org/api/files) */
  file: enums.InputFile;
  /** Thumbnail of the document, uploaded as for the file */
  thumb?: enums.InputFile;
  /** MIME type of document */
  mime_type: string;
  /** Attributes that specify the type of the document (video, audio, voice, sticker, etc.) */
  attributes: Array<enums.DocumentAttribute>;
  /** Attached stickers */
  stickers?: Array<enums.InputDocument>;
  /** Time to live in seconds of self-destructing document */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0x5B38C6C1;
  }

  static get [name](): string {
    return "inputMediaUploadedDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["nosound_video", "true", "flags.3?true"],
      ["force_file", "true", "flags.4?true"],
      ["spoiler", "true", "flags.5?true"],
      ["file", _InputFile_, "InputFile"],
      ["thumb", _InputFile_, "flags.2?InputFile"],
      ["mime_type", "string", "string"],
      ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
      ["stickers", [_InputDocument_], "flags.0?Vector<InputDocument>"],
      ["ttl_seconds", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.nosound_video ?? null, "true", "flags.3?true"],
      [this.force_file ?? null, "true", "flags.4?true"],
      [this.spoiler ?? null, "true", "flags.5?true"],
      [this.file, _InputFile_, "InputFile"],
      [this.thumb ?? null, _InputFile_, "flags.2?InputFile"],
      [this.mime_type, "string", "string"],
      [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
      [this.stickers ?? null, [_InputDocument_], "flags.0?Vector<InputDocument>"],
      [this.ttl_seconds ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { nosound_video?: true; force_file?: true; spoiler?: true; file: enums.InputFile; thumb?: enums.InputFile; mime_type: string; attributes: Array<enums.DocumentAttribute>; stickers?: Array<enums.InputDocument>; ttl_seconds?: number }) {
    super();
    this.nosound_video = params.nosound_video;
    this.force_file = params.force_file;
    this.spoiler = params.spoiler;
    this.file = params.file;
    this.thumb = params.thumb;
    this.mime_type = params.mime_type;
    this.attributes = params.attributes;
    this.stickers = params.stickers;
    this.ttl_seconds = params.ttl_seconds;
  }
}

/** Forwarded document */
export class InputMediaDocument_ extends _InputMedia_ {
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** The document to be forwarded. */
  id: enums.InputDocument;
  /** Time to live of self-destructing document */
  ttl_seconds?: number;
  /** Text query or emoji that was used by the user to find this sticker or GIF: used to improve search result relevance. */
  query?: string;

  protected get [id](): number {
    return 0x33473058;
  }

  static get [name](): string {
    return "inputMediaDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["spoiler", "true", "flags.2?true"],
      ["id", _InputDocument_, "InputDocument"],
      ["ttl_seconds", "number", "flags.0?int"],
      ["query", "string", "flags.1?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.spoiler ?? null, "true", "flags.2?true"],
      [this.id, _InputDocument_, "InputDocument"],
      [this.ttl_seconds ?? null, "number", "flags.0?int"],
      [this.query ?? null, "string", "flags.1?string"],
    ];
  }

  constructor(params: { spoiler?: true; id: enums.InputDocument; ttl_seconds?: number; query?: string }) {
    super();
    this.spoiler = params.spoiler;
    this.id = params.id;
    this.ttl_seconds = params.ttl_seconds;
    this.query = params.query;
  }
}

/** Can be used to send a venue geolocation. */
export class InputMediaVenue_ extends _InputMedia_ {
  /** Geolocation */
  geo_point: enums.InputGeoPoint;
  /** Venue name */
  title: string;
  /** Physical address of the venue */
  address: string;
  /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
  provider: string;
  /** Venue ID in the provider's database */
  venue_id: string;
  /** Venue type in the provider's database */
  venue_type: string;

  protected get [id](): number {
    return 0xC13D1C11;
  }

  static get [name](): string {
    return "inputMediaVenue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
      ["title", "string", "string"],
      ["address", "string", "string"],
      ["provider", "string", "string"],
      ["venue_id", "string", "string"],
      ["venue_type", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
      [this.title, "string", "string"],
      [this.address, "string", "string"],
      [this.provider, "string", "string"],
      [this.venue_id, "string", "string"],
      [this.venue_type, "string", "string"],
    ];
  }

  constructor(params: { geo_point: enums.InputGeoPoint; title: string; address: string; provider: string; venue_id: string; venue_type: string }) {
    super();
    this.geo_point = params.geo_point;
    this.title = params.title;
    this.address = params.address;
    this.provider = params.provider;
    this.venue_id = params.venue_id;
    this.venue_type = params.venue_type;
  }
}

/** New photo that will be uploaded by the server using the specified URL */
export class InputMediaPhotoExternal_ extends _InputMedia_ {
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** URL of the photo */
  url: string;
  /** Self-destruct time to live of photo */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0xE5BBFE1A;
  }

  static get [name](): string {
    return "inputMediaPhotoExternal"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["spoiler", "true", "flags.1?true"],
      ["url", "string", "string"],
      ["ttl_seconds", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.spoiler ?? null, "true", "flags.1?true"],
      [this.url, "string", "string"],
      [this.ttl_seconds ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { spoiler?: true; url: string; ttl_seconds?: number }) {
    super();
    this.spoiler = params.spoiler;
    this.url = params.url;
    this.ttl_seconds = params.ttl_seconds;
  }
}

/** Document that will be downloaded by the telegram servers */
export class InputMediaDocumentExternal_ extends _InputMedia_ {
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** URL of the document */
  url: string;
  /** Self-destruct time to live of document */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0xFB52DC99;
  }

  static get [name](): string {
    return "inputMediaDocumentExternal"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["spoiler", "true", "flags.1?true"],
      ["url", "string", "string"],
      ["ttl_seconds", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.spoiler ?? null, "true", "flags.1?true"],
      [this.url, "string", "string"],
      [this.ttl_seconds ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { spoiler?: true; url: string; ttl_seconds?: number }) {
    super();
    this.spoiler = params.spoiler;
    this.url = params.url;
    this.ttl_seconds = params.ttl_seconds;
  }
}

/** A game */
export class InputMediaGame_ extends _InputMedia_ {
  /** The game to forward */
  id: enums.InputGame;

  protected get [id](): number {
    return 0xD33F43F3;
  }

  static get [name](): string {
    return "inputMediaGame"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", _InputGame_, "InputGame"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, _InputGame_, "InputGame"],
    ];
  }

  constructor(params: { id: enums.InputGame }) {
    super();
    this.id = params.id;
  }
}

/** Generated invoice of a [bot payment](https://core.telegram.org/bots/payments) */
export class InputMediaInvoice_ extends _InputMedia_ {
  /** Product name, 1-32 characters */
  title: string;
  /** Product description, 1-255 characters */
  description: string;
  /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */
  photo?: enums.InputWebDocument;
  /** The actual invoice */
  invoice: enums.Invoice;
  /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */
  payload: Uint8Array;
  /** Payments provider token, obtained via [Botfather](https://t.me/botfather) */
  provider: string;
  /** JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider. */
  provider_data: enums.DataJSON;
  /** Unique [bot deep links start parameter](https://core.telegram.org/api/links#bot-links). If present, forwarded copies of the sent message will have a URL button with a [deep link](https://core.telegram.org/api/links#bot-links) to the bot (instead of a Pay button), with the value used as the start parameter. If absent, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. */
  start_param?: string;
  /** Extended media */
  extended_media?: enums.InputMedia;

  protected get [id](): number {
    return 0x8EB5A6D5;
  }

  static get [name](): string {
    return "inputMediaInvoice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _InputWebDocument_, "flags.0?InputWebDocument"],
      ["invoice", _Invoice_, "Invoice"],
      ["payload", Uint8Array, "bytes"],
      ["provider", "string", "string"],
      ["provider_data", _DataJSON_, "DataJSON"],
      ["start_param", "string", "flags.1?string"],
      ["extended_media", _InputMedia_, "flags.2?InputMedia"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo ?? null, _InputWebDocument_, "flags.0?InputWebDocument"],
      [this.invoice, _Invoice_, "Invoice"],
      [this.payload, Uint8Array, "bytes"],
      [this.provider, "string", "string"],
      [this.provider_data, _DataJSON_, "DataJSON"],
      [this.start_param ?? null, "string", "flags.1?string"],
      [this.extended_media ?? null, _InputMedia_, "flags.2?InputMedia"],
    ];
  }

  constructor(params: { title: string; description: string; photo?: enums.InputWebDocument; invoice: enums.Invoice; payload: Uint8Array; provider: string; provider_data: enums.DataJSON; start_param?: string; extended_media?: enums.InputMedia }) {
    super();
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.invoice = params.invoice;
    this.payload = params.payload;
    this.provider = params.provider;
    this.provider_data = params.provider_data;
    this.start_param = params.start_param;
    this.extended_media = params.extended_media;
  }
}

/** [Live geolocation](https://core.telegram.org/api/live-location) */
export class InputMediaGeoLive_ extends _InputMedia_ {
  /** Whether sending of the geolocation was stopped */
  stopped?: true;
  /** Current geolocation */
  geo_point: enums.InputGeoPoint;
  /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360. */
  heading?: number;
  /** Validity period of the current location */
  period?: number;
  /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000) */
  proximity_notification_radius?: number;

  protected get [id](): number {
    return 0x971FA843;
  }

  static get [name](): string {
    return "inputMediaGeoLive"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["stopped", "true", "flags.0?true"],
      ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
      ["heading", "number", "flags.2?int"],
      ["period", "number", "flags.1?int"],
      ["proximity_notification_radius", "number", "flags.3?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.stopped ?? null, "true", "flags.0?true"],
      [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
      [this.heading ?? null, "number", "flags.2?int"],
      [this.period ?? null, "number", "flags.1?int"],
      [this.proximity_notification_radius ?? null, "number", "flags.3?int"],
    ];
  }

  constructor(params: { stopped?: true; geo_point: enums.InputGeoPoint; heading?: number; period?: number; proximity_notification_radius?: number }) {
    super();
    this.stopped = params.stopped;
    this.geo_point = params.geo_point;
    this.heading = params.heading;
    this.period = params.period;
    this.proximity_notification_radius = params.proximity_notification_radius;
  }
}

/** A poll */
export class InputMediaPoll_ extends _InputMedia_ {
  /** The poll to send */
  poll: enums.Poll;
  /** Correct answer IDs (for quiz polls) */
  correct_answers?: Array<Uint8Array>;
  /** Explanation of quiz solution */
  solution?: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  solution_entities?: Array<enums.MessageEntity>;

  protected get [id](): number {
    return 0x0F94E5F1;
  }

  static get [name](): string {
    return "inputMediaPoll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["poll", _Poll_, "Poll"],
      ["correct_answers", [Uint8Array], "flags.0?Vector<bytes>"],
      ["solution", "string", "flags.1?string"],
      ["solution_entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.poll, _Poll_, "Poll"],
      [this.correct_answers ?? null, [Uint8Array], "flags.0?Vector<bytes>"],
      [this.solution ?? null, "string", "flags.1?string"],
      [this.solution_entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
    ];
  }

  constructor(params: { poll: enums.Poll; correct_answers?: Array<Uint8Array>; solution?: string; solution_entities?: Array<enums.MessageEntity> }) {
    super();
    this.poll = params.poll;
    this.correct_answers = params.correct_answers;
    this.solution = params.solution;
    this.solution_entities = params.solution_entities;
  }
}

/** Send a [dice-based animated sticker](https://core.telegram.org/api/dice) */
export class InputMediaDice_ extends _InputMedia_ {
  /** The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported */
  emoticon: string;

  protected get [id](): number {
    return 0xE66FBF7B;
  }

  static get [name](): string {
    return "inputMediaDice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
    ];
  }

  constructor(params: { emoticon: string }) {
    super();
    this.emoticon = params.emoticon;
  }
}

/** Forwarded story */
export class InputMediaStory_ extends _InputMedia_ {
  /** Peer where the story was posted */
  peer: enums.InputPeer;
  /** Story ID */
  id: number;

  protected get [id](): number {
    return 0x89FDD778;
  }

  static get [name](): string {
    return "inputMediaStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; id: number }) {
    super();
    this.peer = params.peer;
    this.id = params.id;
  }
}

/** Specifies options that will be used to generate the link preview for the caption, or even a standalone link preview without an attached message. */
export class InputMediaWebPage_ extends _InputMedia_ {
  /** If set, specifies that a large media preview should be used. */
  force_large_media?: true;
  /** If set, specifies that a small media preview should be used. */
  force_small_media?: true;
  /** If **not** set, a `WEBPAGE_NOT_FOUND` RPC error will be emitted if a webpage preview cannot be generated for the specified `url`; otherwise, no error will be emitted (unless the provided message is also empty, in which case a `MESSAGE_EMPTY` will be emitted, instead). */
  optional?: true;
  /** The URL to use for the link preview. */
  url: string;

  protected get [id](): number {
    return 0xC21B8849;
  }

  static get [name](): string {
    return "inputMediaWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["force_large_media", "true", "flags.0?true"],
      ["force_small_media", "true", "flags.1?true"],
      ["optional", "true", "flags.2?true"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.force_large_media ?? null, "true", "flags.0?true"],
      [this.force_small_media ?? null, "true", "flags.1?true"],
      [this.optional ?? null, "true", "flags.2?true"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { force_large_media?: true; force_small_media?: true; optional?: true; url: string }) {
    super();
    this.force_large_media = params.force_large_media;
    this.force_small_media = params.force_small_media;
    this.optional = params.optional;
    this.url = params.url;
  }
}

/** Empty constructor, remove group photo. */
export class InputChatPhotoEmpty_ extends _InputChatPhoto_ {
  protected get [id](): number {
    return 0x1CA48F57;
  }

  static get [name](): string {
    return "inputChatPhotoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** New photo to be set as group profile photo. */
export class InputChatUploadedPhoto_ extends _InputChatPhoto_ {
  /** File saved in parts using the method [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart) */
  file?: enums.InputFile;
  /** Square video for animated profile picture */
  video?: enums.InputFile;
  /** Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set. */
  video_start_ts?: number;
  /** Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](https://core.telegram.org/constructor/videoSizeEmojiMarkup) or a [videoSizeStickerMarkup](https://core.telegram.org/constructor/videoSizeStickerMarkup) constructor. */
  video_emoji_markup?: enums.VideoSize;

  protected get [id](): number {
    return 0xBDCDAEC0;
  }

  static get [name](): string {
    return "inputChatUploadedPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["file", _InputFile_, "flags.0?InputFile"],
      ["video", _InputFile_, "flags.1?InputFile"],
      ["video_start_ts", "number", "flags.2?double"],
      ["video_emoji_markup", _VideoSize_, "flags.3?VideoSize"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.file ?? null, _InputFile_, "flags.0?InputFile"],
      [this.video ?? null, _InputFile_, "flags.1?InputFile"],
      [this.video_start_ts ?? null, "number", "flags.2?double"],
      [this.video_emoji_markup ?? null, _VideoSize_, "flags.3?VideoSize"],
    ];
  }

  constructor(params?: { file?: enums.InputFile; video?: enums.InputFile; video_start_ts?: number; video_emoji_markup?: enums.VideoSize }) {
    super();
    this.file = params?.file;
    this.video = params?.video;
    this.video_start_ts = params?.video_start_ts;
    this.video_emoji_markup = params?.video_emoji_markup;
  }
}

/** Existing photo to be set as a chat profile photo. */
export class InputChatPhoto_ extends _InputChatPhoto_ {
  /** Existing photo */
  id: enums.InputPhoto;

  protected get [id](): number {
    return 0x8953AD37;
  }

  static get [name](): string {
    return "inputChatPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", _InputPhoto_, "InputPhoto"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, _InputPhoto_, "InputPhoto"],
    ];
  }

  constructor(params: { id: enums.InputPhoto }) {
    super();
    this.id = params.id;
  }
}

/** Empty GeoPoint constructor. */
export class InputGeoPointEmpty_ extends _InputGeoPoint_ {
  protected get [id](): number {
    return 0xE4C123D6;
  }

  static get [name](): string {
    return "inputGeoPointEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines a GeoPoint by its coordinates. */
export class InputGeoPoint_ extends _InputGeoPoint_ {
  /** Latitude */
  lat: number;
  /** Longitude */
  long: number;
  /** The estimated horizontal accuracy of the location, in meters; as defined by the sender. */
  accuracy_radius?: number;

  protected get [id](): number {
    return 0x48222FAF;
  }

  static get [name](): string {
    return "inputGeoPoint"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["lat", "number", "double"],
      ["long", "number", "double"],
      ["accuracy_radius", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.lat, "number", "double"],
      [this.long, "number", "double"],
      [this.accuracy_radius ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { lat: number; long: number; accuracy_radius?: number }) {
    super();
    this.lat = params.lat;
    this.long = params.long;
    this.accuracy_radius = params.accuracy_radius;
  }
}

/** Empty constructor. */
export class InputPhotoEmpty_ extends _InputPhoto_ {
  protected get [id](): number {
    return 0x1CD7BF0D;
  }

  static get [name](): string {
    return "inputPhotoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines a photo for further interaction. */
export class InputPhoto_ extends _InputPhoto_ {
  /** Photo identifier */
  id: bigint;
  /** **access\_hash** value from the [photo](https://core.telegram.org/constructor/photo) constructor */
  access_hash: bigint;
  /** [File reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;

  protected get [id](): number {
    return 0x3BB3B94A;
  }

  static get [name](): string {
    return "inputPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; file_reference: Uint8Array }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
  }
}

/** DEPRECATED location of a photo */
export class InputFileLocation_ extends _InputFileLocation_ {
  /** Server volume */
  volume_id: bigint;
  /** File identifier */
  local_id: number;
  /** Check sum to access the file */
  secret: bigint;
  /** [File reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;

  protected get [id](): number {
    return 0xDFDAABE1;
  }

  static get [name](): string {
    return "inputFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["volume_id", "bigint", "long"],
      ["local_id", "number", "int"],
      ["secret", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.volume_id, "bigint", "long"],
      [this.local_id, "number", "int"],
      [this.secret, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { volume_id: bigint; local_id: number; secret: bigint; file_reference: Uint8Array }) {
    super();
    this.volume_id = params.volume_id;
    this.local_id = params.local_id;
    this.secret = params.secret;
    this.file_reference = params.file_reference;
  }
}

/** Location of encrypted secret chat file. */
export class InputEncryptedFileLocation_ extends _InputFileLocation_ {
  /** File ID, **id** parameter value from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
  id: bigint;
  /** Checksum, **access\_hash** parameter value from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
  access_hash: bigint;

  protected get [id](): number {
    return 0xF5235D55;
  }

  static get [name](): string {
    return "inputEncryptedFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Document location (video, voice, audio, basically every type except photo) */
export class InputDocumentFileLocation_ extends _InputFileLocation_ {
  /** Document ID */
  id: bigint;
  /** **access\_hash** parameter from the [document](https://core.telegram.org/constructor/document) constructor */
  access_hash: bigint;
  /** [File reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;
  /** Thumbnail size to download the thumbnail */
  thumb_size: string;

  protected get [id](): number {
    return 0xBAD07584;
  }

  static get [name](): string {
    return "inputDocumentFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
      ["thumb_size", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
      [this.thumb_size, "string", "string"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; file_reference: Uint8Array; thumb_size: string }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
    this.thumb_size = params.thumb_size;
  }
}

/** Location of encrypted telegram [passport](https://core.telegram.org/passport) file. */
export class InputSecureFileLocation_ extends _InputFileLocation_ {
  /** File ID, **id** parameter value from [secureFile](https://core.telegram.org/constructor/secureFile) */
  id: bigint;
  /** Checksum, **access\_hash** parameter value from [secureFile](https://core.telegram.org/constructor/secureFile) */
  access_hash: bigint;

  protected get [id](): number {
    return 0xCBC7EE28;
  }

  static get [name](): string {
    return "inputSecureFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Used to download a JSON file that will contain all personal data related to features that do not have a specialized [takeout method](https://core.telegram.org/api/takeout) yet, see [here »](https://core.telegram.org/api/takeout) for more info on the takeout API. */
export class InputTakeoutFileLocation_ extends _InputFileLocation_ {
  protected get [id](): number {
    return 0x29BE5899;
  }

  static get [name](): string {
    return "inputTakeoutFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Use this object to download a photo with [upload.getFile](https://core.telegram.org/method/upload.getFile) method */
export class InputPhotoFileLocation_ extends _InputFileLocation_ {
  /** Photo ID, obtained from the [photo](https://core.telegram.org/constructor/photo) object */
  id: bigint;
  /** Photo's access hash, obtained from the [photo](https://core.telegram.org/constructor/photo) object */
  access_hash: bigint;
  /** [File reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;
  /** The [PhotoSize](https://core.telegram.org/type/PhotoSize) to download: must be set to the `type` field of the desired PhotoSize object of the [photo](https://core.telegram.org/constructor/photo) */
  thumb_size: string;

  protected get [id](): number {
    return 0x40181FFE;
  }

  static get [name](): string {
    return "inputPhotoFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
      ["thumb_size", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
      [this.thumb_size, "string", "string"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; file_reference: Uint8Array; thumb_size: string }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
    this.thumb_size = params.thumb_size;
  }
}

/** DEPRECATED legacy photo file location */
export class InputPhotoLegacyFileLocation_ extends _InputFileLocation_ {
  /** Photo ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** File reference */
  file_reference: Uint8Array;
  /** Volume ID */
  volume_id: bigint;
  /** Local ID */
  local_id: number;
  /** Secret */
  secret: bigint;

  protected get [id](): number {
    return 0xD83466F3;
  }

  static get [name](): string {
    return "inputPhotoLegacyFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
      ["volume_id", "bigint", "long"],
      ["local_id", "number", "int"],
      ["secret", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
      [this.volume_id, "bigint", "long"],
      [this.local_id, "number", "int"],
      [this.secret, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; file_reference: Uint8Array; volume_id: bigint; local_id: number; secret: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
    this.volume_id = params.volume_id;
    this.local_id = params.local_id;
    this.secret = params.secret;
  }
}

/** Location of profile photo of channel/group/supergroup/user */
export class InputPeerPhotoFileLocation_ extends _InputFileLocation_ {
  /** Whether to download the high-quality version of the picture */
  big?: true;
  /** The peer whose profile picture should be downloaded */
  peer: enums.InputPeer;
  /** Photo ID */
  photo_id: bigint;

  protected get [id](): number {
    return 0x37257E99;
  }

  static get [name](): string {
    return "inputPeerPhotoFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["big", "true", "flags.0?true"],
      ["peer", _InputPeer_, "InputPeer"],
      ["photo_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.big ?? null, "true", "flags.0?true"],
      [this.peer, _InputPeer_, "InputPeer"],
      [this.photo_id, "bigint", "long"],
    ];
  }

  constructor(params: { big?: true; peer: enums.InputPeer; photo_id: bigint }) {
    super();
    this.big = params.big;
    this.peer = params.peer;
    this.photo_id = params.photo_id;
  }
}

/** Location of stickerset thumbnail (see [files](https://core.telegram.org/api/files)) */
export class InputStickerSetThumb_ extends _InputFileLocation_ {
  /** Sticker set */
  stickerset: enums.InputStickerSet;
  /** Thumbnail version */
  thumb_version: number;

  protected get [id](): number {
    return 0x9D84F3DB;
  }

  static get [name](): string {
    return "inputStickerSetThumb"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["stickerset", _InputStickerSet_, "InputStickerSet"],
      ["thumb_version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.stickerset, _InputStickerSet_, "InputStickerSet"],
      [this.thumb_version, "number", "int"],
    ];
  }

  constructor(params: { stickerset: enums.InputStickerSet; thumb_version: number }) {
    super();
    this.stickerset = params.stickerset;
    this.thumb_version = params.thumb_version;
  }
}

/** Chunk of a livestream */
export class InputGroupCallStream_ extends _InputFileLocation_ {
  /** Livestream info */
  call: enums.InputGroupCall;
  /** Timestamp in milliseconds */
  time_ms: bigint;
  /** Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale` */
  scale: number;
  /** Selected video channel */
  video_channel?: number;
  /** Selected video quality (0 = lowest, 1 = medium, 2 = best) */
  video_quality?: number;

  protected get [id](): number {
    return 0x0598A92A;
  }

  static get [name](): string {
    return "inputGroupCallStream"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["call", _InputGroupCall_, "InputGroupCall"],
      ["time_ms", "bigint", "long"],
      ["scale", "number", "int"],
      ["video_channel", "number", "flags.0?int"],
      ["video_quality", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.call, _InputGroupCall_, "InputGroupCall"],
      [this.time_ms, "bigint", "long"],
      [this.scale, "number", "int"],
      [this.video_channel ?? null, "number", "flags.0?int"],
      [this.video_quality ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall; time_ms: bigint; scale: number; video_channel?: number; video_quality?: number }) {
    super();
    this.call = params.call;
    this.time_ms = params.time_ms;
    this.scale = params.scale;
    this.video_channel = params.video_channel;
    this.video_quality = params.video_quality;
  }
}

/** Chat partner */
export class PeerUser_ extends _Peer_ {
  /** User identifier */
  user_id: bigint;

  protected get [id](): number {
    return 0x59511722;
  }

  static get [name](): string {
    return "peerUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint }) {
    super();
    this.user_id = params.user_id;
  }
}

/** Group. */
export class PeerChat_ extends _Peer_ {
  /** Group identifier */
  chat_id: bigint;

  protected get [id](): number {
    return 0x36C6019A;
  }

  static get [name](): string {
    return "peerChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
    ];
  }

  constructor(params: { chat_id: bigint }) {
    super();
    this.chat_id = params.chat_id;
  }
}

/** Channel/supergroup */
export class PeerChannel_ extends _Peer_ {
  /** Channel ID */
  channel_id: bigint;

  protected get [id](): number {
    return 0xA2A5371E;
  }

  static get [name](): string {
    return "peerChannel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
    ];
  }

  constructor(params: { channel_id: bigint }) {
    super();
    this.channel_id = params.channel_id;
  }
}

/** Unknown type. */
export class storage_FileUnknown_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0xAA963B05;
  }

  static get [name](): string {
    return "storage.fileUnknown"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Part of a bigger file. */
export class storage_FilePartial_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0x40BC6F52;
  }

  static get [name](): string {
    return "storage.filePartial"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** JPEG image. MIME type: `image/jpeg`. */
export class storage_FileJpeg_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0x007EFE0E;
  }

  static get [name](): string {
    return "storage.fileJpeg"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** GIF image. MIME type: `image/gif`. */
export class storage_FileGif_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0xCAE1AADF;
  }

  static get [name](): string {
    return "storage.fileGif"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** PNG image. MIME type: `image/png`. */
export class storage_FilePng_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0x0A4F63C0;
  }

  static get [name](): string {
    return "storage.filePng"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** PDF document image. MIME type: `application/pdf`. */
export class storage_FilePdf_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0xAE1E508D;
  }

  static get [name](): string {
    return "storage.filePdf"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Mp3 audio. MIME type: `audio/mpeg`. */
export class storage_FileMp3_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0x528A0677;
  }

  static get [name](): string {
    return "storage.fileMp3"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Quicktime video. MIME type: `video/quicktime`. */
export class storage_FileMov_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0x4B09EBBC;
  }

  static get [name](): string {
    return "storage.fileMov"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** MPEG-4 video. MIME type: `video/mp4`. */
export class storage_FileMp4_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0xB3CEA0E4;
  }

  static get [name](): string {
    return "storage.fileMp4"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** WEBP image. MIME type: `image/webp`. */
export class storage_FileWebp_ extends _storage_FileType_ {
  protected get [id](): number {
    return 0x1081464C;
  }

  static get [name](): string {
    return "storage.fileWebp"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Empty constructor, non-existent user. */
export class UserEmpty_ extends _User_ {
  /** User identifier or `0` */
  id: bigint;

  protected get [id](): number {
    return 0xD3BC4B7A;
  }

  static get [name](): string {
    return "userEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Indicates info about a certain user */
export class User_ extends _User_ {
  /** Whether this user indicates the currently logged in user */
  self?: true;
  /** Whether this user is a contact */
  contact?: true;
  /** Whether this user is a mutual contact */
  mutual_contact?: true;
  /** Whether the account of this user was deleted */
  deleted?: true;
  /** Is this user a bot? */
  bot?: true;
  /** Can the bot see all messages in groups? */
  bot_chat_history?: true;
  /** Can the bot be added to groups? */
  bot_nochats?: true;
  /** Whether this user is verified */
  verified?: true;
  /** Access to this user must be restricted for the reason specified in `restriction_reason` */
  restricted?: true;
  /** See [min](https://core.telegram.org/api/min) */
  min?: true;
  /** Whether the bot can request our geolocation in inline mode */
  bot_inline_geo?: true;
  /** Whether this is an official support user */
  support?: true;
  /** This may be a scam user */
  scam?: true;
  /** If set, the profile picture for this user should be refetched */
  apply_min_photo?: true;
  /** If set, this user was reported by many users as a fake or scam user: be careful when interacting with them. */
  fake?: true;
  /** Whether this bot offers an [attachment menu web app](https://core.telegram.org/api/bots/attach) */
  bot_attach_menu?: true;
  /** Whether this user is a Telegram Premium user */
  premium?: true;
  /** Whether we installed the [attachment menu web app](https://core.telegram.org/api/bots/attach) offered by this bot */
  attach_menu_enabled?: true;
  /** Whether we can edit the profile picture, name, about text and description of this bot because we own it. */
  bot_can_edit?: true;
  /** Whether we marked this user as a [close friend, see here » for more info](https://core.telegram.org/api/privacy) */
  close_friend?: true;
  /** Whether we have [hidden »](https://core.telegram.org/api/stories#hiding-stories-of-other-users) all active stories of this user. */
  stories_hidden?: true;
  /** No stories from this user are visible. */
  stories_unavailable?: true;
  contact_require_premium?: true;
  /** ID of the user */
  id: bigint;
  /** Access hash of the user */
  access_hash?: bigint;
  /** First name */
  first_name?: string;
  /** Last name */
  last_name?: string;
  /** Username */
  username?: string;
  /** Phone number */
  phone?: string;
  /** Profile picture of user */
  photo?: enums.UserProfilePhoto;
  /** Online status of user */
  status?: enums.UserStatus;
  /** Version of the [bot\_info field in userFull](https://core.telegram.org/constructor/userFull), incremented every time it changes */
  bot_info_version?: number;
  /** Contains the reason why access to this user must be restricted. */
  restriction_reason?: Array<enums.RestrictionReason>;
  /** Inline placeholder for this inline bot */
  bot_inline_placeholder?: string;
  /** Language code of the user */
  lang_code?: string;
  /** [Emoji status](https://core.telegram.org/api/emoji-status) */
  emoji_status?: enums.EmojiStatus;
  /** Additional usernames */
  usernames?: Array<enums.Username>;
  /** ID of the maximum read [story](https://core.telegram.org/api/stories). */
  stories_max_id?: number;
  /** The user's [accent color](https://core.telegram.org/api/colors). */
  color?: enums.PeerColor;
  /** The user's [profile color](https://core.telegram.org/api/colors). */
  profile_color?: enums.PeerColor;

  protected get [id](): number {
    return 0x215C4438;
  }

  static get [name](): string {
    return "user"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["self", "true", "flags.10?true"],
      ["contact", "true", "flags.11?true"],
      ["mutual_contact", "true", "flags.12?true"],
      ["deleted", "true", "flags.13?true"],
      ["bot", "true", "flags.14?true"],
      ["bot_chat_history", "true", "flags.15?true"],
      ["bot_nochats", "true", "flags.16?true"],
      ["verified", "true", "flags.17?true"],
      ["restricted", "true", "flags.18?true"],
      ["min", "true", "flags.20?true"],
      ["bot_inline_geo", "true", "flags.21?true"],
      ["support", "true", "flags.23?true"],
      ["scam", "true", "flags.24?true"],
      ["apply_min_photo", "true", "flags.25?true"],
      ["fake", "true", "flags.26?true"],
      ["bot_attach_menu", "true", "flags.27?true"],
      ["premium", "true", "flags.28?true"],
      ["attach_menu_enabled", "true", "flags.29?true"],
      ["flags2", flags, "#"],
      ["bot_can_edit", "true", "flags2.1?true"],
      ["close_friend", "true", "flags2.2?true"],
      ["stories_hidden", "true", "flags2.3?true"],
      ["stories_unavailable", "true", "flags2.4?true"],
      ["contact_require_premium", "true", "flags2.10?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "flags.0?long"],
      ["first_name", "string", "flags.1?string"],
      ["last_name", "string", "flags.2?string"],
      ["username", "string", "flags.3?string"],
      ["phone", "string", "flags.4?string"],
      ["photo", _UserProfilePhoto_, "flags.5?UserProfilePhoto"],
      ["status", _UserStatus_, "flags.6?UserStatus"],
      ["bot_info_version", "number", "flags.14?int"],
      ["restriction_reason", [_RestrictionReason_], "flags.18?Vector<RestrictionReason>"],
      ["bot_inline_placeholder", "string", "flags.19?string"],
      ["lang_code", "string", "flags.22?string"],
      ["emoji_status", _EmojiStatus_, "flags.30?EmojiStatus"],
      ["usernames", [_Username_], "flags2.0?Vector<Username>"],
      ["stories_max_id", "number", "flags2.5?int"],
      ["color", _PeerColor_, "flags2.8?PeerColor"],
      ["profile_color", _PeerColor_, "flags2.9?PeerColor"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.self ?? null, "true", "flags.10?true"],
      [this.contact ?? null, "true", "flags.11?true"],
      [this.mutual_contact ?? null, "true", "flags.12?true"],
      [this.deleted ?? null, "true", "flags.13?true"],
      [this.bot ?? null, "true", "flags.14?true"],
      [this.bot_chat_history ?? null, "true", "flags.15?true"],
      [this.bot_nochats ?? null, "true", "flags.16?true"],
      [this.verified ?? null, "true", "flags.17?true"],
      [this.restricted ?? null, "true", "flags.18?true"],
      [this.min ?? null, "true", "flags.20?true"],
      [this.bot_inline_geo ?? null, "true", "flags.21?true"],
      [this.support ?? null, "true", "flags.23?true"],
      [this.scam ?? null, "true", "flags.24?true"],
      [this.apply_min_photo ?? null, "true", "flags.25?true"],
      [this.fake ?? null, "true", "flags.26?true"],
      [this.bot_attach_menu ?? null, "true", "flags.27?true"],
      [this.premium ?? null, "true", "flags.28?true"],
      [this.attach_menu_enabled ?? null, "true", "flags.29?true"],
      ["flags2", flags, "#"],
      [this.bot_can_edit ?? null, "true", "flags2.1?true"],
      [this.close_friend ?? null, "true", "flags2.2?true"],
      [this.stories_hidden ?? null, "true", "flags2.3?true"],
      [this.stories_unavailable ?? null, "true", "flags2.4?true"],
      [this.contact_require_premium ?? null, "true", "flags2.10?true"],
      [this.id, "bigint", "long"],
      [this.access_hash ?? null, "bigint", "flags.0?long"],
      [this.first_name ?? null, "string", "flags.1?string"],
      [this.last_name ?? null, "string", "flags.2?string"],
      [this.username ?? null, "string", "flags.3?string"],
      [this.phone ?? null, "string", "flags.4?string"],
      [this.photo ?? null, _UserProfilePhoto_, "flags.5?UserProfilePhoto"],
      [this.status ?? null, _UserStatus_, "flags.6?UserStatus"],
      [this.bot_info_version ?? null, "number", "flags.14?int"],
      [this.restriction_reason ?? null, [_RestrictionReason_], "flags.18?Vector<RestrictionReason>"],
      [this.bot_inline_placeholder ?? null, "string", "flags.19?string"],
      [this.lang_code ?? null, "string", "flags.22?string"],
      [this.emoji_status ?? null, _EmojiStatus_, "flags.30?EmojiStatus"],
      [this.usernames ?? null, [_Username_], "flags2.0?Vector<Username>"],
      [this.stories_max_id ?? null, "number", "flags2.5?int"],
      [this.color ?? null, _PeerColor_, "flags2.8?PeerColor"],
      [this.profile_color ?? null, _PeerColor_, "flags2.9?PeerColor"],
    ];
  }

  constructor(params: { self?: true; contact?: true; mutual_contact?: true; deleted?: true; bot?: true; bot_chat_history?: true; bot_nochats?: true; verified?: true; restricted?: true; min?: true; bot_inline_geo?: true; support?: true; scam?: true; apply_min_photo?: true; fake?: true; bot_attach_menu?: true; premium?: true; attach_menu_enabled?: true; bot_can_edit?: true; close_friend?: true; stories_hidden?: true; stories_unavailable?: true; contact_require_premium?: true; id: bigint; access_hash?: bigint; first_name?: string; last_name?: string; username?: string; phone?: string; photo?: enums.UserProfilePhoto; status?: enums.UserStatus; bot_info_version?: number; restriction_reason?: Array<enums.RestrictionReason>; bot_inline_placeholder?: string; lang_code?: string; emoji_status?: enums.EmojiStatus; usernames?: Array<enums.Username>; stories_max_id?: number; color?: enums.PeerColor; profile_color?: enums.PeerColor }) {
    super();
    this.self = params.self;
    this.contact = params.contact;
    this.mutual_contact = params.mutual_contact;
    this.deleted = params.deleted;
    this.bot = params.bot;
    this.bot_chat_history = params.bot_chat_history;
    this.bot_nochats = params.bot_nochats;
    this.verified = params.verified;
    this.restricted = params.restricted;
    this.min = params.min;
    this.bot_inline_geo = params.bot_inline_geo;
    this.support = params.support;
    this.scam = params.scam;
    this.apply_min_photo = params.apply_min_photo;
    this.fake = params.fake;
    this.bot_attach_menu = params.bot_attach_menu;
    this.premium = params.premium;
    this.attach_menu_enabled = params.attach_menu_enabled;
    this.bot_can_edit = params.bot_can_edit;
    this.close_friend = params.close_friend;
    this.stories_hidden = params.stories_hidden;
    this.stories_unavailable = params.stories_unavailable;
    this.contact_require_premium = params.contact_require_premium;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.username = params.username;
    this.phone = params.phone;
    this.photo = params.photo;
    this.status = params.status;
    this.bot_info_version = params.bot_info_version;
    this.restriction_reason = params.restriction_reason;
    this.bot_inline_placeholder = params.bot_inline_placeholder;
    this.lang_code = params.lang_code;
    this.emoji_status = params.emoji_status;
    this.usernames = params.usernames;
    this.stories_max_id = params.stories_max_id;
    this.color = params.color;
    this.profile_color = params.profile_color;
  }
}

/** Profile photo has not been set, or was hidden. */
export class UserProfilePhotoEmpty_ extends _UserProfilePhoto_ {
  protected get [id](): number {
    return 0x4F11BAE1;
  }

  static get [name](): string {
    return "userProfilePhotoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User profile photo. */
export class UserProfilePhoto_ extends _UserProfilePhoto_ {
  /** Whether an [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) is available for this user */
  has_video?: true;
  /** Whether this profile photo is only visible to us (i.e. it was set using [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto)). */
  personal?: true;
  /** Identifier of the respective photo */
  photo_id: bigint;
  /** [Stripped thumbnail](https://core.telegram.org/api/files#stripped-thumbnails) */
  stripped_thumb?: Uint8Array;
  /** DC ID where the photo is stored */
  dc_id: number;

  protected get [id](): number {
    return 0x82D1F706;
  }

  static get [name](): string {
    return "userProfilePhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_video", "true", "flags.0?true"],
      ["personal", "true", "flags.2?true"],
      ["photo_id", "bigint", "long"],
      ["stripped_thumb", Uint8Array, "flags.1?bytes"],
      ["dc_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_video ?? null, "true", "flags.0?true"],
      [this.personal ?? null, "true", "flags.2?true"],
      [this.photo_id, "bigint", "long"],
      [this.stripped_thumb ?? null, Uint8Array, "flags.1?bytes"],
      [this.dc_id, "number", "int"],
    ];
  }

  constructor(params: { has_video?: true; personal?: true; photo_id: bigint; stripped_thumb?: Uint8Array; dc_id: number }) {
    super();
    this.has_video = params.has_video;
    this.personal = params.personal;
    this.photo_id = params.photo_id;
    this.stripped_thumb = params.stripped_thumb;
    this.dc_id = params.dc_id;
  }
}

/** User status has not been set yet. */
export class UserStatusEmpty_ extends _UserStatus_ {
  protected get [id](): number {
    return 0x09D05049;
  }

  static get [name](): string {
    return "userStatusEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Online status of the user. */
export class UserStatusOnline_ extends _UserStatus_ {
  /** Time to expiration of the current online status */
  expires: number;

  protected get [id](): number {
    return 0xEDB93949;
  }

  static get [name](): string {
    return "userStatusOnline"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["expires", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.expires, "number", "int"],
    ];
  }

  constructor(params: { expires: number }) {
    super();
    this.expires = params.expires;
  }
}

/** The user's offline status. */
export class UserStatusOffline_ extends _UserStatus_ {
  /** Time the user was last seen online */
  was_online: number;

  protected get [id](): number {
    return 0x008C703F;
  }

  static get [name](): string {
    return "userStatusOffline"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["was_online", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.was_online, "number", "int"],
    ];
  }

  constructor(params: { was_online: number }) {
    super();
    this.was_online = params.was_online;
  }
}

/** Online status: last seen recently */
export class UserStatusRecently_ extends _UserStatus_ {
  by_me?: true;

  protected get [id](): number {
    return 0x7B197DC8;
  }

  static get [name](): string {
    return "userStatusRecently"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["by_me", "true", "flags.0?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.by_me ?? null, "true", "flags.0?true"],
    ];
  }

  constructor(params?: { by_me?: true }) {
    super();
    this.by_me = params?.by_me;
  }
}

/** Online status: last seen last week */
export class UserStatusLastWeek_ extends _UserStatus_ {
  by_me?: true;

  protected get [id](): number {
    return 0x541A1D1A;
  }

  static get [name](): string {
    return "userStatusLastWeek"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["by_me", "true", "flags.0?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.by_me ?? null, "true", "flags.0?true"],
    ];
  }

  constructor(params?: { by_me?: true }) {
    super();
    this.by_me = params?.by_me;
  }
}

/** Online status: last seen last month */
export class UserStatusLastMonth_ extends _UserStatus_ {
  by_me?: true;

  protected get [id](): number {
    return 0x65899777;
  }

  static get [name](): string {
    return "userStatusLastMonth"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["by_me", "true", "flags.0?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.by_me ?? null, "true", "flags.0?true"],
    ];
  }

  constructor(params?: { by_me?: true }) {
    super();
    this.by_me = params?.by_me;
  }
}

/** Empty constructor, group doesn't exist */
export class ChatEmpty_ extends _Chat_ {
  /** Group identifier */
  id: bigint;

  protected get [id](): number {
    return 0x29562865;
  }

  static get [name](): string {
    return "chatEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Info about a group */
export class Chat_ extends _Chat_ {
  /** Whether the current user is the creator of the group */
  creator?: true;
  /** Whether the current user has left the group */
  left?: true;
  /** Whether the group was [migrated](https://core.telegram.org/api/channel) */
  deactivated?: true;
  /** Whether a group call is currently active */
  call_active?: true;
  /** Whether there's anyone in the group call */
  call_not_empty?: true;
  /** Whether this group is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it */
  noforwards?: true;
  /** ID of the group */
  id: bigint;
  /** Title */
  title: string;
  /** Chat photo */
  photo: enums.ChatPhoto;
  /** Participant count */
  participants_count: number;
  /** Date of creation of the group */
  date: number;
  /** Used in basic groups to reorder updates and make sure that all of them were received. */
  version: number;
  /** Means this chat was [upgraded](https://core.telegram.org/api/channel) to a supergroup */
  migrated_to?: enums.InputChannel;
  /** [Admin rights](https://core.telegram.org/api/rights) of the user in the group */
  admin_rights?: enums.ChatAdminRights;
  /** [Default banned rights](https://core.telegram.org/api/rights) of all users in the group */
  default_banned_rights?: enums.ChatBannedRights;

  protected get [id](): number {
    return 0x41CBF256;
  }

  static get [name](): string {
    return "chat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["creator", "true", "flags.0?true"],
      ["left", "true", "flags.2?true"],
      ["deactivated", "true", "flags.5?true"],
      ["call_active", "true", "flags.23?true"],
      ["call_not_empty", "true", "flags.24?true"],
      ["noforwards", "true", "flags.25?true"],
      ["id", "bigint", "long"],
      ["title", "string", "string"],
      ["photo", _ChatPhoto_, "ChatPhoto"],
      ["participants_count", "number", "int"],
      ["date", "number", "int"],
      ["version", "number", "int"],
      ["migrated_to", _InputChannel_, "flags.6?InputChannel"],
      ["admin_rights", _ChatAdminRights_, "flags.14?ChatAdminRights"],
      ["default_banned_rights", _ChatBannedRights_, "flags.18?ChatBannedRights"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.creator ?? null, "true", "flags.0?true"],
      [this.left ?? null, "true", "flags.2?true"],
      [this.deactivated ?? null, "true", "flags.5?true"],
      [this.call_active ?? null, "true", "flags.23?true"],
      [this.call_not_empty ?? null, "true", "flags.24?true"],
      [this.noforwards ?? null, "true", "flags.25?true"],
      [this.id, "bigint", "long"],
      [this.title, "string", "string"],
      [this.photo, _ChatPhoto_, "ChatPhoto"],
      [this.participants_count, "number", "int"],
      [this.date, "number", "int"],
      [this.version, "number", "int"],
      [this.migrated_to ?? null, _InputChannel_, "flags.6?InputChannel"],
      [this.admin_rights ?? null, _ChatAdminRights_, "flags.14?ChatAdminRights"],
      [this.default_banned_rights ?? null, _ChatBannedRights_, "flags.18?ChatBannedRights"],
    ];
  }

  constructor(params: { creator?: true; left?: true; deactivated?: true; call_active?: true; call_not_empty?: true; noforwards?: true; id: bigint; title: string; photo: enums.ChatPhoto; participants_count: number; date: number; version: number; migrated_to?: enums.InputChannel; admin_rights?: enums.ChatAdminRights; default_banned_rights?: enums.ChatBannedRights }) {
    super();
    this.creator = params.creator;
    this.left = params.left;
    this.deactivated = params.deactivated;
    this.call_active = params.call_active;
    this.call_not_empty = params.call_not_empty;
    this.noforwards = params.noforwards;
    this.id = params.id;
    this.title = params.title;
    this.photo = params.photo;
    this.participants_count = params.participants_count;
    this.date = params.date;
    this.version = params.version;
    this.migrated_to = params.migrated_to;
    this.admin_rights = params.admin_rights;
    this.default_banned_rights = params.default_banned_rights;
  }
}

/** A group to which the user has no access. E.g., because the user was kicked from the group. */
export class ChatForbidden_ extends _Chat_ {
  /** User identifier */
  id: bigint;
  /** Group name */
  title: string;

  protected get [id](): number {
    return 0x6592A1A7;
  }

  static get [name](): string {
    return "chatForbidden"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["title", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.title, "string", "string"],
    ];
  }

  constructor(params: { id: bigint; title: string }) {
    super();
    this.id = params.id;
    this.title = params.title;
  }
}

/** Channel/supergroup info */
export class Channel_ extends _Chat_ {
  /** Whether the current user is the creator of this channel */
  creator?: true;
  /** Whether the current user has left or is not a member of this channel */
  left?: true;
  /** Is this a channel? */
  broadcast?: true;
  /** Is this channel verified by telegram? */
  verified?: true;
  /** Is this a supergroup? */
  megagroup?: true;
  /** Whether viewing/writing in this channel for a reason (see `restriction_reason` */
  restricted?: true;
  /** Whether signatures are enabled (channels) */
  signatures?: true;
  /** See [min](https://core.telegram.org/api/min) */
  min?: true;
  /** This channel/supergroup is probably a scam */
  scam?: true;
  /** Whether this channel has a private join link */
  has_link?: true;
  /** Whether this chanel has a geoposition */
  has_geo?: true;
  /** Whether slow mode is enabled for groups to prevent flood in chat */
  slowmode_enabled?: true;
  /** Whether a group call or livestream is currently active */
  call_active?: true;
  /** Whether there's anyone in the group call or livestream */
  call_not_empty?: true;
  /** If set, this [supergroup/channel](https://core.telegram.org/api/channel) was reported by many users as a fake or scam: be careful when interacting with it. */
  fake?: true;
  /** Whether this [supergroup](https://core.telegram.org/api/channel) is a gigagroup */
  gigagroup?: true;
  /** Whether this channel or group is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it */
  noforwards?: true;
  /** Whether a user needs to join the supergroup before they can send messages: can be false only for [discussion groups »](https://core.telegram.org/api/discussion), toggle using [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinToSend) */
  join_to_send?: true;
  /** Whether a user's join request will have to be [approved by administrators](https://core.telegram.org/api/invites#join-requests), toggle using [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinRequest) */
  join_request?: true;
  /** Whether this supergroup is a [forum](https://core.telegram.org/api/forum) */
  forum?: true;
  /** Whether we have [hidden all stories posted by this channel »](https://core.telegram.org/api/stories#hiding-stories-of-other-users). */
  stories_hidden?: true;
  /** If set, indicates that the `stories_hidden` flag was not populated, and its value must cannot be relied on; use the previously cached value, or re-fetch the constructor using [channels.getChannels](https://core.telegram.org/method/channels.getChannels) to obtain the latest value of the `stories_hidden` flag. */
  stories_hidden_min?: true;
  /** No stories from the channel are visible. */
  stories_unavailable?: true;
  /** ID of the channel */
  id: bigint;
  /** Access hash */
  access_hash?: bigint;
  /** Title */
  title: string;
  /** Username */
  username?: string;
  /** Profile photo */
  photo: enums.ChatPhoto;
  /** Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date */
  date: number;
  /** Contains the reason why access to this channel must be restricted. */
  restriction_reason?: Array<enums.RestrictionReason>;
  /** Admin rights of the user in this channel (see [rights](https://core.telegram.org/api/rights)) */
  admin_rights?: enums.ChatAdminRights;
  /** Banned rights of the user in this channel (see [rights](https://core.telegram.org/api/rights)) */
  banned_rights?: enums.ChatBannedRights;
  /** Default chat rights (see [rights](https://core.telegram.org/api/rights)) */
  default_banned_rights?: enums.ChatBannedRights;
  /** Participant count */
  participants_count?: number;
  /** Additional usernames */
  usernames?: Array<enums.Username>;
  /** ID of the maximum read [story](https://core.telegram.org/api/stories). */
  stories_max_id?: number;
  /** The channel's [accent color](https://core.telegram.org/api/colors). */
  color?: enums.PeerColor;
  /** The channel's [profile color](https://core.telegram.org/api/colors). */
  profile_color?: enums.PeerColor;
  /** [Emoji status](https://core.telegram.org/api/emoji-status) */
  emoji_status?: enums.EmojiStatus;
  /** [Boost level](https://core.telegram.org/api/boost) */
  level?: number;

  protected get [id](): number {
    return 0x0AADFC8F;
  }

  static get [name](): string {
    return "channel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["creator", "true", "flags.0?true"],
      ["left", "true", "flags.2?true"],
      ["broadcast", "true", "flags.5?true"],
      ["verified", "true", "flags.7?true"],
      ["megagroup", "true", "flags.8?true"],
      ["restricted", "true", "flags.9?true"],
      ["signatures", "true", "flags.11?true"],
      ["min", "true", "flags.12?true"],
      ["scam", "true", "flags.19?true"],
      ["has_link", "true", "flags.20?true"],
      ["has_geo", "true", "flags.21?true"],
      ["slowmode_enabled", "true", "flags.22?true"],
      ["call_active", "true", "flags.23?true"],
      ["call_not_empty", "true", "flags.24?true"],
      ["fake", "true", "flags.25?true"],
      ["gigagroup", "true", "flags.26?true"],
      ["noforwards", "true", "flags.27?true"],
      ["join_to_send", "true", "flags.28?true"],
      ["join_request", "true", "flags.29?true"],
      ["forum", "true", "flags.30?true"],
      ["flags2", flags, "#"],
      ["stories_hidden", "true", "flags2.1?true"],
      ["stories_hidden_min", "true", "flags2.2?true"],
      ["stories_unavailable", "true", "flags2.3?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "flags.13?long"],
      ["title", "string", "string"],
      ["username", "string", "flags.6?string"],
      ["photo", _ChatPhoto_, "ChatPhoto"],
      ["date", "number", "int"],
      ["restriction_reason", [_RestrictionReason_], "flags.9?Vector<RestrictionReason>"],
      ["admin_rights", _ChatAdminRights_, "flags.14?ChatAdminRights"],
      ["banned_rights", _ChatBannedRights_, "flags.15?ChatBannedRights"],
      ["default_banned_rights", _ChatBannedRights_, "flags.18?ChatBannedRights"],
      ["participants_count", "number", "flags.17?int"],
      ["usernames", [_Username_], "flags2.0?Vector<Username>"],
      ["stories_max_id", "number", "flags2.4?int"],
      ["color", _PeerColor_, "flags2.7?PeerColor"],
      ["profile_color", _PeerColor_, "flags2.8?PeerColor"],
      ["emoji_status", _EmojiStatus_, "flags2.9?EmojiStatus"],
      ["level", "number", "flags2.10?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.creator ?? null, "true", "flags.0?true"],
      [this.left ?? null, "true", "flags.2?true"],
      [this.broadcast ?? null, "true", "flags.5?true"],
      [this.verified ?? null, "true", "flags.7?true"],
      [this.megagroup ?? null, "true", "flags.8?true"],
      [this.restricted ?? null, "true", "flags.9?true"],
      [this.signatures ?? null, "true", "flags.11?true"],
      [this.min ?? null, "true", "flags.12?true"],
      [this.scam ?? null, "true", "flags.19?true"],
      [this.has_link ?? null, "true", "flags.20?true"],
      [this.has_geo ?? null, "true", "flags.21?true"],
      [this.slowmode_enabled ?? null, "true", "flags.22?true"],
      [this.call_active ?? null, "true", "flags.23?true"],
      [this.call_not_empty ?? null, "true", "flags.24?true"],
      [this.fake ?? null, "true", "flags.25?true"],
      [this.gigagroup ?? null, "true", "flags.26?true"],
      [this.noforwards ?? null, "true", "flags.27?true"],
      [this.join_to_send ?? null, "true", "flags.28?true"],
      [this.join_request ?? null, "true", "flags.29?true"],
      [this.forum ?? null, "true", "flags.30?true"],
      ["flags2", flags, "#"],
      [this.stories_hidden ?? null, "true", "flags2.1?true"],
      [this.stories_hidden_min ?? null, "true", "flags2.2?true"],
      [this.stories_unavailable ?? null, "true", "flags2.3?true"],
      [this.id, "bigint", "long"],
      [this.access_hash ?? null, "bigint", "flags.13?long"],
      [this.title, "string", "string"],
      [this.username ?? null, "string", "flags.6?string"],
      [this.photo, _ChatPhoto_, "ChatPhoto"],
      [this.date, "number", "int"],
      [this.restriction_reason ?? null, [_RestrictionReason_], "flags.9?Vector<RestrictionReason>"],
      [this.admin_rights ?? null, _ChatAdminRights_, "flags.14?ChatAdminRights"],
      [this.banned_rights ?? null, _ChatBannedRights_, "flags.15?ChatBannedRights"],
      [this.default_banned_rights ?? null, _ChatBannedRights_, "flags.18?ChatBannedRights"],
      [this.participants_count ?? null, "number", "flags.17?int"],
      [this.usernames ?? null, [_Username_], "flags2.0?Vector<Username>"],
      [this.stories_max_id ?? null, "number", "flags2.4?int"],
      [this.color ?? null, _PeerColor_, "flags2.7?PeerColor"],
      [this.profile_color ?? null, _PeerColor_, "flags2.8?PeerColor"],
      [this.emoji_status ?? null, _EmojiStatus_, "flags2.9?EmojiStatus"],
      [this.level ?? null, "number", "flags2.10?int"],
    ];
  }

  constructor(params: { creator?: true; left?: true; broadcast?: true; verified?: true; megagroup?: true; restricted?: true; signatures?: true; min?: true; scam?: true; has_link?: true; has_geo?: true; slowmode_enabled?: true; call_active?: true; call_not_empty?: true; fake?: true; gigagroup?: true; noforwards?: true; join_to_send?: true; join_request?: true; forum?: true; stories_hidden?: true; stories_hidden_min?: true; stories_unavailable?: true; id: bigint; access_hash?: bigint; title: string; username?: string; photo: enums.ChatPhoto; date: number; restriction_reason?: Array<enums.RestrictionReason>; admin_rights?: enums.ChatAdminRights; banned_rights?: enums.ChatBannedRights; default_banned_rights?: enums.ChatBannedRights; participants_count?: number; usernames?: Array<enums.Username>; stories_max_id?: number; color?: enums.PeerColor; profile_color?: enums.PeerColor; emoji_status?: enums.EmojiStatus; level?: number }) {
    super();
    this.creator = params.creator;
    this.left = params.left;
    this.broadcast = params.broadcast;
    this.verified = params.verified;
    this.megagroup = params.megagroup;
    this.restricted = params.restricted;
    this.signatures = params.signatures;
    this.min = params.min;
    this.scam = params.scam;
    this.has_link = params.has_link;
    this.has_geo = params.has_geo;
    this.slowmode_enabled = params.slowmode_enabled;
    this.call_active = params.call_active;
    this.call_not_empty = params.call_not_empty;
    this.fake = params.fake;
    this.gigagroup = params.gigagroup;
    this.noforwards = params.noforwards;
    this.join_to_send = params.join_to_send;
    this.join_request = params.join_request;
    this.forum = params.forum;
    this.stories_hidden = params.stories_hidden;
    this.stories_hidden_min = params.stories_hidden_min;
    this.stories_unavailable = params.stories_unavailable;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.title = params.title;
    this.username = params.username;
    this.photo = params.photo;
    this.date = params.date;
    this.restriction_reason = params.restriction_reason;
    this.admin_rights = params.admin_rights;
    this.banned_rights = params.banned_rights;
    this.default_banned_rights = params.default_banned_rights;
    this.participants_count = params.participants_count;
    this.usernames = params.usernames;
    this.stories_max_id = params.stories_max_id;
    this.color = params.color;
    this.profile_color = params.profile_color;
    this.emoji_status = params.emoji_status;
    this.level = params.level;
  }
}

/** Indicates a channel/supergroup we can't access because we were banned, or for some other reason. */
export class ChannelForbidden_ extends _Chat_ {
  /** Is this a channel */
  broadcast?: true;
  /** Is this a supergroup */
  megagroup?: true;
  /** Channel ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** Title */
  title: string;
  /** The ban is valid until the specified date */
  until_date?: number;

  protected get [id](): number {
    return 0x17D493D5;
  }

  static get [name](): string {
    return "channelForbidden"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["broadcast", "true", "flags.5?true"],
      ["megagroup", "true", "flags.8?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["title", "string", "string"],
      ["until_date", "number", "flags.16?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.broadcast ?? null, "true", "flags.5?true"],
      [this.megagroup ?? null, "true", "flags.8?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.title, "string", "string"],
      [this.until_date ?? null, "number", "flags.16?int"],
    ];
  }

  constructor(params: { broadcast?: true; megagroup?: true; id: bigint; access_hash: bigint; title: string; until_date?: number }) {
    super();
    this.broadcast = params.broadcast;
    this.megagroup = params.megagroup;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.title = params.title;
    this.until_date = params.until_date;
  }
}

/** Full info about a [basic group](https://core.telegram.org/api/channel#basic-groups). */
export class ChatFull_ extends _ChatFull_ {
  /** Can we change the username of this chat */
  can_set_username?: true;
  /** Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available */
  has_scheduled?: true;
  /** Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden. */
  translations_disabled?: true;
  /** ID of the chat */
  id: bigint;
  /** About string for this chat */
  about: string;
  /** Participant list */
  participants: enums.ChatParticipants;
  /** Chat photo */
  chat_photo?: enums.Photo;
  /** Notification settings */
  notify_settings: enums.PeerNotifySettings;
  /** Chat invite */
  exported_invite?: enums.ExportedChatInvite;
  /** Info about bots that are in this chat */
  bot_info?: Array<enums.BotInfo>;
  /** Message ID of the last [pinned message](https://core.telegram.org/api/pin) */
  pinned_msg_id?: number;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** Group call information */
  call?: enums.InputGroupCall;
  /** Time-To-Live of messages sent by the current user to this chat */
  ttl_period?: number;
  /** When using [phone.getGroupCallJoinAs](https://core.telegram.org/method/phone.getGroupCallJoinAs) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default. */
  groupcall_default_join_as?: enums.Peer;
  /** Emoji representing a specific chat theme */
  theme_emoticon?: string;
  /** Pending [join requests »](https://core.telegram.org/api/invites#join-requests) */
  requests_pending?: number;
  /** IDs of users who requested to join recently */
  recent_requesters?: Array<bigint>;
  /** Allowed [message reactions »](https://core.telegram.org/api/reactions) */
  available_reactions?: enums.ChatReactions;

  protected get [id](): number {
    return 0xC9D31138;
  }

  static get [name](): string {
    return "chatFull"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["can_set_username", "true", "flags.7?true"],
      ["has_scheduled", "true", "flags.8?true"],
      ["translations_disabled", "true", "flags.19?true"],
      ["id", "bigint", "long"],
      ["about", "string", "string"],
      ["participants", _ChatParticipants_, "ChatParticipants"],
      ["chat_photo", _Photo_, "flags.2?Photo"],
      ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
      ["exported_invite", _ExportedChatInvite_, "flags.13?ExportedChatInvite"],
      ["bot_info", [_BotInfo_], "flags.3?Vector<BotInfo>"],
      ["pinned_msg_id", "number", "flags.6?int"],
      ["folder_id", "number", "flags.11?int"],
      ["call", _InputGroupCall_, "flags.12?InputGroupCall"],
      ["ttl_period", "number", "flags.14?int"],
      ["groupcall_default_join_as", _Peer_, "flags.15?Peer"],
      ["theme_emoticon", "string", "flags.16?string"],
      ["requests_pending", "number", "flags.17?int"],
      ["recent_requesters", ["bigint"], "flags.17?Vector<long>"],
      ["available_reactions", _ChatReactions_, "flags.18?ChatReactions"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.can_set_username ?? null, "true", "flags.7?true"],
      [this.has_scheduled ?? null, "true", "flags.8?true"],
      [this.translations_disabled ?? null, "true", "flags.19?true"],
      [this.id, "bigint", "long"],
      [this.about, "string", "string"],
      [this.participants, _ChatParticipants_, "ChatParticipants"],
      [this.chat_photo ?? null, _Photo_, "flags.2?Photo"],
      [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
      [this.exported_invite ?? null, _ExportedChatInvite_, "flags.13?ExportedChatInvite"],
      [this.bot_info ?? null, [_BotInfo_], "flags.3?Vector<BotInfo>"],
      [this.pinned_msg_id ?? null, "number", "flags.6?int"],
      [this.folder_id ?? null, "number", "flags.11?int"],
      [this.call ?? null, _InputGroupCall_, "flags.12?InputGroupCall"],
      [this.ttl_period ?? null, "number", "flags.14?int"],
      [this.groupcall_default_join_as ?? null, _Peer_, "flags.15?Peer"],
      [this.theme_emoticon ?? null, "string", "flags.16?string"],
      [this.requests_pending ?? null, "number", "flags.17?int"],
      [this.recent_requesters ?? null, ["bigint"], "flags.17?Vector<long>"],
      [this.available_reactions ?? null, _ChatReactions_, "flags.18?ChatReactions"],
    ];
  }

  constructor(params: { can_set_username?: true; has_scheduled?: true; translations_disabled?: true; id: bigint; about: string; participants: enums.ChatParticipants; chat_photo?: enums.Photo; notify_settings: enums.PeerNotifySettings; exported_invite?: enums.ExportedChatInvite; bot_info?: Array<enums.BotInfo>; pinned_msg_id?: number; folder_id?: number; call?: enums.InputGroupCall; ttl_period?: number; groupcall_default_join_as?: enums.Peer; theme_emoticon?: string; requests_pending?: number; recent_requesters?: Array<bigint>; available_reactions?: enums.ChatReactions }) {
    super();
    this.can_set_username = params.can_set_username;
    this.has_scheduled = params.has_scheduled;
    this.translations_disabled = params.translations_disabled;
    this.id = params.id;
    this.about = params.about;
    this.participants = params.participants;
    this.chat_photo = params.chat_photo;
    this.notify_settings = params.notify_settings;
    this.exported_invite = params.exported_invite;
    this.bot_info = params.bot_info;
    this.pinned_msg_id = params.pinned_msg_id;
    this.folder_id = params.folder_id;
    this.call = params.call;
    this.ttl_period = params.ttl_period;
    this.groupcall_default_join_as = params.groupcall_default_join_as;
    this.theme_emoticon = params.theme_emoticon;
    this.requests_pending = params.requests_pending;
    this.recent_requesters = params.recent_requesters;
    this.available_reactions = params.available_reactions;
  }
}

/** Full info about a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [gigagroup](https://core.telegram.org/api/channel#gigagroups). */
export class ChannelFull_ extends _ChatFull_ {
  /** Can we view the participant list? */
  can_view_participants?: true;
  /** Can we set the channel's username? */
  can_set_username?: true;
  /** Can we [associate](https://core.telegram.org/method/channels.setStickers) a stickerpack to the supergroup? */
  can_set_stickers?: true;
  /** Is the history before we joined hidden to us? */
  hidden_prehistory?: true;
  /** Can we set the geolocation of this group (for geogroups) */
  can_set_location?: true;
  /** Whether scheduled messages are available */
  has_scheduled?: true;
  /** Can the user view [channel/supergroup statistics](https://core.telegram.org/api/stats) */
  can_view_stats?: true;
  /** Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in [discussion replies via @replies](https://core.telegram.org/api/discussion) */
  blocked?: true;
  /** Can we delete this channel? */
  can_delete_channel?: true;
  /** Whether [native antispam](https://core.telegram.org/api/antispam) functionality is enabled in this supergroup. */
  antispam?: true;
  /** Whether the participant list is hidden. */
  participants_hidden?: true;
  /** Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden. */
  translations_disabled?: true;
  /** Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories). */
  stories_pinned_available?: true;
  /** Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a "View as messages" setting in the local client.  
  This setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of this flag. */
  view_forum_as_messages?: true;
  /** ID of the channel */
  id: bigint;
  /** Info about the channel */
  about: string;
  /** Number of participants of the channel */
  participants_count?: number;
  /** Number of channel admins */
  admins_count?: number;
  /** Number of users [kicked](https://core.telegram.org/api/rights) from the channel */
  kicked_count?: number;
  /** Number of users [banned](https://core.telegram.org/api/rights) from the channel */
  banned_count?: number;
  /** Number of users currently online */
  online_count?: number;
  /** Position up to which all incoming messages are read. */
  read_inbox_max_id: number;
  /** Position up to which all outgoing messages are read. */
  read_outbox_max_id: number;
  /** Count of unread messages */
  unread_count: number;
  /** Channel picture */
  chat_photo: enums.Photo;
  /** Notification settings */
  notify_settings: enums.PeerNotifySettings;
  /** Invite link */
  exported_invite?: enums.ExportedChatInvite;
  /** Info about bots in the channel/supergroup */
  bot_info: Array<enums.BotInfo>;
  /** The chat ID from which this group was [migrated](https://core.telegram.org/api/channel) */
  migrated_from_chat_id?: bigint;
  /** The message ID in the original chat at which this group was [migrated](https://core.telegram.org/api/channel) */
  migrated_from_max_id?: number;
  /** Message ID of the last [pinned message](https://core.telegram.org/api/pin) */
  pinned_msg_id?: number;
  /** Associated stickerset */
  stickerset?: enums.StickerSet;
  /** Identifier of a maximum unavailable message in a channel due to hidden history. */
  available_min_id?: number;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** ID of the linked [discussion chat](https://core.telegram.org/api/discussion) for channels */
  linked_chat_id?: bigint;
  /** Location of the geogroup */
  location?: enums.ChannelLocation;
  /** If specified, users in supergroups will only be able to send one message every `slowmode_seconds` seconds */
  slowmode_seconds?: number;
  /** Indicates when the user will be allowed to send another message in the supergroup (unixtime) */
  slowmode_next_send_date?: number;
  /** If set, specifies the DC to use for fetching channel statistics */
  stats_dc?: number;
  /** Latest [PTS](https://core.telegram.org/api/updates) for this channel */
  pts: number;
  /** Livestream or group call information */
  call?: enums.InputGroupCall;
  /** Time-To-Live of messages in this channel or supergroup */
  ttl_period?: number;
  /** A list of [suggested actions](https://core.telegram.org/api/config#suggestions) for the supergroup admin, [see here for more info »](https://core.telegram.org/api/config#suggestions). */
  pending_suggestions?: Array<string>;
  /** When using [phone.getGroupCallJoinAs](https://core.telegram.org/method/phone.getGroupCallJoinAs) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default. */
  groupcall_default_join_as?: enums.Peer;
  /** Emoji representing a specific chat theme */
  theme_emoticon?: string;
  /** Pending [join requests »](https://core.telegram.org/api/invites#join-requests) */
  requests_pending?: number;
  /** IDs of users who requested to join recently */
  recent_requesters?: Array<bigint>;
  /** Default peer used for sending messages to this channel */
  default_send_as?: enums.Peer;
  /** Allowed [message reactions »](https://core.telegram.org/api/reactions) */
  available_reactions?: enums.ChatReactions;
  /** Channel [stories](https://core.telegram.org/api/stories) */
  stories?: enums.PeerStories;
  /** [Wallpaper](https://core.telegram.org/api/wallpapers) */
  wallpaper?: enums.WallPaper;
  boosts_applied?: number;
  boosts_unrestrict?: number;
  emojiset?: enums.StickerSet;

  protected get [id](): number {
    return 0x44C054A7;
  }

  static get [name](): string {
    return "channelFull"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["can_view_participants", "true", "flags.3?true"],
      ["can_set_username", "true", "flags.6?true"],
      ["can_set_stickers", "true", "flags.7?true"],
      ["hidden_prehistory", "true", "flags.10?true"],
      ["can_set_location", "true", "flags.16?true"],
      ["has_scheduled", "true", "flags.19?true"],
      ["can_view_stats", "true", "flags.20?true"],
      ["blocked", "true", "flags.22?true"],
      ["flags2", flags, "#"],
      ["can_delete_channel", "true", "flags2.0?true"],
      ["antispam", "true", "flags2.1?true"],
      ["participants_hidden", "true", "flags2.2?true"],
      ["translations_disabled", "true", "flags2.3?true"],
      ["stories_pinned_available", "true", "flags2.5?true"],
      ["view_forum_as_messages", "true", "flags2.6?true"],
      ["id", "bigint", "long"],
      ["about", "string", "string"],
      ["participants_count", "number", "flags.0?int"],
      ["admins_count", "number", "flags.1?int"],
      ["kicked_count", "number", "flags.2?int"],
      ["banned_count", "number", "flags.2?int"],
      ["online_count", "number", "flags.13?int"],
      ["read_inbox_max_id", "number", "int"],
      ["read_outbox_max_id", "number", "int"],
      ["unread_count", "number", "int"],
      ["chat_photo", _Photo_, "Photo"],
      ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
      ["exported_invite", _ExportedChatInvite_, "flags.23?ExportedChatInvite"],
      ["bot_info", [_BotInfo_], "Vector<BotInfo>"],
      ["migrated_from_chat_id", "bigint", "flags.4?long"],
      ["migrated_from_max_id", "number", "flags.4?int"],
      ["pinned_msg_id", "number", "flags.5?int"],
      ["stickerset", _StickerSet_, "flags.8?StickerSet"],
      ["available_min_id", "number", "flags.9?int"],
      ["folder_id", "number", "flags.11?int"],
      ["linked_chat_id", "bigint", "flags.14?long"],
      ["location", _ChannelLocation_, "flags.15?ChannelLocation"],
      ["slowmode_seconds", "number", "flags.17?int"],
      ["slowmode_next_send_date", "number", "flags.18?int"],
      ["stats_dc", "number", "flags.12?int"],
      ["pts", "number", "int"],
      ["call", _InputGroupCall_, "flags.21?InputGroupCall"],
      ["ttl_period", "number", "flags.24?int"],
      ["pending_suggestions", ["string"], "flags.25?Vector<string>"],
      ["groupcall_default_join_as", _Peer_, "flags.26?Peer"],
      ["theme_emoticon", "string", "flags.27?string"],
      ["requests_pending", "number", "flags.28?int"],
      ["recent_requesters", ["bigint"], "flags.28?Vector<long>"],
      ["default_send_as", _Peer_, "flags.29?Peer"],
      ["available_reactions", _ChatReactions_, "flags.30?ChatReactions"],
      ["stories", _PeerStories_, "flags2.4?PeerStories"],
      ["wallpaper", _WallPaper_, "flags2.7?WallPaper"],
      ["boosts_applied", "number", "flags2.8?int"],
      ["boosts_unrestrict", "number", "flags2.9?int"],
      ["emojiset", _StickerSet_, "flags2.10?StickerSet"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.can_view_participants ?? null, "true", "flags.3?true"],
      [this.can_set_username ?? null, "true", "flags.6?true"],
      [this.can_set_stickers ?? null, "true", "flags.7?true"],
      [this.hidden_prehistory ?? null, "true", "flags.10?true"],
      [this.can_set_location ?? null, "true", "flags.16?true"],
      [this.has_scheduled ?? null, "true", "flags.19?true"],
      [this.can_view_stats ?? null, "true", "flags.20?true"],
      [this.blocked ?? null, "true", "flags.22?true"],
      ["flags2", flags, "#"],
      [this.can_delete_channel ?? null, "true", "flags2.0?true"],
      [this.antispam ?? null, "true", "flags2.1?true"],
      [this.participants_hidden ?? null, "true", "flags2.2?true"],
      [this.translations_disabled ?? null, "true", "flags2.3?true"],
      [this.stories_pinned_available ?? null, "true", "flags2.5?true"],
      [this.view_forum_as_messages ?? null, "true", "flags2.6?true"],
      [this.id, "bigint", "long"],
      [this.about, "string", "string"],
      [this.participants_count ?? null, "number", "flags.0?int"],
      [this.admins_count ?? null, "number", "flags.1?int"],
      [this.kicked_count ?? null, "number", "flags.2?int"],
      [this.banned_count ?? null, "number", "flags.2?int"],
      [this.online_count ?? null, "number", "flags.13?int"],
      [this.read_inbox_max_id, "number", "int"],
      [this.read_outbox_max_id, "number", "int"],
      [this.unread_count, "number", "int"],
      [this.chat_photo, _Photo_, "Photo"],
      [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
      [this.exported_invite ?? null, _ExportedChatInvite_, "flags.23?ExportedChatInvite"],
      [this.bot_info, [_BotInfo_], "Vector<BotInfo>"],
      [this.migrated_from_chat_id ?? null, "bigint", "flags.4?long"],
      [this.migrated_from_max_id ?? null, "number", "flags.4?int"],
      [this.pinned_msg_id ?? null, "number", "flags.5?int"],
      [this.stickerset ?? null, _StickerSet_, "flags.8?StickerSet"],
      [this.available_min_id ?? null, "number", "flags.9?int"],
      [this.folder_id ?? null, "number", "flags.11?int"],
      [this.linked_chat_id ?? null, "bigint", "flags.14?long"],
      [this.location ?? null, _ChannelLocation_, "flags.15?ChannelLocation"],
      [this.slowmode_seconds ?? null, "number", "flags.17?int"],
      [this.slowmode_next_send_date ?? null, "number", "flags.18?int"],
      [this.stats_dc ?? null, "number", "flags.12?int"],
      [this.pts, "number", "int"],
      [this.call ?? null, _InputGroupCall_, "flags.21?InputGroupCall"],
      [this.ttl_period ?? null, "number", "flags.24?int"],
      [this.pending_suggestions ?? null, ["string"], "flags.25?Vector<string>"],
      [this.groupcall_default_join_as ?? null, _Peer_, "flags.26?Peer"],
      [this.theme_emoticon ?? null, "string", "flags.27?string"],
      [this.requests_pending ?? null, "number", "flags.28?int"],
      [this.recent_requesters ?? null, ["bigint"], "flags.28?Vector<long>"],
      [this.default_send_as ?? null, _Peer_, "flags.29?Peer"],
      [this.available_reactions ?? null, _ChatReactions_, "flags.30?ChatReactions"],
      [this.stories ?? null, _PeerStories_, "flags2.4?PeerStories"],
      [this.wallpaper ?? null, _WallPaper_, "flags2.7?WallPaper"],
      [this.boosts_applied ?? null, "number", "flags2.8?int"],
      [this.boosts_unrestrict ?? null, "number", "flags2.9?int"],
      [this.emojiset ?? null, _StickerSet_, "flags2.10?StickerSet"],
    ];
  }

  constructor(params: { can_view_participants?: true; can_set_username?: true; can_set_stickers?: true; hidden_prehistory?: true; can_set_location?: true; has_scheduled?: true; can_view_stats?: true; blocked?: true; can_delete_channel?: true; antispam?: true; participants_hidden?: true; translations_disabled?: true; stories_pinned_available?: true; view_forum_as_messages?: true; id: bigint; about: string; participants_count?: number; admins_count?: number; kicked_count?: number; banned_count?: number; online_count?: number; read_inbox_max_id: number; read_outbox_max_id: number; unread_count: number; chat_photo: enums.Photo; notify_settings: enums.PeerNotifySettings; exported_invite?: enums.ExportedChatInvite; bot_info: Array<enums.BotInfo>; migrated_from_chat_id?: bigint; migrated_from_max_id?: number; pinned_msg_id?: number; stickerset?: enums.StickerSet; available_min_id?: number; folder_id?: number; linked_chat_id?: bigint; location?: enums.ChannelLocation; slowmode_seconds?: number; slowmode_next_send_date?: number; stats_dc?: number; pts: number; call?: enums.InputGroupCall; ttl_period?: number; pending_suggestions?: Array<string>; groupcall_default_join_as?: enums.Peer; theme_emoticon?: string; requests_pending?: number; recent_requesters?: Array<bigint>; default_send_as?: enums.Peer; available_reactions?: enums.ChatReactions; stories?: enums.PeerStories; wallpaper?: enums.WallPaper; boosts_applied?: number; boosts_unrestrict?: number; emojiset?: enums.StickerSet }) {
    super();
    this.can_view_participants = params.can_view_participants;
    this.can_set_username = params.can_set_username;
    this.can_set_stickers = params.can_set_stickers;
    this.hidden_prehistory = params.hidden_prehistory;
    this.can_set_location = params.can_set_location;
    this.has_scheduled = params.has_scheduled;
    this.can_view_stats = params.can_view_stats;
    this.blocked = params.blocked;
    this.can_delete_channel = params.can_delete_channel;
    this.antispam = params.antispam;
    this.participants_hidden = params.participants_hidden;
    this.translations_disabled = params.translations_disabled;
    this.stories_pinned_available = params.stories_pinned_available;
    this.view_forum_as_messages = params.view_forum_as_messages;
    this.id = params.id;
    this.about = params.about;
    this.participants_count = params.participants_count;
    this.admins_count = params.admins_count;
    this.kicked_count = params.kicked_count;
    this.banned_count = params.banned_count;
    this.online_count = params.online_count;
    this.read_inbox_max_id = params.read_inbox_max_id;
    this.read_outbox_max_id = params.read_outbox_max_id;
    this.unread_count = params.unread_count;
    this.chat_photo = params.chat_photo;
    this.notify_settings = params.notify_settings;
    this.exported_invite = params.exported_invite;
    this.bot_info = params.bot_info;
    this.migrated_from_chat_id = params.migrated_from_chat_id;
    this.migrated_from_max_id = params.migrated_from_max_id;
    this.pinned_msg_id = params.pinned_msg_id;
    this.stickerset = params.stickerset;
    this.available_min_id = params.available_min_id;
    this.folder_id = params.folder_id;
    this.linked_chat_id = params.linked_chat_id;
    this.location = params.location;
    this.slowmode_seconds = params.slowmode_seconds;
    this.slowmode_next_send_date = params.slowmode_next_send_date;
    this.stats_dc = params.stats_dc;
    this.pts = params.pts;
    this.call = params.call;
    this.ttl_period = params.ttl_period;
    this.pending_suggestions = params.pending_suggestions;
    this.groupcall_default_join_as = params.groupcall_default_join_as;
    this.theme_emoticon = params.theme_emoticon;
    this.requests_pending = params.requests_pending;
    this.recent_requesters = params.recent_requesters;
    this.default_send_as = params.default_send_as;
    this.available_reactions = params.available_reactions;
    this.stories = params.stories;
    this.wallpaper = params.wallpaper;
    this.boosts_applied = params.boosts_applied;
    this.boosts_unrestrict = params.boosts_unrestrict;
    this.emojiset = params.emojiset;
  }
}

/** Group member. */
export class ChatParticipant_ extends _ChatParticipant_ {
  /** Member user ID */
  user_id: bigint;
  /** ID of the user that added the member to the group */
  inviter_id: bigint;
  /** Date added to the group */
  date: number;

  protected get [id](): number {
    return 0xC02D4007;
  }

  static get [name](): string {
    return "chatParticipant"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["inviter_id", "bigint", "long"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.inviter_id, "bigint", "long"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; inviter_id: bigint; date: number }) {
    super();
    this.user_id = params.user_id;
    this.inviter_id = params.inviter_id;
    this.date = params.date;
  }
}

/** Represents the creator of the group */
export class ChatParticipantCreator_ extends _ChatParticipant_ {
  /** ID of the user that created the group */
  user_id: bigint;

  protected get [id](): number {
    return 0xE46BCEE4;
  }

  static get [name](): string {
    return "chatParticipantCreator"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint }) {
    super();
    this.user_id = params.user_id;
  }
}

/** Chat admin */
export class ChatParticipantAdmin_ extends _ChatParticipant_ {
  /** ID of a group member that is admin */
  user_id: bigint;
  /** ID of the user that added the member to the group */
  inviter_id: bigint;
  /** Date when the user was added */
  date: number;

  protected get [id](): number {
    return 0xA0933F5B;
  }

  static get [name](): string {
    return "chatParticipantAdmin"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["inviter_id", "bigint", "long"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.inviter_id, "bigint", "long"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; inviter_id: bigint; date: number }) {
    super();
    this.user_id = params.user_id;
    this.inviter_id = params.inviter_id;
    this.date = params.date;
  }
}

/** Info on members is unavailable */
export class ChatParticipantsForbidden_ extends _ChatParticipants_ {
  /** Group ID */
  chat_id: bigint;
  /** Info about the group membership of the current user */
  self_participant?: enums.ChatParticipant;

  protected get [id](): number {
    return 0x8763D3E1;
  }

  static get [name](): string {
    return "chatParticipantsForbidden"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["chat_id", "bigint", "long"],
      ["self_participant", _ChatParticipant_, "flags.0?ChatParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.chat_id, "bigint", "long"],
      [this.self_participant ?? null, _ChatParticipant_, "flags.0?ChatParticipant"],
    ];
  }

  constructor(params: { chat_id: bigint; self_participant?: enums.ChatParticipant }) {
    super();
    this.chat_id = params.chat_id;
    this.self_participant = params.self_participant;
  }
}

/** Group members. */
export class ChatParticipants_ extends _ChatParticipants_ {
  /** Group identifier */
  chat_id: bigint;
  /** List of group members */
  participants: Array<enums.ChatParticipant>;
  /** Group version number */
  version: number;

  protected get [id](): number {
    return 0x3CBC93F8;
  }

  static get [name](): string {
    return "chatParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
      ["participants", [_ChatParticipant_], "Vector<ChatParticipant>"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
      [this.participants, [_ChatParticipant_], "Vector<ChatParticipant>"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { chat_id: bigint; participants: Array<enums.ChatParticipant>; version: number }) {
    super();
    this.chat_id = params.chat_id;
    this.participants = params.participants;
    this.version = params.version;
  }
}

/** Group photo is not set. */
export class ChatPhotoEmpty_ extends _ChatPhoto_ {
  protected get [id](): number {
    return 0x37C1011C;
  }

  static get [name](): string {
    return "chatPhotoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Group profile photo. */
export class ChatPhoto_ extends _ChatPhoto_ {
  /** Whether the user has an animated profile picture */
  has_video?: true;
  /** Photo ID */
  photo_id: bigint;
  /** [Stripped thumbnail](https://core.telegram.org/api/files#stripped-thumbnails) */
  stripped_thumb?: Uint8Array;
  /** DC where this photo is stored */
  dc_id: number;

  protected get [id](): number {
    return 0x1C6E1C11;
  }

  static get [name](): string {
    return "chatPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_video", "true", "flags.0?true"],
      ["photo_id", "bigint", "long"],
      ["stripped_thumb", Uint8Array, "flags.1?bytes"],
      ["dc_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_video ?? null, "true", "flags.0?true"],
      [this.photo_id, "bigint", "long"],
      [this.stripped_thumb ?? null, Uint8Array, "flags.1?bytes"],
      [this.dc_id, "number", "int"],
    ];
  }

  constructor(params: { has_video?: true; photo_id: bigint; stripped_thumb?: Uint8Array; dc_id: number }) {
    super();
    this.has_video = params.has_video;
    this.photo_id = params.photo_id;
    this.stripped_thumb = params.stripped_thumb;
    this.dc_id = params.dc_id;
  }
}

/** Empty constructor, non-existent message. */
export class MessageEmpty_ extends _Message_ {
  /** Message identifier */
  id: number;
  /** Peer ID, the chat where this message was sent */
  peer_id?: enums.Peer;

  protected get [id](): number {
    return 0x90A6CA84;
  }

  static get [name](): string {
    return "messageEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "number", "int"],
      ["peer_id", _Peer_, "flags.0?Peer"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "number", "int"],
      [this.peer_id ?? null, _Peer_, "flags.0?Peer"],
    ];
  }

  constructor(params: { id: number; peer_id?: enums.Peer }) {
    super();
    this.id = params.id;
    this.peer_id = params.peer_id;
  }
}

/** A message */
export class Message_ extends _Message_ {
  /** Is this an outgoing message */
  out?: true;
  /** Whether we were [mentioned](https://core.telegram.org/api/mentions) in this message */
  mentioned?: true;
  /** Whether there are unread media attachments in this message */
  media_unread?: true;
  /** Whether this is a silent message (no notification triggered) */
  silent?: true;
  /** Whether this is a channel post */
  post?: true;
  /** Whether this is a [scheduled message](https://core.telegram.org/api/scheduled-messages) */
  from_scheduled?: true;
  /** This is a legacy message: it has to be refetched with the new layer */
  legacy?: true;
  /** Whether the message should be shown as not modified to the user, even if an edit date is present */
  edit_hide?: true;
  /** Whether this message is [pinned](https://core.telegram.org/api/pin) */
  pinned?: true;
  /** Whether this message is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more) and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera). */
  noforwards?: true;
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** ID of the message */
  id: number;
  /** ID of the sender of the message */
  from_id?: enums.Peer;
  from_boosts_applied?: number;
  /** Peer ID, the chat where this message was sent */
  peer_id: enums.Peer;
  /** Messages fetched from a [saved messages dialog »](https://core.telegram.org/api/saved-messages) will have `peer`\=[inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) and the `saved_peer_id` flag set to the ID of the saved dialog. */
  saved_peer_id?: enums.Peer;
  /** Info about forwarded messages */
  fwd_from?: enums.MessageFwdHeader;
  /** ID of the inline bot that generated the message */
  via_bot_id?: bigint;
  /** Reply information */
  reply_to?: enums.MessageReplyHeader;
  /** Date of the message */
  date: number;
  /** The message */
  message: string;
  /** Media attachment */
  media?: enums.MessageMedia;
  /** Reply markup (bot/inline keyboards) */
  reply_markup?: enums.ReplyMarkup;
  /** Message [entities](https://core.telegram.org/api/entities) for styled text */
  entities?: Array<enums.MessageEntity>;
  /** View count for channel posts */
  views?: number;
  /** Forward counter */
  forwards?: number;
  /** Info about [post comments (for channels) or message replies (for groups)](https://core.telegram.org/api/threads) */
  replies?: enums.MessageReplies;
  /** Last edit date of this message */
  edit_date?: number;
  /** Name of the author of this message for channel posts (with signatures enabled) */
  post_author?: string;
  /** Multiple media messages sent using [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia) with the same grouped ID indicate an [album or media group](https://core.telegram.org/api/files#albums-grouped-media) */
  grouped_id?: bigint;
  /** Reactions to this message */
  reactions?: enums.MessageReactions;
  /** Contains the reason why access to this message must be restricted. */
  restriction_reason?: Array<enums.RestrictionReason>;
  /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
  ttl_period?: number;

  protected get [id](): number {
    return 0x1E4C8A69;
  }

  static get [name](): string {
    return "message"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["out", "true", "flags.1?true"],
      ["mentioned", "true", "flags.4?true"],
      ["media_unread", "true", "flags.5?true"],
      ["silent", "true", "flags.13?true"],
      ["post", "true", "flags.14?true"],
      ["from_scheduled", "true", "flags.18?true"],
      ["legacy", "true", "flags.19?true"],
      ["edit_hide", "true", "flags.21?true"],
      ["pinned", "true", "flags.24?true"],
      ["noforwards", "true", "flags.26?true"],
      ["invert_media", "true", "flags.27?true"],
      ["id", "number", "int"],
      ["from_id", _Peer_, "flags.8?Peer"],
      ["from_boosts_applied", "number", "flags.29?int"],
      ["peer_id", _Peer_, "Peer"],
      ["saved_peer_id", _Peer_, "flags.28?Peer"],
      ["fwd_from", _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
      ["via_bot_id", "bigint", "flags.11?long"],
      ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      ["date", "number", "int"],
      ["message", "string", "string"],
      ["media", _MessageMedia_, "flags.9?MessageMedia"],
      ["reply_markup", _ReplyMarkup_, "flags.6?ReplyMarkup"],
      ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      ["views", "number", "flags.10?int"],
      ["forwards", "number", "flags.10?int"],
      ["replies", _MessageReplies_, "flags.23?MessageReplies"],
      ["edit_date", "number", "flags.15?int"],
      ["post_author", "string", "flags.16?string"],
      ["grouped_id", "bigint", "flags.17?long"],
      ["reactions", _MessageReactions_, "flags.20?MessageReactions"],
      ["restriction_reason", [_RestrictionReason_], "flags.22?Vector<RestrictionReason>"],
      ["ttl_period", "number", "flags.25?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.out ?? null, "true", "flags.1?true"],
      [this.mentioned ?? null, "true", "flags.4?true"],
      [this.media_unread ?? null, "true", "flags.5?true"],
      [this.silent ?? null, "true", "flags.13?true"],
      [this.post ?? null, "true", "flags.14?true"],
      [this.from_scheduled ?? null, "true", "flags.18?true"],
      [this.legacy ?? null, "true", "flags.19?true"],
      [this.edit_hide ?? null, "true", "flags.21?true"],
      [this.pinned ?? null, "true", "flags.24?true"],
      [this.noforwards ?? null, "true", "flags.26?true"],
      [this.invert_media ?? null, "true", "flags.27?true"],
      [this.id, "number", "int"],
      [this.from_id ?? null, _Peer_, "flags.8?Peer"],
      [this.from_boosts_applied ?? null, "number", "flags.29?int"],
      [this.peer_id, _Peer_, "Peer"],
      [this.saved_peer_id ?? null, _Peer_, "flags.28?Peer"],
      [this.fwd_from ?? null, _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
      [this.via_bot_id ?? null, "bigint", "flags.11?long"],
      [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      [this.date, "number", "int"],
      [this.message, "string", "string"],
      [this.media ?? null, _MessageMedia_, "flags.9?MessageMedia"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.6?ReplyMarkup"],
      [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      [this.views ?? null, "number", "flags.10?int"],
      [this.forwards ?? null, "number", "flags.10?int"],
      [this.replies ?? null, _MessageReplies_, "flags.23?MessageReplies"],
      [this.edit_date ?? null, "number", "flags.15?int"],
      [this.post_author ?? null, "string", "flags.16?string"],
      [this.grouped_id ?? null, "bigint", "flags.17?long"],
      [this.reactions ?? null, _MessageReactions_, "flags.20?MessageReactions"],
      [this.restriction_reason ?? null, [_RestrictionReason_], "flags.22?Vector<RestrictionReason>"],
      [this.ttl_period ?? null, "number", "flags.25?int"],
    ];
  }

  constructor(params: { out?: true; mentioned?: true; media_unread?: true; silent?: true; post?: true; from_scheduled?: true; legacy?: true; edit_hide?: true; pinned?: true; noforwards?: true; invert_media?: true; id: number; from_id?: enums.Peer; from_boosts_applied?: number; peer_id: enums.Peer; saved_peer_id?: enums.Peer; fwd_from?: enums.MessageFwdHeader; via_bot_id?: bigint; reply_to?: enums.MessageReplyHeader; date: number; message: string; media?: enums.MessageMedia; reply_markup?: enums.ReplyMarkup; entities?: Array<enums.MessageEntity>; views?: number; forwards?: number; replies?: enums.MessageReplies; edit_date?: number; post_author?: string; grouped_id?: bigint; reactions?: enums.MessageReactions; restriction_reason?: Array<enums.RestrictionReason>; ttl_period?: number }) {
    super();
    this.out = params.out;
    this.mentioned = params.mentioned;
    this.media_unread = params.media_unread;
    this.silent = params.silent;
    this.post = params.post;
    this.from_scheduled = params.from_scheduled;
    this.legacy = params.legacy;
    this.edit_hide = params.edit_hide;
    this.pinned = params.pinned;
    this.noforwards = params.noforwards;
    this.invert_media = params.invert_media;
    this.id = params.id;
    this.from_id = params.from_id;
    this.from_boosts_applied = params.from_boosts_applied;
    this.peer_id = params.peer_id;
    this.saved_peer_id = params.saved_peer_id;
    this.fwd_from = params.fwd_from;
    this.via_bot_id = params.via_bot_id;
    this.reply_to = params.reply_to;
    this.date = params.date;
    this.message = params.message;
    this.media = params.media;
    this.reply_markup = params.reply_markup;
    this.entities = params.entities;
    this.views = params.views;
    this.forwards = params.forwards;
    this.replies = params.replies;
    this.edit_date = params.edit_date;
    this.post_author = params.post_author;
    this.grouped_id = params.grouped_id;
    this.reactions = params.reactions;
    this.restriction_reason = params.restriction_reason;
    this.ttl_period = params.ttl_period;
  }
}

/** Indicates a service message */
export class MessageService_ extends _Message_ {
  /** Whether the message is outgoing */
  out?: true;
  /** Whether we were mentioned in the message */
  mentioned?: true;
  /** Whether the message contains unread media */
  media_unread?: true;
  /** Whether the message is silent */
  silent?: true;
  /** Whether it's a channel post */
  post?: true;
  /** This is a legacy message: it has to be refetched with the new layer */
  legacy?: true;
  /** Message ID */
  id: number;
  /** ID of the sender of this message */
  from_id?: enums.Peer;
  /** Sender of service message */
  peer_id: enums.Peer;
  /** Reply (thread) information */
  reply_to?: enums.MessageReplyHeader;
  /** Message date */
  date: number;
  /** Event connected with the service message */
  action: enums.MessageAction;
  /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
  ttl_period?: number;

  protected get [id](): number {
    return 0x2B085862;
  }

  static get [name](): string {
    return "messageService"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["out", "true", "flags.1?true"],
      ["mentioned", "true", "flags.4?true"],
      ["media_unread", "true", "flags.5?true"],
      ["silent", "true", "flags.13?true"],
      ["post", "true", "flags.14?true"],
      ["legacy", "true", "flags.19?true"],
      ["id", "number", "int"],
      ["from_id", _Peer_, "flags.8?Peer"],
      ["peer_id", _Peer_, "Peer"],
      ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      ["date", "number", "int"],
      ["action", _MessageAction_, "MessageAction"],
      ["ttl_period", "number", "flags.25?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.out ?? null, "true", "flags.1?true"],
      [this.mentioned ?? null, "true", "flags.4?true"],
      [this.media_unread ?? null, "true", "flags.5?true"],
      [this.silent ?? null, "true", "flags.13?true"],
      [this.post ?? null, "true", "flags.14?true"],
      [this.legacy ?? null, "true", "flags.19?true"],
      [this.id, "number", "int"],
      [this.from_id ?? null, _Peer_, "flags.8?Peer"],
      [this.peer_id, _Peer_, "Peer"],
      [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      [this.date, "number", "int"],
      [this.action, _MessageAction_, "MessageAction"],
      [this.ttl_period ?? null, "number", "flags.25?int"],
    ];
  }

  constructor(params: { out?: true; mentioned?: true; media_unread?: true; silent?: true; post?: true; legacy?: true; id: number; from_id?: enums.Peer; peer_id: enums.Peer; reply_to?: enums.MessageReplyHeader; date: number; action: enums.MessageAction; ttl_period?: number }) {
    super();
    this.out = params.out;
    this.mentioned = params.mentioned;
    this.media_unread = params.media_unread;
    this.silent = params.silent;
    this.post = params.post;
    this.legacy = params.legacy;
    this.id = params.id;
    this.from_id = params.from_id;
    this.peer_id = params.peer_id;
    this.reply_to = params.reply_to;
    this.date = params.date;
    this.action = params.action;
    this.ttl_period = params.ttl_period;
  }
}

/** Empty constructor. */
export class MessageMediaEmpty_ extends _MessageMedia_ {
  protected get [id](): number {
    return 0x3DED6320;
  }

  static get [name](): string {
    return "messageMediaEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Attached photo. */
export class MessageMediaPhoto_ extends _MessageMedia_ {
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** Photo */
  photo?: enums.Photo;
  /** Time to live in seconds of self-destructing photo */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0x695150D7;
  }

  static get [name](): string {
    return "messageMediaPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["spoiler", "true", "flags.3?true"],
      ["photo", _Photo_, "flags.0?Photo"],
      ["ttl_seconds", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.spoiler ?? null, "true", "flags.3?true"],
      [this.photo ?? null, _Photo_, "flags.0?Photo"],
      [this.ttl_seconds ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params?: { spoiler?: true; photo?: enums.Photo; ttl_seconds?: number }) {
    super();
    this.spoiler = params?.spoiler;
    this.photo = params?.photo;
    this.ttl_seconds = params?.ttl_seconds;
  }
}

/** Attached map. */
export class MessageMediaGeo_ extends _MessageMedia_ {
  /** GeoPoint */
  geo: enums.GeoPoint;

  protected get [id](): number {
    return 0x56E0D474;
  }

  static get [name](): string {
    return "messageMediaGeo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo", _GeoPoint_, "GeoPoint"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo, _GeoPoint_, "GeoPoint"],
    ];
  }

  constructor(params: { geo: enums.GeoPoint }) {
    super();
    this.geo = params.geo;
  }
}

/** Attached contact. */
export class MessageMediaContact_ extends _MessageMedia_ {
  /** Phone number */
  phone_number: string;
  /** Contact's first name */
  first_name: string;
  /** Contact's last name */
  last_name: string;
  /** VCARD of contact */
  vcard: string;
  /** User identifier or `0`, if the user with the given phone number is not registered */
  user_id: bigint;

  protected get [id](): number {
    return 0x70322949;
  }

  static get [name](): string {
    return "messageMediaContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_number", "string", "string"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
      ["vcard", "string", "string"],
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_number, "string", "string"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
      [this.vcard, "string", "string"],
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { phone_number: string; first_name: string; last_name: string; vcard: string; user_id: bigint }) {
    super();
    this.phone_number = params.phone_number;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.vcard = params.vcard;
    this.user_id = params.user_id;
  }
}

/** Current version of the client does not support this media type. */
export class MessageMediaUnsupported_ extends _MessageMedia_ {
  protected get [id](): number {
    return 0x9F84F49E;
  }

  static get [name](): string {
    return "messageMediaUnsupported"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Document (video, audio, voice, sticker, any media type except photo) */
export class MessageMediaDocument_ extends _MessageMedia_ {
  /** Whether this is a normal sticker, if not set this is a premium sticker and a premium sticker animation must be played. */
  nopremium?: true;
  /** Whether this media should be hidden behind a spoiler warning */
  spoiler?: true;
  /** Whether this is a video. */
  video?: true;
  /** Whether this is a round video. */
  round?: true;
  /** Whether this is a voice message. */
  voice?: true;
  /** Attached document */
  document?: enums.Document;
  /** Currently only used for story videos, may contain an alternative version of the story video, explicitly encoded using H.264 (in MPEG4 transport) at a lower resolution than `document`. */
  alt_document?: enums.Document;
  /** Time to live of self-destructing document */
  ttl_seconds?: number;

  protected get [id](): number {
    return 0x4CF4D72D;
  }

  static get [name](): string {
    return "messageMediaDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["nopremium", "true", "flags.3?true"],
      ["spoiler", "true", "flags.4?true"],
      ["video", "true", "flags.6?true"],
      ["round", "true", "flags.7?true"],
      ["voice", "true", "flags.8?true"],
      ["document", _Document_, "flags.0?Document"],
      ["alt_document", _Document_, "flags.5?Document"],
      ["ttl_seconds", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.nopremium ?? null, "true", "flags.3?true"],
      [this.spoiler ?? null, "true", "flags.4?true"],
      [this.video ?? null, "true", "flags.6?true"],
      [this.round ?? null, "true", "flags.7?true"],
      [this.voice ?? null, "true", "flags.8?true"],
      [this.document ?? null, _Document_, "flags.0?Document"],
      [this.alt_document ?? null, _Document_, "flags.5?Document"],
      [this.ttl_seconds ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params?: { nopremium?: true; spoiler?: true; video?: true; round?: true; voice?: true; document?: enums.Document; alt_document?: enums.Document; ttl_seconds?: number }) {
    super();
    this.nopremium = params?.nopremium;
    this.spoiler = params?.spoiler;
    this.video = params?.video;
    this.round = params?.round;
    this.voice = params?.voice;
    this.document = params?.document;
    this.alt_document = params?.alt_document;
    this.ttl_seconds = params?.ttl_seconds;
  }
}

/** Preview of webpage */
export class MessageMediaWebPage_ extends _MessageMedia_ {
  /** If set, specifies that a large media preview should be used. */
  force_large_media?: true;
  /** If set, specifies that a small media preview should be used. */
  force_small_media?: true;
  /** If set, indicates that the URL used for the webpage preview was specified manually using [inputMediaWebPage](https://core.telegram.org/constructor/inputMediaWebPage), and may not be related to any of the URLs specified in the message. */
  manual?: true;
  /** If set, the webpage can be opened directly without user confirmation; otherwise, user confirmation is required, showing the exact URL that will be opened. */
  safe?: true;
  /** Webpage preview */
  webpage: enums.WebPage;

  protected get [id](): number {
    return 0xDDF10C3B;
  }

  static get [name](): string {
    return "messageMediaWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["force_large_media", "true", "flags.0?true"],
      ["force_small_media", "true", "flags.1?true"],
      ["manual", "true", "flags.3?true"],
      ["safe", "true", "flags.4?true"],
      ["webpage", _WebPage_, "WebPage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.force_large_media ?? null, "true", "flags.0?true"],
      [this.force_small_media ?? null, "true", "flags.1?true"],
      [this.manual ?? null, "true", "flags.3?true"],
      [this.safe ?? null, "true", "flags.4?true"],
      [this.webpage, _WebPage_, "WebPage"],
    ];
  }

  constructor(params: { force_large_media?: true; force_small_media?: true; manual?: true; safe?: true; webpage: enums.WebPage }) {
    super();
    this.force_large_media = params.force_large_media;
    this.force_small_media = params.force_small_media;
    this.manual = params.manual;
    this.safe = params.safe;
    this.webpage = params.webpage;
  }
}

/** Venue */
export class MessageMediaVenue_ extends _MessageMedia_ {
  /** Geolocation of venue */
  geo: enums.GeoPoint;
  /** Venue name */
  title: string;
  /** Address */
  address: string;
  /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
  provider: string;
  /** Venue ID in the provider's database */
  venue_id: string;
  /** Venue type in the provider's database */
  venue_type: string;

  protected get [id](): number {
    return 0x2EC0533F;
  }

  static get [name](): string {
    return "messageMediaVenue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo", _GeoPoint_, "GeoPoint"],
      ["title", "string", "string"],
      ["address", "string", "string"],
      ["provider", "string", "string"],
      ["venue_id", "string", "string"],
      ["venue_type", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo, _GeoPoint_, "GeoPoint"],
      [this.title, "string", "string"],
      [this.address, "string", "string"],
      [this.provider, "string", "string"],
      [this.venue_id, "string", "string"],
      [this.venue_type, "string", "string"],
    ];
  }

  constructor(params: { geo: enums.GeoPoint; title: string; address: string; provider: string; venue_id: string; venue_type: string }) {
    super();
    this.geo = params.geo;
    this.title = params.title;
    this.address = params.address;
    this.provider = params.provider;
    this.venue_id = params.venue_id;
    this.venue_type = params.venue_type;
  }
}

/** Telegram game */
export class MessageMediaGame_ extends _MessageMedia_ {
  /** Game */
  game: enums.Game;

  protected get [id](): number {
    return 0xFDB19008;
  }

  static get [name](): string {
    return "messageMediaGame"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["game", _Game_, "Game"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.game, _Game_, "Game"],
    ];
  }

  constructor(params: { game: enums.Game }) {
    super();
    this.game = params.game;
  }
}

/** Invoice */
export class MessageMediaInvoice_ extends _MessageMedia_ {
  /** Whether the shipping address was requested */
  shipping_address_requested?: true;
  /** Whether this is an example invoice */
  test?: true;
  /** Product name, 1-32 characters */
  title: string;
  /** Product description, 1-255 characters */
  description: string;
  /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */
  photo?: enums.WebDocument;
  /** Message ID of receipt: if set, clients should change the text of the first [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button always attached to the [message](https://core.telegram.org/constructor/message) to a localized version of the word `Receipt` */
  receipt_msg_id?: number;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  total_amount: bigint;
  /** Unique bot deep-linking parameter that can be used to generate this invoice */
  start_param: string;
  /** Extended media */
  extended_media?: enums.MessageExtendedMedia;

  protected get [id](): number {
    return 0xF6A548D3;
  }

  static get [name](): string {
    return "messageMediaInvoice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["shipping_address_requested", "true", "flags.1?true"],
      ["test", "true", "flags.3?true"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _WebDocument_, "flags.0?WebDocument"],
      ["receipt_msg_id", "number", "flags.2?int"],
      ["currency", "string", "string"],
      ["total_amount", "bigint", "long"],
      ["start_param", "string", "string"],
      ["extended_media", _MessageExtendedMedia_, "flags.4?MessageExtendedMedia"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.shipping_address_requested ?? null, "true", "flags.1?true"],
      [this.test ?? null, "true", "flags.3?true"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo ?? null, _WebDocument_, "flags.0?WebDocument"],
      [this.receipt_msg_id ?? null, "number", "flags.2?int"],
      [this.currency, "string", "string"],
      [this.total_amount, "bigint", "long"],
      [this.start_param, "string", "string"],
      [this.extended_media ?? null, _MessageExtendedMedia_, "flags.4?MessageExtendedMedia"],
    ];
  }

  constructor(params: { shipping_address_requested?: true; test?: true; title: string; description: string; photo?: enums.WebDocument; receipt_msg_id?: number; currency: string; total_amount: bigint; start_param: string; extended_media?: enums.MessageExtendedMedia }) {
    super();
    this.shipping_address_requested = params.shipping_address_requested;
    this.test = params.test;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.receipt_msg_id = params.receipt_msg_id;
    this.currency = params.currency;
    this.total_amount = params.total_amount;
    this.start_param = params.start_param;
    this.extended_media = params.extended_media;
  }
}

/** Indicates a [live geolocation](https://core.telegram.org/api/live-location) */
export class MessageMediaGeoLive_ extends _MessageMedia_ {
  /** Geolocation */
  geo: enums.GeoPoint;
  /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360 */
  heading?: number;
  /** Validity period of provided geolocation */
  period: number;
  /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000). */
  proximity_notification_radius?: number;

  protected get [id](): number {
    return 0xB940C666;
  }

  static get [name](): string {
    return "messageMediaGeoLive"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["geo", _GeoPoint_, "GeoPoint"],
      ["heading", "number", "flags.0?int"],
      ["period", "number", "int"],
      ["proximity_notification_radius", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.geo, _GeoPoint_, "GeoPoint"],
      [this.heading ?? null, "number", "flags.0?int"],
      [this.period, "number", "int"],
      [this.proximity_notification_radius ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { geo: enums.GeoPoint; heading?: number; period: number; proximity_notification_radius?: number }) {
    super();
    this.geo = params.geo;
    this.heading = params.heading;
    this.period = params.period;
    this.proximity_notification_radius = params.proximity_notification_radius;
  }
}

/** Poll */
export class MessageMediaPoll_ extends _MessageMedia_ {
  /** The poll */
  poll: enums.Poll;
  /** The results of the poll */
  results: enums.PollResults;

  protected get [id](): number {
    return 0x4BD6E798;
  }

  static get [name](): string {
    return "messageMediaPoll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["poll", _Poll_, "Poll"],
      ["results", _PollResults_, "PollResults"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.poll, _Poll_, "Poll"],
      [this.results, _PollResults_, "PollResults"],
    ];
  }

  constructor(params: { poll: enums.Poll; results: enums.PollResults }) {
    super();
    this.poll = params.poll;
    this.results = params.results;
  }
}

/** [Dice-based animated sticker](https://core.telegram.org/api/dice) */
export class MessageMediaDice_ extends _MessageMedia_ {
  /** [Dice value](https://core.telegram.org/api/dice) */
  value: number;
  /** The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported */
  emoticon: string;

  protected get [id](): number {
    return 0x3F7EE58B;
  }

  static get [name](): string {
    return "messageMediaDice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["value", "number", "int"],
      ["emoticon", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.value, "number", "int"],
      [this.emoticon, "string", "string"],
    ];
  }

  constructor(params: { value: number; emoticon: string }) {
    super();
    this.value = params.value;
    this.emoticon = params.emoticon;
  }
}

/** Represents a forwarded [story](https://core.telegram.org/api/stories) or a story mention. */
export class MessageMediaStory_ extends _MessageMedia_ {
  /** If set, indicates that this someone has mentioned us in this story (i.e. by tagging us in the description) or vice versa, we have mentioned the other peer (if the message is outgoing). */
  via_mention?: true;
  /** Peer that posted the story. */
  peer: enums.Peer;
  /** Story ID */
  id: number;
  /** The story itself, if absent fetch it using [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) and the `peer`/`id` parameters specified above. */
  story?: enums.StoryItem;

  protected get [id](): number {
    return 0x68CB6283;
  }

  static get [name](): string {
    return "messageMediaStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["via_mention", "true", "flags.1?true"],
      ["peer", _Peer_, "Peer"],
      ["id", "number", "int"],
      ["story", _StoryItem_, "flags.0?StoryItem"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.via_mention ?? null, "true", "flags.1?true"],
      [this.peer, _Peer_, "Peer"],
      [this.id, "number", "int"],
      [this.story ?? null, _StoryItem_, "flags.0?StoryItem"],
    ];
  }

  constructor(params: { via_mention?: true; peer: enums.Peer; id: number; story?: enums.StoryItem }) {
    super();
    this.via_mention = params.via_mention;
    this.peer = params.peer;
    this.id = params.id;
    this.story = params.story;
  }
}

/** Contains info about a [giveaway, see here »](https://core.telegram.org/api/giveaways) for more info. */
export class MessageMediaGiveaway_ extends _MessageMedia_ {
  /** If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway. */
  only_new_subscribers?: true;
  /** If set, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel once the giveaway ends. */
  winners_are_visible?: true;
  /** The channels that the user must join to participate in the giveaway. */
  channels: Array<bigint>;
  /** If set, only users residing in these countries can participate in the giveaway, (specified as a list of two-letter ISO 3166-1 alpha-2 country codes); otherwise there are no country-based limitations. */
  countries_iso2?: Array<string>;
  /** Can contain a textual description of additional giveaway prizes. */
  prize_description?: string;
  /** Number of [Telegram Premium](https://core.telegram.org/api/premium) subscriptions given away. */
  quantity: number;
  /** Duration in months of each [Telegram Premium](https://core.telegram.org/api/premium) subscription in the giveaway. */
  months: number;
  /** The end date of the giveaway. */
  until_date: number;

  protected get [id](): number {
    return 0xDAAD85B0;
  }

  static get [name](): string {
    return "messageMediaGiveaway"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["only_new_subscribers", "true", "flags.0?true"],
      ["winners_are_visible", "true", "flags.2?true"],
      ["channels", ["bigint"], "Vector<long>"],
      ["countries_iso2", ["string"], "flags.1?Vector<string>"],
      ["prize_description", "string", "flags.3?string"],
      ["quantity", "number", "int"],
      ["months", "number", "int"],
      ["until_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.only_new_subscribers ?? null, "true", "flags.0?true"],
      [this.winners_are_visible ?? null, "true", "flags.2?true"],
      [this.channels, ["bigint"], "Vector<long>"],
      [this.countries_iso2 ?? null, ["string"], "flags.1?Vector<string>"],
      [this.prize_description ?? null, "string", "flags.3?string"],
      [this.quantity, "number", "int"],
      [this.months, "number", "int"],
      [this.until_date, "number", "int"],
    ];
  }

  constructor(params: { only_new_subscribers?: true; winners_are_visible?: true; channels: Array<bigint>; countries_iso2?: Array<string>; prize_description?: string; quantity: number; months: number; until_date: number }) {
    super();
    this.only_new_subscribers = params.only_new_subscribers;
    this.winners_are_visible = params.winners_are_visible;
    this.channels = params.channels;
    this.countries_iso2 = params.countries_iso2;
    this.prize_description = params.prize_description;
    this.quantity = params.quantity;
    this.months = params.months;
    this.until_date = params.until_date;
  }
}

/** A [giveaway](https://core.telegram.org/api/giveaways) with public winners has finished, this constructor contains info about the winners. */
export class MessageMediaGiveawayResults_ extends _MessageMedia_ {
  /** If set, only new subscribers starting from the giveaway creation date participated in the giveaway. */
  only_new_subscribers?: true;
  /** If set, the giveaway was canceled and was fully refunded. */
  refunded?: true;
  /** ID of the channel that was automatically [boosted](https://core.telegram.org/api/boost) by the winners of the giveaway for duration of the Premium subscription. */
  channel_id: bigint;
  /** Number of other channels that participated in the giveaway. */
  additional_peers_count?: number;
  /** Identifier of the message with the giveaway in `channel_id`. */
  launch_msg_id: number;
  /** Total number of winners in the giveaway. */
  winners_count: number;
  /** Number of not-yet-claimed prizes. */
  unclaimed_count: number;
  /** Up to 100 user identifiers of the winners of the giveaway. */
  winners: Array<bigint>;
  /** Duration in months of each [Telegram Premium](https://core.telegram.org/api/premium) subscription in the giveaway. */
  months: number;
  /** Can contain a textual description of additional giveaway prizes. */
  prize_description?: string;
  /** Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in initial parameters of the giveaway. */
  until_date: number;

  protected get [id](): number {
    return 0xC6991068;
  }

  static get [name](): string {
    return "messageMediaGiveawayResults"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["only_new_subscribers", "true", "flags.0?true"],
      ["refunded", "true", "flags.2?true"],
      ["channel_id", "bigint", "long"],
      ["additional_peers_count", "number", "flags.3?int"],
      ["launch_msg_id", "number", "int"],
      ["winners_count", "number", "int"],
      ["unclaimed_count", "number", "int"],
      ["winners", ["bigint"], "Vector<long>"],
      ["months", "number", "int"],
      ["prize_description", "string", "flags.1?string"],
      ["until_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.only_new_subscribers ?? null, "true", "flags.0?true"],
      [this.refunded ?? null, "true", "flags.2?true"],
      [this.channel_id, "bigint", "long"],
      [this.additional_peers_count ?? null, "number", "flags.3?int"],
      [this.launch_msg_id, "number", "int"],
      [this.winners_count, "number", "int"],
      [this.unclaimed_count, "number", "int"],
      [this.winners, ["bigint"], "Vector<long>"],
      [this.months, "number", "int"],
      [this.prize_description ?? null, "string", "flags.1?string"],
      [this.until_date, "number", "int"],
    ];
  }

  constructor(params: { only_new_subscribers?: true; refunded?: true; channel_id: bigint; additional_peers_count?: number; launch_msg_id: number; winners_count: number; unclaimed_count: number; winners: Array<bigint>; months: number; prize_description?: string; until_date: number }) {
    super();
    this.only_new_subscribers = params.only_new_subscribers;
    this.refunded = params.refunded;
    this.channel_id = params.channel_id;
    this.additional_peers_count = params.additional_peers_count;
    this.launch_msg_id = params.launch_msg_id;
    this.winners_count = params.winners_count;
    this.unclaimed_count = params.unclaimed_count;
    this.winners = params.winners;
    this.months = params.months;
    this.prize_description = params.prize_description;
    this.until_date = params.until_date;
  }
}

/** Empty constructor. */
export class MessageActionEmpty_ extends _MessageAction_ {
  protected get [id](): number {
    return 0xB6AEF7B0;
  }

  static get [name](): string {
    return "messageActionEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Group created */
export class MessageActionChatCreate_ extends _MessageAction_ {
  /** Group name */
  title: string;
  /** List of group members */
  users: Array<bigint>;

  protected get [id](): number {
    return 0xBD47CBAD;
  }

  static get [name](): string {
    return "messageActionChatCreate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
      ["users", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
      [this.users, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { title: string; users: Array<bigint> }) {
    super();
    this.title = params.title;
    this.users = params.users;
  }
}

/** Group name changed. */
export class MessageActionChatEditTitle_ extends _MessageAction_ {
  /** New group name */
  title: string;

  protected get [id](): number {
    return 0xB5A1CE5A;
  }

  static get [name](): string {
    return "messageActionChatEditTitle"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
    ];
  }

  constructor(params: { title: string }) {
    super();
    this.title = params.title;
  }
}

/** Group profile changed */
export class MessageActionChatEditPhoto_ extends _MessageAction_ {
  /** New group profile photo */
  photo: enums.Photo;

  protected get [id](): number {
    return 0x7FCB13A8;
  }

  static get [name](): string {
    return "messageActionChatEditPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["photo", _Photo_, "Photo"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.photo, _Photo_, "Photo"],
    ];
  }

  constructor(params: { photo: enums.Photo }) {
    super();
    this.photo = params.photo;
  }
}

/** Group profile photo removed. */
export class MessageActionChatDeletePhoto_ extends _MessageAction_ {
  protected get [id](): number {
    return 0x95E3FBEF;
  }

  static get [name](): string {
    return "messageActionChatDeletePhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** New member in the group */
export class MessageActionChatAddUser_ extends _MessageAction_ {
  /** Users that were invited to the chat */
  users: Array<bigint>;

  protected get [id](): number {
    return 0x15CEFD00;
  }

  static get [name](): string {
    return "messageActionChatAddUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["users", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.users, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { users: Array<bigint> }) {
    super();
    this.users = params.users;
  }
}

/** User left the group. */
export class MessageActionChatDeleteUser_ extends _MessageAction_ {
  /** Leaving user ID */
  user_id: bigint;

  protected get [id](): number {
    return 0xA43F30CC;
  }

  static get [name](): string {
    return "messageActionChatDeleteUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint }) {
    super();
    this.user_id = params.user_id;
  }
}

/** A user joined the chat via an invite link */
export class MessageActionChatJoinedByLink_ extends _MessageAction_ {
  /** ID of the user that created the invite link */
  inviter_id: bigint;

  protected get [id](): number {
    return 0x031224C3;
  }

  static get [name](): string {
    return "messageActionChatJoinedByLink"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["inviter_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.inviter_id, "bigint", "long"],
    ];
  }

  constructor(params: { inviter_id: bigint }) {
    super();
    this.inviter_id = params.inviter_id;
  }
}

/** The channel was created */
export class MessageActionChannelCreate_ extends _MessageAction_ {
  /** Original channel/supergroup title */
  title: string;

  protected get [id](): number {
    return 0x95D2AC92;
  }

  static get [name](): string {
    return "messageActionChannelCreate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
    ];
  }

  constructor(params: { title: string }) {
    super();
    this.title = params.title;
  }
}

/** Indicates the chat was [migrated](https://core.telegram.org/api/channel) to the specified supergroup */
export class MessageActionChatMigrateTo_ extends _MessageAction_ {
  /** The supergroup it was migrated to */
  channel_id: bigint;

  protected get [id](): number {
    return 0xE1037F92;
  }

  static get [name](): string {
    return "messageActionChatMigrateTo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
    ];
  }

  constructor(params: { channel_id: bigint }) {
    super();
    this.channel_id = params.channel_id;
  }
}

/** Indicates the channel was [migrated](https://core.telegram.org/api/channel) from the specified chat */
export class MessageActionChannelMigrateFrom_ extends _MessageAction_ {
  /** The old chat title */
  title: string;
  /** The old chat ID */
  chat_id: bigint;

  protected get [id](): number {
    return 0xEA3948E9;
  }

  static get [name](): string {
    return "messageActionChannelMigrateFrom"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
      ["chat_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
      [this.chat_id, "bigint", "long"],
    ];
  }

  constructor(params: { title: string; chat_id: bigint }) {
    super();
    this.title = params.title;
    this.chat_id = params.chat_id;
  }
}

/** A message was pinned */
export class MessageActionPinMessage_ extends _MessageAction_ {
  protected get [id](): number {
    return 0x94BD38ED;
  }

  static get [name](): string {
    return "messageActionPinMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Chat history was cleared */
export class MessageActionHistoryClear_ extends _MessageAction_ {
  protected get [id](): number {
    return 0x9FBAB604;
  }

  static get [name](): string {
    return "messageActionHistoryClear"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Someone scored in a game */
export class MessageActionGameScore_ extends _MessageAction_ {
  /** Game ID */
  game_id: bigint;
  /** Score */
  score: number;

  protected get [id](): number {
    return 0x92A72876;
  }

  static get [name](): string {
    return "messageActionGameScore"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["game_id", "bigint", "long"],
      ["score", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.game_id, "bigint", "long"],
      [this.score, "number", "int"],
    ];
  }

  constructor(params: { game_id: bigint; score: number }) {
    super();
    this.game_id = params.game_id;
    this.score = params.score;
  }
}

/** A user just sent a payment to me (a bot) */
export class MessageActionPaymentSentMe_ extends _MessageAction_ {
  /** Whether this is the first payment of a recurring payment we just subscribed to */
  recurring_init?: true;
  /** Whether this payment is part of a recurring payment */
  recurring_used?: true;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  total_amount: bigint;
  /** Bot specified invoice payload */
  payload: Uint8Array;
  /** Order info provided by the user */
  info?: enums.PaymentRequestedInfo;
  /** Identifier of the shipping option chosen by the user */
  shipping_option_id?: string;
  /** Provider payment identifier */
  charge: enums.PaymentCharge;

  protected get [id](): number {
    return 0x8F31B327;
  }

  static get [name](): string {
    return "messageActionPaymentSentMe"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["recurring_init", "true", "flags.2?true"],
      ["recurring_used", "true", "flags.3?true"],
      ["currency", "string", "string"],
      ["total_amount", "bigint", "long"],
      ["payload", Uint8Array, "bytes"],
      ["info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      ["shipping_option_id", "string", "flags.1?string"],
      ["charge", _PaymentCharge_, "PaymentCharge"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.recurring_init ?? null, "true", "flags.2?true"],
      [this.recurring_used ?? null, "true", "flags.3?true"],
      [this.currency, "string", "string"],
      [this.total_amount, "bigint", "long"],
      [this.payload, Uint8Array, "bytes"],
      [this.info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      [this.shipping_option_id ?? null, "string", "flags.1?string"],
      [this.charge, _PaymentCharge_, "PaymentCharge"],
    ];
  }

  constructor(params: { recurring_init?: true; recurring_used?: true; currency: string; total_amount: bigint; payload: Uint8Array; info?: enums.PaymentRequestedInfo; shipping_option_id?: string; charge: enums.PaymentCharge }) {
    super();
    this.recurring_init = params.recurring_init;
    this.recurring_used = params.recurring_used;
    this.currency = params.currency;
    this.total_amount = params.total_amount;
    this.payload = params.payload;
    this.info = params.info;
    this.shipping_option_id = params.shipping_option_id;
    this.charge = params.charge;
  }
}

/** A payment was sent */
export class MessageActionPaymentSent_ extends _MessageAction_ {
  /** Whether this is the first payment of a recurring payment we just subscribed to */
  recurring_init?: true;
  /** Whether this payment is part of a recurring payment */
  recurring_used?: true;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  total_amount: bigint;
  /** An invoice slug taken from an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or from the [`premium_invoice_slug` app config parameter »](https://core.telegram.org/api/config#premium-invoice-slug) */
  invoice_slug?: string;

  protected get [id](): number {
    return 0x96163F56;
  }

  static get [name](): string {
    return "messageActionPaymentSent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["recurring_init", "true", "flags.2?true"],
      ["recurring_used", "true", "flags.3?true"],
      ["currency", "string", "string"],
      ["total_amount", "bigint", "long"],
      ["invoice_slug", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.recurring_init ?? null, "true", "flags.2?true"],
      [this.recurring_used ?? null, "true", "flags.3?true"],
      [this.currency, "string", "string"],
      [this.total_amount, "bigint", "long"],
      [this.invoice_slug ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { recurring_init?: true; recurring_used?: true; currency: string; total_amount: bigint; invoice_slug?: string }) {
    super();
    this.recurring_init = params.recurring_init;
    this.recurring_used = params.recurring_used;
    this.currency = params.currency;
    this.total_amount = params.total_amount;
    this.invoice_slug = params.invoice_slug;
  }
}

/** A phone call */
export class MessageActionPhoneCall_ extends _MessageAction_ {
  /** Is this a video call? */
  video?: true;
  /** Call ID */
  call_id: bigint;
  /** If the call has ended, the reason why it ended */
  reason?: enums.PhoneCallDiscardReason;
  /** Duration of the call in seconds */
  duration?: number;

  protected get [id](): number {
    return 0x80E11A7F;
  }

  static get [name](): string {
    return "messageActionPhoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["video", "true", "flags.2?true"],
      ["call_id", "bigint", "long"],
      ["reason", _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
      ["duration", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.video ?? null, "true", "flags.2?true"],
      [this.call_id, "bigint", "long"],
      [this.reason ?? null, _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
      [this.duration ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { video?: true; call_id: bigint; reason?: enums.PhoneCallDiscardReason; duration?: number }) {
    super();
    this.video = params.video;
    this.call_id = params.call_id;
    this.reason = params.reason;
    this.duration = params.duration;
  }
}

/** A screenshot of the chat was taken */
export class MessageActionScreenshotTaken_ extends _MessageAction_ {
  protected get [id](): number {
    return 0x4792929B;
  }

  static get [name](): string {
    return "messageActionScreenshotTaken"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Custom action (most likely not supported by the current layer, an upgrade might be needed) */
export class MessageActionCustomAction_ extends _MessageAction_ {
  /** Action message */
  message: string;

  protected get [id](): number {
    return 0xFAE69F56;
  }

  static get [name](): string {
    return "messageActionCustomAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, "string", "string"],
    ];
  }

  constructor(params: { message: string }) {
    super();
    this.message = params.message;
  }
}

/** We have given the bot permission to send us direct messages. */
export class MessageActionBotAllowed_ extends _MessageAction_ {
  /** We have authorized the bot to send us messages by installing the bot's [attachment menu](https://core.telegram.org/api/bots/attach). */
  attach_menu?: true;
  /** We have allowed the bot to send us messages using [bots.allowSendMessage »](https://core.telegram.org/method/bots.allowSendMessage). */
  from_request?: true;
  /** We have authorized the bot to send us messages by logging into a website via [Telegram Login »](https://core.telegram.org/widgets/login); this field contains the domain name of the website on which the user has logged in. */
  domain?: string;
  /** We have authorized the bot to send us messages by opening the specified [bot mini app](https://core.telegram.org/api/bots/webapps). */
  app?: enums.BotApp;

  protected get [id](): number {
    return 0xC516D679;
  }

  static get [name](): string {
    return "messageActionBotAllowed"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["attach_menu", "true", "flags.1?true"],
      ["from_request", "true", "flags.3?true"],
      ["domain", "string", "flags.0?string"],
      ["app", _BotApp_, "flags.2?BotApp"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.attach_menu ?? null, "true", "flags.1?true"],
      [this.from_request ?? null, "true", "flags.3?true"],
      [this.domain ?? null, "string", "flags.0?string"],
      [this.app ?? null, _BotApp_, "flags.2?BotApp"],
    ];
  }

  constructor(params?: { attach_menu?: true; from_request?: true; domain?: string; app?: enums.BotApp }) {
    super();
    this.attach_menu = params?.attach_menu;
    this.from_request = params?.from_request;
    this.domain = params?.domain;
    this.app = params?.app;
  }
}

/** Secure [telegram passport](https://core.telegram.org/passport) values were received */
export class MessageActionSecureValuesSentMe_ extends _MessageAction_ {
  /** Vector with information about documents and other Telegram Passport elements that were shared with the bot */
  values: Array<enums.SecureValue>;
  /** Encrypted credentials required to decrypt the data */
  credentials: enums.SecureCredentialsEncrypted;

  protected get [id](): number {
    return 0x1B287353;
  }

  static get [name](): string {
    return "messageActionSecureValuesSentMe"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["values", [_SecureValue_], "Vector<SecureValue>"],
      ["credentials", _SecureCredentialsEncrypted_, "SecureCredentialsEncrypted"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.values, [_SecureValue_], "Vector<SecureValue>"],
      [this.credentials, _SecureCredentialsEncrypted_, "SecureCredentialsEncrypted"],
    ];
  }

  constructor(params: { values: Array<enums.SecureValue>; credentials: enums.SecureCredentialsEncrypted }) {
    super();
    this.values = params.values;
    this.credentials = params.credentials;
  }
}

/** Request for secure [telegram passport](https://core.telegram.org/passport) values was sent */
export class MessageActionSecureValuesSent_ extends _MessageAction_ {
  /** Secure value types */
  types: Array<enums.SecureValueType>;

  protected get [id](): number {
    return 0xD95C6154;
  }

  static get [name](): string {
    return "messageActionSecureValuesSent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["types", [_SecureValueType_], "Vector<SecureValueType>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.types, [_SecureValueType_], "Vector<SecureValueType>"],
    ];
  }

  constructor(params: { types: Array<enums.SecureValueType> }) {
    super();
    this.types = params.types;
  }
}

/** A contact just signed up to telegram */
export class MessageActionContactSignUp_ extends _MessageAction_ {
  protected get [id](): number {
    return 0xF3F25F76;
  }

  static get [name](): string {
    return "messageActionContactSignUp"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A user of the chat is now in proximity of another user */
export class MessageActionGeoProximityReached_ extends _MessageAction_ {
  /** The user or chat that is now in proximity of `to_id` */
  from_id: enums.Peer;
  /** The user or chat that subscribed to [live geolocation proximity alerts](https://core.telegram.org/api/live-location#proximity-alert) */
  to_id: enums.Peer;
  /** Distance, in meters (0-100000) */
  distance: number;

  protected get [id](): number {
    return 0x98E0D697;
  }

  static get [name](): string {
    return "messageActionGeoProximityReached"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["from_id", _Peer_, "Peer"],
      ["to_id", _Peer_, "Peer"],
      ["distance", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.from_id, _Peer_, "Peer"],
      [this.to_id, _Peer_, "Peer"],
      [this.distance, "number", "int"],
    ];
  }

  constructor(params: { from_id: enums.Peer; to_id: enums.Peer; distance: number }) {
    super();
    this.from_id = params.from_id;
    this.to_id = params.to_id;
    this.distance = params.distance;
  }
}

/** The group call has ended */
export class MessageActionGroupCall_ extends _MessageAction_ {
  /** Group call */
  call: enums.InputGroupCall;
  /** Group call duration */
  duration?: number;

  protected get [id](): number {
    return 0x7A0D7F42;
  }

  static get [name](): string {
    return "messageActionGroupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["call", _InputGroupCall_, "InputGroupCall"],
      ["duration", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.call, _InputGroupCall_, "InputGroupCall"],
      [this.duration ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall; duration?: number }) {
    super();
    this.call = params.call;
    this.duration = params.duration;
  }
}

/** A set of users was invited to the group call */
export class MessageActionInviteToGroupCall_ extends _MessageAction_ {
  /** The group call */
  call: enums.InputGroupCall;
  /** The invited users */
  users: Array<bigint>;

  protected get [id](): number {
    return 0x502F92F7;
  }

  static get [name](): string {
    return "messageActionInviteToGroupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["call", _InputGroupCall_, "InputGroupCall"],
      ["users", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.call, _InputGroupCall_, "InputGroupCall"],
      [this.users, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall; users: Array<bigint> }) {
    super();
    this.call = params.call;
    this.users = params.users;
  }
}

/** The Time-To-Live of messages in this chat was changed. */
export class MessageActionSetMessagesTTL_ extends _MessageAction_ {
  /** New Time-To-Live of all messages sent in this chat; if 0, autodeletion was disabled. */
  period: number;
  /** If set, the chat TTL setting was set not due to a manual change by one of participants, but automatically because one of the participants has the [default TTL settings enabled »](https://core.telegram.org/method/messages.setDefaultHistoryTTL). For example, when a user writes to us for the first time and we have set a default messages TTL of 1 week, this service message (with `auto_setting_from=our_userid`) will be emitted before our first message. */
  auto_setting_from?: bigint;

  protected get [id](): number {
    return 0x3C134D7B;
  }

  static get [name](): string {
    return "messageActionSetMessagesTTL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["period", "number", "int"],
      ["auto_setting_from", "bigint", "flags.0?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.period, "number", "int"],
      [this.auto_setting_from ?? null, "bigint", "flags.0?long"],
    ];
  }

  constructor(params: { period: number; auto_setting_from?: bigint }) {
    super();
    this.period = params.period;
    this.auto_setting_from = params.auto_setting_from;
  }
}

/** A group call was scheduled */
export class MessageActionGroupCallScheduled_ extends _MessageAction_ {
  /** The group call */
  call: enums.InputGroupCall;
  /** When is this group call scheduled to start */
  schedule_date: number;

  protected get [id](): number {
    return 0xB3A07661;
  }

  static get [name](): string {
    return "messageActionGroupCallScheduled"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["call", _InputGroupCall_, "InputGroupCall"],
      ["schedule_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.call, _InputGroupCall_, "InputGroupCall"],
      [this.schedule_date, "number", "int"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall; schedule_date: number }) {
    super();
    this.call = params.call;
    this.schedule_date = params.schedule_date;
  }
}

/** The chat theme was changed */
export class MessageActionSetChatTheme_ extends _MessageAction_ {
  /** The emoji that identifies a chat theme */
  emoticon: string;

  protected get [id](): number {
    return 0xAA786345;
  }

  static get [name](): string {
    return "messageActionSetChatTheme"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
    ];
  }

  constructor(params: { emoticon: string }) {
    super();
    this.emoticon = params.emoticon;
  }
}

/** A user was accepted into the group by an admin */
export class MessageActionChatJoinedByRequest_ extends _MessageAction_ {
  protected get [id](): number {
    return 0xEBBCA3CB;
  }

  static get [name](): string {
    return "messageActionChatJoinedByRequest"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) was relayed to the bot that owns it (bot side service message). */
export class MessageActionWebViewDataSentMe_ extends _MessageAction_ {
  /** Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app. */
  text: string;
  /** Relayed data. */
  data: string;

  protected get [id](): number {
    return 0x47DD8079;
  }

  static get [name](): string {
    return "messageActionWebViewDataSentMe"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["data", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.data, "string", "string"],
    ];
  }

  constructor(params: { text: string; data: string }) {
    super();
    this.text = params.text;
    this.data = params.data;
  }
}

/** Data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) was relayed to the bot that owns it (user side service message). */
export class MessageActionWebViewDataSent_ extends _MessageAction_ {
  /** Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app. */
  text: string;

  protected get [id](): number {
    return 0xB4C38CB5;
  }

  static get [name](): string {
    return "messageActionWebViewDataSent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** Info about a gifted Telegram Premium subscription */
export class MessageActionGiftPremium_ extends _MessageAction_ {
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Price of the gift in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;
  /** Duration of the gifted Telegram Premium subscription */
  months: number;
  /** If the gift was bought using a cryptocurrency, the cryptocurrency name. */
  crypto_currency?: string;
  /** If the gift was bought using a cryptocurrency, price of the gift in the smallest units of a cryptocurrency. */
  crypto_amount?: bigint;

  protected get [id](): number {
    return 0xC83D6AEC;
  }

  static get [name](): string {
    return "messageActionGiftPremium"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
      ["months", "number", "int"],
      ["crypto_currency", "string", "flags.0?string"],
      ["crypto_amount", "bigint", "flags.0?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
      [this.months, "number", "int"],
      [this.crypto_currency ?? null, "string", "flags.0?string"],
      [this.crypto_amount ?? null, "bigint", "flags.0?long"],
    ];
  }

  constructor(params: { currency: string; amount: bigint; months: number; crypto_currency?: string; crypto_amount?: bigint }) {
    super();
    this.currency = params.currency;
    this.amount = params.amount;
    this.months = params.months;
    this.crypto_currency = params.crypto_currency;
    this.crypto_amount = params.crypto_amount;
  }
}

/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was created. */
export class MessageActionTopicCreate_ extends _MessageAction_ {
  /** Topic name. */
  title: string;
  /** If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`. */
  icon_color: number;
  /** ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon. */
  icon_emoji_id?: bigint;

  protected get [id](): number {
    return 0x0D999256;
  }

  static get [name](): string {
    return "messageActionTopicCreate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["title", "string", "string"],
      ["icon_color", "number", "int"],
      ["icon_emoji_id", "bigint", "flags.0?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.title, "string", "string"],
      [this.icon_color, "number", "int"],
      [this.icon_emoji_id ?? null, "bigint", "flags.0?long"],
    ];
  }

  constructor(params: { title: string; icon_color: number; icon_emoji_id?: bigint }) {
    super();
    this.title = params.title;
    this.icon_color = params.icon_color;
    this.icon_emoji_id = params.icon_emoji_id;
  }
}

/** [Forum topic](https://core.telegram.org/api/forum#forum-topics) information was edited. */
export class MessageActionTopicEdit_ extends _MessageAction_ {
  /** New topic title. */
  title?: string;
  /** ID of the new [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon, or if it was removed. */
  icon_emoji_id?: bigint;
  /** Whether the topic was opened or closed. */
  closed?: boolean;
  /** Whether the topic was hidden or unhidden (only valid for the "General" topic, `id=1`). */
  hidden?: boolean;

  protected get [id](): number {
    return 0xC0944820;
  }

  static get [name](): string {
    return "messageActionTopicEdit"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["title", "string", "flags.0?string"],
      ["icon_emoji_id", "bigint", "flags.1?long"],
      ["closed", "boolean", "flags.2?Bool"],
      ["hidden", "boolean", "flags.3?Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.title ?? null, "string", "flags.0?string"],
      [this.icon_emoji_id ?? null, "bigint", "flags.1?long"],
      [this.closed ?? null, "boolean", "flags.2?Bool"],
      [this.hidden ?? null, "boolean", "flags.3?Bool"],
    ];
  }

  constructor(params?: { title?: string; icon_emoji_id?: bigint; closed?: boolean; hidden?: boolean }) {
    super();
    this.title = params?.title;
    this.icon_emoji_id = params?.icon_emoji_id;
    this.closed = params?.closed;
    this.hidden = params?.hidden;
  }
}

/** A new profile picture was suggested using [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto). */
export class MessageActionSuggestProfilePhoto_ extends _MessageAction_ {
  /** The photo that the user suggested we set as profile picture. */
  photo: enums.Photo;

  protected get [id](): number {
    return 0x57DE635E;
  }

  static get [name](): string {
    return "messageActionSuggestProfilePhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["photo", _Photo_, "Photo"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.photo, _Photo_, "Photo"],
    ];
  }

  constructor(params: { photo: enums.Photo }) {
    super();
    this.photo = params.photo;
  }
}

/** Contains info about one or more peers that the user shared with the bot after clicking on a [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) button. */
export class MessageActionRequestedPeer_ extends _MessageAction_ {
  /** `button_id` contained in the [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) */
  button_id: number;
  /** The shared peers */
  peers: Array<enums.Peer>;

  protected get [id](): number {
    return 0x31518E9B;
  }

  static get [name](): string {
    return "messageActionRequestedPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["button_id", "number", "int"],
      ["peers", [_Peer_], "Vector<Peer>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.button_id, "number", "int"],
      [this.peers, [_Peer_], "Vector<Peer>"],
    ];
  }

  constructor(params: { button_id: number; peers: Array<enums.Peer> }) {
    super();
    this.button_id = params.button_id;
    this.peers = params.peers;
  }
}

/** The [wallpaper »](https://core.telegram.org/api/wallpapers) of the current chat was changed. */
export class MessageActionSetChatWallPaper_ extends _MessageAction_ {
  /** If set, indicates the user applied a [wallpaper »](https://core.telegram.org/api/wallpapers) previously sent by the other user in a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) message. */
  same?: true;
  /** If set, indicates the wallpaper was forcefully applied for both sides, without explicit confirmation from the other side.  
  If the message is incoming, and we did not like the new wallpaper the other user has chosen for us, we can re-set our previous wallpaper just on our side, by invoking [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper), providing only the `revert` flag (and obviously the `peer` parameter). */
  for_both?: true;
  /** New [wallpaper](https://core.telegram.org/api/wallpapers) */
  wallpaper: enums.WallPaper;

  protected get [id](): number {
    return 0x5060A3F4;
  }

  static get [name](): string {
    return "messageActionSetChatWallPaper"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["same", "true", "flags.0?true"],
      ["for_both", "true", "flags.1?true"],
      ["wallpaper", _WallPaper_, "WallPaper"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.same ?? null, "true", "flags.0?true"],
      [this.for_both ?? null, "true", "flags.1?true"],
      [this.wallpaper, _WallPaper_, "WallPaper"],
    ];
  }

  constructor(params: { same?: true; for_both?: true; wallpaper: enums.WallPaper }) {
    super();
    this.same = params.same;
    this.for_both = params.for_both;
    this.wallpaper = params.wallpaper;
  }
}

/** Contains a [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links). */
export class MessageActionGiftCode_ extends _MessageAction_ {
  /** If set, this gift code was received from a [giveaway »](https://core.telegram.org/api/giveaways) started by a channel we're subscribed to. */
  via_giveaway?: true;
  /** If set, the link was not [redeemed](https://core.telegram.org/api/links#premium-giftcode-links) yet. */
  unclaimed?: true;
  /** Identifier of the channel that created the gift code [either directly or through a giveaway](https://core.telegram.org/api/giveaways): if we import this giftcode link, we will also automatically [boost](https://core.telegram.org/api/boost) this channel. */
  boost_peer?: enums.Peer;
  /** Duration in months of the gifted [Telegram Premium subscription](https://core.telegram.org/api/premium). */
  months: number;
  /** Slug of the [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links) */
  slug: string;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency?: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount?: bigint;
  /** If set, the gift was made using the specified cryptocurrency. */
  crypto_currency?: string;
  /** If `crypto_currency` is set, contains the paid amount, in the smallest units of the cryptocurrency. */
  crypto_amount?: bigint;

  protected get [id](): number {
    return 0x678C2E09;
  }

  static get [name](): string {
    return "messageActionGiftCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["via_giveaway", "true", "flags.0?true"],
      ["unclaimed", "true", "flags.2?true"],
      ["boost_peer", _Peer_, "flags.1?Peer"],
      ["months", "number", "int"],
      ["slug", "string", "string"],
      ["currency", "string", "flags.2?string"],
      ["amount", "bigint", "flags.2?long"],
      ["crypto_currency", "string", "flags.3?string"],
      ["crypto_amount", "bigint", "flags.3?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.via_giveaway ?? null, "true", "flags.0?true"],
      [this.unclaimed ?? null, "true", "flags.2?true"],
      [this.boost_peer ?? null, _Peer_, "flags.1?Peer"],
      [this.months, "number", "int"],
      [this.slug, "string", "string"],
      [this.currency ?? null, "string", "flags.2?string"],
      [this.amount ?? null, "bigint", "flags.2?long"],
      [this.crypto_currency ?? null, "string", "flags.3?string"],
      [this.crypto_amount ?? null, "bigint", "flags.3?long"],
    ];
  }

  constructor(params: { via_giveaway?: true; unclaimed?: true; boost_peer?: enums.Peer; months: number; slug: string; currency?: string; amount?: bigint; crypto_currency?: string; crypto_amount?: bigint }) {
    super();
    this.via_giveaway = params.via_giveaway;
    this.unclaimed = params.unclaimed;
    this.boost_peer = params.boost_peer;
    this.months = params.months;
    this.slug = params.slug;
    this.currency = params.currency;
    this.amount = params.amount;
    this.crypto_currency = params.crypto_currency;
    this.crypto_amount = params.crypto_amount;
  }
}

/** A [giveaway](https://core.telegram.org/api/giveaways) was started. */
export class MessageActionGiveawayLaunch_ extends _MessageAction_ {
  protected get [id](): number {
    return 0x332BA9ED;
  }

  static get [name](): string {
    return "messageActionGiveawayLaunch"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A [giveaway](https://core.telegram.org/api/giveaways) has ended. */
export class MessageActionGiveawayResults_ extends _MessageAction_ {
  /** Number of winners in the giveaway */
  winners_count: number;
  /** Number of undistributed prizes */
  unclaimed_count: number;

  protected get [id](): number {
    return 0x2A9FADC5;
  }

  static get [name](): string {
    return "messageActionGiveawayResults"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["winners_count", "number", "int"],
      ["unclaimed_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.winners_count, "number", "int"],
      [this.unclaimed_count, "number", "int"],
    ];
  }

  constructor(params: { winners_count: number; unclaimed_count: number }) {
    super();
    this.winners_count = params.winners_count;
    this.unclaimed_count = params.unclaimed_count;
  }
}

export class MessageActionBoostApply_ extends _MessageAction_ {
  boosts: number;

  protected get [id](): number {
    return 0xCC02AA6D;
  }

  static get [name](): string {
    return "messageActionBoostApply"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["boosts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.boosts, "number", "int"],
    ];
  }

  constructor(params: { boosts: number }) {
    super();
    this.boosts = params.boosts;
  }
}

/** Chat */
export class Dialog_ extends _Dialog_ {
  /** Is the dialog pinned */
  pinned?: true;
  /** Whether the chat was manually marked as unread */
  unread_mark?: true;
  /** Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a "View as messages" setting in the local client.  
  This setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of this flag. */
  view_forum_as_messages?: true;
  /** The chat */
  peer: enums.Peer;
  /** The latest message ID */
  top_message: number;
  /** Position up to which all incoming messages are read. */
  read_inbox_max_id: number;
  /** Position up to which all outgoing messages are read. */
  read_outbox_max_id: number;
  /** Number of unread messages */
  unread_count: number;
  /** Number of [unread mentions](https://core.telegram.org/api/mentions) */
  unread_mentions_count: number;
  /** Number of unread reactions to messages you sent */
  unread_reactions_count: number;
  /** Notification settings */
  notify_settings: enums.PeerNotifySettings;
  /** [PTS](https://core.telegram.org/api/updates) */
  pts?: number;
  /** Message [draft](https://core.telegram.org/api/drafts) */
  draft?: enums.DraftMessage;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** Time-to-live of all messages sent in this dialog */
  ttl_period?: number;

  protected get [id](): number {
    return 0xD58A08C6;
  }

  static get [name](): string {
    return "dialog"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.2?true"],
      ["unread_mark", "true", "flags.3?true"],
      ["view_forum_as_messages", "true", "flags.6?true"],
      ["peer", _Peer_, "Peer"],
      ["top_message", "number", "int"],
      ["read_inbox_max_id", "number", "int"],
      ["read_outbox_max_id", "number", "int"],
      ["unread_count", "number", "int"],
      ["unread_mentions_count", "number", "int"],
      ["unread_reactions_count", "number", "int"],
      ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
      ["pts", "number", "flags.0?int"],
      ["draft", _DraftMessage_, "flags.1?DraftMessage"],
      ["folder_id", "number", "flags.4?int"],
      ["ttl_period", "number", "flags.5?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.2?true"],
      [this.unread_mark ?? null, "true", "flags.3?true"],
      [this.view_forum_as_messages ?? null, "true", "flags.6?true"],
      [this.peer, _Peer_, "Peer"],
      [this.top_message, "number", "int"],
      [this.read_inbox_max_id, "number", "int"],
      [this.read_outbox_max_id, "number", "int"],
      [this.unread_count, "number", "int"],
      [this.unread_mentions_count, "number", "int"],
      [this.unread_reactions_count, "number", "int"],
      [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
      [this.pts ?? null, "number", "flags.0?int"],
      [this.draft ?? null, _DraftMessage_, "flags.1?DraftMessage"],
      [this.folder_id ?? null, "number", "flags.4?int"],
      [this.ttl_period ?? null, "number", "flags.5?int"],
    ];
  }

  constructor(params: { pinned?: true; unread_mark?: true; view_forum_as_messages?: true; peer: enums.Peer; top_message: number; read_inbox_max_id: number; read_outbox_max_id: number; unread_count: number; unread_mentions_count: number; unread_reactions_count: number; notify_settings: enums.PeerNotifySettings; pts?: number; draft?: enums.DraftMessage; folder_id?: number; ttl_period?: number }) {
    super();
    this.pinned = params.pinned;
    this.unread_mark = params.unread_mark;
    this.view_forum_as_messages = params.view_forum_as_messages;
    this.peer = params.peer;
    this.top_message = params.top_message;
    this.read_inbox_max_id = params.read_inbox_max_id;
    this.read_outbox_max_id = params.read_outbox_max_id;
    this.unread_count = params.unread_count;
    this.unread_mentions_count = params.unread_mentions_count;
    this.unread_reactions_count = params.unread_reactions_count;
    this.notify_settings = params.notify_settings;
    this.pts = params.pts;
    this.draft = params.draft;
    this.folder_id = params.folder_id;
    this.ttl_period = params.ttl_period;
  }
}

/** Dialog in folder */
export class DialogFolder_ extends _Dialog_ {
  /** Is this folder pinned */
  pinned?: true;
  /** The folder */
  folder: enums.Folder;
  /** Peer in folder */
  peer: enums.Peer;
  /** Latest message ID of dialog */
  top_message: number;
  /** Number of unread muted peers in folder */
  unread_muted_peers_count: number;
  /** Number of unread unmuted peers in folder */
  unread_unmuted_peers_count: number;
  /** Number of unread messages from muted peers in folder */
  unread_muted_messages_count: number;
  /** Number of unread messages from unmuted peers in folder */
  unread_unmuted_messages_count: number;

  protected get [id](): number {
    return 0x71BD134C;
  }

  static get [name](): string {
    return "dialogFolder"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.2?true"],
      ["folder", _Folder_, "Folder"],
      ["peer", _Peer_, "Peer"],
      ["top_message", "number", "int"],
      ["unread_muted_peers_count", "number", "int"],
      ["unread_unmuted_peers_count", "number", "int"],
      ["unread_muted_messages_count", "number", "int"],
      ["unread_unmuted_messages_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.2?true"],
      [this.folder, _Folder_, "Folder"],
      [this.peer, _Peer_, "Peer"],
      [this.top_message, "number", "int"],
      [this.unread_muted_peers_count, "number", "int"],
      [this.unread_unmuted_peers_count, "number", "int"],
      [this.unread_muted_messages_count, "number", "int"],
      [this.unread_unmuted_messages_count, "number", "int"],
    ];
  }

  constructor(params: { pinned?: true; folder: enums.Folder; peer: enums.Peer; top_message: number; unread_muted_peers_count: number; unread_unmuted_peers_count: number; unread_muted_messages_count: number; unread_unmuted_messages_count: number }) {
    super();
    this.pinned = params.pinned;
    this.folder = params.folder;
    this.peer = params.peer;
    this.top_message = params.top_message;
    this.unread_muted_peers_count = params.unread_muted_peers_count;
    this.unread_unmuted_peers_count = params.unread_unmuted_peers_count;
    this.unread_muted_messages_count = params.unread_muted_messages_count;
    this.unread_unmuted_messages_count = params.unread_unmuted_messages_count;
  }
}

/** Empty constructor, non-existent photo */
export class PhotoEmpty_ extends _Photo_ {
  /** Photo identifier */
  id: bigint;

  protected get [id](): number {
    return 0x2331B22D;
  }

  static get [name](): string {
    return "photoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Photo */
export class Photo_ extends _Photo_ {
  /** Whether the photo has mask stickers attached to it */
  has_stickers?: true;
  /** ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** [file reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;
  /** Date of upload */
  date: number;
  /** Available sizes for download */
  sizes: Array<enums.PhotoSize>;
  /** [For animated profiles](https://core.telegram.org/api/files#animated-profile-pictures), the MPEG4 videos */
  video_sizes?: Array<enums.VideoSize>;
  /** DC ID to use for download */
  dc_id: number;

  protected get [id](): number {
    return 0xFB197A65;
  }

  static get [name](): string {
    return "photo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_stickers", "true", "flags.0?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
      ["date", "number", "int"],
      ["sizes", [_PhotoSize_], "Vector<PhotoSize>"],
      ["video_sizes", [_VideoSize_], "flags.1?Vector<VideoSize>"],
      ["dc_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_stickers ?? null, "true", "flags.0?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
      [this.date, "number", "int"],
      [this.sizes, [_PhotoSize_], "Vector<PhotoSize>"],
      [this.video_sizes ?? null, [_VideoSize_], "flags.1?Vector<VideoSize>"],
      [this.dc_id, "number", "int"],
    ];
  }

  constructor(params: { has_stickers?: true; id: bigint; access_hash: bigint; file_reference: Uint8Array; date: number; sizes: Array<enums.PhotoSize>; video_sizes?: Array<enums.VideoSize>; dc_id: number }) {
    super();
    this.has_stickers = params.has_stickers;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
    this.date = params.date;
    this.sizes = params.sizes;
    this.video_sizes = params.video_sizes;
    this.dc_id = params.dc_id;
  }
}

/** Empty constructor. Image with this thumbnail is unavailable. */
export class PhotoSizeEmpty_ extends _PhotoSize_ {
  /** [Thumbnail type »](https://core.telegram.org/api/files#image-thumbnail-types) */
  type: string;

  protected get [id](): number {
    return 0x0E17E23C;
  }

  static get [name](): string {
    return "photoSizeEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, "string", "string"],
    ];
  }

  constructor(params: { type: string }) {
    super();
    this.type = params.type;
  }
}

/** Image description. */
export class PhotoSize_ extends _PhotoSize_ {
  /** [Thumbnail type »](https://core.telegram.org/api/files#image-thumbnail-types) */
  type: string;
  /** Image width */
  w: number;
  /** Image height */
  h: number;
  /** File size */
  size: number;

  protected get [id](): number {
    return 0x75C78E60;
  }

  static get [name](): string {
    return "photoSize"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", "string", "string"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["size", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, "string", "string"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.size, "number", "int"],
    ];
  }

  constructor(params: { type: string; w: number; h: number; size: number }) {
    super();
    this.type = params.type;
    this.w = params.w;
    this.h = params.h;
    this.size = params.size;
  }
}

/** Description of an image and its content. */
export class PhotoCachedSize_ extends _PhotoSize_ {
  /** Thumbnail type */
  type: string;
  /** Image width */
  w: number;
  /** Image height */
  h: number;
  /** Binary data, file content */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0x021E1AD6;
  }

  static get [name](): string {
    return "photoCachedSize"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", "string", "string"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, "string", "string"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { type: string; w: number; h: number; bytes: Uint8Array }) {
    super();
    this.type = params.type;
    this.w = params.w;
    this.h = params.h;
    this.bytes = params.bytes;
  }
}

/** A low-resolution compressed JPG payload */
export class PhotoStrippedSize_ extends _PhotoSize_ {
  /** Thumbnail type */
  type: string;
  /** Thumbnail data, see [here for more info on decompression »](https://core.telegram.org/api/files#stripped-thumbnails) */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0xE0B0BC2E;
  }

  static get [name](): string {
    return "photoStrippedSize"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", "string", "string"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, "string", "string"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { type: string; bytes: Uint8Array }) {
    super();
    this.type = params.type;
    this.bytes = params.bytes;
  }
}

/** Progressively encoded photosize */
export class PhotoSizeProgressive_ extends _PhotoSize_ {
  /** [Photosize type »](https://core.telegram.org/api/files#image-thumbnail-types) */
  type: string;
  /** Photo width */
  w: number;
  /** Photo height */
  h: number;
  /** Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image. */
  sizes: Array<number>;

  protected get [id](): number {
    return 0xFA3EFB95;
  }

  static get [name](): string {
    return "photoSizeProgressive"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", "string", "string"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["sizes", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, "string", "string"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.sizes, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { type: string; w: number; h: number; sizes: Array<number> }) {
    super();
    this.type = params.type;
    this.w = params.w;
    this.h = params.h;
    this.sizes = params.sizes;
  }
}

/** Messages with animated stickers can have a compressed svg (< 300 bytes) to show the outline of the sticker before fetching the actual lottie animation. */
export class PhotoPathSize_ extends _PhotoSize_ {
  /** Always `j` */
  type: string;
  /** Compressed SVG path payload, [see here for decompression instructions](https://core.telegram.org/api/files#vector-thumbnails) */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0xD8214D41;
  }

  static get [name](): string {
    return "photoPathSize"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", "string", "string"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, "string", "string"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { type: string; bytes: Uint8Array }) {
    super();
    this.type = params.type;
    this.bytes = params.bytes;
  }
}

/** Empty constructor. */
export class GeoPointEmpty_ extends _GeoPoint_ {
  protected get [id](): number {
    return 0x1117DD5F;
  }

  static get [name](): string {
    return "geoPointEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** GeoPoint. */
export class GeoPoint_ extends _GeoPoint_ {
  /** Longitude */
  long: number;
  /** Latitude */
  lat: number;
  /** Access hash */
  access_hash: bigint;
  /** The estimated horizontal accuracy of the location, in meters; as defined by the sender. */
  accuracy_radius?: number;

  protected get [id](): number {
    return 0xB2A2F663;
  }

  static get [name](): string {
    return "geoPoint"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["long", "number", "double"],
      ["lat", "number", "double"],
      ["access_hash", "bigint", "long"],
      ["accuracy_radius", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.long, "number", "double"],
      [this.lat, "number", "double"],
      [this.access_hash, "bigint", "long"],
      [this.accuracy_radius ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { long: number; lat: number; access_hash: bigint; accuracy_radius?: number }) {
    super();
    this.long = params.long;
    this.lat = params.lat;
    this.access_hash = params.access_hash;
    this.accuracy_radius = params.accuracy_radius;
  }
}

/** Contains info about a sent verification code. */
export class auth_SentCode_ extends _auth_SentCode_ {
  /** Phone code type */
  type: enums.auth.SentCodeType;
  /** Phone code hash, to be stored and later re-used with [auth.signIn](https://core.telegram.org/method/auth.signIn) */
  phone_code_hash: string;
  /** Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](https://core.telegram.org/method/auth.resendCode) */
  next_type?: enums.auth.CodeType;
  /** Timeout for reception of the phone code */
  timeout?: number;

  protected get [id](): number {
    return 0x5E002502;
  }

  static get [name](): string {
    return "auth.sentCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["type", _auth_SentCodeType_, "auth.SentCodeType"],
      ["phone_code_hash", "string", "string"],
      ["next_type", _auth_CodeType_, "flags.1?auth.CodeType"],
      ["timeout", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.type, _auth_SentCodeType_, "auth.SentCodeType"],
      [this.phone_code_hash, "string", "string"],
      [this.next_type ?? null, _auth_CodeType_, "flags.1?auth.CodeType"],
      [this.timeout ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params: { type: enums.auth.SentCodeType; phone_code_hash: string; next_type?: enums.auth.CodeType; timeout?: number }) {
    super();
    this.type = params.type;
    this.phone_code_hash = params.phone_code_hash;
    this.next_type = params.next_type;
    this.timeout = params.timeout;
  }
}

/** The user successfully authorized using [future auth tokens](https://core.telegram.org/api/auth#future-auth-tokens) */
export class auth_SentCodeSuccess_ extends _auth_SentCode_ {
  /** Authorization info */
  authorization: enums.auth.Authorization;

  protected get [id](): number {
    return 0x2390FE44;
  }

  static get [name](): string {
    return "auth.sentCodeSuccess"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["authorization", _auth_Authorization_, "auth.Authorization"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.authorization, _auth_Authorization_, "auth.Authorization"],
    ];
  }

  constructor(params: { authorization: enums.auth.Authorization }) {
    super();
    this.authorization = params.authorization;
  }
}

/** Contains user authorization info. */
export class auth_Authorization_ extends _auth_Authorization_ {
  /** Suggests the user to set up a 2-step verification password to be able to log in again */
  setup_password_required?: true;
  /** Iff setup\_password\_required is set and the user declines to set a 2-step verification password, they will be able to log into their account via SMS again only after this many days pass. */
  otherwise_relogin_days?: number;
  /** Temporary [passport](https://core.telegram.org/passport) sessions */
  tmp_sessions?: number;
  /** A [future auth token](https://core.telegram.org/api/auth#future-auth-tokens) */
  future_auth_token?: Uint8Array;
  /** Info on authorized user */
  user: enums.User;

  protected get [id](): number {
    return 0x2EA2C0D4;
  }

  static get [name](): string {
    return "auth.authorization"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["setup_password_required", "true", "flags.1?true"],
      ["otherwise_relogin_days", "number", "flags.1?int"],
      ["tmp_sessions", "number", "flags.0?int"],
      ["future_auth_token", Uint8Array, "flags.2?bytes"],
      ["user", _User_, "User"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.setup_password_required ?? null, "true", "flags.1?true"],
      [this.otherwise_relogin_days ?? null, "number", "flags.1?int"],
      [this.tmp_sessions ?? null, "number", "flags.0?int"],
      [this.future_auth_token ?? null, Uint8Array, "flags.2?bytes"],
      [this.user, _User_, "User"],
    ];
  }

  constructor(params: { setup_password_required?: true; otherwise_relogin_days?: number; tmp_sessions?: number; future_auth_token?: Uint8Array; user: enums.User }) {
    super();
    this.setup_password_required = params.setup_password_required;
    this.otherwise_relogin_days = params.otherwise_relogin_days;
    this.tmp_sessions = params.tmp_sessions;
    this.future_auth_token = params.future_auth_token;
    this.user = params.user;
  }
}

/** An account with this phone number doesn't exist on telegram: the user has to [enter basic information and sign up](https://core.telegram.org/api/auth) */
export class auth_AuthorizationSignUpRequired_ extends _auth_Authorization_ {
  /** Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram */
  terms_of_service?: enums.help.TermsOfService;

  protected get [id](): number {
    return 0x44747E9A;
  }

  static get [name](): string {
    return "auth.authorizationSignUpRequired"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["terms_of_service", _help_TermsOfService_, "flags.0?help.TermsOfService"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.terms_of_service ?? null, _help_TermsOfService_, "flags.0?help.TermsOfService"],
    ];
  }

  constructor(params?: { terms_of_service?: enums.help.TermsOfService }) {
    super();
    this.terms_of_service = params?.terms_of_service;
  }
}

/** Data for copying of authorization between data centers. */
export class auth_ExportedAuthorization_ extends _auth_ExportedAuthorization_ {
  /** current user identifier */
  id: bigint;
  /** authorizes key */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0xB434E2B8;
  }

  static get [name](): string {
    return "auth.exportedAuthorization"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { id: bigint; bytes: Uint8Array }) {
    super();
    this.id = params.id;
    this.bytes = params.bytes;
  }
}

/** Notifications generated by a certain user or group. */
export class InputNotifyPeer_ extends _InputNotifyPeer_ {
  /** User or group */
  peer: enums.InputPeer;

  protected get [id](): number {
    return 0xB8BC5B0C;
  }

  static get [name](): string {
    return "inputNotifyPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
    ];
  }

  constructor(params: { peer: enums.InputPeer }) {
    super();
    this.peer = params.peer;
  }
}

/** Notifications generated by all users. */
export class InputNotifyUsers_ extends _InputNotifyPeer_ {
  protected get [id](): number {
    return 0x193B4417;
  }

  static get [name](): string {
    return "inputNotifyUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Notifications generated by all groups. */
export class InputNotifyChats_ extends _InputNotifyPeer_ {
  protected get [id](): number {
    return 0x4A95E84E;
  }

  static get [name](): string {
    return "inputNotifyChats"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** All [channels](https://core.telegram.org/api/channel) */
export class InputNotifyBroadcasts_ extends _InputNotifyPeer_ {
  protected get [id](): number {
    return 0xB1DB7C7E;
  }

  static get [name](): string {
    return "inputNotifyBroadcasts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Notifications generated by a [topic](https://core.telegram.org/api/forum#forum-topics) in a [forum](https://core.telegram.org/api/forum). */
export class InputNotifyForumTopic_ extends _InputNotifyPeer_ {
  /** Forum ID */
  peer: enums.InputPeer;
  /** [Topic ID](https://core.telegram.org/api/forum#forum-topics) */
  top_msg_id: number;

  protected get [id](): number {
    return 0x5C467992;
  }

  static get [name](): string {
    return "inputNotifyForumTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["top_msg_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.top_msg_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; top_msg_id: number }) {
    super();
    this.peer = params.peer;
    this.top_msg_id = params.top_msg_id;
  }
}

/** Notification settings. */
export class InputPeerNotifySettings_ extends _InputPeerNotifySettings_ {
  /** If the text of the message shall be displayed in notification */
  show_previews?: boolean;
  /** Peer was muted? */
  silent?: boolean;
  /** Date until which all notifications shall be switched off */
  mute_until?: number;
  /** Identifier of an audio file to play for notifications. */
  sound?: enums.NotificationSound;
  /** Whether story notifications should be disabled. */
  stories_muted?: boolean;
  /** Whether the sender name should be displayed in story notifications. */
  stories_hide_sender?: boolean;
  /** Identifier of an audio file to play for story notifications. */
  stories_sound?: enums.NotificationSound;

  protected get [id](): number {
    return 0xCACB6AE2;
  }

  static get [name](): string {
    return "inputPeerNotifySettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["show_previews", "boolean", "flags.0?Bool"],
      ["silent", "boolean", "flags.1?Bool"],
      ["mute_until", "number", "flags.2?int"],
      ["sound", _NotificationSound_, "flags.3?NotificationSound"],
      ["stories_muted", "boolean", "flags.6?Bool"],
      ["stories_hide_sender", "boolean", "flags.7?Bool"],
      ["stories_sound", _NotificationSound_, "flags.8?NotificationSound"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.show_previews ?? null, "boolean", "flags.0?Bool"],
      [this.silent ?? null, "boolean", "flags.1?Bool"],
      [this.mute_until ?? null, "number", "flags.2?int"],
      [this.sound ?? null, _NotificationSound_, "flags.3?NotificationSound"],
      [this.stories_muted ?? null, "boolean", "flags.6?Bool"],
      [this.stories_hide_sender ?? null, "boolean", "flags.7?Bool"],
      [this.stories_sound ?? null, _NotificationSound_, "flags.8?NotificationSound"],
    ];
  }

  constructor(params?: { show_previews?: boolean; silent?: boolean; mute_until?: number; sound?: enums.NotificationSound; stories_muted?: boolean; stories_hide_sender?: boolean; stories_sound?: enums.NotificationSound }) {
    super();
    this.show_previews = params?.show_previews;
    this.silent = params?.silent;
    this.mute_until = params?.mute_until;
    this.sound = params?.sound;
    this.stories_muted = params?.stories_muted;
    this.stories_hide_sender = params?.stories_hide_sender;
    this.stories_sound = params?.stories_sound;
  }
}

/** Notification settings. */
export class PeerNotifySettings_ extends _PeerNotifySettings_ {
  /** (Ternary value) If set, indicates whether or not to display previews of messages in notifications; otherwise the default behavior should be used. */
  show_previews?: boolean;
  /** (Ternary value) If set, indicates whether to mute or unmute the peer; otherwise the default behavior should be used. */
  silent?: boolean;
  /** Mute all notifications until this date */
  mute_until?: number;
  /** Notification sound for the official iOS application */
  ios_sound?: enums.NotificationSound;
  /** Notification sound for the official android application */
  android_sound?: enums.NotificationSound;
  /** Notification sound for other applications */
  other_sound?: enums.NotificationSound;
  /** Whether story notifications should be disabled. */
  stories_muted?: boolean;
  /** Whether the sender name should be displayed in story notifications. */
  stories_hide_sender?: boolean;
  /** Sound for story notifications on the official iOS application */
  stories_ios_sound?: enums.NotificationSound;
  /** Sound for story notifications on the official Android application */
  stories_android_sound?: enums.NotificationSound;
  /** Sound for story notifications on other applications */
  stories_other_sound?: enums.NotificationSound;

  protected get [id](): number {
    return 0x99622C0C;
  }

  static get [name](): string {
    return "peerNotifySettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["show_previews", "boolean", "flags.0?Bool"],
      ["silent", "boolean", "flags.1?Bool"],
      ["mute_until", "number", "flags.2?int"],
      ["ios_sound", _NotificationSound_, "flags.3?NotificationSound"],
      ["android_sound", _NotificationSound_, "flags.4?NotificationSound"],
      ["other_sound", _NotificationSound_, "flags.5?NotificationSound"],
      ["stories_muted", "boolean", "flags.6?Bool"],
      ["stories_hide_sender", "boolean", "flags.7?Bool"],
      ["stories_ios_sound", _NotificationSound_, "flags.8?NotificationSound"],
      ["stories_android_sound", _NotificationSound_, "flags.9?NotificationSound"],
      ["stories_other_sound", _NotificationSound_, "flags.10?NotificationSound"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.show_previews ?? null, "boolean", "flags.0?Bool"],
      [this.silent ?? null, "boolean", "flags.1?Bool"],
      [this.mute_until ?? null, "number", "flags.2?int"],
      [this.ios_sound ?? null, _NotificationSound_, "flags.3?NotificationSound"],
      [this.android_sound ?? null, _NotificationSound_, "flags.4?NotificationSound"],
      [this.other_sound ?? null, _NotificationSound_, "flags.5?NotificationSound"],
      [this.stories_muted ?? null, "boolean", "flags.6?Bool"],
      [this.stories_hide_sender ?? null, "boolean", "flags.7?Bool"],
      [this.stories_ios_sound ?? null, _NotificationSound_, "flags.8?NotificationSound"],
      [this.stories_android_sound ?? null, _NotificationSound_, "flags.9?NotificationSound"],
      [this.stories_other_sound ?? null, _NotificationSound_, "flags.10?NotificationSound"],
    ];
  }

  constructor(params?: { show_previews?: boolean; silent?: boolean; mute_until?: number; ios_sound?: enums.NotificationSound; android_sound?: enums.NotificationSound; other_sound?: enums.NotificationSound; stories_muted?: boolean; stories_hide_sender?: boolean; stories_ios_sound?: enums.NotificationSound; stories_android_sound?: enums.NotificationSound; stories_other_sound?: enums.NotificationSound }) {
    super();
    this.show_previews = params?.show_previews;
    this.silent = params?.silent;
    this.mute_until = params?.mute_until;
    this.ios_sound = params?.ios_sound;
    this.android_sound = params?.android_sound;
    this.other_sound = params?.other_sound;
    this.stories_muted = params?.stories_muted;
    this.stories_hide_sender = params?.stories_hide_sender;
    this.stories_ios_sound = params?.stories_ios_sound;
    this.stories_android_sound = params?.stories_android_sound;
    this.stories_other_sound = params?.stories_other_sound;
  }
}

/** List of actions that are possible when interacting with this user, to be shown as suggested actions in the [chat action bar »](https://core.telegram.org/api/action-bar), see [here »](https://core.telegram.org/api/action-bar) for more info. */
export class PeerSettings_ extends _PeerSettings_ {
  /** Whether we can still report the user for spam */
  report_spam?: true;
  /** Whether we can add the user as contact */
  add_contact?: true;
  /** Whether we can block the user */
  block_contact?: true;
  /** Whether we can share the user's contact */
  share_contact?: true;
  /** Whether a special exception for contacts is needed */
  need_contacts_exception?: true;
  /** Whether we can report a geogroup as irrelevant for this location */
  report_geo?: true;
  /** Whether this peer was automatically archived according to [privacy settings](https://core.telegram.org/constructor/globalPrivacySettings) and can be unarchived */
  autoarchived?: true;
  /** If set, this is a recently created group chat to which new members can be invited */
  invite_members?: true;
  /** This flag is set if `request_chat_title` and `request_chat_date` fields are set and the [join request »](https://core.telegram.org/api/invites#join-requests) is related to a channel (otherwise if only the request fields are set, the [join request »](https://core.telegram.org/api/invites#join-requests) is related to a chat). */
  request_chat_broadcast?: true;
  /** Distance in meters between us and this peer */
  geo_distance?: number;
  /** If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title. */
  request_chat_title?: string;
  /** If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the [join request »](https://core.telegram.org/api/invites#join-requests) was sent. */
  request_chat_date?: number;

  protected get [id](): number {
    return 0xA518110D;
  }

  static get [name](): string {
    return "peerSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["report_spam", "true", "flags.0?true"],
      ["add_contact", "true", "flags.1?true"],
      ["block_contact", "true", "flags.2?true"],
      ["share_contact", "true", "flags.3?true"],
      ["need_contacts_exception", "true", "flags.4?true"],
      ["report_geo", "true", "flags.5?true"],
      ["autoarchived", "true", "flags.7?true"],
      ["invite_members", "true", "flags.8?true"],
      ["request_chat_broadcast", "true", "flags.10?true"],
      ["geo_distance", "number", "flags.6?int"],
      ["request_chat_title", "string", "flags.9?string"],
      ["request_chat_date", "number", "flags.9?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.report_spam ?? null, "true", "flags.0?true"],
      [this.add_contact ?? null, "true", "flags.1?true"],
      [this.block_contact ?? null, "true", "flags.2?true"],
      [this.share_contact ?? null, "true", "flags.3?true"],
      [this.need_contacts_exception ?? null, "true", "flags.4?true"],
      [this.report_geo ?? null, "true", "flags.5?true"],
      [this.autoarchived ?? null, "true", "flags.7?true"],
      [this.invite_members ?? null, "true", "flags.8?true"],
      [this.request_chat_broadcast ?? null, "true", "flags.10?true"],
      [this.geo_distance ?? null, "number", "flags.6?int"],
      [this.request_chat_title ?? null, "string", "flags.9?string"],
      [this.request_chat_date ?? null, "number", "flags.9?int"],
    ];
  }

  constructor(params?: { report_spam?: true; add_contact?: true; block_contact?: true; share_contact?: true; need_contacts_exception?: true; report_geo?: true; autoarchived?: true; invite_members?: true; request_chat_broadcast?: true; geo_distance?: number; request_chat_title?: string; request_chat_date?: number }) {
    super();
    this.report_spam = params?.report_spam;
    this.add_contact = params?.add_contact;
    this.block_contact = params?.block_contact;
    this.share_contact = params?.share_contact;
    this.need_contacts_exception = params?.need_contacts_exception;
    this.report_geo = params?.report_geo;
    this.autoarchived = params?.autoarchived;
    this.invite_members = params?.invite_members;
    this.request_chat_broadcast = params?.request_chat_broadcast;
    this.geo_distance = params?.geo_distance;
    this.request_chat_title = params?.request_chat_title;
    this.request_chat_date = params?.request_chat_date;
  }
}

/** Represents a [wallpaper](https://core.telegram.org/api/wallpapers) based on an image. */
export class WallPaper_ extends _WallPaper_ {
  /** Identifier */
  id: bigint;
  /** Whether we created this wallpaper */
  creator?: true;
  /** Whether this is the default wallpaper */
  default?: true;
  /** Whether this is a [pattern wallpaper »](https://core.telegram.org/api/wallpapers#pattern-wallpapers) */
  pattern?: true;
  /** Whether this wallpaper should be used in dark mode. */
  dark?: true;
  /** Access hash */
  access_hash: bigint;
  /** Unique wallpaper ID, used when generating [wallpaper links](https://core.telegram.org/api/links#wallpaper-links) or [importing wallpaper links](https://core.telegram.org/api/wallpapers). */
  slug: string;
  /** The actual wallpaper */
  document: enums.Document;
  /** Info on how to generate the wallpaper, according to [these instructions »](https://core.telegram.org/api/wallpapers). */
  settings?: enums.WallPaperSettings;

  protected get [id](): number {
    return 0xA437C3ED;
  }

  static get [name](): string {
    return "wallPaper"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["flags", flags, "#"],
      ["creator", "true", "flags.0?true"],
      ["default", "true", "flags.1?true"],
      ["pattern", "true", "flags.3?true"],
      ["dark", "true", "flags.4?true"],
      ["access_hash", "bigint", "long"],
      ["slug", "string", "string"],
      ["document", _Document_, "Document"],
      ["settings", _WallPaperSettings_, "flags.2?WallPaperSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      ["flags", flags, "#"],
      [this.creator ?? null, "true", "flags.0?true"],
      [this.default ?? null, "true", "flags.1?true"],
      [this.pattern ?? null, "true", "flags.3?true"],
      [this.dark ?? null, "true", "flags.4?true"],
      [this.access_hash, "bigint", "long"],
      [this.slug, "string", "string"],
      [this.document, _Document_, "Document"],
      [this.settings ?? null, _WallPaperSettings_, "flags.2?WallPaperSettings"],
    ];
  }

  constructor(params: { id: bigint; creator?: true; default?: true; pattern?: true; dark?: true; access_hash: bigint; slug: string; document: enums.Document; settings?: enums.WallPaperSettings }) {
    super();
    this.id = params.id;
    this.creator = params.creator;
    this.default = params.default;
    this.pattern = params.pattern;
    this.dark = params.dark;
    this.access_hash = params.access_hash;
    this.slug = params.slug;
    this.document = params.document;
    this.settings = params.settings;
  }
}

/** Represents a [wallpaper](https://core.telegram.org/api/wallpapers) only based on colors/gradients. */
export class WallPaperNoFile_ extends _WallPaper_ {
  /** Wallpaper ID */
  id: bigint;
  /** Whether this is the default wallpaper */
  default?: true;
  /** Whether this wallpaper should be used in dark mode. */
  dark?: true;
  /** Info on how to generate the wallpaper. */
  settings?: enums.WallPaperSettings;

  protected get [id](): number {
    return 0xE0804116;
  }

  static get [name](): string {
    return "wallPaperNoFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["flags", flags, "#"],
      ["default", "true", "flags.1?true"],
      ["dark", "true", "flags.4?true"],
      ["settings", _WallPaperSettings_, "flags.2?WallPaperSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      ["flags", flags, "#"],
      [this.default ?? null, "true", "flags.1?true"],
      [this.dark ?? null, "true", "flags.4?true"],
      [this.settings ?? null, _WallPaperSettings_, "flags.2?WallPaperSettings"],
    ];
  }

  constructor(params: { id: bigint; default?: true; dark?: true; settings?: enums.WallPaperSettings }) {
    super();
    this.id = params.id;
    this.default = params.default;
    this.dark = params.dark;
    this.settings = params.settings;
  }
}

/** Report for spam */
export class InputReportReasonSpam_ extends _ReportReason_ {
  protected get [id](): number {
    return 0x58DBCAB8;
  }

  static get [name](): string {
    return "inputReportReasonSpam"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for violence */
export class InputReportReasonViolence_ extends _ReportReason_ {
  protected get [id](): number {
    return 0x1E22C78D;
  }

  static get [name](): string {
    return "inputReportReasonViolence"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for pornography */
export class InputReportReasonPornography_ extends _ReportReason_ {
  protected get [id](): number {
    return 0x2E59D922;
  }

  static get [name](): string {
    return "inputReportReasonPornography"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for child abuse */
export class InputReportReasonChildAbuse_ extends _ReportReason_ {
  protected get [id](): number {
    return 0xADF44EE3;
  }

  static get [name](): string {
    return "inputReportReasonChildAbuse"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Other */
export class InputReportReasonOther_ extends _ReportReason_ {
  protected get [id](): number {
    return 0xC1E4A2B1;
  }

  static get [name](): string {
    return "inputReportReasonOther"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for copyrighted content */
export class InputReportReasonCopyright_ extends _ReportReason_ {
  protected get [id](): number {
    return 0x9B89F93A;
  }

  static get [name](): string {
    return "inputReportReasonCopyright"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report an irrelevant geogroup */
export class InputReportReasonGeoIrrelevant_ extends _ReportReason_ {
  protected get [id](): number {
    return 0xDBD4FEED;
  }

  static get [name](): string {
    return "inputReportReasonGeoIrrelevant"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for impersonation */
export class InputReportReasonFake_ extends _ReportReason_ {
  protected get [id](): number {
    return 0xF5DDD6E7;
  }

  static get [name](): string {
    return "inputReportReasonFake"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for illegal drugs */
export class InputReportReasonIllegalDrugs_ extends _ReportReason_ {
  protected get [id](): number {
    return 0x0A8EB2BE;
  }

  static get [name](): string {
    return "inputReportReasonIllegalDrugs"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Report for divulgation of personal details */
export class InputReportReasonPersonalDetails_ extends _ReportReason_ {
  protected get [id](): number {
    return 0x9EC7863D;
  }

  static get [name](): string {
    return "inputReportReasonPersonalDetails"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Extended user info */
export class UserFull_ extends _UserFull_ {
  /** Whether you have blocked this user */
  blocked?: true;
  /** Whether this user can make VoIP calls */
  phone_calls_available?: true;
  /** Whether this user's privacy settings allow you to call them */
  phone_calls_private?: true;
  /** Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself */
  can_pin_message?: true;
  /** Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available */
  has_scheduled?: true;
  /** Whether the user can receive video calls */
  video_calls_available?: true;
  /** Whether this user doesn't allow sending voice messages in a private chat with them */
  voice_messages_forbidden?: true;
  /** Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden. */
  translations_disabled?: true;
  /** Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories). */
  stories_pinned_available?: true;
  /** Whether we've [blocked this user, preventing them from seeing our stories »](https://core.telegram.org/api/block). */
  blocked_my_stories_from?: true;
  /** Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the `for_both` flag, see [here »](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info. */
  wallpaper_overridden?: true;
  contact_require_premium?: true;
  read_dates_private?: true;
  /** User ID */
  id: bigint;
  /** Bio of the user */
  about?: string;
  /** Peer settings */
  settings: enums.PeerSettings;
  /** Personal profile photo, to be shown instead of `profile_photo`. */
  personal_photo?: enums.Photo;
  /** Profile photo */
  profile_photo?: enums.Photo;
  /** Fallback profile photo, displayed if no photo is present in `profile_photo` or `personal_photo`, due to privacy settings. */
  fallback_photo?: enums.Photo;
  /** Notification settings */
  notify_settings: enums.PeerNotifySettings;
  /** For bots, info about the bot (bot commands, etc) */
  bot_info?: enums.BotInfo;
  /** Message ID of the last [pinned message](https://core.telegram.org/api/pin) */
  pinned_msg_id?: number;
  /** Chats in common with this user */
  common_chats_count: number;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted. */
  ttl_period?: number;
  /** Emoji associated with chat theme */
  theme_emoticon?: string;
  /** Anonymized text to be shown instead of the user's name on forwarded messages */
  private_forward_name?: string;
  /** A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a group, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights). */
  bot_group_admin_rights?: enums.ChatAdminRights;
  /** A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a channel, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights). */
  bot_broadcast_admin_rights?: enums.ChatAdminRights;
  /** Telegram Premium subscriptions gift options */
  premium_gifts?: Array<enums.PremiumGiftOption>;
  /** [Wallpaper](https://core.telegram.org/api/wallpapers) to use in the private chat with the user. */
  wallpaper?: enums.WallPaper;
  /** Active [stories »](https://core.telegram.org/api/stories) */
  stories?: enums.PeerStories;

  protected get [id](): number {
    return 0xB9B12C6C;
  }

  static get [name](): string {
    return "userFull"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["blocked", "true", "flags.0?true"],
      ["phone_calls_available", "true", "flags.4?true"],
      ["phone_calls_private", "true", "flags.5?true"],
      ["can_pin_message", "true", "flags.7?true"],
      ["has_scheduled", "true", "flags.12?true"],
      ["video_calls_available", "true", "flags.13?true"],
      ["voice_messages_forbidden", "true", "flags.20?true"],
      ["translations_disabled", "true", "flags.23?true"],
      ["stories_pinned_available", "true", "flags.26?true"],
      ["blocked_my_stories_from", "true", "flags.27?true"],
      ["wallpaper_overridden", "true", "flags.28?true"],
      ["contact_require_premium", "true", "flags.29?true"],
      ["read_dates_private", "true", "flags.30?true"],
      ["id", "bigint", "long"],
      ["about", "string", "flags.1?string"],
      ["settings", _PeerSettings_, "PeerSettings"],
      ["personal_photo", _Photo_, "flags.21?Photo"],
      ["profile_photo", _Photo_, "flags.2?Photo"],
      ["fallback_photo", _Photo_, "flags.22?Photo"],
      ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
      ["bot_info", _BotInfo_, "flags.3?BotInfo"],
      ["pinned_msg_id", "number", "flags.6?int"],
      ["common_chats_count", "number", "int"],
      ["folder_id", "number", "flags.11?int"],
      ["ttl_period", "number", "flags.14?int"],
      ["theme_emoticon", "string", "flags.15?string"],
      ["private_forward_name", "string", "flags.16?string"],
      ["bot_group_admin_rights", _ChatAdminRights_, "flags.17?ChatAdminRights"],
      ["bot_broadcast_admin_rights", _ChatAdminRights_, "flags.18?ChatAdminRights"],
      ["premium_gifts", [_PremiumGiftOption_], "flags.19?Vector<PremiumGiftOption>"],
      ["wallpaper", _WallPaper_, "flags.24?WallPaper"],
      ["stories", _PeerStories_, "flags.25?PeerStories"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.blocked ?? null, "true", "flags.0?true"],
      [this.phone_calls_available ?? null, "true", "flags.4?true"],
      [this.phone_calls_private ?? null, "true", "flags.5?true"],
      [this.can_pin_message ?? null, "true", "flags.7?true"],
      [this.has_scheduled ?? null, "true", "flags.12?true"],
      [this.video_calls_available ?? null, "true", "flags.13?true"],
      [this.voice_messages_forbidden ?? null, "true", "flags.20?true"],
      [this.translations_disabled ?? null, "true", "flags.23?true"],
      [this.stories_pinned_available ?? null, "true", "flags.26?true"],
      [this.blocked_my_stories_from ?? null, "true", "flags.27?true"],
      [this.wallpaper_overridden ?? null, "true", "flags.28?true"],
      [this.contact_require_premium ?? null, "true", "flags.29?true"],
      [this.read_dates_private ?? null, "true", "flags.30?true"],
      [this.id, "bigint", "long"],
      [this.about ?? null, "string", "flags.1?string"],
      [this.settings, _PeerSettings_, "PeerSettings"],
      [this.personal_photo ?? null, _Photo_, "flags.21?Photo"],
      [this.profile_photo ?? null, _Photo_, "flags.2?Photo"],
      [this.fallback_photo ?? null, _Photo_, "flags.22?Photo"],
      [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
      [this.bot_info ?? null, _BotInfo_, "flags.3?BotInfo"],
      [this.pinned_msg_id ?? null, "number", "flags.6?int"],
      [this.common_chats_count, "number", "int"],
      [this.folder_id ?? null, "number", "flags.11?int"],
      [this.ttl_period ?? null, "number", "flags.14?int"],
      [this.theme_emoticon ?? null, "string", "flags.15?string"],
      [this.private_forward_name ?? null, "string", "flags.16?string"],
      [this.bot_group_admin_rights ?? null, _ChatAdminRights_, "flags.17?ChatAdminRights"],
      [this.bot_broadcast_admin_rights ?? null, _ChatAdminRights_, "flags.18?ChatAdminRights"],
      [this.premium_gifts ?? null, [_PremiumGiftOption_], "flags.19?Vector<PremiumGiftOption>"],
      [this.wallpaper ?? null, _WallPaper_, "flags.24?WallPaper"],
      [this.stories ?? null, _PeerStories_, "flags.25?PeerStories"],
    ];
  }

  constructor(params: { blocked?: true; phone_calls_available?: true; phone_calls_private?: true; can_pin_message?: true; has_scheduled?: true; video_calls_available?: true; voice_messages_forbidden?: true; translations_disabled?: true; stories_pinned_available?: true; blocked_my_stories_from?: true; wallpaper_overridden?: true; contact_require_premium?: true; read_dates_private?: true; id: bigint; about?: string; settings: enums.PeerSettings; personal_photo?: enums.Photo; profile_photo?: enums.Photo; fallback_photo?: enums.Photo; notify_settings: enums.PeerNotifySettings; bot_info?: enums.BotInfo; pinned_msg_id?: number; common_chats_count: number; folder_id?: number; ttl_period?: number; theme_emoticon?: string; private_forward_name?: string; bot_group_admin_rights?: enums.ChatAdminRights; bot_broadcast_admin_rights?: enums.ChatAdminRights; premium_gifts?: Array<enums.PremiumGiftOption>; wallpaper?: enums.WallPaper; stories?: enums.PeerStories }) {
    super();
    this.blocked = params.blocked;
    this.phone_calls_available = params.phone_calls_available;
    this.phone_calls_private = params.phone_calls_private;
    this.can_pin_message = params.can_pin_message;
    this.has_scheduled = params.has_scheduled;
    this.video_calls_available = params.video_calls_available;
    this.voice_messages_forbidden = params.voice_messages_forbidden;
    this.translations_disabled = params.translations_disabled;
    this.stories_pinned_available = params.stories_pinned_available;
    this.blocked_my_stories_from = params.blocked_my_stories_from;
    this.wallpaper_overridden = params.wallpaper_overridden;
    this.contact_require_premium = params.contact_require_premium;
    this.read_dates_private = params.read_dates_private;
    this.id = params.id;
    this.about = params.about;
    this.settings = params.settings;
    this.personal_photo = params.personal_photo;
    this.profile_photo = params.profile_photo;
    this.fallback_photo = params.fallback_photo;
    this.notify_settings = params.notify_settings;
    this.bot_info = params.bot_info;
    this.pinned_msg_id = params.pinned_msg_id;
    this.common_chats_count = params.common_chats_count;
    this.folder_id = params.folder_id;
    this.ttl_period = params.ttl_period;
    this.theme_emoticon = params.theme_emoticon;
    this.private_forward_name = params.private_forward_name;
    this.bot_group_admin_rights = params.bot_group_admin_rights;
    this.bot_broadcast_admin_rights = params.bot_broadcast_admin_rights;
    this.premium_gifts = params.premium_gifts;
    this.wallpaper = params.wallpaper;
    this.stories = params.stories;
  }
}

/** A contact of the current user that is registered in the system. */
export class Contact_ extends _Contact_ {
  /** User identifier */
  user_id: bigint;
  /** Current user is in the user's contact list */
  mutual: boolean;

  protected get [id](): number {
    return 0x145ADE0B;
  }

  static get [name](): string {
    return "contact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["mutual", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.mutual, "boolean", "Bool"],
    ];
  }

  constructor(params: { user_id: bigint; mutual: boolean }) {
    super();
    this.user_id = params.user_id;
    this.mutual = params.mutual;
  }
}

/** Successfully imported contact. */
export class ImportedContact_ extends _ImportedContact_ {
  /** User identifier */
  user_id: bigint;
  /** The contact's client identifier (passed to one of the [InputContact](https://core.telegram.org/type/InputContact) constructors) */
  client_id: bigint;

  protected get [id](): number {
    return 0xC13E3C50;
  }

  static get [name](): string {
    return "importedContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["client_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.client_id, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint; client_id: bigint }) {
    super();
    this.user_id = params.user_id;
    this.client_id = params.client_id;
  }
}

/** Contact status: online / offline. */
export class ContactStatus_ extends _ContactStatus_ {
  /** User identifier */
  user_id: bigint;
  /** Online status */
  status: enums.UserStatus;

  protected get [id](): number {
    return 0x16D9703B;
  }

  static get [name](): string {
    return "contactStatus"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["status", _UserStatus_, "UserStatus"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.status, _UserStatus_, "UserStatus"],
    ];
  }

  constructor(params: { user_id: bigint; status: enums.UserStatus }) {
    super();
    this.user_id = params.user_id;
    this.status = params.status;
  }
}

/** Contact list on the server is the same as the list on the client. */
export class contacts_ContactsNotModified_ extends _contacts_Contacts_ {
  protected get [id](): number {
    return 0xB74BA9D2;
  }

  static get [name](): string {
    return "contacts.contactsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The current user's contact list and info on users. */
export class contacts_Contacts_ extends _contacts_Contacts_ {
  /** Contact list */
  contacts: Array<enums.Contact>;
  /** Number of contacts that were saved successfully */
  saved_count: number;
  /** User list */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xEAE87E42;
  }

  static get [name](): string {
    return "contacts.contacts"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["contacts", [_Contact_], "Vector<Contact>"],
      ["saved_count", "number", "int"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.contacts, [_Contact_], "Vector<Contact>"],
      [this.saved_count, "number", "int"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { contacts: Array<enums.Contact>; saved_count: number; users: Array<enums.User> }) {
    super();
    this.contacts = params.contacts;
    this.saved_count = params.saved_count;
    this.users = params.users;
  }
}

/** Info on successfully imported contacts. */
export class contacts_ImportedContacts_ extends _contacts_ImportedContacts_ {
  /** List of successfully imported contacts */
  imported: Array<enums.ImportedContact>;
  /** Popular contacts */
  popular_invites: Array<enums.PopularContact>;
  /** List of contact ids that could not be imported due to system limitation and will need to be imported at a later date. */
  retry_contacts: Array<bigint>;
  /** List of users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x77D01C3B;
  }

  static get [name](): string {
    return "contacts.importedContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["imported", [_ImportedContact_], "Vector<ImportedContact>"],
      ["popular_invites", [_PopularContact_], "Vector<PopularContact>"],
      ["retry_contacts", ["bigint"], "Vector<long>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.imported, [_ImportedContact_], "Vector<ImportedContact>"],
      [this.popular_invites, [_PopularContact_], "Vector<PopularContact>"],
      [this.retry_contacts, ["bigint"], "Vector<long>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { imported: Array<enums.ImportedContact>; popular_invites: Array<enums.PopularContact>; retry_contacts: Array<bigint>; users: Array<enums.User> }) {
    super();
    this.imported = params.imported;
    this.popular_invites = params.popular_invites;
    this.retry_contacts = params.retry_contacts;
    this.users = params.users;
  }
}

/** Full list of blocked users. */
export class contacts_Blocked_ extends _contacts_Blocked_ {
  /** List of blocked users */
  blocked: Array<enums.PeerBlocked>;
  /** Blocked chats */
  chats: Array<enums.Chat>;
  /** List of users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x0ADE1591;
  }

  static get [name](): string {
    return "contacts.blocked"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["blocked", [_PeerBlocked_], "Vector<PeerBlocked>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.blocked, [_PeerBlocked_], "Vector<PeerBlocked>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { blocked: Array<enums.PeerBlocked>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.blocked = params.blocked;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Incomplete list of blocked users. */
export class contacts_BlockedSlice_ extends _contacts_Blocked_ {
  /** Total number of elements in the list */
  count: number;
  /** List of blocked users */
  blocked: Array<enums.PeerBlocked>;
  /** Blocked chats */
  chats: Array<enums.Chat>;
  /** List of users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xE1664194;
  }

  static get [name](): string {
    return "contacts.blockedSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["blocked", [_PeerBlocked_], "Vector<PeerBlocked>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.blocked, [_PeerBlocked_], "Vector<PeerBlocked>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; blocked: Array<enums.PeerBlocked>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.blocked = params.blocked;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Full list of chats with messages and auxiliary data. */
export class messages_Dialogs_ extends _messages_Dialogs_ {
  /** List of chats */
  dialogs: Array<enums.Dialog>;
  /** List of last messages from each chat */
  messages: Array<enums.Message>;
  /** List of groups mentioned in the chats */
  chats: Array<enums.Chat>;
  /** List of users mentioned in messages and groups */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x15BA6C40;
  }

  static get [name](): string {
    return "messages.dialogs"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dialogs", [_Dialog_], "Vector<Dialog>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dialogs, [_Dialog_], "Vector<Dialog>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { dialogs: Array<enums.Dialog>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.dialogs = params.dialogs;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Incomplete list of dialogs with messages and auxiliary data. */
export class messages_DialogsSlice_ extends _messages_Dialogs_ {
  /** Total number of dialogs */
  count: number;
  /** List of dialogs */
  dialogs: Array<enums.Dialog>;
  /** List of last messages from dialogs */
  messages: Array<enums.Message>;
  /** List of chats mentioned in dialogs */
  chats: Array<enums.Chat>;
  /** List of users mentioned in messages and chats */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x71E094F3;
  }

  static get [name](): string {
    return "messages.dialogsSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["dialogs", [_Dialog_], "Vector<Dialog>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.dialogs, [_Dialog_], "Vector<Dialog>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; dialogs: Array<enums.Dialog>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.dialogs = params.dialogs;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Dialogs haven't changed */
export class messages_DialogsNotModified_ extends _messages_Dialogs_ {
  /** Number of dialogs found server-side by the query */
  count: number;

  protected get [id](): number {
    return 0xF0E3E596;
  }

  static get [name](): string {
    return "messages.dialogsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { count: number }) {
    super();
    this.count = params.count;
  }
}

/** Full list of messages with auxiliary data. */
export class messages_Messages_ extends _messages_Messages_ {
  /** List of messages */
  messages: Array<enums.Message>;
  /** List of chats mentioned in dialogs */
  chats: Array<enums.Chat>;
  /** List of users mentioned in messages and chats */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x8C718E87;
  }

  static get [name](): string {
    return "messages.messages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Incomplete list of messages and auxiliary data. */
export class messages_MessagesSlice_ extends _messages_Messages_ {
  /** If set, indicates that the results may be inexact */
  inexact?: true;
  /** Total number of messages in the list */
  count: number;
  /** Rate to use in the `offset_rate` parameter in the next call to [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) */
  next_rate?: number;
  /** Indicates the absolute position of `messages[0]` within the total result set with count `count`.  
  This is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`. */
  offset_id_offset?: number;
  /** List of messages */
  messages: Array<enums.Message>;
  /** List of chats mentioned in messages */
  chats: Array<enums.Chat>;
  /** List of users mentioned in messages and chats */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x3A54685E;
  }

  static get [name](): string {
    return "messages.messagesSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inexact", "true", "flags.1?true"],
      ["count", "number", "int"],
      ["next_rate", "number", "flags.0?int"],
      ["offset_id_offset", "number", "flags.2?int"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inexact ?? null, "true", "flags.1?true"],
      [this.count, "number", "int"],
      [this.next_rate ?? null, "number", "flags.0?int"],
      [this.offset_id_offset ?? null, "number", "flags.2?int"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { inexact?: true; count: number; next_rate?: number; offset_id_offset?: number; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.inexact = params.inexact;
    this.count = params.count;
    this.next_rate = params.next_rate;
    this.offset_id_offset = params.offset_id_offset;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Channel messages */
export class messages_ChannelMessages_ extends _messages_Messages_ {
  /** If set, returned results may be inexact */
  inexact?: true;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** Total number of results were found server-side (may not be all included here) */
  count: number;
  /** Indicates the absolute position of `messages[0]` within the total result set with count `count`.  
  This is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`. */
  offset_id_offset?: number;
  /** Found messages */
  messages: Array<enums.Message>;
  /** [Forum topic](https://core.telegram.org/api/forum#forum-topics) information */
  topics: Array<enums.ForumTopic>;
  /** Chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xC776BA4E;
  }

  static get [name](): string {
    return "messages.channelMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inexact", "true", "flags.1?true"],
      ["pts", "number", "int"],
      ["count", "number", "int"],
      ["offset_id_offset", "number", "flags.2?int"],
      ["messages", [_Message_], "Vector<Message>"],
      ["topics", [_ForumTopic_], "Vector<ForumTopic>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inexact ?? null, "true", "flags.1?true"],
      [this.pts, "number", "int"],
      [this.count, "number", "int"],
      [this.offset_id_offset ?? null, "number", "flags.2?int"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.topics, [_ForumTopic_], "Vector<ForumTopic>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { inexact?: true; pts: number; count: number; offset_id_offset?: number; messages: Array<enums.Message>; topics: Array<enums.ForumTopic>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.inexact = params.inexact;
    this.pts = params.pts;
    this.count = params.count;
    this.offset_id_offset = params.offset_id_offset;
    this.messages = params.messages;
    this.topics = params.topics;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** No new messages matching the query were found */
export class messages_MessagesNotModified_ extends _messages_Messages_ {
  /** Number of results found server-side by the given query */
  count: number;

  protected get [id](): number {
    return 0x74535F21;
  }

  static get [name](): string {
    return "messages.messagesNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { count: number }) {
    super();
    this.count = params.count;
  }
}

/** List of chats with auxiliary data. */
export class messages_Chats_ extends _messages_Chats_ {
  /** List of chats */
  chats: Array<enums.Chat>;

  protected get [id](): number {
    return 0x64FF9FD5;
  }

  static get [name](): string {
    return "messages.chats"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chats", [_Chat_], "Vector<Chat>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chats, [_Chat_], "Vector<Chat>"],
    ];
  }

  constructor(params: { chats: Array<enums.Chat> }) {
    super();
    this.chats = params.chats;
  }
}

/** Partial list of chats, more would have to be fetched with [pagination](https://core.telegram.org/api/offsets) */
export class messages_ChatsSlice_ extends _messages_Chats_ {
  /** Total number of results that were found server-side (not all are included in `chats`) */
  count: number;
  /** Chats */
  chats: Array<enums.Chat>;

  protected get [id](): number {
    return 0x9CD81144;
  }

  static get [name](): string {
    return "messages.chatsSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["chats", [_Chat_], "Vector<Chat>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.chats, [_Chat_], "Vector<Chat>"],
    ];
  }

  constructor(params: { count: number; chats: Array<enums.Chat> }) {
    super();
    this.count = params.count;
    this.chats = params.chats;
  }
}

/** Full info about a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups), [gigagroup](https://core.telegram.org/api/channel#gigagroups) or [basic group](https://core.telegram.org/api/channel#basic-groups). */
export class messages_ChatFull_ extends _messages_ChatFull_ {
  /** Full info */
  full_chat: enums.ChatFull;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xE5D7D19C;
  }

  static get [name](): string {
    return "messages.chatFull"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["full_chat", _ChatFull_, "ChatFull"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.full_chat, _ChatFull_, "ChatFull"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { full_chat: enums.ChatFull; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.full_chat = params.full_chat;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Affected part of communication history with the user or in a chat. */
export class messages_AffectedHistory_ extends _messages_AffectedHistory_ {
  /** Number of events occurred in a text box */
  pts: number;
  /** Number of affected events */
  pts_count: number;
  /** If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease */
  offset: number;

  protected get [id](): number {
    return 0xB45C69D1;
  }

  static get [name](): string {
    return "messages.affectedHistory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
      ["offset", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
      [this.offset, "number", "int"],
    ];
  }

  constructor(params: { pts: number; pts_count: number; offset: number }) {
    super();
    this.pts = params.pts;
    this.pts_count = params.pts_count;
    this.offset = params.offset;
  }
}

/** Filter is absent. */
export class InputMessagesFilterEmpty_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x57E2F66C;
  }

  static get [name](): string {
    return "inputMessagesFilterEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Filter for messages containing photos. */
export class InputMessagesFilterPhotos_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x9609A51C;
  }

  static get [name](): string {
    return "inputMessagesFilterPhotos"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Filter for messages containing videos. */
export class InputMessagesFilterVideo_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x9FC00E65;
  }

  static get [name](): string {
    return "inputMessagesFilterVideo"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Filter for messages containing photos or videos. */
export class InputMessagesFilterPhotoVideo_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x56E9F0E4;
  }

  static get [name](): string {
    return "inputMessagesFilterPhotoVideo"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Filter for messages containing documents. */
export class InputMessagesFilterDocument_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x9EDDF188;
  }

  static get [name](): string {
    return "inputMessagesFilterDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages containing URLs */
export class InputMessagesFilterUrl_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x7EF0DD87;
  }

  static get [name](): string {
    return "inputMessagesFilterUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages containing gifs */
export class InputMessagesFilterGif_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0xFFC86587;
  }

  static get [name](): string {
    return "inputMessagesFilterGif"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages containing voice notes */
export class InputMessagesFilterVoice_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x50F5C392;
  }

  static get [name](): string {
    return "inputMessagesFilterVoice"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages containing audio files */
export class InputMessagesFilterMusic_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x3751B49E;
  }

  static get [name](): string {
    return "inputMessagesFilterMusic"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only chat photo changes */
export class InputMessagesFilterChatPhotos_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x3A20ECB8;
  }

  static get [name](): string {
    return "inputMessagesFilterChatPhotos"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only phone calls */
export class InputMessagesFilterPhoneCalls_ extends _MessagesFilter_ {
  /** Return only missed phone calls */
  missed?: true;

  protected get [id](): number {
    return 0x80C99768;
  }

  static get [name](): string {
    return "inputMessagesFilterPhoneCalls"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["missed", "true", "flags.0?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.missed ?? null, "true", "flags.0?true"],
    ];
  }

  constructor(params?: { missed?: true }) {
    super();
    this.missed = params?.missed;
  }
}

/** Return only round videos and voice notes */
export class InputMessagesFilterRoundVoice_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x7A7C17A4;
  }

  static get [name](): string {
    return "inputMessagesFilterRoundVoice"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only round videos */
export class InputMessagesFilterRoundVideo_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0xB549DA53;
  }

  static get [name](): string {
    return "inputMessagesFilterRoundVideo"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages where the current user was [mentioned](https://core.telegram.org/api/mentions). */
export class InputMessagesFilterMyMentions_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0xC1F8E69A;
  }

  static get [name](): string {
    return "inputMessagesFilterMyMentions"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages containing geolocations */
export class InputMessagesFilterGeo_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0xE7026D0D;
  }

  static get [name](): string {
    return "inputMessagesFilterGeo"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Return only messages containing contacts */
export class InputMessagesFilterContacts_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0xE062DB83;
  }

  static get [name](): string {
    return "inputMessagesFilterContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Fetch only pinned messages */
export class InputMessagesFilterPinned_ extends _MessagesFilter_ {
  protected get [id](): number {
    return 0x1BB00451;
  }

  static get [name](): string {
    return "inputMessagesFilterPinned"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** New message in a private chat or in a [basic group](https://core.telegram.org/api/channel#basic-groups). */
export class UpdateNewMessage_ extends _Update_ {
  /** Message */
  message: enums.Message;
  /** New quantity of actions in a message box */
  pts: number;
  /** Number of generated events */
  pts_count: number;

  protected get [id](): number {
    return 0x1F2B0AFD;
  }

  static get [name](): string {
    return "updateNewMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { message: enums.Message; pts: number; pts_count: number }) {
    super();
    this.message = params.message;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** Sent message with **random\_id** client identifier was assigned an identifier. */
export class UpdateMessageID_ extends _Update_ {
  /** **id** identifier of a respective [Message](https://core.telegram.org/type/Message) */
  id: number;
  /** Previously transferred client **random\_id** identifier */
  random_id: bigint;

  protected get [id](): number {
    return 0x4E90BFD6;
  }

  static get [name](): string {
    return "updateMessageID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
      ["random_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
      [this.random_id, "bigint", "long"],
    ];
  }

  constructor(params: { id: number; random_id: bigint }) {
    super();
    this.id = params.id;
    this.random_id = params.random_id;
  }
}

/** Messages were deleted. */
export class UpdateDeleteMessages_ extends _Update_ {
  /** List of identifiers of deleted messages */
  messages: Array<number>;
  /** New quality of actions in a message box */
  pts: number;
  /** Number of generated [events](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0xA20DB0E5;
  }

  static get [name](): string {
    return "updateDeleteMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["messages", ["number"], "Vector<int>"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.messages, ["number"], "Vector<int>"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { messages: Array<number>; pts: number; pts_count: number }) {
    super();
    this.messages = params.messages;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing */
export class UpdateUserTyping_ extends _Update_ {
  /** User id */
  user_id: bigint;
  /** Action type */
  action: enums.SendMessageAction;

  protected get [id](): number {
    return 0xC01E857F;
  }

  static get [name](): string {
    return "updateUserTyping"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["action", _SendMessageAction_, "SendMessageAction"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.action, _SendMessageAction_, "SendMessageAction"],
    ];
  }

  constructor(params: { user_id: bigint; action: enums.SendMessageAction }) {
    super();
    this.user_id = params.user_id;
    this.action = params.action;
  }
}

/** The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing */
export class UpdateChatUserTyping_ extends _Update_ {
  /** Group id */
  chat_id: bigint;
  /** Peer that started typing (can be the chat itself, in case of anonymous admins). */
  from_id: enums.Peer;
  /** Type of action */
  action: enums.SendMessageAction;

  protected get [id](): number {
    return 0x83487AF0;
  }

  static get [name](): string {
    return "updateChatUserTyping"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
      ["from_id", _Peer_, "Peer"],
      ["action", _SendMessageAction_, "SendMessageAction"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
      [this.from_id, _Peer_, "Peer"],
      [this.action, _SendMessageAction_, "SendMessageAction"],
    ];
  }

  constructor(params: { chat_id: bigint; from_id: enums.Peer; action: enums.SendMessageAction }) {
    super();
    this.chat_id = params.chat_id;
    this.from_id = params.from_id;
    this.action = params.action;
  }
}

/** Composition of chat participants changed. */
export class UpdateChatParticipants_ extends _Update_ {
  /** Updated chat participants */
  participants: enums.ChatParticipants;

  protected get [id](): number {
    return 0x07761198;
  }

  static get [name](): string {
    return "updateChatParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["participants", _ChatParticipants_, "ChatParticipants"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.participants, _ChatParticipants_, "ChatParticipants"],
    ];
  }

  constructor(params: { participants: enums.ChatParticipants }) {
    super();
    this.participants = params.participants;
  }
}

/** Contact status update. */
export class UpdateUserStatus_ extends _Update_ {
  /** User identifier */
  user_id: bigint;
  /** New status */
  status: enums.UserStatus;

  protected get [id](): number {
    return 0xE5BDF8DE;
  }

  static get [name](): string {
    return "updateUserStatus"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["status", _UserStatus_, "UserStatus"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.status, _UserStatus_, "UserStatus"],
    ];
  }

  constructor(params: { user_id: bigint; status: enums.UserStatus }) {
    super();
    this.user_id = params.user_id;
    this.status = params.status;
  }
}

/** Changes the user's first name, last name and username. */
export class UpdateUserName_ extends _Update_ {
  /** User identifier */
  user_id: bigint;
  /** New first name. Corresponds to the new value of **real\_first\_name** field of the [userFull](https://core.telegram.org/constructor/userFull) constructor. */
  first_name: string;
  /** New last name. Corresponds to the new value of **real\_last\_name** field of the [userFull](https://core.telegram.org/constructor/userFull) constructor. */
  last_name: string;
  /** Usernames. */
  usernames: Array<enums.Username>;

  protected get [id](): number {
    return 0xA7848924;
  }

  static get [name](): string {
    return "updateUserName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
      ["usernames", [_Username_], "Vector<Username>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
      [this.usernames, [_Username_], "Vector<Username>"],
    ];
  }

  constructor(params: { user_id: bigint; first_name: string; last_name: string; usernames: Array<enums.Username> }) {
    super();
    this.user_id = params.user_id;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.usernames = params.usernames;
  }
}

/** A new session logged into the current user's account through an unknown device. */
export class UpdateNewAuthorization_ extends _Update_ {
  /** Whether the session is [unconfirmed, see here »](https://core.telegram.org/api/auth#confirming-login) for more info. */
  unconfirmed?: true;
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Authorization date */
  date?: number;
  /** Name of device, for example _Android_ */
  device?: string;
  /** Location, for example _USA, NY (IP=1.2.3.4)_ */
  location?: string;

  protected get [id](): number {
    return 0x8951ABEF;
  }

  static get [name](): string {
    return "updateNewAuthorization"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["unconfirmed", "true", "flags.0?true"],
      ["hash", "bigint", "long"],
      ["date", "number", "flags.0?int"],
      ["device", "string", "flags.0?string"],
      ["location", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.unconfirmed ?? null, "true", "flags.0?true"],
      [this.hash, "bigint", "long"],
      [this.date ?? null, "number", "flags.0?int"],
      [this.device ?? null, "string", "flags.0?string"],
      [this.location ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { unconfirmed?: true; hash: bigint; date?: number; device?: string; location?: string }) {
    super();
    this.unconfirmed = params.unconfirmed;
    this.hash = params.hash;
    this.date = params.date;
    this.device = params.device;
    this.location = params.location;
  }
}

/** New encrypted message. */
export class UpdateNewEncryptedMessage_ extends _Update_ {
  /** Message */
  message: enums.EncryptedMessage;
  /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
  qts: number;

  protected get [id](): number {
    return 0x12BCBD9A;
  }

  static get [name](): string {
    return "updateNewEncryptedMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _EncryptedMessage_, "EncryptedMessage"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _EncryptedMessage_, "EncryptedMessage"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { message: enums.EncryptedMessage; qts: number }) {
    super();
    this.message = params.message;
    this.qts = params.qts;
  }
}

/** Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing. */
export class UpdateEncryptedChatTyping_ extends _Update_ {
  /** Chat ID */
  chat_id: number;

  protected get [id](): number {
    return 0x1710F156;
  }

  static get [name](): string {
    return "updateEncryptedChatTyping"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "number", "int"],
    ];
  }

  constructor(params: { chat_id: number }) {
    super();
    this.chat_id = params.chat_id;
  }
}

/** Change of state in an encrypted chat. */
export class UpdateEncryption_ extends _Update_ {
  /** Encrypted chat */
  chat: enums.EncryptedChat;
  /** Date of change */
  date: number;

  protected get [id](): number {
    return 0xB4A2E88D;
  }

  static get [name](): string {
    return "updateEncryption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat", _EncryptedChat_, "EncryptedChat"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat, _EncryptedChat_, "EncryptedChat"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { chat: enums.EncryptedChat; date: number }) {
    super();
    this.chat = params.chat;
    this.date = params.date;
  }
}

/** Communication history in an encrypted chat was marked as read. */
export class UpdateEncryptedMessagesRead_ extends _Update_ {
  /** Chat ID */
  chat_id: number;
  /** Maximum value of data for read messages */
  max_date: number;
  /** Time when messages were read */
  date: number;

  protected get [id](): number {
    return 0x38FE25B7;
  }

  static get [name](): string {
    return "updateEncryptedMessagesRead"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "number", "int"],
      ["max_date", "number", "int"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "number", "int"],
      [this.max_date, "number", "int"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { chat_id: number; max_date: number; date: number }) {
    super();
    this.chat_id = params.chat_id;
    this.max_date = params.max_date;
    this.date = params.date;
  }
}

/** New group member. */
export class UpdateChatParticipantAdd_ extends _Update_ {
  /** Group ID */
  chat_id: bigint;
  /** ID of the new member */
  user_id: bigint;
  /** ID of the user, who added member to the group */
  inviter_id: bigint;
  /** When was the participant added */
  date: number;
  /** Chat version number */
  version: number;

  protected get [id](): number {
    return 0x3DDA5451;
  }

  static get [name](): string {
    return "updateChatParticipantAdd"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["inviter_id", "bigint", "long"],
      ["date", "number", "int"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.inviter_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { chat_id: bigint; user_id: bigint; inviter_id: bigint; date: number; version: number }) {
    super();
    this.chat_id = params.chat_id;
    this.user_id = params.user_id;
    this.inviter_id = params.inviter_id;
    this.date = params.date;
    this.version = params.version;
  }
}

/** A member has left the group. */
export class UpdateChatParticipantDelete_ extends _Update_ {
  /** Group ID */
  chat_id: bigint;
  /** ID of the user */
  user_id: bigint;
  /** Used in basic groups to reorder updates and make sure that all of them was received. */
  version: number;

  protected get [id](): number {
    return 0xE32F3D77;
  }

  static get [name](): string {
    return "updateChatParticipantDelete"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { chat_id: bigint; user_id: bigint; version: number }) {
    super();
    this.chat_id = params.chat_id;
    this.user_id = params.user_id;
    this.version = params.version;
  }
}

/** Changes in the data center configuration options. */
export class UpdateDcOptions_ extends _Update_ {
  /** New connection options */
  dc_options: Array<enums.DcOption>;

  protected get [id](): number {
    return 0x8E5E9873;
  }

  static get [name](): string {
    return "updateDcOptions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dc_options", [_DcOption_], "Vector<DcOption>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dc_options, [_DcOption_], "Vector<DcOption>"],
    ];
  }

  constructor(params: { dc_options: Array<enums.DcOption> }) {
    super();
    this.dc_options = params.dc_options;
  }
}

/** Changes in notification settings. */
export class UpdateNotifySettings_ extends _Update_ {
  /** Notification source */
  peer: enums.NotifyPeer;
  /** New notification settings */
  notify_settings: enums.PeerNotifySettings;

  protected get [id](): number {
    return 0xBEC268EF;
  }

  static get [name](): string {
    return "updateNotifySettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _NotifyPeer_, "NotifyPeer"],
      ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _NotifyPeer_, "NotifyPeer"],
      [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
    ];
  }

  constructor(params: { peer: enums.NotifyPeer; notify_settings: enums.PeerNotifySettings }) {
    super();
    this.peer = params.peer;
    this.notify_settings = params.notify_settings;
  }
}

/** A service message for the user. */
export class UpdateServiceNotification_ extends _Update_ {
  /** If set, the message must be displayed in a popup. */
  popup?: true;
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** When was the notification received  
  The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications). */
  inbox_date?: number;
  /** String, identical in format and contents to the [**type**](https://core.telegram.org/api/errors#error-type) field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same **type** within a short period of time (15 minutes). */
  type: string;
  /** Message text */
  message: string;
  /** Media content (optional) */
  media: enums.MessageMedia;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities: Array<enums.MessageEntity>;

  protected get [id](): number {
    return 0xEBE46819;
  }

  static get [name](): string {
    return "updateServiceNotification"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["popup", "true", "flags.0?true"],
      ["invert_media", "true", "flags.2?true"],
      ["inbox_date", "number", "flags.1?int"],
      ["type", "string", "string"],
      ["message", "string", "string"],
      ["media", _MessageMedia_, "MessageMedia"],
      ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.popup ?? null, "true", "flags.0?true"],
      [this.invert_media ?? null, "true", "flags.2?true"],
      [this.inbox_date ?? null, "number", "flags.1?int"],
      [this.type, "string", "string"],
      [this.message, "string", "string"],
      [this.media, _MessageMedia_, "MessageMedia"],
      [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
    ];
  }

  constructor(params: { popup?: true; invert_media?: true; inbox_date?: number; type: string; message: string; media: enums.MessageMedia; entities: Array<enums.MessageEntity> }) {
    super();
    this.popup = params.popup;
    this.invert_media = params.invert_media;
    this.inbox_date = params.inbox_date;
    this.type = params.type;
    this.message = params.message;
    this.media = params.media;
    this.entities = params.entities;
  }
}

/** Privacy rules were changed */
export class UpdatePrivacy_ extends _Update_ {
  /** Peers to which the privacy rules apply */
  key: enums.PrivacyKey;
  /** New privacy rules */
  rules: Array<enums.PrivacyRule>;

  protected get [id](): number {
    return 0xEE3B272A;
  }

  static get [name](): string {
    return "updatePrivacy"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["key", _PrivacyKey_, "PrivacyKey"],
      ["rules", [_PrivacyRule_], "Vector<PrivacyRule>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.key, _PrivacyKey_, "PrivacyKey"],
      [this.rules, [_PrivacyRule_], "Vector<PrivacyRule>"],
    ];
  }

  constructor(params: { key: enums.PrivacyKey; rules: Array<enums.PrivacyRule> }) {
    super();
    this.key = params.key;
    this.rules = params.rules;
  }
}

/** A user's phone number was changed */
export class UpdateUserPhone_ extends _Update_ {
  /** User ID */
  user_id: bigint;
  /** New phone number */
  phone: string;

  protected get [id](): number {
    return 0x05492A13;
  }

  static get [name](): string {
    return "updateUserPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["phone", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.phone, "string", "string"],
    ];
  }

  constructor(params: { user_id: bigint; phone: string }) {
    super();
    this.user_id = params.user_id;
    this.phone = params.phone;
  }
}

/** Incoming messages were read */
export class UpdateReadHistoryInbox_ extends _Update_ {
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** Peer */
  peer: enums.Peer;
  /** Maximum ID of messages read */
  max_id: number;
  /** Number of messages that are still unread */
  still_unread_count: number;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x9C974FDF;
  }

  static get [name](): string {
    return "updateReadHistoryInbox"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["folder_id", "number", "flags.0?int"],
      ["peer", _Peer_, "Peer"],
      ["max_id", "number", "int"],
      ["still_unread_count", "number", "int"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.folder_id ?? null, "number", "flags.0?int"],
      [this.peer, _Peer_, "Peer"],
      [this.max_id, "number", "int"],
      [this.still_unread_count, "number", "int"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { folder_id?: number; peer: enums.Peer; max_id: number; still_unread_count: number; pts: number; pts_count: number }) {
    super();
    this.folder_id = params.folder_id;
    this.peer = params.peer;
    this.max_id = params.max_id;
    this.still_unread_count = params.still_unread_count;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** Outgoing messages were read */
export class UpdateReadHistoryOutbox_ extends _Update_ {
  /** Peer */
  peer: enums.Peer;
  /** Maximum ID of read outgoing messages */
  max_id: number;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x2F2F21BF;
  }

  static get [name](): string {
    return "updateReadHistoryOutbox"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["max_id", "number", "int"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.max_id, "number", "int"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; max_id: number; pts: number; pts_count: number }) {
    super();
    this.peer = params.peer;
    this.max_id = params.max_id;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** An [instant view](https://instantview.telegram.org) webpage preview was generated */
export class UpdateWebPage_ extends _Update_ {
  /** Webpage preview */
  webpage: enums.WebPage;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x7F891213;
  }

  static get [name](): string {
    return "updateWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["webpage", _WebPage_, "WebPage"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.webpage, _WebPage_, "WebPage"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { webpage: enums.WebPage; pts: number; pts_count: number }) {
    super();
    this.webpage = params.webpage;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** Contents of messages in the common [message box](https://core.telegram.org/api/updates) were read */
export class UpdateReadMessagesContents_ extends _Update_ {
  /** IDs of read messages */
  messages: Array<number>;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;
  /** When was the last message in `messages` marked as read. */
  date?: number;

  protected get [id](): number {
    return 0xF8227181;
  }

  static get [name](): string {
    return "updateReadMessagesContents"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["messages", ["number"], "Vector<int>"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
      ["date", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.messages, ["number"], "Vector<int>"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
      [this.date ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { messages: Array<number>; pts: number; pts_count: number; date?: number }) {
    super();
    this.messages = params.messages;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
    this.date = params.date;
  }
}

/** There are new updates in the specified channel, the client must fetch them.  
If the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts. */
export class UpdateChannelTooLong_ extends _Update_ {
  /** The channel */
  channel_id: bigint;
  /** The [PTS](https://core.telegram.org/api/updates). */
  pts?: number;

  protected get [id](): number {
    return 0x108D941F;
  }

  static get [name](): string {
    return "updateChannelTooLong"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["channel_id", "bigint", "long"],
      ["pts", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.channel_id, "bigint", "long"],
      [this.pts ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { channel_id: bigint; pts?: number }) {
    super();
    this.channel_id = params.channel_id;
    this.pts = params.pts;
  }
}

/** A new channel or supergroup is available, or info about an existing channel has changed and must be refeteched. */
export class UpdateChannel_ extends _Update_ {
  /** Channel ID */
  channel_id: bigint;

  protected get [id](): number {
    return 0x635B4C09;
  }

  static get [name](): string {
    return "updateChannel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
    ];
  }

  constructor(params: { channel_id: bigint }) {
    super();
    this.channel_id = params.channel_id;
  }
}

/** A new message was sent in a [channel/supergroup](https://core.telegram.org/api/channel) */
export class UpdateNewChannelMessage_ extends _Update_ {
  /** New message */
  message: enums.Message;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x62BA04D9;
  }

  static get [name](): string {
    return "updateNewChannelMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { message: enums.Message; pts: number; pts_count: number }) {
    super();
    this.message = params.message;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** Incoming messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read */
export class UpdateReadChannelInbox_ extends _Update_ {
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** Channel/supergroup ID */
  channel_id: bigint;
  /** Position up to which all incoming messages are read. */
  max_id: number;
  /** Count of messages weren't read yet */
  still_unread_count: number;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;

  protected get [id](): number {
    return 0x922E6E10;
  }

  static get [name](): string {
    return "updateReadChannelInbox"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["folder_id", "number", "flags.0?int"],
      ["channel_id", "bigint", "long"],
      ["max_id", "number", "int"],
      ["still_unread_count", "number", "int"],
      ["pts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.folder_id ?? null, "number", "flags.0?int"],
      [this.channel_id, "bigint", "long"],
      [this.max_id, "number", "int"],
      [this.still_unread_count, "number", "int"],
      [this.pts, "number", "int"],
    ];
  }

  constructor(params: { folder_id?: number; channel_id: bigint; max_id: number; still_unread_count: number; pts: number }) {
    super();
    this.folder_id = params.folder_id;
    this.channel_id = params.channel_id;
    this.max_id = params.max_id;
    this.still_unread_count = params.still_unread_count;
    this.pts = params.pts;
  }
}

/** Some messages in a [supergroup/channel](https://core.telegram.org/api/channel) were deleted */
export class UpdateDeleteChannelMessages_ extends _Update_ {
  /** Channel ID */
  channel_id: bigint;
  /** IDs of messages that were deleted */
  messages: Array<number>;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0xC32D5B12;
  }

  static get [name](): string {
    return "updateDeleteChannelMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["messages", ["number"], "Vector<int>"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.messages, ["number"], "Vector<int>"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; messages: Array<number>; pts: number; pts_count: number }) {
    super();
    this.channel_id = params.channel_id;
    this.messages = params.messages;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** The view counter of a message in a channel has changed */
export class UpdateChannelMessageViews_ extends _Update_ {
  /** Channel ID */
  channel_id: bigint;
  /** ID of the message */
  id: number;
  /** New view counter */
  views: number;

  protected get [id](): number {
    return 0xF226AC08;
  }

  static get [name](): string {
    return "updateChannelMessageViews"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["id", "number", "int"],
      ["views", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.id, "number", "int"],
      [this.views, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; id: number; views: number }) {
    super();
    this.channel_id = params.channel_id;
    this.id = params.id;
    this.views = params.views;
  }
}

/** Admin permissions of a user in a [basic group](https://core.telegram.org/api/channel#basic-groups) were changed */
export class UpdateChatParticipantAdmin_ extends _Update_ {
  /** Chat ID */
  chat_id: bigint;
  /** ID of the (de)admined user */
  user_id: bigint;
  /** Whether the user was rendered admin */
  is_admin: boolean;
  /** Used in basic groups to reorder updates and make sure that all of them was received. */
  version: number;

  protected get [id](): number {
    return 0xD7CA61A2;
  }

  static get [name](): string {
    return "updateChatParticipantAdmin"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["is_admin", "boolean", "Bool"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.is_admin, "boolean", "Bool"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { chat_id: bigint; user_id: bigint; is_admin: boolean; version: number }) {
    super();
    this.chat_id = params.chat_id;
    this.user_id = params.user_id;
    this.is_admin = params.is_admin;
    this.version = params.version;
  }
}

/** A new stickerset was installed */
export class UpdateNewStickerSet_ extends _Update_ {
  /** The installed stickerset */
  stickerset: enums.messages.StickerSet;

  protected get [id](): number {
    return 0x688A30AA;
  }

  static get [name](): string {
    return "updateNewStickerSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["stickerset", _messages_StickerSet_, "messages.StickerSet"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.stickerset, _messages_StickerSet_, "messages.StickerSet"],
    ];
  }

  constructor(params: { stickerset: enums.messages.StickerSet }) {
    super();
    this.stickerset = params.stickerset;
  }
}

/** The order of stickersets was changed */
export class UpdateStickerSetsOrder_ extends _Update_ {
  /** Whether the updated stickers are mask stickers */
  masks?: true;
  /** Whether the updated stickers are custom emoji stickers */
  emojis?: true;
  /** New sticker order by sticker ID */
  order: Array<bigint>;

  protected get [id](): number {
    return 0x0BB2D201;
  }

  static get [name](): string {
    return "updateStickerSetsOrder"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["masks", "true", "flags.0?true"],
      ["emojis", "true", "flags.1?true"],
      ["order", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.masks ?? null, "true", "flags.0?true"],
      [this.emojis ?? null, "true", "flags.1?true"],
      [this.order, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { masks?: true; emojis?: true; order: Array<bigint> }) {
    super();
    this.masks = params.masks;
    this.emojis = params.emojis;
    this.order = params.order;
  }
}

/** Installed stickersets have changed, the client should refetch them as [described in the docs](https://core.telegram.org/api/stickers#installing-stickersets). */
export class UpdateStickerSets_ extends _Update_ {
  /** Whether mask stickersets have changed */
  masks?: true;
  /** Whether the list of installed [custom emoji stickersets](https://core.telegram.org/api/custom-emoji) has changed */
  emojis?: true;

  protected get [id](): number {
    return 0x31C24808;
  }

  static get [name](): string {
    return "updateStickerSets"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["masks", "true", "flags.0?true"],
      ["emojis", "true", "flags.1?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.masks ?? null, "true", "flags.0?true"],
      [this.emojis ?? null, "true", "flags.1?true"],
    ];
  }

  constructor(params?: { masks?: true; emojis?: true }) {
    super();
    this.masks = params?.masks;
    this.emojis = params?.emojis;
  }
}

/** The saved gif list has changed, the client should refetch it using [messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs) */
export class UpdateSavedGifs_ extends _Update_ {
  protected get [id](): number {
    return 0x9375341E;
  }

  static get [name](): string {
    return "updateSavedGifs"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** An incoming inline query */
export class UpdateBotInlineQuery_ extends _Update_ {
  /** Query ID */
  query_id: bigint;
  /** User that sent the query */
  user_id: bigint;
  /** Text of query */
  query: string;
  /** Attached geolocation */
  geo?: enums.GeoPoint;
  /** Type of the chat from which the inline query was sent. */
  peer_type?: enums.InlineQueryPeerType;
  /** Offset to navigate through results */
  offset: string;

  protected get [id](): number {
    return 0x496F379C;
  }

  static get [name](): string {
    return "updateBotInlineQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["query_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["query", "string", "string"],
      ["geo", _GeoPoint_, "flags.0?GeoPoint"],
      ["peer_type", _InlineQueryPeerType_, "flags.1?InlineQueryPeerType"],
      ["offset", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.query_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.query, "string", "string"],
      [this.geo ?? null, _GeoPoint_, "flags.0?GeoPoint"],
      [this.peer_type ?? null, _InlineQueryPeerType_, "flags.1?InlineQueryPeerType"],
      [this.offset, "string", "string"],
    ];
  }

  constructor(params: { query_id: bigint; user_id: bigint; query: string; geo?: enums.GeoPoint; peer_type?: enums.InlineQueryPeerType; offset: string }) {
    super();
    this.query_id = params.query_id;
    this.user_id = params.user_id;
    this.query = params.query;
    this.geo = params.geo;
    this.peer_type = params.peer_type;
    this.offset = params.offset;
  }
}

/** The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the [feedback collecting](https://core.telegram.org/bots/inline#collecting-feedback) for details on how to enable these updates for your bot. */
export class UpdateBotInlineSend_ extends _Update_ {
  /** The user that chose the result */
  user_id: bigint;
  /** The query that was used to obtain the result */
  query: string;
  /** Optional. Sender location, only for bots that require user location */
  geo?: enums.GeoPoint;
  /** The unique identifier for the result that was chosen */
  id: string;
  /** Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. */
  msg_id?: enums.InputBotInlineMessageID;

  protected get [id](): number {
    return 0x12F12A07;
  }

  static get [name](): string {
    return "updateBotInlineSend"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["user_id", "bigint", "long"],
      ["query", "string", "string"],
      ["geo", _GeoPoint_, "flags.0?GeoPoint"],
      ["id", "string", "string"],
      ["msg_id", _InputBotInlineMessageID_, "flags.1?InputBotInlineMessageID"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.user_id, "bigint", "long"],
      [this.query, "string", "string"],
      [this.geo ?? null, _GeoPoint_, "flags.0?GeoPoint"],
      [this.id, "string", "string"],
      [this.msg_id ?? null, _InputBotInlineMessageID_, "flags.1?InputBotInlineMessageID"],
    ];
  }

  constructor(params: { user_id: bigint; query: string; geo?: enums.GeoPoint; id: string; msg_id?: enums.InputBotInlineMessageID }) {
    super();
    this.user_id = params.user_id;
    this.query = params.query;
    this.geo = params.geo;
    this.id = params.id;
    this.msg_id = params.msg_id;
  }
}

/** A message was edited in a [channel/supergroup](https://core.telegram.org/api/channel) */
export class UpdateEditChannelMessage_ extends _Update_ {
  /** The new message */
  message: enums.Message;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x1B3F4DF7;
  }

  static get [name](): string {
    return "updateEditChannelMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { message: enums.Message; pts: number; pts_count: number }) {
    super();
    this.message = params.message;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** A callback button was pressed, and the button data was sent to the bot that created the button */
export class UpdateBotCallbackQuery_ extends _Update_ {
  /** Query ID */
  query_id: bigint;
  /** ID of the user that pressed the button */
  user_id: bigint;
  /** Chat where the inline keyboard was sent */
  peer: enums.Peer;
  /** Message ID */
  msg_id: number;
  /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. */
  chat_instance: bigint;
  /** Callback data */
  data?: Uint8Array;
  /** Short name of a Game to be returned, serves as the unique identifier for the game */
  game_short_name?: string;

  protected get [id](): number {
    return 0xB9CFC48D;
  }

  static get [name](): string {
    return "updateBotCallbackQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["query_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
      ["chat_instance", "bigint", "long"],
      ["data", Uint8Array, "flags.0?bytes"],
      ["game_short_name", "string", "flags.1?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.query_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
      [this.chat_instance, "bigint", "long"],
      [this.data ?? null, Uint8Array, "flags.0?bytes"],
      [this.game_short_name ?? null, "string", "flags.1?string"],
    ];
  }

  constructor(params: { query_id: bigint; user_id: bigint; peer: enums.Peer; msg_id: number; chat_instance: bigint; data?: Uint8Array; game_short_name?: string }) {
    super();
    this.query_id = params.query_id;
    this.user_id = params.user_id;
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.chat_instance = params.chat_instance;
    this.data = params.data;
    this.game_short_name = params.game_short_name;
  }
}

/** A message was edited */
export class UpdateEditMessage_ extends _Update_ {
  /** The new edited message */
  message: enums.Message;
  /** [PTS](https://core.telegram.org/api/updates) */
  pts: number;
  /** [PTS count](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0xE40370A3;
  }

  static get [name](): string {
    return "updateEditMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { message: enums.Message; pts: number; pts_count: number }) {
    super();
    this.message = params.message;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** This notification is received by bots when a button is pressed */
export class UpdateInlineBotCallbackQuery_ extends _Update_ {
  /** Query ID */
  query_id: bigint;
  /** ID of the user that pressed the button */
  user_id: bigint;
  /** ID of the inline message with the button */
  msg_id: enums.InputBotInlineMessageID;
  /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. */
  chat_instance: bigint;
  /** Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field. */
  data?: Uint8Array;
  /** Short name of a Game to be returned, serves as the unique identifier for the game */
  game_short_name?: string;

  protected get [id](): number {
    return 0x691E9052;
  }

  static get [name](): string {
    return "updateInlineBotCallbackQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["query_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["msg_id", _InputBotInlineMessageID_, "InputBotInlineMessageID"],
      ["chat_instance", "bigint", "long"],
      ["data", Uint8Array, "flags.0?bytes"],
      ["game_short_name", "string", "flags.1?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.query_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.msg_id, _InputBotInlineMessageID_, "InputBotInlineMessageID"],
      [this.chat_instance, "bigint", "long"],
      [this.data ?? null, Uint8Array, "flags.0?bytes"],
      [this.game_short_name ?? null, "string", "flags.1?string"],
    ];
  }

  constructor(params: { query_id: bigint; user_id: bigint; msg_id: enums.InputBotInlineMessageID; chat_instance: bigint; data?: Uint8Array; game_short_name?: string }) {
    super();
    this.query_id = params.query_id;
    this.user_id = params.user_id;
    this.msg_id = params.msg_id;
    this.chat_instance = params.chat_instance;
    this.data = params.data;
    this.game_short_name = params.game_short_name;
  }
}

/** Outgoing messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read */
export class UpdateReadChannelOutbox_ extends _Update_ {
  /** Channel/supergroup ID */
  channel_id: bigint;
  /** Position up to which all outgoing messages are read. */
  max_id: number;

  protected get [id](): number {
    return 0xB75F99A9;
  }

  static get [name](): string {
    return "updateReadChannelOutbox"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["max_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.max_id, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; max_id: number }) {
    super();
    this.channel_id = params.channel_id;
    this.max_id = params.max_id;
  }
}

/** Notifies a change of a message [draft](https://core.telegram.org/api/drafts). */
export class UpdateDraftMessage_ extends _Update_ {
  /** The peer to which the draft is associated */
  peer: enums.Peer;
  /** ID of the [forum topic](https://core.telegram.org/api/forum#forum-topics) to which the draft is associated */
  top_msg_id?: number;
  /** The draft */
  draft: enums.DraftMessage;

  protected get [id](): number {
    return 0x1B49EC6D;
  }

  static get [name](): string {
    return "updateDraftMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["peer", _Peer_, "Peer"],
      ["top_msg_id", "number", "flags.0?int"],
      ["draft", _DraftMessage_, "DraftMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.peer, _Peer_, "Peer"],
      [this.top_msg_id ?? null, "number", "flags.0?int"],
      [this.draft, _DraftMessage_, "DraftMessage"],
    ];
  }

  constructor(params: { peer: enums.Peer; top_msg_id?: number; draft: enums.DraftMessage }) {
    super();
    this.peer = params.peer;
    this.top_msg_id = params.top_msg_id;
    this.draft = params.draft;
  }
}

/** Some featured stickers were marked as read */
export class UpdateReadFeaturedStickers_ extends _Update_ {
  protected get [id](): number {
    return 0x571D2742;
  }

  static get [name](): string {
    return "updateReadFeaturedStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The recent sticker list was updated */
export class UpdateRecentStickers_ extends _Update_ {
  protected get [id](): number {
    return 0x9A422C20;
  }

  static get [name](): string {
    return "updateRecentStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](https://core.telegram.org/method/help.getConfig) */
export class UpdateConfig_ extends _Update_ {
  protected get [id](): number {
    return 0xA229DD06;
  }

  static get [name](): string {
    return "updateConfig"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** [Common message box sequence PTS](https://core.telegram.org/api/updates) has changed, [state has to be refetched using updates.getState](https://core.telegram.org/api/updates#fetching-state) */
export class UpdatePtsChanged_ extends _Update_ {
  protected get [id](): number {
    return 0x3354678F;
  }

  static get [name](): string {
    return "updatePtsChanged"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A webpage preview of a link in a [channel/supergroup](https://core.telegram.org/api/channel) message was generated */
export class UpdateChannelWebPage_ extends _Update_ {
  /** [Channel/supergroup](https://core.telegram.org/api/channel) ID */
  channel_id: bigint;
  /** Generated webpage preview */
  webpage: enums.WebPage;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x2F2BA99F;
  }

  static get [name](): string {
    return "updateChannelWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["webpage", _WebPage_, "WebPage"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.webpage, _WebPage_, "WebPage"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; webpage: enums.WebPage; pts: number; pts_count: number }) {
    super();
    this.channel_id = params.channel_id;
    this.webpage = params.webpage;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** A dialog was pinned/unpinned */
export class UpdateDialogPinned_ extends _Update_ {
  /** Whether the dialog was pinned */
  pinned?: true;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** The dialog */
  peer: enums.DialogPeer;

  protected get [id](): number {
    return 0x6E6FE51C;
  }

  static get [name](): string {
    return "updateDialogPinned"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.0?true"],
      ["folder_id", "number", "flags.1?int"],
      ["peer", _DialogPeer_, "DialogPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.0?true"],
      [this.folder_id ?? null, "number", "flags.1?int"],
      [this.peer, _DialogPeer_, "DialogPeer"],
    ];
  }

  constructor(params: { pinned?: true; folder_id?: number; peer: enums.DialogPeer }) {
    super();
    this.pinned = params.pinned;
    this.folder_id = params.folder_id;
    this.peer = params.peer;
  }
}

/** Pinned dialogs were updated */
export class UpdatePinnedDialogs_ extends _Update_ {
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** New order of pinned dialogs */
  order?: Array<enums.DialogPeer>;

  protected get [id](): number {
    return 0xFA0F3CA2;
  }

  static get [name](): string {
    return "updatePinnedDialogs"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["folder_id", "number", "flags.1?int"],
      ["order", [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.folder_id ?? null, "number", "flags.1?int"],
      [this.order ?? null, [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
    ];
  }

  constructor(params?: { folder_id?: number; order?: Array<enums.DialogPeer> }) {
    super();
    this.folder_id = params?.folder_id;
    this.order = params?.order;
  }
}

/** A new incoming event; for bots only */
export class UpdateBotWebhookJSON_ extends _Update_ {
  /** The event */
  data: enums.DataJSON;

  protected get [id](): number {
    return 0x8317C0C3;
  }

  static get [name](): string {
    return "updateBotWebhookJSON"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["data", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.data, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { data: enums.DataJSON }) {
    super();
    this.data = params.data;
  }
}

/** A new incoming query; for bots only */
export class UpdateBotWebhookJSONQuery_ extends _Update_ {
  /** Query identifier */
  query_id: bigint;
  /** Query data */
  data: enums.DataJSON;
  /** Query timeout */
  timeout: number;

  protected get [id](): number {
    return 0x9B9240A6;
  }

  static get [name](): string {
    return "updateBotWebhookJSONQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["query_id", "bigint", "long"],
      ["data", _DataJSON_, "DataJSON"],
      ["timeout", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.query_id, "bigint", "long"],
      [this.data, _DataJSON_, "DataJSON"],
      [this.timeout, "number", "int"],
    ];
  }

  constructor(params: { query_id: bigint; data: enums.DataJSON; timeout: number }) {
    super();
    this.query_id = params.query_id;
    this.data = params.data;
    this.timeout = params.timeout;
  }
}

/** This object contains information about an incoming shipping query. */
export class UpdateBotShippingQuery_ extends _Update_ {
  /** Unique query identifier */
  query_id: bigint;
  /** User who sent the query */
  user_id: bigint;
  /** Bot specified invoice payload */
  payload: Uint8Array;
  /** User specified shipping address */
  shipping_address: enums.PostAddress;

  protected get [id](): number {
    return 0xB5AEFD7D;
  }

  static get [name](): string {
    return "updateBotShippingQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["query_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["payload", Uint8Array, "bytes"],
      ["shipping_address", _PostAddress_, "PostAddress"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.query_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.payload, Uint8Array, "bytes"],
      [this.shipping_address, _PostAddress_, "PostAddress"],
    ];
  }

  constructor(params: { query_id: bigint; user_id: bigint; payload: Uint8Array; shipping_address: enums.PostAddress }) {
    super();
    this.query_id = params.query_id;
    this.user_id = params.user_id;
    this.payload = params.payload;
    this.shipping_address = params.shipping_address;
  }
}

/** This object contains information about an incoming pre-checkout query. */
export class UpdateBotPrecheckoutQuery_ extends _Update_ {
  /** Unique query identifier */
  query_id: bigint;
  /** User who sent the query */
  user_id: bigint;
  /** Bot specified invoice payload */
  payload: Uint8Array;
  /** Order info provided by the user */
  info?: enums.PaymentRequestedInfo;
  /** Identifier of the shipping option chosen by the user */
  shipping_option_id?: string;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  total_amount: bigint;

  protected get [id](): number {
    return 0x8CAA9A96;
  }

  static get [name](): string {
    return "updateBotPrecheckoutQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["query_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["payload", Uint8Array, "bytes"],
      ["info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      ["shipping_option_id", "string", "flags.1?string"],
      ["currency", "string", "string"],
      ["total_amount", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.query_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.payload, Uint8Array, "bytes"],
      [this.info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      [this.shipping_option_id ?? null, "string", "flags.1?string"],
      [this.currency, "string", "string"],
      [this.total_amount, "bigint", "long"],
    ];
  }

  constructor(params: { query_id: bigint; user_id: bigint; payload: Uint8Array; info?: enums.PaymentRequestedInfo; shipping_option_id?: string; currency: string; total_amount: bigint }) {
    super();
    this.query_id = params.query_id;
    this.user_id = params.user_id;
    this.payload = params.payload;
    this.info = params.info;
    this.shipping_option_id = params.shipping_option_id;
    this.currency = params.currency;
    this.total_amount = params.total_amount;
  }
}

/** An incoming phone call */
export class UpdatePhoneCall_ extends _Update_ {
  /** Phone call */
  phone_call: enums.PhoneCall;

  protected get [id](): number {
    return 0xAB0F6B1E;
  }

  static get [name](): string {
    return "updatePhoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_call", _PhoneCall_, "PhoneCall"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_call, _PhoneCall_, "PhoneCall"],
    ];
  }

  constructor(params: { phone_call: enums.PhoneCall }) {
    super();
    this.phone_call = params.phone_call;
  }
}

/** A language pack has changed, the client should manually fetch the changed strings using [langpack.getDifference](https://core.telegram.org/method/langpack.getDifference) */
export class UpdateLangPackTooLong_ extends _Update_ {
  /** Language code */
  lang_code: string;

  protected get [id](): number {
    return 0x46560264;
  }

  static get [name](): string {
    return "updateLangPackTooLong"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["lang_code", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.lang_code, "string", "string"],
    ];
  }

  constructor(params: { lang_code: string }) {
    super();
    this.lang_code = params.lang_code;
  }
}

/** Language pack updated */
export class UpdateLangPack_ extends _Update_ {
  /** Changed strings */
  difference: enums.LangPackDifference;

  protected get [id](): number {
    return 0x56022F4D;
  }

  static get [name](): string {
    return "updateLangPack"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["difference", _LangPackDifference_, "LangPackDifference"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.difference, _LangPackDifference_, "LangPackDifference"],
    ];
  }

  constructor(params: { difference: enums.LangPackDifference }) {
    super();
    this.difference = params.difference;
  }
}

/** The list of favorited stickers was changed, the client should call [messages.getFavedStickers](https://core.telegram.org/method/messages.getFavedStickers) to refetch the new list */
export class UpdateFavedStickers_ extends _Update_ {
  protected get [id](): number {
    return 0xE511996D;
  }

  static get [name](): string {
    return "updateFavedStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The specified [channel/supergroup](https://core.telegram.org/api/channel) messages were read */
export class UpdateChannelReadMessagesContents_ extends _Update_ {
  /** [Channel/supergroup](https://core.telegram.org/api/channel) ID */
  channel_id: bigint;
  /** [Forum topic ID](https://core.telegram.org/api/forum#forum-topics). */
  top_msg_id?: number;
  /** IDs of messages that were read */
  messages: Array<number>;

  protected get [id](): number {
    return 0xEA29055D;
  }

  static get [name](): string {
    return "updateChannelReadMessagesContents"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["channel_id", "bigint", "long"],
      ["top_msg_id", "number", "flags.0?int"],
      ["messages", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.channel_id, "bigint", "long"],
      [this.top_msg_id ?? null, "number", "flags.0?int"],
      [this.messages, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { channel_id: bigint; top_msg_id?: number; messages: Array<number> }) {
    super();
    this.channel_id = params.channel_id;
    this.top_msg_id = params.top_msg_id;
    this.messages = params.messages;
  }
}

/** All contacts were deleted */
export class UpdateContactsReset_ extends _Update_ {
  protected get [id](): number {
    return 0x7084A7BE;
  }

  static get [name](): string {
    return "updateContactsReset"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The history of a [channel/supergroup](https://core.telegram.org/api/channel) was hidden. */
export class UpdateChannelAvailableMessages_ extends _Update_ {
  /** Channel/supergroup ID */
  channel_id: bigint;
  /** Identifier of a maximum unavailable message in a channel due to hidden history. */
  available_min_id: number;

  protected get [id](): number {
    return 0xB23FC698;
  }

  static get [name](): string {
    return "updateChannelAvailableMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["available_min_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.available_min_id, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; available_min_id: number }) {
    super();
    this.channel_id = params.channel_id;
    this.available_min_id = params.available_min_id;
  }
}

/** The manual unread mark of a chat was changed */
export class UpdateDialogUnreadMark_ extends _Update_ {
  /** Was the chat marked or unmarked as read */
  unread?: true;
  /** The dialog */
  peer: enums.DialogPeer;

  protected get [id](): number {
    return 0xE16459C3;
  }

  static get [name](): string {
    return "updateDialogUnreadMark"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["unread", "true", "flags.0?true"],
      ["peer", _DialogPeer_, "DialogPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.unread ?? null, "true", "flags.0?true"],
      [this.peer, _DialogPeer_, "DialogPeer"],
    ];
  }

  constructor(params: { unread?: true; peer: enums.DialogPeer }) {
    super();
    this.unread = params.unread;
    this.peer = params.peer;
  }
}

/** The results of a poll have changed */
export class UpdateMessagePoll_ extends _Update_ {
  /** Poll ID */
  poll_id: bigint;
  /** If the server knows the client hasn't cached this poll yet, the poll itself */
  poll?: enums.Poll;
  /** New poll results */
  results: enums.PollResults;

  protected get [id](): number {
    return 0xACA1657B;
  }

  static get [name](): string {
    return "updateMessagePoll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["poll_id", "bigint", "long"],
      ["poll", _Poll_, "flags.0?Poll"],
      ["results", _PollResults_, "PollResults"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.poll_id, "bigint", "long"],
      [this.poll ?? null, _Poll_, "flags.0?Poll"],
      [this.results, _PollResults_, "PollResults"],
    ];
  }

  constructor(params: { poll_id: bigint; poll?: enums.Poll; results: enums.PollResults }) {
    super();
    this.poll_id = params.poll_id;
    this.poll = params.poll;
    this.results = params.results;
  }
}

/** Default banned rights in a [normal chat](https://core.telegram.org/api/channel) were updated */
export class UpdateChatDefaultBannedRights_ extends _Update_ {
  /** The chat */
  peer: enums.Peer;
  /** New default banned rights */
  default_banned_rights: enums.ChatBannedRights;
  /** Version */
  version: number;

  protected get [id](): number {
    return 0x54C01850;
  }

  static get [name](): string {
    return "updateChatDefaultBannedRights"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["default_banned_rights", _ChatBannedRights_, "ChatBannedRights"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.default_banned_rights, _ChatBannedRights_, "ChatBannedRights"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; default_banned_rights: enums.ChatBannedRights; version: number }) {
    super();
    this.peer = params.peer;
    this.default_banned_rights = params.default_banned_rights;
    this.version = params.version;
  }
}

/** The peer list of a [peer folder](https://core.telegram.org/api/folders#peer-folders) was updated */
export class UpdateFolderPeers_ extends _Update_ {
  /** New peer list */
  folder_peers: Array<enums.FolderPeer>;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x19360DC0;
  }

  static get [name](): string {
    return "updateFolderPeers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["folder_peers", [_FolderPeer_], "Vector<FolderPeer>"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.folder_peers, [_FolderPeer_], "Vector<FolderPeer>"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { folder_peers: Array<enums.FolderPeer>; pts: number; pts_count: number }) {
    super();
    this.folder_peers = params.folder_peers;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** Settings of a certain peer have changed */
export class UpdatePeerSettings_ extends _Update_ {
  /** The peer */
  peer: enums.Peer;
  /** Associated peer settings */
  settings: enums.PeerSettings;

  protected get [id](): number {
    return 0x6A7E7366;
  }

  static get [name](): string {
    return "updatePeerSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["settings", _PeerSettings_, "PeerSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.settings, _PeerSettings_, "PeerSettings"],
    ];
  }

  constructor(params: { peer: enums.Peer; settings: enums.PeerSettings }) {
    super();
    this.peer = params.peer;
    this.settings = params.settings;
  }
}

/** List of peers near you was updated */
export class UpdatePeerLocated_ extends _Update_ {
  /** Geolocated peer list update */
  peers: Array<enums.PeerLocated>;

  protected get [id](): number {
    return 0xB4AFCFB0;
  }

  static get [name](): string {
    return "updatePeerLocated"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peers", [_PeerLocated_], "Vector<PeerLocated>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peers, [_PeerLocated_], "Vector<PeerLocated>"],
    ];
  }

  constructor(params: { peers: Array<enums.PeerLocated> }) {
    super();
    this.peers = params.peers;
  }
}

/** A message was added to the [schedule queue of a chat](https://core.telegram.org/api/scheduled-messages) */
export class UpdateNewScheduledMessage_ extends _Update_ {
  /** Message */
  message: enums.Message;

  protected get [id](): number {
    return 0x39A51DFB;
  }

  static get [name](): string {
    return "updateNewScheduledMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** Some [scheduled messages](https://core.telegram.org/api/scheduled-messages) were deleted from the schedule queue of a chat */
export class UpdateDeleteScheduledMessages_ extends _Update_ {
  /** Peer */
  peer: enums.Peer;
  /** Deleted scheduled messages */
  messages: Array<number>;

  protected get [id](): number {
    return 0x90866CEE;
  }

  static get [name](): string {
    return "updateDeleteScheduledMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["messages", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.messages, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { peer: enums.Peer; messages: Array<number> }) {
    super();
    this.peer = params.peer;
    this.messages = params.messages;
  }
}

/** A cloud theme was updated */
export class UpdateTheme_ extends _Update_ {
  /** Theme */
  theme: enums.Theme;

  protected get [id](): number {
    return 0x8216FBA3;
  }

  static get [name](): string {
    return "updateTheme"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["theme", _Theme_, "Theme"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.theme, _Theme_, "Theme"],
    ];
  }

  constructor(params: { theme: enums.Theme }) {
    super();
    this.theme = params.theme;
  }
}

/** Live geoposition message was viewed */
export class UpdateGeoLiveViewed_ extends _Update_ {
  /** The user that viewed the live geoposition */
  peer: enums.Peer;
  /** Message ID of geoposition message */
  msg_id: number;

  protected get [id](): number {
    return 0x871FB939;
  }

  static get [name](): string {
    return "updateGeoLiveViewed"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; msg_id: number }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
  }
}

/** A login token (for login via QR code) was accepted. */
export class UpdateLoginToken_ extends _Update_ {
  protected get [id](): number {
    return 0x564FE691;
  }

  static get [name](): string {
    return "updateLoginToken"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A specific peer has voted in a poll */
export class UpdateMessagePollVote_ extends _Update_ {
  /** Poll ID */
  poll_id: bigint;
  /** The peer that voted in the poll */
  peer: enums.Peer;
  /** Chosen option(s) */
  options: Array<Uint8Array>;
  /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
  qts: number;

  protected get [id](): number {
    return 0x24F40E77;
  }

  static get [name](): string {
    return "updateMessagePollVote"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["poll_id", "bigint", "long"],
      ["peer", _Peer_, "Peer"],
      ["options", [Uint8Array], "Vector<bytes>"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.poll_id, "bigint", "long"],
      [this.peer, _Peer_, "Peer"],
      [this.options, [Uint8Array], "Vector<bytes>"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { poll_id: bigint; peer: enums.Peer; options: Array<Uint8Array>; qts: number }) {
    super();
    this.poll_id = params.poll_id;
    this.peer = params.peer;
    this.options = params.options;
    this.qts = params.qts;
  }
}

/** A new [folder](https://core.telegram.org/api/folders) was added */
export class UpdateDialogFilter_ extends _Update_ {
  /** [Folder](https://core.telegram.org/api/folders) ID */
  id: number;
  /** [Folder](https://core.telegram.org/api/folders) info */
  filter?: enums.DialogFilter;

  protected get [id](): number {
    return 0x26FFDE7D;
  }

  static get [name](): string {
    return "updateDialogFilter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "number", "int"],
      ["filter", _DialogFilter_, "flags.0?DialogFilter"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "number", "int"],
      [this.filter ?? null, _DialogFilter_, "flags.0?DialogFilter"],
    ];
  }

  constructor(params: { id: number; filter?: enums.DialogFilter }) {
    super();
    this.id = params.id;
    this.filter = params.filter;
  }
}

/** New [folder](https://core.telegram.org/api/folders) order */
export class UpdateDialogFilterOrder_ extends _Update_ {
  /** Ordered [folder IDs](https://core.telegram.org/api/folders) */
  order: Array<number>;

  protected get [id](): number {
    return 0xA5D72105;
  }

  static get [name](): string {
    return "updateDialogFilterOrder"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["order", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.order, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { order: Array<number> }) {
    super();
    this.order = params.order;
  }
}

/** Clients should update [folder](https://core.telegram.org/api/folders) info */
export class UpdateDialogFilters_ extends _Update_ {
  protected get [id](): number {
    return 0x3504914F;
  }

  static get [name](): string {
    return "updateDialogFilters"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Incoming phone call signaling payload */
export class UpdatePhoneCallSignalingData_ extends _Update_ {
  /** Phone call ID */
  phone_call_id: bigint;
  /** Signaling payload */
  data: Uint8Array;

  protected get [id](): number {
    return 0x2661BF09;
  }

  static get [name](): string {
    return "updatePhoneCallSignalingData"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_call_id", "bigint", "long"],
      ["data", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_call_id, "bigint", "long"],
      [this.data, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { phone_call_id: bigint; data: Uint8Array }) {
    super();
    this.phone_call_id = params.phone_call_id;
    this.data = params.data;
  }
}

/** The forward counter of a message in a channel has changed */
export class UpdateChannelMessageForwards_ extends _Update_ {
  /** Channel ID */
  channel_id: bigint;
  /** ID of the message */
  id: number;
  /** New forward counter */
  forwards: number;

  protected get [id](): number {
    return 0xD29A27F4;
  }

  static get [name](): string {
    return "updateChannelMessageForwards"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["id", "number", "int"],
      ["forwards", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.id, "number", "int"],
      [this.forwards, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; id: number; forwards: number }) {
    super();
    this.channel_id = params.channel_id;
    this.id = params.id;
    this.forwards = params.forwards;
  }
}

/** Incoming comments in a [discussion thread](https://core.telegram.org/api/threads) were marked as read */
export class UpdateReadChannelDiscussionInbox_ extends _Update_ {
  /** [Discussion group ID](https://core.telegram.org/api/channel) */
  channel_id: bigint;
  /** ID of the group message that started the [thread](https://core.telegram.org/api/threads) (message in linked discussion group) */
  top_msg_id: number;
  /** Message ID of latest read incoming message for this [thread](https://core.telegram.org/api/threads) */
  read_max_id: number;
  /** If set, contains the ID of the [channel](https://core.telegram.org/api/channel) that contains the post that started the [comment thread](https://core.telegram.org/api/threads) in the discussion group (`channel_id`) */
  broadcast_id?: bigint;
  /** If set, contains the ID of the channel post that started the [comment thread](https://core.telegram.org/api/threads) */
  broadcast_post?: number;

  protected get [id](): number {
    return 0xD6B19546;
  }

  static get [name](): string {
    return "updateReadChannelDiscussionInbox"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["channel_id", "bigint", "long"],
      ["top_msg_id", "number", "int"],
      ["read_max_id", "number", "int"],
      ["broadcast_id", "bigint", "flags.0?long"],
      ["broadcast_post", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.channel_id, "bigint", "long"],
      [this.top_msg_id, "number", "int"],
      [this.read_max_id, "number", "int"],
      [this.broadcast_id ?? null, "bigint", "flags.0?long"],
      [this.broadcast_post ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { channel_id: bigint; top_msg_id: number; read_max_id: number; broadcast_id?: bigint; broadcast_post?: number }) {
    super();
    this.channel_id = params.channel_id;
    this.top_msg_id = params.top_msg_id;
    this.read_max_id = params.read_max_id;
    this.broadcast_id = params.broadcast_id;
    this.broadcast_post = params.broadcast_post;
  }
}

/** Outgoing comments in a [discussion thread](https://core.telegram.org/api/threads) were marked as read */
export class UpdateReadChannelDiscussionOutbox_ extends _Update_ {
  /** [Supergroup ID](https://core.telegram.org/api/channel) */
  channel_id: bigint;
  /** ID of the group message that started the [thread](https://core.telegram.org/api/threads) */
  top_msg_id: number;
  /** Message ID of latest read outgoing message for this [thread](https://core.telegram.org/api/threads) */
  read_max_id: number;

  protected get [id](): number {
    return 0x695C9E7C;
  }

  static get [name](): string {
    return "updateReadChannelDiscussionOutbox"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["top_msg_id", "number", "int"],
      ["read_max_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.top_msg_id, "number", "int"],
      [this.read_max_id, "number", "int"],
    ];
  }

  constructor(params: { channel_id: bigint; top_msg_id: number; read_max_id: number }) {
    super();
    this.channel_id = params.channel_id;
    this.top_msg_id = params.top_msg_id;
    this.read_max_id = params.read_max_id;
  }
}

/** We blocked a peer, see [here »](https://core.telegram.org/api/block) for more info on blocklists. */
export class UpdatePeerBlocked_ extends _Update_ {
  /** Whether the peer was blocked or unblocked */
  blocked?: true;
  /** Whether the peer was added/removed to/from the story blocklist; if not set, this update affects the main blocklist, see [here »](https://core.telegram.org/api/block) for more info. */
  blocked_my_stories_from?: true;
  /** The (un)blocked peer */
  peer_id: enums.Peer;

  protected get [id](): number {
    return 0xEBE07752;
  }

  static get [name](): string {
    return "updatePeerBlocked"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["blocked", "true", "flags.0?true"],
      ["blocked_my_stories_from", "true", "flags.1?true"],
      ["peer_id", _Peer_, "Peer"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.blocked ?? null, "true", "flags.0?true"],
      [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
      [this.peer_id, _Peer_, "Peer"],
    ];
  }

  constructor(params: { blocked?: true; blocked_my_stories_from?: true; peer_id: enums.Peer }) {
    super();
    this.blocked = params.blocked;
    this.blocked_my_stories_from = params.blocked_my_stories_from;
    this.peer_id = params.peer_id;
  }
}

/** A user is typing in a [supergroup, channel](https://core.telegram.org/api/channel) or [message thread](https://core.telegram.org/api/threads) */
export class UpdateChannelUserTyping_ extends _Update_ {
  /** Channel ID */
  channel_id: bigint;
  /** [Thread ID](https://core.telegram.org/api/threads) */
  top_msg_id?: number;
  /** The peer that is typing */
  from_id: enums.Peer;
  /** Whether the user is typing, sending a media or doing something else */
  action: enums.SendMessageAction;

  protected get [id](): number {
    return 0x8C88C923;
  }

  static get [name](): string {
    return "updateChannelUserTyping"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["channel_id", "bigint", "long"],
      ["top_msg_id", "number", "flags.0?int"],
      ["from_id", _Peer_, "Peer"],
      ["action", _SendMessageAction_, "SendMessageAction"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.channel_id, "bigint", "long"],
      [this.top_msg_id ?? null, "number", "flags.0?int"],
      [this.from_id, _Peer_, "Peer"],
      [this.action, _SendMessageAction_, "SendMessageAction"],
    ];
  }

  constructor(params: { channel_id: bigint; top_msg_id?: number; from_id: enums.Peer; action: enums.SendMessageAction }) {
    super();
    this.channel_id = params.channel_id;
    this.top_msg_id = params.top_msg_id;
    this.from_id = params.from_id;
    this.action = params.action;
  }
}

/** Some messages were pinned in a chat */
export class UpdatePinnedMessages_ extends _Update_ {
  /** Whether the messages were pinned or unpinned */
  pinned?: true;
  /** Peer */
  peer: enums.Peer;
  /** Message IDs */
  messages: Array<number>;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0xED85EAB5;
  }

  static get [name](): string {
    return "updatePinnedMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.0?true"],
      ["peer", _Peer_, "Peer"],
      ["messages", ["number"], "Vector<int>"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.0?true"],
      [this.peer, _Peer_, "Peer"],
      [this.messages, ["number"], "Vector<int>"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { pinned?: true; peer: enums.Peer; messages: Array<number>; pts: number; pts_count: number }) {
    super();
    this.pinned = params.pinned;
    this.peer = params.peer;
    this.messages = params.messages;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** Messages were pinned/unpinned in a [channel/supergroup](https://core.telegram.org/api/channel) */
export class UpdatePinnedChannelMessages_ extends _Update_ {
  /** Whether the messages were pinned or unpinned */
  pinned?: true;
  /** Channel ID */
  channel_id: bigint;
  /** Messages */
  messages: Array<number>;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x5BB98608;
  }

  static get [name](): string {
    return "updatePinnedChannelMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.0?true"],
      ["channel_id", "bigint", "long"],
      ["messages", ["number"], "Vector<int>"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.0?true"],
      [this.channel_id, "bigint", "long"],
      [this.messages, ["number"], "Vector<int>"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { pinned?: true; channel_id: bigint; messages: Array<number>; pts: number; pts_count: number }) {
    super();
    this.pinned = params.pinned;
    this.channel_id = params.channel_id;
    this.messages = params.messages;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** A new chat is available */
export class UpdateChat_ extends _Update_ {
  /** Chat ID */
  chat_id: bigint;

  protected get [id](): number {
    return 0xF89A6A4E;
  }

  static get [name](): string {
    return "updateChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
    ];
  }

  constructor(params: { chat_id: bigint }) {
    super();
    this.chat_id = params.chat_id;
  }
}

/** The participant list of a certain group call has changed */
export class UpdateGroupCallParticipants_ extends _Update_ {
  /** Group call */
  call: enums.InputGroupCall;
  /** New participant list */
  participants: Array<enums.GroupCallParticipant>;
  /** Version */
  version: number;

  protected get [id](): number {
    return 0xF2EBDB4E;
  }

  static get [name](): string {
    return "updateGroupCallParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["call", _InputGroupCall_, "InputGroupCall"],
      ["participants", [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.call, _InputGroupCall_, "InputGroupCall"],
      [this.participants, [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall; participants: Array<enums.GroupCallParticipant>; version: number }) {
    super();
    this.call = params.call;
    this.participants = params.participants;
    this.version = params.version;
  }
}

/** A new groupcall was started */
export class UpdateGroupCall_ extends _Update_ {
  /** The [channel/supergroup](https://core.telegram.org/api/channel) where this group call or livestream takes place */
  chat_id: bigint;
  /** Info about the group call or livestream */
  call: enums.GroupCall;

  protected get [id](): number {
    return 0x14B24500;
  }

  static get [name](): string {
    return "updateGroupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "bigint", "long"],
      ["call", _GroupCall_, "GroupCall"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "bigint", "long"],
      [this.call, _GroupCall_, "GroupCall"],
    ];
  }

  constructor(params: { chat_id: bigint; call: enums.GroupCall }) {
    super();
    this.chat_id = params.chat_id;
    this.call = params.call;
  }
}

/** The Time-To-Live for messages sent by the current user in a specific chat has changed */
export class UpdatePeerHistoryTTL_ extends _Update_ {
  /** The chat */
  peer: enums.Peer;
  /** The new Time-To-Live */
  ttl_period?: number;

  protected get [id](): number {
    return 0xBB9BB9A5;
  }

  static get [name](): string {
    return "updatePeerHistoryTTL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["peer", _Peer_, "Peer"],
      ["ttl_period", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.peer, _Peer_, "Peer"],
      [this.ttl_period ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { peer: enums.Peer; ttl_period?: number }) {
    super();
    this.peer = params.peer;
    this.ttl_period = params.ttl_period;
  }
}

/** A user has joined or left a specific chat */
export class UpdateChatParticipant_ extends _Update_ {
  /** [Chat](https://core.telegram.org/api/channel) ID */
  chat_id: bigint;
  /** When did this event occur */
  date: number;
  /** User that triggered the change (inviter, admin that kicked the user, or the even the **user\_id** itself) */
  actor_id: bigint;
  /** User that was affected by the change */
  user_id: bigint;
  /** Previous participant info (empty if this participant just joined) */
  prev_participant?: enums.ChatParticipant;
  /** New participant info (empty if this participant just left) */
  new_participant?: enums.ChatParticipant;
  /** The invite that was used to join the group */
  invite?: enums.ExportedChatInvite;
  /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
  qts: number;

  protected get [id](): number {
    return 0xD087663A;
  }

  static get [name](): string {
    return "updateChatParticipant"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["chat_id", "bigint", "long"],
      ["date", "number", "int"],
      ["actor_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["prev_participant", _ChatParticipant_, "flags.0?ChatParticipant"],
      ["new_participant", _ChatParticipant_, "flags.1?ChatParticipant"],
      ["invite", _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.chat_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.actor_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.prev_participant ?? null, _ChatParticipant_, "flags.0?ChatParticipant"],
      [this.new_participant ?? null, _ChatParticipant_, "flags.1?ChatParticipant"],
      [this.invite ?? null, _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { chat_id: bigint; date: number; actor_id: bigint; user_id: bigint; prev_participant?: enums.ChatParticipant; new_participant?: enums.ChatParticipant; invite?: enums.ExportedChatInvite; qts: number }) {
    super();
    this.chat_id = params.chat_id;
    this.date = params.date;
    this.actor_id = params.actor_id;
    this.user_id = params.user_id;
    this.prev_participant = params.prev_participant;
    this.new_participant = params.new_participant;
    this.invite = params.invite;
    this.qts = params.qts;
  }
}

/** A participant has left, joined, was banned or admined in a [channel or supergroup](https://core.telegram.org/api/channel). */
export class UpdateChannelParticipant_ extends _Update_ {
  /** Whether the participant joined using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
  via_chatlist?: true;
  /** Channel ID */
  channel_id: bigint;
  /** Date of the event */
  date: number;
  /** User that triggered the change (inviter, admin that kicked the user, or the even the **user\_id** itself) */
  actor_id: bigint;
  /** User that was affected by the change */
  user_id: bigint;
  /** Previous participant status */
  prev_participant?: enums.ChannelParticipant;
  /** New participant status */
  new_participant?: enums.ChannelParticipant;
  /** Chat invite used to join the [channel/supergroup](https://core.telegram.org/api/channel) */
  invite?: enums.ExportedChatInvite;
  /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
  qts: number;

  protected get [id](): number {
    return 0x985D3ABB;
  }

  static get [name](): string {
    return "updateChannelParticipant"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["via_chatlist", "true", "flags.3?true"],
      ["channel_id", "bigint", "long"],
      ["date", "number", "int"],
      ["actor_id", "bigint", "long"],
      ["user_id", "bigint", "long"],
      ["prev_participant", _ChannelParticipant_, "flags.0?ChannelParticipant"],
      ["new_participant", _ChannelParticipant_, "flags.1?ChannelParticipant"],
      ["invite", _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.via_chatlist ?? null, "true", "flags.3?true"],
      [this.channel_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.actor_id, "bigint", "long"],
      [this.user_id, "bigint", "long"],
      [this.prev_participant ?? null, _ChannelParticipant_, "flags.0?ChannelParticipant"],
      [this.new_participant ?? null, _ChannelParticipant_, "flags.1?ChannelParticipant"],
      [this.invite ?? null, _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { via_chatlist?: true; channel_id: bigint; date: number; actor_id: bigint; user_id: bigint; prev_participant?: enums.ChannelParticipant; new_participant?: enums.ChannelParticipant; invite?: enums.ExportedChatInvite; qts: number }) {
    super();
    this.via_chatlist = params.via_chatlist;
    this.channel_id = params.channel_id;
    this.date = params.date;
    this.actor_id = params.actor_id;
    this.user_id = params.user_id;
    this.prev_participant = params.prev_participant;
    this.new_participant = params.new_participant;
    this.invite = params.invite;
    this.qts = params.qts;
  }
}

/** A bot was stopped or re-started. */
export class UpdateBotStopped_ extends _Update_ {
  /** The user ID */
  user_id: bigint;
  /** When did this action occur */
  date: number;
  /** Whether the bot was stopped or started */
  stopped: boolean;
  /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
  qts: number;

  protected get [id](): number {
    return 0xC4870A49;
  }

  static get [name](): string {
    return "updateBotStopped"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["date", "number", "int"],
      ["stopped", "boolean", "Bool"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.stopped, "boolean", "Bool"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; date: number; stopped: boolean; qts: number }) {
    super();
    this.user_id = params.user_id;
    this.date = params.date;
    this.stopped = params.stopped;
    this.qts = params.qts;
  }
}

/** New WebRTC parameters */
export class UpdateGroupCallConnection_ extends _Update_ {
  /** Are these parameters related to the screen capture session currently in progress? */
  presentation?: true;
  /** WebRTC parameters */
  params: enums.DataJSON;

  protected get [id](): number {
    return 0x0B783982;
  }

  static get [name](): string {
    return "updateGroupCallConnection"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["presentation", "true", "flags.0?true"],
      ["params", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.presentation ?? null, "true", "flags.0?true"],
      [this.params, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { presentation?: true; params: enums.DataJSON }) {
    super();
    this.presentation = params.presentation;
    this.params = params.params;
  }
}

/** The [command set](https://core.telegram.org/api/bots/commands) of a certain bot in a certain chat has changed. */
export class UpdateBotCommands_ extends _Update_ {
  /** The affected chat */
  peer: enums.Peer;
  /** ID of the bot that changed its command set */
  bot_id: bigint;
  /** New bot commands */
  commands: Array<enums.BotCommand>;

  protected get [id](): number {
    return 0x4D712F2E;
  }

  static get [name](): string {
    return "updateBotCommands"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["bot_id", "bigint", "long"],
      ["commands", [_BotCommand_], "Vector<BotCommand>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.bot_id, "bigint", "long"],
      [this.commands, [_BotCommand_], "Vector<BotCommand>"],
    ];
  }

  constructor(params: { peer: enums.Peer; bot_id: bigint; commands: Array<enums.BotCommand> }) {
    super();
    this.peer = params.peer;
    this.bot_id = params.bot_id;
    this.commands = params.commands;
  }
}

/** Someone has requested to join a chat or channel */
export class UpdatePendingJoinRequests_ extends _Update_ {
  /** Chat or channel */
  peer: enums.Peer;
  /** Number of pending [join requests »](https://core.telegram.org/api/invites#join-requests) for the chat or channel */
  requests_pending: number;
  /** IDs of users that have recently requested to join */
  recent_requesters: Array<bigint>;

  protected get [id](): number {
    return 0x7063C3DB;
  }

  static get [name](): string {
    return "updatePendingJoinRequests"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["requests_pending", "number", "int"],
      ["recent_requesters", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.requests_pending, "number", "int"],
      [this.recent_requesters, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { peer: enums.Peer; requests_pending: number; recent_requesters: Array<bigint> }) {
    super();
    this.peer = params.peer;
    this.requests_pending = params.requests_pending;
    this.recent_requesters = params.recent_requesters;
  }
}

/** Someone has requested to join a chat or channel (bots only, users will receive an [updatePendingJoinRequests](https://core.telegram.org/constructor/updatePendingJoinRequests), instead) */
export class UpdateBotChatInviteRequester_ extends _Update_ {
  /** The chat or channel in question */
  peer: enums.Peer;
  /** When was the [join request »](https://core.telegram.org/api/invites#join-requests) made */
  date: number;
  /** The user ID that is asking to join the chat or channel */
  user_id: bigint;
  /** Bio of the user */
  about: string;
  /** Chat invite link that was used by the user to send the [join request »](https://core.telegram.org/api/invites#join-requests) */
  invite: enums.ExportedChatInvite;
  /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
  qts: number;

  protected get [id](): number {
    return 0x11DFA986;
  }

  static get [name](): string {
    return "updateBotChatInviteRequester"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["date", "number", "int"],
      ["user_id", "bigint", "long"],
      ["about", "string", "string"],
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.date, "number", "int"],
      [this.user_id, "bigint", "long"],
      [this.about, "string", "string"],
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; date: number; user_id: bigint; about: string; invite: enums.ExportedChatInvite; qts: number }) {
    super();
    this.peer = params.peer;
    this.date = params.date;
    this.user_id = params.user_id;
    this.about = params.about;
    this.invite = params.invite;
    this.qts = params.qts;
  }
}

/** New [message reactions »](https://core.telegram.org/api/reactions) are available */
export class UpdateMessageReactions_ extends _Update_ {
  /** Peer */
  peer: enums.Peer;
  /** Message ID */
  msg_id: number;
  /** [Forum topic ID](https://core.telegram.org/api/forum#forum-topics) */
  top_msg_id?: number;
  /** Reactions */
  reactions: enums.MessageReactions;

  protected get [id](): number {
    return 0x5E1B3CB8;
  }

  static get [name](): string {
    return "updateMessageReactions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
      ["top_msg_id", "number", "flags.0?int"],
      ["reactions", _MessageReactions_, "MessageReactions"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
      [this.top_msg_id ?? null, "number", "flags.0?int"],
      [this.reactions, _MessageReactions_, "MessageReactions"],
    ];
  }

  constructor(params: { peer: enums.Peer; msg_id: number; top_msg_id?: number; reactions: enums.MessageReactions }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.top_msg_id = params.top_msg_id;
    this.reactions = params.reactions;
  }
}

/** The list of installed [attachment menu entries »](https://core.telegram.org/api/bots/attach) has changed, use [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots) to fetch the updated list. */
export class UpdateAttachMenuBots_ extends _Update_ {
  protected get [id](): number {
    return 0x17B7A20B;
  }

  static get [name](): string {
    return "updateAttachMenuBots"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Indicates to a bot that a webview was closed and an inline message was sent on behalf of the user using [messages.sendWebViewResultMessage](https://core.telegram.org/method/messages.sendWebViewResultMessage) */
export class UpdateWebViewResultSent_ extends _Update_ {
  /** Web app interaction ID */
  query_id: bigint;

  protected get [id](): number {
    return 0x1592B79D;
  }

  static get [name](): string {
    return "updateWebViewResultSent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["query_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.query_id, "bigint", "long"],
    ];
  }

  constructor(params: { query_id: bigint }) {
    super();
    this.query_id = params.query_id;
  }
}

/** The menu button behavior for the specified bot has changed */
export class UpdateBotMenuButton_ extends _Update_ {
  /** Bot ID */
  bot_id: bigint;
  /** New menu button */
  button: enums.BotMenuButton;

  protected get [id](): number {
    return 0x14B85813;
  }

  static get [name](): string {
    return "updateBotMenuButton"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bot_id", "bigint", "long"],
      ["button", _BotMenuButton_, "BotMenuButton"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bot_id, "bigint", "long"],
      [this.button, _BotMenuButton_, "BotMenuButton"],
    ];
  }

  constructor(params: { bot_id: bigint; button: enums.BotMenuButton }) {
    super();
    this.bot_id = params.bot_id;
    this.button = params.button;
  }
}

/** The list of saved notification sounds has changed, use [account.getSavedRingtones](https://core.telegram.org/method/account.getSavedRingtones) to fetch the new list. */
export class UpdateSavedRingtones_ extends _Update_ {
  protected get [id](): number {
    return 0x74D8BE99;
  }

  static get [name](): string {
    return "updateSavedRingtones"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A pending [voice message transcription »](https://core.telegram.org/api/transcribe) initiated with [messages.transcribeAudio](https://core.telegram.org/method/messages.transcribeAudio) was updated. */
export class UpdateTranscribedAudio_ extends _Update_ {
  /** Whether this transcription is still pending and further [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) about it will be sent in the future. */
  pending?: true;
  /** Peer of the transcribed message */
  peer: enums.Peer;
  /** Transcribed message ID */
  msg_id: number;
  /** Transcription ID */
  transcription_id: bigint;
  /** Transcribed text */
  text: string;

  protected get [id](): number {
    return 0x0084CD5A;
  }

  static get [name](): string {
    return "updateTranscribedAudio"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pending", "true", "flags.0?true"],
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
      ["transcription_id", "bigint", "long"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pending ?? null, "true", "flags.0?true"],
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
      [this.transcription_id, "bigint", "long"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { pending?: true; peer: enums.Peer; msg_id: number; transcription_id: bigint; text: string }) {
    super();
    this.pending = params.pending;
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.transcription_id = params.transcription_id;
    this.text = params.text;
  }
}

/** Some featured [custom emoji stickers](https://core.telegram.org/api/custom-emoji) were marked as read */
export class UpdateReadFeaturedEmojiStickers_ extends _Update_ {
  protected get [id](): number {
    return 0xFB4C496C;
  }

  static get [name](): string {
    return "updateReadFeaturedEmojiStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The [emoji status](https://core.telegram.org/api/emoji-status) of a certain user has changed */
export class UpdateUserEmojiStatus_ extends _Update_ {
  /** User ID */
  user_id: bigint;
  /** New [emoji status](https://core.telegram.org/api/emoji-status) */
  emoji_status: enums.EmojiStatus;

  protected get [id](): number {
    return 0x28373599;
  }

  static get [name](): string {
    return "updateUserEmojiStatus"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["emoji_status", _EmojiStatus_, "EmojiStatus"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.emoji_status, _EmojiStatus_, "EmojiStatus"],
    ];
  }

  constructor(params: { user_id: bigint; emoji_status: enums.EmojiStatus }) {
    super();
    this.user_id = params.user_id;
    this.emoji_status = params.emoji_status;
  }
}

/** The list of recent [emoji statuses](https://core.telegram.org/api/emoji-status) has changed */
export class UpdateRecentEmojiStatuses_ extends _Update_ {
  protected get [id](): number {
    return 0x30F443DB;
  }

  static get [name](): string {
    return "updateRecentEmojiStatuses"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The list of recent [message reactions](https://core.telegram.org/api/reactions) has changed */
export class UpdateRecentReactions_ extends _Update_ {
  protected get [id](): number {
    return 0x6F7863F4;
  }

  static get [name](): string {
    return "updateRecentReactions"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A stickerset was just moved to top, [see here for more info »](https://core.telegram.org/api/stickers#recent-stickersets) */
export class UpdateMoveStickerSetToTop_ extends _Update_ {
  /** This update is referring to a [mask stickerset](https://core.telegram.org/api/stickers#mask-stickers) */
  masks?: true;
  /** This update is referring to a [custom emoji stickerset](https://core.telegram.org/api/custom-emoji) */
  emojis?: true;
  /** [Stickerset](https://core.telegram.org/api/stickers) ID */
  stickerset: bigint;

  protected get [id](): number {
    return 0x86FCCF85;
  }

  static get [name](): string {
    return "updateMoveStickerSetToTop"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["masks", "true", "flags.0?true"],
      ["emojis", "true", "flags.1?true"],
      ["stickerset", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.masks ?? null, "true", "flags.0?true"],
      [this.emojis ?? null, "true", "flags.1?true"],
      [this.stickerset, "bigint", "long"],
    ];
  }

  constructor(params: { masks?: true; emojis?: true; stickerset: bigint }) {
    super();
    this.masks = params.masks;
    this.emojis = params.emojis;
    this.stickerset = params.stickerset;
  }
}

/** Extended media update */
export class UpdateMessageExtendedMedia_ extends _Update_ {
  /** Peer */
  peer: enums.Peer;
  /** Message ID */
  msg_id: number;
  /** Extended media */
  extended_media: enums.MessageExtendedMedia;

  protected get [id](): number {
    return 0x5A73A98C;
  }

  static get [name](): string {
    return "updateMessageExtendedMedia"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
      ["extended_media", _MessageExtendedMedia_, "MessageExtendedMedia"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
      [this.extended_media, _MessageExtendedMedia_, "MessageExtendedMedia"],
    ];
  }

  constructor(params: { peer: enums.Peer; msg_id: number; extended_media: enums.MessageExtendedMedia }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.extended_media = params.extended_media;
  }
}

/** A [forum topic »](https://core.telegram.org/api/forum#forum-topics) was pinned or unpinned. */
export class UpdateChannelPinnedTopic_ extends _Update_ {
  /** Whether the topic was pinned or unpinned */
  pinned?: true;
  /** The forum ID */
  channel_id: bigint;
  /** The topic ID */
  topic_id: number;

  protected get [id](): number {
    return 0x192EFBE3;
  }

  static get [name](): string {
    return "updateChannelPinnedTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.0?true"],
      ["channel_id", "bigint", "long"],
      ["topic_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.0?true"],
      [this.channel_id, "bigint", "long"],
      [this.topic_id, "number", "int"],
    ];
  }

  constructor(params: { pinned?: true; channel_id: bigint; topic_id: number }) {
    super();
    this.pinned = params.pinned;
    this.channel_id = params.channel_id;
    this.topic_id = params.topic_id;
  }
}

/** The [pinned topics](https://core.telegram.org/api/forum#forum-topics) of a forum have changed. */
export class UpdateChannelPinnedTopics_ extends _Update_ {
  /** Forum ID. */
  channel_id: bigint;
  /** Ordered list containing the IDs of all pinned topics. */
  order?: Array<number>;

  protected get [id](): number {
    return 0xFE198602;
  }

  static get [name](): string {
    return "updateChannelPinnedTopics"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["channel_id", "bigint", "long"],
      ["order", ["number"], "flags.0?Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.channel_id, "bigint", "long"],
      [this.order ?? null, ["number"], "flags.0?Vector<int>"],
    ];
  }

  constructor(params: { channel_id: bigint; order?: Array<number> }) {
    super();
    this.channel_id = params.channel_id;
    this.order = params.order;
  }
}

/** User information was updated, it must be refetched using [users.getFullUser](https://core.telegram.org/method/users.getFullUser). */
export class UpdateUser_ extends _Update_ {
  /** User ID */
  user_id: bigint;

  protected get [id](): number {
    return 0x20529438;
  }

  static get [name](): string {
    return "updateUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint }) {
    super();
    this.user_id = params.user_id;
  }
}

/** Media autosave settings have changed and must be refetched using [account.getAutoSaveSettings](https://core.telegram.org/method/account.getAutoSaveSettings). */
export class UpdateAutoSaveSettings_ extends _Update_ {
  protected get [id](): number {
    return 0xEC05B097;
  }

  static get [name](): string {
    return "updateAutoSaveSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** 0-N updates of this type may be returned only when invoking [messages.addChatUser](https://core.telegram.org/method/messages.addChatUser), [channels.inviteToChannel](https://core.telegram.org/method/channels.inviteToChannel) or [messages.createChat](https://core.telegram.org/method/messages.createChat): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https://core.telegram.org/api/invites) can be shared with the user, instead. */
export class UpdateGroupInvitePrivacyForbidden_ extends _Update_ {
  /** ID of the user we couldn't add. */
  user_id: bigint;

  protected get [id](): number {
    return 0xCCF08AD6;
  }

  static get [name](): string {
    return "updateGroupInvitePrivacyForbidden"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: bigint }) {
    super();
    this.user_id = params.user_id;
  }
}

/** A new story was posted. */
export class UpdateStory_ extends _Update_ {
  /** ID of the poster. */
  peer: enums.Peer;
  /** The story that was posted. */
  story: enums.StoryItem;

  protected get [id](): number {
    return 0x75B3B798;
  }

  static get [name](): string {
    return "updateStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["story", _StoryItem_, "StoryItem"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.story, _StoryItem_, "StoryItem"],
    ];
  }

  constructor(params: { peer: enums.Peer; story: enums.StoryItem }) {
    super();
    this.peer = params.peer;
    this.story = params.story;
  }
}

/** Stories of a specific peer were marked as read. */
export class UpdateReadStories_ extends _Update_ {
  /** The peer */
  peer: enums.Peer;
  /** ID of the last story that was marked as read */
  max_id: number;

  protected get [id](): number {
    return 0xF74E932B;
  }

  static get [name](): string {
    return "updateReadStories"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["max_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.max_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; max_id: number }) {
    super();
    this.peer = params.peer;
    this.max_id = params.max_id;
  }
}

/** A story was successfully uploaded. */
export class UpdateStoryID_ extends _Update_ {
  /** The `id` that was attributed to the story. */
  id: number;
  /** The `random_id` that was passed to [stories.sendStory](https://core.telegram.org/method/stories.sendStory). */
  random_id: bigint;

  protected get [id](): number {
    return 0x1BF335B9;
  }

  static get [name](): string {
    return "updateStoryID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
      ["random_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
      [this.random_id, "bigint", "long"],
    ];
  }

  constructor(params: { id: number; random_id: bigint }) {
    super();
    this.id = params.id;
    this.random_id = params.random_id;
  }
}

/** Indicates that [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode) was activated. */
export class UpdateStoriesStealthMode_ extends _Update_ {
  /** Information about the current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) session. */
  stealth_mode: enums.StoriesStealthMode;

  protected get [id](): number {
    return 0x2C084DC1;
  }

  static get [name](): string {
    return "updateStoriesStealthMode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["stealth_mode", _StoriesStealthMode_, "StoriesStealthMode"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.stealth_mode, _StoriesStealthMode_, "StoriesStealthMode"],
    ];
  }

  constructor(params: { stealth_mode: enums.StoriesStealthMode }) {
    super();
    this.stealth_mode = params.stealth_mode;
  }
}

/** Indicates we [reacted to a story »](https://core.telegram.org/api/stories#reactions). */
export class UpdateSentStoryReaction_ extends _Update_ {
  /** The peer that sent the story */
  peer: enums.Peer;
  /** ID of the story we reacted to */
  story_id: number;
  /** The reaction that was sent */
  reaction: enums.Reaction;

  protected get [id](): number {
    return 0x7D627683;
  }

  static get [name](): string {
    return "updateSentStoryReaction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["story_id", "number", "int"],
      ["reaction", _Reaction_, "Reaction"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.story_id, "number", "int"],
      [this.reaction, _Reaction_, "Reaction"],
    ];
  }

  constructor(params: { peer: enums.Peer; story_id: number; reaction: enums.Reaction }) {
    super();
    this.peer = params.peer;
    this.story_id = params.story_id;
    this.reaction = params.reaction;
  }
}

/** A [channel boost](https://core.telegram.org/api/boost) has changed (bots only) */
export class UpdateBotChatBoost_ extends _Update_ {
  /** Channel */
  peer: enums.Peer;
  /** New boost information */
  boost: enums.Boost;
  /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
  qts: number;

  protected get [id](): number {
    return 0x904DD49C;
  }

  static get [name](): string {
    return "updateBotChatBoost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["boost", _Boost_, "Boost"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.boost, _Boost_, "Boost"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; boost: enums.Boost; qts: number }) {
    super();
    this.peer = params.peer;
    this.boost = params.boost;
    this.qts = params.qts;
  }
}

/** Users may also choose to display messages from all topics as if they were sent to a normal group, using a "View as messages" setting in the local client.  
This setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of the `view_forum_as_messages` flag of [channelFull](https://core.telegram.org/constructor/channelFull) or [dialog](https://core.telegram.org/constructor/dialog) and emit an [updateChannelViewForumAsMessages](https://core.telegram.org/constructor/updateChannelViewForumAsMessages). */
export class UpdateChannelViewForumAsMessages_ extends _Update_ {
  /** The forum ID */
  channel_id: bigint;
  /** The new value of the toggle. */
  enabled: boolean;

  protected get [id](): number {
    return 0x07B68920;
  }

  static get [name](): string {
    return "updateChannelViewForumAsMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["enabled", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.enabled, "boolean", "Bool"],
    ];
  }

  constructor(params: { channel_id: bigint; enabled: boolean }) {
    super();
    this.channel_id = params.channel_id;
    this.enabled = params.enabled;
  }
}

/** The [wallpaper »](https://core.telegram.org/api/wallpapers) of a given peer has changed. */
export class UpdatePeerWallpaper_ extends _Update_ {
  /** Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the `for_both` flag, see [here »](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info. */
  wallpaper_overridden?: true;
  /** The peer where the wallpaper has changed. */
  peer: enums.Peer;
  /** The new wallpaper, if none the wallpaper was removed and the default wallpaper should be used. */
  wallpaper?: enums.WallPaper;

  protected get [id](): number {
    return 0xAE3F101D;
  }

  static get [name](): string {
    return "updatePeerWallpaper"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["wallpaper_overridden", "true", "flags.1?true"],
      ["peer", _Peer_, "Peer"],
      ["wallpaper", _WallPaper_, "flags.0?WallPaper"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.wallpaper_overridden ?? null, "true", "flags.1?true"],
      [this.peer, _Peer_, "Peer"],
      [this.wallpaper ?? null, _WallPaper_, "flags.0?WallPaper"],
    ];
  }

  constructor(params: { wallpaper_overridden?: true; peer: enums.Peer; wallpaper?: enums.WallPaper }) {
    super();
    this.wallpaper_overridden = params.wallpaper_overridden;
    this.peer = params.peer;
    this.wallpaper = params.wallpaper;
  }
}

/** Bots only: a user has changed their reactions on a message with public reactions. */
export class UpdateBotMessageReaction_ extends _Update_ {
  /** Peer of the reacted-to message. */
  peer: enums.Peer;
  /** ID of the reacted-to message. */
  msg_id: number;
  /** Date of the change. */
  date: number;
  /** The user that (un)reacted to the message. */
  actor: enums.Peer;
  /** Old reactions */
  old_reactions: Array<enums.Reaction>;
  /** New reactions */
  new_reactions: Array<enums.Reaction>;
  /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
  qts: number;

  protected get [id](): number {
    return 0xAC21D3CE;
  }

  static get [name](): string {
    return "updateBotMessageReaction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
      ["date", "number", "int"],
      ["actor", _Peer_, "Peer"],
      ["old_reactions", [_Reaction_], "Vector<Reaction>"],
      ["new_reactions", [_Reaction_], "Vector<Reaction>"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
      [this.date, "number", "int"],
      [this.actor, _Peer_, "Peer"],
      [this.old_reactions, [_Reaction_], "Vector<Reaction>"],
      [this.new_reactions, [_Reaction_], "Vector<Reaction>"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; msg_id: number; date: number; actor: enums.Peer; old_reactions: Array<enums.Reaction>; new_reactions: Array<enums.Reaction>; qts: number }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.date = params.date;
    this.actor = params.actor;
    this.old_reactions = params.old_reactions;
    this.new_reactions = params.new_reactions;
    this.qts = params.qts;
  }
}

/** Bots only: the number of reactions on a message with anonymous reactions has changed. */
export class UpdateBotMessageReactions_ extends _Update_ {
  /** Peer of the reacted-to message. */
  peer: enums.Peer;
  /** ID of the reacted-to message. */
  msg_id: number;
  /** Date of the change. */
  date: number;
  /** New reaction counters. */
  reactions: Array<enums.ReactionCount>;
  /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
  qts: number;

  protected get [id](): number {
    return 0x09CB7759;
  }

  static get [name](): string {
    return "updateBotMessageReactions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["msg_id", "number", "int"],
      ["date", "number", "int"],
      ["reactions", [_ReactionCount_], "Vector<ReactionCount>"],
      ["qts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.msg_id, "number", "int"],
      [this.date, "number", "int"],
      [this.reactions, [_ReactionCount_], "Vector<ReactionCount>"],
      [this.qts, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; msg_id: number; date: number; reactions: Array<enums.ReactionCount>; qts: number }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.date = params.date;
    this.reactions = params.reactions;
    this.qts = params.qts;
  }
}

/** A [saved message dialog](https://core.telegram.org/api/saved-messages) was pinned/unpinned */
export class UpdateSavedDialogPinned_ extends _Update_ {
  /** Whether the dialog was pinned */
  pinned?: true;
  /** The dialog */
  peer: enums.DialogPeer;

  protected get [id](): number {
    return 0xAEAF9E74;
  }

  static get [name](): string {
    return "updateSavedDialogPinned"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.0?true"],
      ["peer", _DialogPeer_, "DialogPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.0?true"],
      [this.peer, _DialogPeer_, "DialogPeer"],
    ];
  }

  constructor(params: { pinned?: true; peer: enums.DialogPeer }) {
    super();
    this.pinned = params.pinned;
    this.peer = params.peer;
  }
}

/** [Pinned saved dialogs »](https://core.telegram.org/api/saved-messages) were updated */
export class UpdatePinnedSavedDialogs_ extends _Update_ {
  /** New order of pinned saved dialogs */
  order?: Array<enums.DialogPeer>;

  protected get [id](): number {
    return 0x686C85A6;
  }

  static get [name](): string {
    return "updatePinnedSavedDialogs"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["order", [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.order ?? null, [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
    ];
  }

  constructor(params?: { order?: Array<enums.DialogPeer> }) {
    super();
    this.order = params?.order;
  }
}

export class UpdateSavedReactionTags_ extends _Update_ {
  protected get [id](): number {
    return 0x39C67432;
  }

  static get [name](): string {
    return "updateSavedReactionTags"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Updates state. */
export class updates_State_ extends _updates_State_ {
  /** Number of events occurred in a text box */
  pts: number;
  /** Position in a sequence of updates in secret chats. For further details refer to article [secret chats](https://core.telegram.org/api/end-to-end) */
  qts: number;
  /** Date of condition */
  date: number;
  /** Number of sent updates */
  seq: number;
  /** Number of unread messages */
  unread_count: number;

  protected get [id](): number {
    return 0xA56C2A3E;
  }

  static get [name](): string {
    return "updates.state"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pts", "number", "int"],
      ["qts", "number", "int"],
      ["date", "number", "int"],
      ["seq", "number", "int"],
      ["unread_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pts, "number", "int"],
      [this.qts, "number", "int"],
      [this.date, "number", "int"],
      [this.seq, "number", "int"],
      [this.unread_count, "number", "int"],
    ];
  }

  constructor(params: { pts: number; qts: number; date: number; seq: number; unread_count: number }) {
    super();
    this.pts = params.pts;
    this.qts = params.qts;
    this.date = params.date;
    this.seq = params.seq;
    this.unread_count = params.unread_count;
  }
}

/** No events. */
export class updates_DifferenceEmpty_ extends _updates_Difference_ {
  /** Current date */
  date: number;
  /** Number of sent updates */
  seq: number;

  protected get [id](): number {
    return 0x5D75A138;
  }

  static get [name](): string {
    return "updates.differenceEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["date", "number", "int"],
      ["seq", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.date, "number", "int"],
      [this.seq, "number", "int"],
    ];
  }

  constructor(params: { date: number; seq: number }) {
    super();
    this.date = params.date;
    this.seq = params.seq;
  }
}

/** Full list of occurred events. */
export class updates_Difference_ extends _updates_Difference_ {
  /** List of new messages */
  new_messages: Array<enums.Message>;
  /** List of new encrypted secret chat messages */
  new_encrypted_messages: Array<enums.EncryptedMessage>;
  /** List of updates */
  other_updates: Array<enums.Update>;
  /** List of chats mentioned in events */
  chats: Array<enums.Chat>;
  /** List of users mentioned in events */
  users: Array<enums.User>;
  /** Current state */
  state: enums.updates.State;

  protected get [id](): number {
    return 0x00F49CA0;
  }

  static get [name](): string {
    return "updates.difference"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_messages", [_Message_], "Vector<Message>"],
      ["new_encrypted_messages", [_EncryptedMessage_], "Vector<EncryptedMessage>"],
      ["other_updates", [_Update_], "Vector<Update>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["state", _updates_State_, "updates.State"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_messages, [_Message_], "Vector<Message>"],
      [this.new_encrypted_messages, [_EncryptedMessage_], "Vector<EncryptedMessage>"],
      [this.other_updates, [_Update_], "Vector<Update>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.state, _updates_State_, "updates.State"],
    ];
  }

  constructor(params: { new_messages: Array<enums.Message>; new_encrypted_messages: Array<enums.EncryptedMessage>; other_updates: Array<enums.Update>; chats: Array<enums.Chat>; users: Array<enums.User>; state: enums.updates.State }) {
    super();
    this.new_messages = params.new_messages;
    this.new_encrypted_messages = params.new_encrypted_messages;
    this.other_updates = params.other_updates;
    this.chats = params.chats;
    this.users = params.users;
    this.state = params.state;
  }
}

/** Incomplete list of occurred events. */
export class updates_DifferenceSlice_ extends _updates_Difference_ {
  /** List of new messages */
  new_messages: Array<enums.Message>;
  /** New messages from the [encrypted event sequence](https://core.telegram.org/api/updates) */
  new_encrypted_messages: Array<enums.EncryptedMessage>;
  /** List of updates */
  other_updates: Array<enums.Update>;
  /** List of chats mentioned in events */
  chats: Array<enums.Chat>;
  /** List of users mentioned in events */
  users: Array<enums.User>;
  /** Intermediary state */
  intermediate_state: enums.updates.State;

  protected get [id](): number {
    return 0xA8FB1981;
  }

  static get [name](): string {
    return "updates.differenceSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_messages", [_Message_], "Vector<Message>"],
      ["new_encrypted_messages", [_EncryptedMessage_], "Vector<EncryptedMessage>"],
      ["other_updates", [_Update_], "Vector<Update>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["intermediate_state", _updates_State_, "updates.State"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_messages, [_Message_], "Vector<Message>"],
      [this.new_encrypted_messages, [_EncryptedMessage_], "Vector<EncryptedMessage>"],
      [this.other_updates, [_Update_], "Vector<Update>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.intermediate_state, _updates_State_, "updates.State"],
    ];
  }

  constructor(params: { new_messages: Array<enums.Message>; new_encrypted_messages: Array<enums.EncryptedMessage>; other_updates: Array<enums.Update>; chats: Array<enums.Chat>; users: Array<enums.User>; intermediate_state: enums.updates.State }) {
    super();
    this.new_messages = params.new_messages;
    this.new_encrypted_messages = params.new_encrypted_messages;
    this.other_updates = params.other_updates;
    this.chats = params.chats;
    this.users = params.users;
    this.intermediate_state = params.intermediate_state;
  }
}

/** The difference is [too long](https://core.telegram.org/api/updates#recovering-gaps), and the specified state must be used to refetch updates. */
export class updates_DifferenceTooLong_ extends _updates_Difference_ {
  /** The new state to use. */
  pts: number;

  protected get [id](): number {
    return 0x4AFE8F6D;
  }

  static get [name](): string {
    return "updates.differenceTooLong"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pts, "number", "int"],
    ];
  }

  constructor(params: { pts: number }) {
    super();
    this.pts = params.pts;
  }
}

/** Too many updates, it is necessary to execute [updates.getDifference](https://core.telegram.org/method/updates.getDifference). */
export class UpdatesTooLong_ extends _Updates_ {
  protected get [id](): number {
    return 0xE317AF7E;
  }

  static get [name](): string {
    return "updatesTooLong"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Info about a message sent to (received from) another user */
export class UpdateShortMessage_ extends _Updates_ {
  /** Whether the message is outgoing */
  out?: true;
  /** Whether we were mentioned in the message */
  mentioned?: true;
  /** Whether there are some **unread** mentions in this message */
  media_unread?: true;
  /** If true, the message is a silent message, no notifications should be triggered */
  silent?: true;
  /** The message ID */
  id: number;
  /** The ID of the sender (if `outgoing` will be the ID of the destination) of the message */
  user_id: bigint;
  /** The message */
  message: string;
  /** [PTS](https://core.telegram.org/api/updates) */
  pts: number;
  /** [PTS count](https://core.telegram.org/api/updates) */
  pts_count: number;
  /** [date](https://core.telegram.org/api/updates) */
  date: number;
  /** Info about a forwarded message */
  fwd_from?: enums.MessageFwdHeader;
  /** Info about the inline bot used to generate this message */
  via_bot_id?: bigint;
  /** Reply and [thread](https://core.telegram.org/api/threads) information */
  reply_to?: enums.MessageReplyHeader;
  /** [Entities](https://core.telegram.org/api/entities) for styled text */
  entities?: Array<enums.MessageEntity>;
  /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
  ttl_period?: number;

  protected get [id](): number {
    return 0x313BC7F8;
  }

  static get [name](): string {
    return "updateShortMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["out", "true", "flags.1?true"],
      ["mentioned", "true", "flags.4?true"],
      ["media_unread", "true", "flags.5?true"],
      ["silent", "true", "flags.13?true"],
      ["id", "number", "int"],
      ["user_id", "bigint", "long"],
      ["message", "string", "string"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
      ["date", "number", "int"],
      ["fwd_from", _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
      ["via_bot_id", "bigint", "flags.11?long"],
      ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      ["ttl_period", "number", "flags.25?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.out ?? null, "true", "flags.1?true"],
      [this.mentioned ?? null, "true", "flags.4?true"],
      [this.media_unread ?? null, "true", "flags.5?true"],
      [this.silent ?? null, "true", "flags.13?true"],
      [this.id, "number", "int"],
      [this.user_id, "bigint", "long"],
      [this.message, "string", "string"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
      [this.date, "number", "int"],
      [this.fwd_from ?? null, _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
      [this.via_bot_id ?? null, "bigint", "flags.11?long"],
      [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      [this.ttl_period ?? null, "number", "flags.25?int"],
    ];
  }

  constructor(params: { out?: true; mentioned?: true; media_unread?: true; silent?: true; id: number; user_id: bigint; message: string; pts: number; pts_count: number; date: number; fwd_from?: enums.MessageFwdHeader; via_bot_id?: bigint; reply_to?: enums.MessageReplyHeader; entities?: Array<enums.MessageEntity>; ttl_period?: number }) {
    super();
    this.out = params.out;
    this.mentioned = params.mentioned;
    this.media_unread = params.media_unread;
    this.silent = params.silent;
    this.id = params.id;
    this.user_id = params.user_id;
    this.message = params.message;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
    this.date = params.date;
    this.fwd_from = params.fwd_from;
    this.via_bot_id = params.via_bot_id;
    this.reply_to = params.reply_to;
    this.entities = params.entities;
    this.ttl_period = params.ttl_period;
  }
}

/** Shortened constructor containing info on one new incoming text message from a chat */
export class UpdateShortChatMessage_ extends _Updates_ {
  /** Whether the message is outgoing */
  out?: true;
  /** Whether we were mentioned in this message */
  mentioned?: true;
  /** Whether the message contains some **unread** mentions */
  media_unread?: true;
  /** If true, the message is a silent message, no notifications should be triggered */
  silent?: true;
  /** ID of the message */
  id: number;
  /** ID of the sender of the message */
  from_id: bigint;
  /** ID of the chat where the message was sent */
  chat_id: bigint;
  /** Message */
  message: string;
  /** [PTS](https://core.telegram.org/api/updates) */
  pts: number;
  /** [PTS count](https://core.telegram.org/api/updates) */
  pts_count: number;
  /** [date](https://core.telegram.org/api/updates) */
  date: number;
  /** Info about a forwarded message */
  fwd_from?: enums.MessageFwdHeader;
  /** Info about the inline bot used to generate this message */
  via_bot_id?: bigint;
  /** Reply (thread) information */
  reply_to?: enums.MessageReplyHeader;
  /** [Entities](https://core.telegram.org/api/entities) for styled text */
  entities?: Array<enums.MessageEntity>;
  /** Time To Live of the message, once updateShortChatMessage.date+updateShortChatMessage.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
  ttl_period?: number;

  protected get [id](): number {
    return 0x4D6DEEA5;
  }

  static get [name](): string {
    return "updateShortChatMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["out", "true", "flags.1?true"],
      ["mentioned", "true", "flags.4?true"],
      ["media_unread", "true", "flags.5?true"],
      ["silent", "true", "flags.13?true"],
      ["id", "number", "int"],
      ["from_id", "bigint", "long"],
      ["chat_id", "bigint", "long"],
      ["message", "string", "string"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
      ["date", "number", "int"],
      ["fwd_from", _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
      ["via_bot_id", "bigint", "flags.11?long"],
      ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      ["ttl_period", "number", "flags.25?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.out ?? null, "true", "flags.1?true"],
      [this.mentioned ?? null, "true", "flags.4?true"],
      [this.media_unread ?? null, "true", "flags.5?true"],
      [this.silent ?? null, "true", "flags.13?true"],
      [this.id, "number", "int"],
      [this.from_id, "bigint", "long"],
      [this.chat_id, "bigint", "long"],
      [this.message, "string", "string"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
      [this.date, "number", "int"],
      [this.fwd_from ?? null, _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
      [this.via_bot_id ?? null, "bigint", "flags.11?long"],
      [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
      [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      [this.ttl_period ?? null, "number", "flags.25?int"],
    ];
  }

  constructor(params: { out?: true; mentioned?: true; media_unread?: true; silent?: true; id: number; from_id: bigint; chat_id: bigint; message: string; pts: number; pts_count: number; date: number; fwd_from?: enums.MessageFwdHeader; via_bot_id?: bigint; reply_to?: enums.MessageReplyHeader; entities?: Array<enums.MessageEntity>; ttl_period?: number }) {
    super();
    this.out = params.out;
    this.mentioned = params.mentioned;
    this.media_unread = params.media_unread;
    this.silent = params.silent;
    this.id = params.id;
    this.from_id = params.from_id;
    this.chat_id = params.chat_id;
    this.message = params.message;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
    this.date = params.date;
    this.fwd_from = params.fwd_from;
    this.via_bot_id = params.via_bot_id;
    this.reply_to = params.reply_to;
    this.entities = params.entities;
    this.ttl_period = params.ttl_period;
  }
}

/** Shortened constructor containing info on one update not requiring auxiliary data */
export class UpdateShort_ extends _Updates_ {
  /** Update */
  update: enums.Update;
  /** Date of event */
  date: number;

  protected get [id](): number {
    return 0x78D4DEC1;
  }

  static get [name](): string {
    return "updateShort"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["update", _Update_, "Update"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.update, _Update_, "Update"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { update: enums.Update; date: number }) {
    super();
    this.update = params.update;
    this.date = params.date;
  }
}

/** Constructor for a group of updates. */
export class UpdatesCombined_ extends _Updates_ {
  /** List of updates */
  updates: Array<enums.Update>;
  /** List of users mentioned in updates */
  users: Array<enums.User>;
  /** List of chats mentioned in updates */
  chats: Array<enums.Chat>;
  /** Current date */
  date: number;
  /** Value **seq** for the earliest update in a group */
  seq_start: number;
  /** Value **seq** for the latest update in a group */
  seq: number;

  protected get [id](): number {
    return 0x725B04C3;
  }

  static get [name](): string {
    return "updatesCombined"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["updates", [_Update_], "Vector<Update>"],
      ["users", [_User_], "Vector<User>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["date", "number", "int"],
      ["seq_start", "number", "int"],
      ["seq", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.updates, [_Update_], "Vector<Update>"],
      [this.users, [_User_], "Vector<User>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.date, "number", "int"],
      [this.seq_start, "number", "int"],
      [this.seq, "number", "int"],
    ];
  }

  constructor(params: { updates: Array<enums.Update>; users: Array<enums.User>; chats: Array<enums.Chat>; date: number; seq_start: number; seq: number }) {
    super();
    this.updates = params.updates;
    this.users = params.users;
    this.chats = params.chats;
    this.date = params.date;
    this.seq_start = params.seq_start;
    this.seq = params.seq;
  }
}

/** Full constructor of updates */
export class Updates_ extends _Updates_ {
  /** List of updates */
  updates: Array<enums.Update>;
  /** List of users mentioned in updates */
  users: Array<enums.User>;
  /** List of chats mentioned in updates */
  chats: Array<enums.Chat>;
  /** Current date */
  date: number;
  /** Total number of sent updates */
  seq: number;

  protected get [id](): number {
    return 0x74AE4240;
  }

  static get [name](): string {
    return "updates"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["updates", [_Update_], "Vector<Update>"],
      ["users", [_User_], "Vector<User>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["date", "number", "int"],
      ["seq", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.updates, [_Update_], "Vector<Update>"],
      [this.users, [_User_], "Vector<User>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.date, "number", "int"],
      [this.seq, "number", "int"],
    ];
  }

  constructor(params: { updates: Array<enums.Update>; users: Array<enums.User>; chats: Array<enums.Chat>; date: number; seq: number }) {
    super();
    this.updates = params.updates;
    this.users = params.users;
    this.chats = params.chats;
    this.date = params.date;
    this.seq = params.seq;
  }
}

/** Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object). */
export class UpdateShortSentMessage_ extends _Updates_ {
  /** Whether the message is outgoing */
  out?: true;
  /** ID of the sent message */
  id: number;
  /** [PTS](https://core.telegram.org/api/updates) */
  pts: number;
  /** [PTS count](https://core.telegram.org/api/updates) */
  pts_count: number;
  /** [date](https://core.telegram.org/api/updates) */
  date: number;
  /** Attached media */
  media?: enums.MessageMedia;
  /** [Entities](https://core.telegram.org/api/entities) for styled text */
  entities?: Array<enums.MessageEntity>;
  /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
  ttl_period?: number;

  protected get [id](): number {
    return 0x9015E101;
  }

  static get [name](): string {
    return "updateShortSentMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["out", "true", "flags.1?true"],
      ["id", "number", "int"],
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
      ["date", "number", "int"],
      ["media", _MessageMedia_, "flags.9?MessageMedia"],
      ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      ["ttl_period", "number", "flags.25?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.out ?? null, "true", "flags.1?true"],
      [this.id, "number", "int"],
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
      [this.date, "number", "int"],
      [this.media ?? null, _MessageMedia_, "flags.9?MessageMedia"],
      [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      [this.ttl_period ?? null, "number", "flags.25?int"],
    ];
  }

  constructor(params: { out?: true; id: number; pts: number; pts_count: number; date: number; media?: enums.MessageMedia; entities?: Array<enums.MessageEntity>; ttl_period?: number }) {
    super();
    this.out = params.out;
    this.id = params.id;
    this.pts = params.pts;
    this.pts_count = params.pts_count;
    this.date = params.date;
    this.media = params.media;
    this.entities = params.entities;
    this.ttl_period = params.ttl_period;
  }
}

/** Full list of photos with auxiliary data. */
export class photos_Photos_ extends _photos_Photos_ {
  /** List of photos */
  photos: Array<enums.Photo>;
  /** List of mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x8DCA6AA5;
  }

  static get [name](): string {
    return "photos.photos"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["photos", [_Photo_], "Vector<Photo>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.photos, [_Photo_], "Vector<Photo>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { photos: Array<enums.Photo>; users: Array<enums.User> }) {
    super();
    this.photos = params.photos;
    this.users = params.users;
  }
}

/** Incomplete list of photos with auxiliary data. */
export class photos_PhotosSlice_ extends _photos_Photos_ {
  /** Total number of photos */
  count: number;
  /** List of photos */
  photos: Array<enums.Photo>;
  /** List of mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x15051F54;
  }

  static get [name](): string {
    return "photos.photosSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["photos", [_Photo_], "Vector<Photo>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.photos, [_Photo_], "Vector<Photo>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; photos: Array<enums.Photo>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.photos = params.photos;
    this.users = params.users;
  }
}

/** Photo with auxiliary data. */
export class photos_Photo_ extends _photos_Photo_ {
  /** Photo */
  photo: enums.Photo;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x20212CA8;
  }

  static get [name](): string {
    return "photos.photo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["photo", _Photo_, "Photo"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.photo, _Photo_, "Photo"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { photo: enums.Photo; users: Array<enums.User> }) {
    super();
    this.photo = params.photo;
    this.users = params.users;
  }
}

/** File content. */
export class upload_File_ extends _upload_File_ {
  /** File type */
  type: enums.storage.FileType;
  /** Modification time */
  mtime: number;
  /** Binary data, file content */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0x096A18D5;
  }

  static get [name](): string {
    return "upload.file"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _storage_FileType_, "storage.FileType"],
      ["mtime", "number", "int"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _storage_FileType_, "storage.FileType"],
      [this.mtime, "number", "int"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { type: enums.storage.FileType; mtime: number; bytes: Uint8Array }) {
    super();
    this.type = params.type;
    this.mtime = params.mtime;
    this.bytes = params.bytes;
  }
}

/** The file must be downloaded from a [CDN DC](https://core.telegram.org/cdn). */
export class upload_FileCdnRedirect_ extends _upload_File_ {
  /** [CDN DC](https://core.telegram.org/cdn) ID */
  dc_id: number;
  /** File token (see [CDN files](https://core.telegram.org/cdn)) */
  file_token: Uint8Array;
  /** Encryption key (see [CDN files](https://core.telegram.org/cdn)) */
  encryption_key: Uint8Array;
  /** Encryption IV (see [CDN files](https://core.telegram.org/cdn)) */
  encryption_iv: Uint8Array;
  /** File hashes (see [CDN files](https://core.telegram.org/cdn)) */
  file_hashes: Array<enums.FileHash>;

  protected get [id](): number {
    return 0xF18CDA44;
  }

  static get [name](): string {
    return "upload.fileCdnRedirect"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dc_id", "number", "int"],
      ["file_token", Uint8Array, "bytes"],
      ["encryption_key", Uint8Array, "bytes"],
      ["encryption_iv", Uint8Array, "bytes"],
      ["file_hashes", [_FileHash_], "Vector<FileHash>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dc_id, "number", "int"],
      [this.file_token, Uint8Array, "bytes"],
      [this.encryption_key, Uint8Array, "bytes"],
      [this.encryption_iv, Uint8Array, "bytes"],
      [this.file_hashes, [_FileHash_], "Vector<FileHash>"],
    ];
  }

  constructor(params: { dc_id: number; file_token: Uint8Array; encryption_key: Uint8Array; encryption_iv: Uint8Array; file_hashes: Array<enums.FileHash> }) {
    super();
    this.dc_id = params.dc_id;
    this.file_token = params.file_token;
    this.encryption_key = params.encryption_key;
    this.encryption_iv = params.encryption_iv;
    this.file_hashes = params.file_hashes;
  }
}

/** Data center */
export class DcOption_ extends _DcOption_ {
  /** Whether the specified IP is an IPv6 address */
  ipv6?: true;
  /** Whether this DC should only be used to [download or upload files](https://core.telegram.org/api/files) */
  media_only?: true;
  /** Whether this DC only supports connection with [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) */
  tcpo_only?: true;
  /** Whether this is a [CDN DC](https://core.telegram.org/cdn). */
  cdn?: true;
  /** If set, this IP should be used when connecting through a proxy */
  static?: true;
  /** If set, clients must connect using only the specified port, without trying any other port. */
  this_port_only?: true;
  /** DC ID */
  id: number;
  /** IP address of DC */
  ip_address: string;
  /** Port */
  port: number;
  /** If the `tcpo_only` flag is set, specifies the secret to use when connecting using [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) */
  secret?: Uint8Array;

  protected get [id](): number {
    return 0x18B7A10D;
  }

  static get [name](): string {
    return "dcOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["ipv6", "true", "flags.0?true"],
      ["media_only", "true", "flags.1?true"],
      ["tcpo_only", "true", "flags.2?true"],
      ["cdn", "true", "flags.3?true"],
      ["static", "true", "flags.4?true"],
      ["this_port_only", "true", "flags.5?true"],
      ["id", "number", "int"],
      ["ip_address", "string", "string"],
      ["port", "number", "int"],
      ["secret", Uint8Array, "flags.10?bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.ipv6 ?? null, "true", "flags.0?true"],
      [this.media_only ?? null, "true", "flags.1?true"],
      [this.tcpo_only ?? null, "true", "flags.2?true"],
      [this.cdn ?? null, "true", "flags.3?true"],
      [this.static ?? null, "true", "flags.4?true"],
      [this.this_port_only ?? null, "true", "flags.5?true"],
      [this.id, "number", "int"],
      [this.ip_address, "string", "string"],
      [this.port, "number", "int"],
      [this.secret ?? null, Uint8Array, "flags.10?bytes"],
    ];
  }

  constructor(params: { ipv6?: true; media_only?: true; tcpo_only?: true; cdn?: true; static?: true; this_port_only?: true; id: number; ip_address: string; port: number; secret?: Uint8Array }) {
    super();
    this.ipv6 = params.ipv6;
    this.media_only = params.media_only;
    this.tcpo_only = params.tcpo_only;
    this.cdn = params.cdn;
    this.static = params.static;
    this.this_port_only = params.this_port_only;
    this.id = params.id;
    this.ip_address = params.ip_address;
    this.port = params.port;
    this.secret = params.secret;
  }
}

/** Current configuration */
export class Config_ extends _Config_ {
  /** Whether the client should use P2P by default for phone calls with contacts */
  default_p2p_contacts?: true;
  /** Whether the client should preload featured stickers */
  preload_featured_stickers?: true;
  /** Whether incoming private messages can be deleted for both participants */
  revoke_pm_inbox?: true;
  /** Indicates that telegram is _probably_ censored by governments/ISPs in the current region */
  blocked_mode?: true;
  /** Whether to forcefully connect using IPv6 [dcOptions](https://core.telegram.org/type/DcOption), even if the client knows that IPv4 is available. */
  force_try_ipv6?: true;
  /** Current date at the server */
  date: number;
  /** Expiration date of this config: when it expires it'll have to be refetched using [help.getConfig](https://core.telegram.org/method/help.getConfig) */
  expires: number;
  /** Whether we're connected to the test DCs */
  test_mode: boolean;
  /** ID of the DC that returned the reply */
  this_dc: number;
  /** DC IP list */
  dc_options: Array<enums.DcOption>;
  /** Domain name for fetching encrypted DC list from DNS TXT record */
  dc_txt_domain_name: string;
  /** Maximum member count for normal [groups](https://core.telegram.org/api/channel) */
  chat_size_max: number;
  /** Maximum member count for [supergroups](https://core.telegram.org/api/channel) */
  megagroup_size_max: number;
  /** Maximum number of messages that can be forwarded at once using [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages). */
  forwarded_count_max: number;
  /** The client should [update its online status](https://core.telegram.org/method/account.updateStatus) every N milliseconds */
  online_update_period_ms: number;
  /** Delay before offline status needs to be sent to the server */
  offline_blur_timeout_ms: number;
  /** Time without any user activity after which it should be treated offline */
  offline_idle_timeout_ms: number;
  /** If we are offline, but were online from some other client in last `online_cloud_timeout_ms` milliseconds after we had gone offline, then delay offline notification for `notify_cloud_delay_ms` milliseconds. */
  online_cloud_timeout_ms: number;
  /** If we are offline, but online from some other client then delay sending the offline notification for `notify_cloud_delay_ms` milliseconds. */
  notify_cloud_delay_ms: number;
  /** If some other client is online, then delay notification for `notification_default_delay_ms` milliseconds */
  notify_default_delay_ms: number;
  /** Not for client use */
  push_chat_period_ms: number;
  /** Not for client use */
  push_chat_limit: number;
  /** Only messages with age smaller than the one specified can be edited */
  edit_time_limit: number;
  /** Only channel/supergroup messages with age smaller than the specified can be deleted */
  revoke_time_limit: number;
  /** Only private messages with age smaller than the specified can be deleted */
  revoke_pm_time_limit: number;
  /** Exponential decay rate for computing [top peer rating](https://core.telegram.org/api/top-rating) */
  rating_e_decay: number;
  /** Maximum number of recent stickers */
  stickers_recent_limit: number;
  /** Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read */
  channels_read_media_period: number;
  /** Temporary [passport](https://core.telegram.org/passport) sessions */
  tmp_sessions?: number;
  /** Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call */
  call_receive_timeout_ms: number;
  /** Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused */
  call_ring_timeout_ms: number;
  /** VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted */
  call_connect_timeout_ms: number;
  /** If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted */
  call_packet_timeout_ms: number;
  /** The domain to use to parse [deep links »](https://core.telegram.org/api/links). */
  me_url_prefix: string;
  /** URL to use to auto-update the current app */
  autoupdate_url_prefix?: string;
  /** Username of the bot to use to search for GIFs */
  gif_search_username?: string;
  /** Username of the bot to use to search for venues */
  venue_search_username?: string;
  /** Username of the bot to use for image search */
  img_search_username?: string;
  /** ID of the map provider to use for venues */
  static_maps_provider?: string;
  /** Maximum length of caption (length in utf8 codepoints) */
  caption_length_max: number;
  /** Maximum length of messages (length in utf8 codepoints) */
  message_length_max: number;
  /** DC ID to use to download [webfiles](https://core.telegram.org/api/files#downloading-webfiles) */
  webfile_dc_id: number;
  /** Suggested language code */
  suggested_lang_code?: string;
  /** Language pack version */
  lang_pack_version?: number;
  /** Basic language pack version */
  base_lang_pack_version?: number;
  /** Default [message reaction](https://core.telegram.org/api/reactions) */
  reactions_default?: enums.Reaction;
  /** Autologin token, [click here for more info on URL authorization »](https://core.telegram.org/api/url-authorization#link-url-authorization). */
  autologin_token?: string;

  protected get [id](): number {
    return 0xCC1A241E;
  }

  static get [name](): string {
    return "config"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["default_p2p_contacts", "true", "flags.3?true"],
      ["preload_featured_stickers", "true", "flags.4?true"],
      ["revoke_pm_inbox", "true", "flags.6?true"],
      ["blocked_mode", "true", "flags.8?true"],
      ["force_try_ipv6", "true", "flags.14?true"],
      ["date", "number", "int"],
      ["expires", "number", "int"],
      ["test_mode", "boolean", "Bool"],
      ["this_dc", "number", "int"],
      ["dc_options", [_DcOption_], "Vector<DcOption>"],
      ["dc_txt_domain_name", "string", "string"],
      ["chat_size_max", "number", "int"],
      ["megagroup_size_max", "number", "int"],
      ["forwarded_count_max", "number", "int"],
      ["online_update_period_ms", "number", "int"],
      ["offline_blur_timeout_ms", "number", "int"],
      ["offline_idle_timeout_ms", "number", "int"],
      ["online_cloud_timeout_ms", "number", "int"],
      ["notify_cloud_delay_ms", "number", "int"],
      ["notify_default_delay_ms", "number", "int"],
      ["push_chat_period_ms", "number", "int"],
      ["push_chat_limit", "number", "int"],
      ["edit_time_limit", "number", "int"],
      ["revoke_time_limit", "number", "int"],
      ["revoke_pm_time_limit", "number", "int"],
      ["rating_e_decay", "number", "int"],
      ["stickers_recent_limit", "number", "int"],
      ["channels_read_media_period", "number", "int"],
      ["tmp_sessions", "number", "flags.0?int"],
      ["call_receive_timeout_ms", "number", "int"],
      ["call_ring_timeout_ms", "number", "int"],
      ["call_connect_timeout_ms", "number", "int"],
      ["call_packet_timeout_ms", "number", "int"],
      ["me_url_prefix", "string", "string"],
      ["autoupdate_url_prefix", "string", "flags.7?string"],
      ["gif_search_username", "string", "flags.9?string"],
      ["venue_search_username", "string", "flags.10?string"],
      ["img_search_username", "string", "flags.11?string"],
      ["static_maps_provider", "string", "flags.12?string"],
      ["caption_length_max", "number", "int"],
      ["message_length_max", "number", "int"],
      ["webfile_dc_id", "number", "int"],
      ["suggested_lang_code", "string", "flags.2?string"],
      ["lang_pack_version", "number", "flags.2?int"],
      ["base_lang_pack_version", "number", "flags.2?int"],
      ["reactions_default", _Reaction_, "flags.15?Reaction"],
      ["autologin_token", "string", "flags.16?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.default_p2p_contacts ?? null, "true", "flags.3?true"],
      [this.preload_featured_stickers ?? null, "true", "flags.4?true"],
      [this.revoke_pm_inbox ?? null, "true", "flags.6?true"],
      [this.blocked_mode ?? null, "true", "flags.8?true"],
      [this.force_try_ipv6 ?? null, "true", "flags.14?true"],
      [this.date, "number", "int"],
      [this.expires, "number", "int"],
      [this.test_mode, "boolean", "Bool"],
      [this.this_dc, "number", "int"],
      [this.dc_options, [_DcOption_], "Vector<DcOption>"],
      [this.dc_txt_domain_name, "string", "string"],
      [this.chat_size_max, "number", "int"],
      [this.megagroup_size_max, "number", "int"],
      [this.forwarded_count_max, "number", "int"],
      [this.online_update_period_ms, "number", "int"],
      [this.offline_blur_timeout_ms, "number", "int"],
      [this.offline_idle_timeout_ms, "number", "int"],
      [this.online_cloud_timeout_ms, "number", "int"],
      [this.notify_cloud_delay_ms, "number", "int"],
      [this.notify_default_delay_ms, "number", "int"],
      [this.push_chat_period_ms, "number", "int"],
      [this.push_chat_limit, "number", "int"],
      [this.edit_time_limit, "number", "int"],
      [this.revoke_time_limit, "number", "int"],
      [this.revoke_pm_time_limit, "number", "int"],
      [this.rating_e_decay, "number", "int"],
      [this.stickers_recent_limit, "number", "int"],
      [this.channels_read_media_period, "number", "int"],
      [this.tmp_sessions ?? null, "number", "flags.0?int"],
      [this.call_receive_timeout_ms, "number", "int"],
      [this.call_ring_timeout_ms, "number", "int"],
      [this.call_connect_timeout_ms, "number", "int"],
      [this.call_packet_timeout_ms, "number", "int"],
      [this.me_url_prefix, "string", "string"],
      [this.autoupdate_url_prefix ?? null, "string", "flags.7?string"],
      [this.gif_search_username ?? null, "string", "flags.9?string"],
      [this.venue_search_username ?? null, "string", "flags.10?string"],
      [this.img_search_username ?? null, "string", "flags.11?string"],
      [this.static_maps_provider ?? null, "string", "flags.12?string"],
      [this.caption_length_max, "number", "int"],
      [this.message_length_max, "number", "int"],
      [this.webfile_dc_id, "number", "int"],
      [this.suggested_lang_code ?? null, "string", "flags.2?string"],
      [this.lang_pack_version ?? null, "number", "flags.2?int"],
      [this.base_lang_pack_version ?? null, "number", "flags.2?int"],
      [this.reactions_default ?? null, _Reaction_, "flags.15?Reaction"],
      [this.autologin_token ?? null, "string", "flags.16?string"],
    ];
  }

  constructor(params: { default_p2p_contacts?: true; preload_featured_stickers?: true; revoke_pm_inbox?: true; blocked_mode?: true; force_try_ipv6?: true; date: number; expires: number; test_mode: boolean; this_dc: number; dc_options: Array<enums.DcOption>; dc_txt_domain_name: string; chat_size_max: number; megagroup_size_max: number; forwarded_count_max: number; online_update_period_ms: number; offline_blur_timeout_ms: number; offline_idle_timeout_ms: number; online_cloud_timeout_ms: number; notify_cloud_delay_ms: number; notify_default_delay_ms: number; push_chat_period_ms: number; push_chat_limit: number; edit_time_limit: number; revoke_time_limit: number; revoke_pm_time_limit: number; rating_e_decay: number; stickers_recent_limit: number; channels_read_media_period: number; tmp_sessions?: number; call_receive_timeout_ms: number; call_ring_timeout_ms: number; call_connect_timeout_ms: number; call_packet_timeout_ms: number; me_url_prefix: string; autoupdate_url_prefix?: string; gif_search_username?: string; venue_search_username?: string; img_search_username?: string; static_maps_provider?: string; caption_length_max: number; message_length_max: number; webfile_dc_id: number; suggested_lang_code?: string; lang_pack_version?: number; base_lang_pack_version?: number; reactions_default?: enums.Reaction; autologin_token?: string }) {
    super();
    this.default_p2p_contacts = params.default_p2p_contacts;
    this.preload_featured_stickers = params.preload_featured_stickers;
    this.revoke_pm_inbox = params.revoke_pm_inbox;
    this.blocked_mode = params.blocked_mode;
    this.force_try_ipv6 = params.force_try_ipv6;
    this.date = params.date;
    this.expires = params.expires;
    this.test_mode = params.test_mode;
    this.this_dc = params.this_dc;
    this.dc_options = params.dc_options;
    this.dc_txt_domain_name = params.dc_txt_domain_name;
    this.chat_size_max = params.chat_size_max;
    this.megagroup_size_max = params.megagroup_size_max;
    this.forwarded_count_max = params.forwarded_count_max;
    this.online_update_period_ms = params.online_update_period_ms;
    this.offline_blur_timeout_ms = params.offline_blur_timeout_ms;
    this.offline_idle_timeout_ms = params.offline_idle_timeout_ms;
    this.online_cloud_timeout_ms = params.online_cloud_timeout_ms;
    this.notify_cloud_delay_ms = params.notify_cloud_delay_ms;
    this.notify_default_delay_ms = params.notify_default_delay_ms;
    this.push_chat_period_ms = params.push_chat_period_ms;
    this.push_chat_limit = params.push_chat_limit;
    this.edit_time_limit = params.edit_time_limit;
    this.revoke_time_limit = params.revoke_time_limit;
    this.revoke_pm_time_limit = params.revoke_pm_time_limit;
    this.rating_e_decay = params.rating_e_decay;
    this.stickers_recent_limit = params.stickers_recent_limit;
    this.channels_read_media_period = params.channels_read_media_period;
    this.tmp_sessions = params.tmp_sessions;
    this.call_receive_timeout_ms = params.call_receive_timeout_ms;
    this.call_ring_timeout_ms = params.call_ring_timeout_ms;
    this.call_connect_timeout_ms = params.call_connect_timeout_ms;
    this.call_packet_timeout_ms = params.call_packet_timeout_ms;
    this.me_url_prefix = params.me_url_prefix;
    this.autoupdate_url_prefix = params.autoupdate_url_prefix;
    this.gif_search_username = params.gif_search_username;
    this.venue_search_username = params.venue_search_username;
    this.img_search_username = params.img_search_username;
    this.static_maps_provider = params.static_maps_provider;
    this.caption_length_max = params.caption_length_max;
    this.message_length_max = params.message_length_max;
    this.webfile_dc_id = params.webfile_dc_id;
    this.suggested_lang_code = params.suggested_lang_code;
    this.lang_pack_version = params.lang_pack_version;
    this.base_lang_pack_version = params.base_lang_pack_version;
    this.reactions_default = params.reactions_default;
    this.autologin_token = params.autologin_token;
  }
}

/** Nearest data center, according to geo-ip. */
export class NearestDc_ extends _NearestDc_ {
  /** Country code determined by geo-ip */
  country: string;
  /** Number of current data center */
  this_dc: number;
  /** Number of nearest data center */
  nearest_dc: number;

  protected get [id](): number {
    return 0x8E1A1775;
  }

  static get [name](): string {
    return "nearestDc"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["country", "string", "string"],
      ["this_dc", "number", "int"],
      ["nearest_dc", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.country, "string", "string"],
      [this.this_dc, "number", "int"],
      [this.nearest_dc, "number", "int"],
    ];
  }

  constructor(params: { country: string; this_dc: number; nearest_dc: number }) {
    super();
    this.country = params.country;
    this.this_dc = params.this_dc;
    this.nearest_dc = params.nearest_dc;
  }
}

/** An update is available for the application. */
export class help_AppUpdate_ extends _help_AppUpdate_ {
  /** Unskippable, the new info must be shown to the user (with a popup or something else) */
  can_not_skip?: true;
  /** Update ID */
  id: number;
  /** New version name */
  version: string;
  /** Text description of the update */
  text: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities: Array<enums.MessageEntity>;
  /** Application binary */
  document?: enums.Document;
  /** Application download URL */
  url?: string;
  /** Associated sticker */
  sticker?: enums.Document;

  protected get [id](): number {
    return 0xCCBBCE30;
  }

  static get [name](): string {
    return "help.appUpdate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["can_not_skip", "true", "flags.0?true"],
      ["id", "number", "int"],
      ["version", "string", "string"],
      ["text", "string", "string"],
      ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
      ["document", _Document_, "flags.1?Document"],
      ["url", "string", "flags.2?string"],
      ["sticker", _Document_, "flags.3?Document"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.can_not_skip ?? null, "true", "flags.0?true"],
      [this.id, "number", "int"],
      [this.version, "string", "string"],
      [this.text, "string", "string"],
      [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
      [this.document ?? null, _Document_, "flags.1?Document"],
      [this.url ?? null, "string", "flags.2?string"],
      [this.sticker ?? null, _Document_, "flags.3?Document"],
    ];
  }

  constructor(params: { can_not_skip?: true; id: number; version: string; text: string; entities: Array<enums.MessageEntity>; document?: enums.Document; url?: string; sticker?: enums.Document }) {
    super();
    this.can_not_skip = params.can_not_skip;
    this.id = params.id;
    this.version = params.version;
    this.text = params.text;
    this.entities = params.entities;
    this.document = params.document;
    this.url = params.url;
    this.sticker = params.sticker;
  }
}

/** No updates are available for the application. */
export class help_NoAppUpdate_ extends _help_AppUpdate_ {
  protected get [id](): number {
    return 0xC45A6536;
  }

  static get [name](): string {
    return "help.noAppUpdate"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Text of a text message with an invitation to install Telegram. */
export class help_InviteText_ extends _help_InviteText_ {
  /** Text of the message */
  message: string;

  protected get [id](): number {
    return 0x18CB9F78;
  }

  static get [name](): string {
    return "help.inviteText"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, "string", "string"],
    ];
  }

  constructor(params: { message: string }) {
    super();
    this.message = params.message;
  }
}

/** Empty constructor. */
export class EncryptedChatEmpty_ extends _EncryptedChat_ {
  /** Chat ID */
  id: number;

  protected get [id](): number {
    return 0xAB7EC0A0;
  }

  static get [name](): string {
    return "encryptedChatEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { id: number }) {
    super();
    this.id = params.id;
  }
}

/** Chat waiting for approval of second participant. */
export class EncryptedChatWaiting_ extends _EncryptedChat_ {
  /** Chat ID */
  id: number;
  /** Checking sum depending on user ID */
  access_hash: bigint;
  /** Date of chat creation */
  date: number;
  /** Chat creator ID */
  admin_id: bigint;
  /** ID of second chat participant */
  participant_id: bigint;

  protected get [id](): number {
    return 0x66B25953;
  }

  static get [name](): string {
    return "encryptedChatWaiting"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
    ];
  }

  constructor(params: { id: number; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
  }
}

/** Request to create an encrypted chat. */
export class EncryptedChatRequested_ extends _EncryptedChat_ {
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id?: number;
  /** Chat ID */
  id: number;
  /** Check sum depending on user ID */
  access_hash: bigint;
  /** Chat creation date */
  date: number;
  /** Chat creator ID */
  admin_id: bigint;
  /** ID of second chat participant */
  participant_id: bigint;
  /** `A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) */
  g_a: Uint8Array;

  protected get [id](): number {
    return 0x48F1D94C;
  }

  static get [name](): string {
    return "encryptedChatRequested"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["folder_id", "number", "flags.0?int"],
      ["id", "number", "int"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
      ["g_a", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.folder_id ?? null, "number", "flags.0?int"],
      [this.id, "number", "int"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
      [this.g_a, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { folder_id?: number; id: number; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint; g_a: Uint8Array }) {
    super();
    this.folder_id = params.folder_id;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
    this.g_a = params.g_a;
  }
}

/** Encrypted chat */
export class EncryptedChat_ extends _EncryptedChat_ {
  /** Chat ID */
  id: number;
  /** Check sum dependent on the user ID */
  access_hash: bigint;
  /** Date chat was created */
  date: number;
  /** Chat creator ID */
  admin_id: bigint;
  /** ID of the second chat participant */
  participant_id: bigint;
  /** `B = g ^ b mod p`, if the currently authorized user is the chat's creator,  
  or `A = g ^ a mod p` otherwise  
  See [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) for more info */
  g_a_or_b: Uint8Array;
  /** 64-bit fingerprint of received key */
  key_fingerprint: bigint;

  protected get [id](): number {
    return 0x61F0D4C7;
  }

  static get [name](): string {
    return "encryptedChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
      ["g_a_or_b", Uint8Array, "bytes"],
      ["key_fingerprint", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
      [this.g_a_or_b, Uint8Array, "bytes"],
      [this.key_fingerprint, "bigint", "long"],
    ];
  }

  constructor(params: { id: number; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint; g_a_or_b: Uint8Array; key_fingerprint: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
    this.g_a_or_b = params.g_a_or_b;
    this.key_fingerprint = params.key_fingerprint;
  }
}

/** Discarded or deleted chat. */
export class EncryptedChatDiscarded_ extends _EncryptedChat_ {
  /** Whether both users of this secret chat should also remove all of its messages */
  history_deleted?: true;
  /** Chat ID */
  id: number;

  protected get [id](): number {
    return 0x1E1C7C45;
  }

  static get [name](): string {
    return "encryptedChatDiscarded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["history_deleted", "true", "flags.0?true"],
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.history_deleted ?? null, "true", "flags.0?true"],
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { history_deleted?: true; id: number }) {
    super();
    this.history_deleted = params.history_deleted;
    this.id = params.id;
  }
}

/** Creates an encrypted chat. */
export class InputEncryptedChat_ extends _InputEncryptedChat_ {
  /** Chat ID */
  chat_id: number;
  /** Checking sum from constructor [encryptedChat](https://core.telegram.org/constructor/encryptedChat), [encryptedChatWaiting](https://core.telegram.org/constructor/encryptedChatWaiting) or [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested) */
  access_hash: bigint;

  protected get [id](): number {
    return 0xF141B5E1;
  }

  static get [name](): string {
    return "inputEncryptedChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat_id", "number", "int"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat_id, "number", "int"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { chat_id: number; access_hash: bigint }) {
    super();
    this.chat_id = params.chat_id;
    this.access_hash = params.access_hash;
  }
}

/** Empty constructor, non-existing file. */
export class EncryptedFileEmpty_ extends _EncryptedFile_ {
  protected get [id](): number {
    return 0xC21F497E;
  }

  static get [name](): string {
    return "encryptedFileEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Encrypted file. */
export class EncryptedFile_ extends _EncryptedFile_ {
  /** File ID */
  id: bigint;
  /** Checking sum depending on user ID */
  access_hash: bigint;
  /** File size in bytes */
  size: bigint;
  /** Number of data center */
  dc_id: number;
  /** 32-bit fingerprint of key used for file encryption */
  key_fingerprint: number;

  protected get [id](): number {
    return 0xA8008CD8;
  }

  static get [name](): string {
    return "encryptedFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["size", "bigint", "long"],
      ["dc_id", "number", "int"],
      ["key_fingerprint", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.size, "bigint", "long"],
      [this.dc_id, "number", "int"],
      [this.key_fingerprint, "number", "int"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; size: bigint; dc_id: number; key_fingerprint: number }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.size = params.size;
    this.dc_id = params.dc_id;
    this.key_fingerprint = params.key_fingerprint;
  }
}

/** Empty constructor. */
export class InputEncryptedFileEmpty_ extends _InputEncryptedFile_ {
  protected get [id](): number {
    return 0x1837C364;
  }

  static get [name](): string {
    return "inputEncryptedFileEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Sets new encrypted file saved by parts using upload.saveFilePart method. */
export class InputEncryptedFileUploaded_ extends _InputEncryptedFile_ {
  /** Random file ID created by client */
  id: bigint;
  /** Number of saved parts */
  parts: number;
  /** In case [md5-HASH](https://en.wikipedia.org/wiki/MD5) of the (already encrypted) file was transmitted, file content will be checked prior to use */
  md5_checksum: string;
  /** 32-bit fingerprint of the key used to encrypt a file */
  key_fingerprint: number;

  protected get [id](): number {
    return 0x64BD0306;
  }

  static get [name](): string {
    return "inputEncryptedFileUploaded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["parts", "number", "int"],
      ["md5_checksum", "string", "string"],
      ["key_fingerprint", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.parts, "number", "int"],
      [this.md5_checksum, "string", "string"],
      [this.key_fingerprint, "number", "int"],
    ];
  }

  constructor(params: { id: bigint; parts: number; md5_checksum: string; key_fingerprint: number }) {
    super();
    this.id = params.id;
    this.parts = params.parts;
    this.md5_checksum = params.md5_checksum;
    this.key_fingerprint = params.key_fingerprint;
  }
}

/** Sets forwarded encrypted file for attachment. */
export class InputEncryptedFile_ extends _InputEncryptedFile_ {
  /** File ID, value of **id** parameter from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
  id: bigint;
  /** Checking sum, value of **access\_hash** parameter from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
  access_hash: bigint;

  protected get [id](): number {
    return 0x5A17B5E5;
  }

  static get [name](): string {
    return "inputEncryptedFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Assigns a new big encrypted file (over 10 MB in size), saved in parts using the method [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart). */
export class InputEncryptedFileBigUploaded_ extends _InputEncryptedFile_ {
  /** Random file id, created by the client */
  id: bigint;
  /** Number of saved parts */
  parts: number;
  /** 32-bit imprint of the key used to encrypt the file */
  key_fingerprint: number;

  protected get [id](): number {
    return 0x2DC173C8;
  }

  static get [name](): string {
    return "inputEncryptedFileBigUploaded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["parts", "number", "int"],
      ["key_fingerprint", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.parts, "number", "int"],
      [this.key_fingerprint, "number", "int"],
    ];
  }

  constructor(params: { id: bigint; parts: number; key_fingerprint: number }) {
    super();
    this.id = params.id;
    this.parts = params.parts;
    this.key_fingerprint = params.key_fingerprint;
  }
}

/** Encrypted message. */
export class EncryptedMessage_ extends _EncryptedMessage_ {
  /** Random message ID, assigned by the author of message */
  random_id: bigint;
  /** ID of encrypted chat */
  chat_id: number;
  /** Date of sending */
  date: number;
  /** TL-serialization of [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with the key created at chat initialization */
  bytes: Uint8Array;
  /** Attached encrypted file */
  file: enums.EncryptedFile;

  protected get [id](): number {
    return 0xED18C118;
  }

  static get [name](): string {
    return "encryptedMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["random_id", "bigint", "long"],
      ["chat_id", "number", "int"],
      ["date", "number", "int"],
      ["bytes", Uint8Array, "bytes"],
      ["file", _EncryptedFile_, "EncryptedFile"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.random_id, "bigint", "long"],
      [this.chat_id, "number", "int"],
      [this.date, "number", "int"],
      [this.bytes, Uint8Array, "bytes"],
      [this.file, _EncryptedFile_, "EncryptedFile"],
    ];
  }

  constructor(params: { random_id: bigint; chat_id: number; date: number; bytes: Uint8Array; file: enums.EncryptedFile }) {
    super();
    this.random_id = params.random_id;
    this.chat_id = params.chat_id;
    this.date = params.date;
    this.bytes = params.bytes;
    this.file = params.file;
  }
}

/** Encrypted service message */
export class EncryptedMessageService_ extends _EncryptedMessage_ {
  /** Random message ID, assigned by the author of message */
  random_id: bigint;
  /** ID of encrypted chat */
  chat_id: number;
  /** Date of sending */
  date: number;
  /** TL-serialization of the [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with the key created at chat initialization */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0x23734B06;
  }

  static get [name](): string {
    return "encryptedMessageService"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["random_id", "bigint", "long"],
      ["chat_id", "number", "int"],
      ["date", "number", "int"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.random_id, "bigint", "long"],
      [this.chat_id, "number", "int"],
      [this.date, "number", "int"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { random_id: bigint; chat_id: number; date: number; bytes: Uint8Array }) {
    super();
    this.random_id = params.random_id;
    this.chat_id = params.chat_id;
    this.date = params.date;
    this.bytes = params.bytes;
  }
}

/** Configuring parameters did not change. */
export class messages_DhConfigNotModified_ extends _messages_DhConfig_ {
  /** Random sequence of bytes of assigned length */
  random: Uint8Array;

  protected get [id](): number {
    return 0xC0E24635;
  }

  static get [name](): string {
    return "messages.dhConfigNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["random", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.random, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { random: Uint8Array }) {
    super();
    this.random = params.random;
  }
}

/** New set of configuring parameters. */
export class messages_DhConfig_ extends _messages_DhConfig_ {
  /** New value **prime**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) */
  g: number;
  /** New value **primitive root**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) */
  p: Uint8Array;
  /** Version of set of parameters */
  version: number;
  /** Random sequence of bytes of assigned length */
  random: Uint8Array;

  protected get [id](): number {
    return 0x2C221EDD;
  }

  static get [name](): string {
    return "messages.dhConfig"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["g", "number", "int"],
      ["p", Uint8Array, "bytes"],
      ["version", "number", "int"],
      ["random", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.g, "number", "int"],
      [this.p, Uint8Array, "bytes"],
      [this.version, "number", "int"],
      [this.random, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { g: number; p: Uint8Array; version: number; random: Uint8Array }) {
    super();
    this.g = params.g;
    this.p = params.p;
    this.version = params.version;
    this.random = params.random;
  }
}

/** Message without file attachments sent to an encrypted file. */
export class messages_SentEncryptedMessage_ extends _messages_SentEncryptedMessage_ {
  /** Date of sending */
  date: number;

  protected get [id](): number {
    return 0x560F8935;
  }

  static get [name](): string {
    return "messages.sentEncryptedMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { date: number }) {
    super();
    this.date = params.date;
  }
}

/** Message with a file enclosure sent to a protected chat */
export class messages_SentEncryptedFile_ extends _messages_SentEncryptedMessage_ {
  /** Sending date */
  date: number;
  /** Attached file */
  file: enums.EncryptedFile;

  protected get [id](): number {
    return 0x9493FF32;
  }

  static get [name](): string {
    return "messages.sentEncryptedFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["date", "number", "int"],
      ["file", _EncryptedFile_, "EncryptedFile"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.date, "number", "int"],
      [this.file, _EncryptedFile_, "EncryptedFile"],
    ];
  }

  constructor(params: { date: number; file: enums.EncryptedFile }) {
    super();
    this.date = params.date;
    this.file = params.file;
  }
}

/** Empty constructor. */
export class InputDocumentEmpty_ extends _InputDocument_ {
  protected get [id](): number {
    return 0x72F0EAAE;
  }

  static get [name](): string {
    return "inputDocumentEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines a document for subsequent interaction. */
export class InputDocument_ extends _InputDocument_ {
  /** Document ID */
  id: bigint;
  /** **access\_hash** parameter from the [document](https://core.telegram.org/constructor/document) constructor */
  access_hash: bigint;
  /** [File reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;

  protected get [id](): number {
    return 0x1ABFB575;
  }

  static get [name](): string {
    return "inputDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; file_reference: Uint8Array }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
  }
}

/** Empty constructor, document doesn't exist. */
export class DocumentEmpty_ extends _Document_ {
  /** Document ID or `0` */
  id: bigint;

  protected get [id](): number {
    return 0x36F8C871;
  }

  static get [name](): string {
    return "documentEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Document */
export class Document_ extends _Document_ {
  /** Document ID */
  id: bigint;
  /** Check sum, dependent on document ID */
  access_hash: bigint;
  /** [File reference](https://core.telegram.org/api/file_reference) */
  file_reference: Uint8Array;
  /** Creation date */
  date: number;
  /** MIME type */
  mime_type: string;
  /** Size */
  size: bigint;
  /** Thumbnails */
  thumbs?: Array<enums.PhotoSize>;
  /** Video thumbnails */
  video_thumbs?: Array<enums.VideoSize>;
  /** DC ID */
  dc_id: number;
  /** Attributes */
  attributes: Array<enums.DocumentAttribute>;

  protected get [id](): number {
    return 0x8FD4C4D8;
  }

  static get [name](): string {
    return "document"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["file_reference", Uint8Array, "bytes"],
      ["date", "number", "int"],
      ["mime_type", "string", "string"],
      ["size", "bigint", "long"],
      ["thumbs", [_PhotoSize_], "flags.0?Vector<PhotoSize>"],
      ["video_thumbs", [_VideoSize_], "flags.1?Vector<VideoSize>"],
      ["dc_id", "number", "int"],
      ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.file_reference, Uint8Array, "bytes"],
      [this.date, "number", "int"],
      [this.mime_type, "string", "string"],
      [this.size, "bigint", "long"],
      [this.thumbs ?? null, [_PhotoSize_], "flags.0?Vector<PhotoSize>"],
      [this.video_thumbs ?? null, [_VideoSize_], "flags.1?Vector<VideoSize>"],
      [this.dc_id, "number", "int"],
      [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; file_reference: Uint8Array; date: number; mime_type: string; size: bigint; thumbs?: Array<enums.PhotoSize>; video_thumbs?: Array<enums.VideoSize>; dc_id: number; attributes: Array<enums.DocumentAttribute> }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.file_reference = params.file_reference;
    this.date = params.date;
    this.mime_type = params.mime_type;
    this.size = params.size;
    this.thumbs = params.thumbs;
    this.video_thumbs = params.video_thumbs;
    this.dc_id = params.dc_id;
    this.attributes = params.attributes;
  }
}

/** Info on support user. */
export class help_Support_ extends _help_Support_ {
  /** Phone number */
  phone_number: string;
  /** User */
  user: enums.User;

  protected get [id](): number {
    return 0x17C6B5F6;
  }

  static get [name](): string {
    return "help.support"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_number", "string", "string"],
      ["user", _User_, "User"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_number, "string", "string"],
      [this.user, _User_, "User"],
    ];
  }

  constructor(params: { phone_number: string; user: enums.User }) {
    super();
    this.phone_number = params.phone_number;
    this.user = params.user;
  }
}

/** Notifications generated by a certain user or group. */
export class NotifyPeer_ extends _NotifyPeer_ {
  /** user or group */
  peer: enums.Peer;

  protected get [id](): number {
    return 0x9FD40BD8;
  }

  static get [name](): string {
    return "notifyPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
    ];
  }

  constructor(params: { peer: enums.Peer }) {
    super();
    this.peer = params.peer;
  }
}

/** Notifications generated by all users. */
export class NotifyUsers_ extends _NotifyPeer_ {
  protected get [id](): number {
    return 0xB4C83B4C;
  }

  static get [name](): string {
    return "notifyUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Notifications generated by all groups. */
export class NotifyChats_ extends _NotifyPeer_ {
  protected get [id](): number {
    return 0xC007CEC3;
  }

  static get [name](): string {
    return "notifyChats"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Channel notification settings */
export class NotifyBroadcasts_ extends _NotifyPeer_ {
  protected get [id](): number {
    return 0xD612E8EF;
  }

  static get [name](): string {
    return "notifyBroadcasts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Notifications generated by a [topic](https://core.telegram.org/api/forum#forum-topics) in a [forum](https://core.telegram.org/api/forum). */
export class NotifyForumTopic_ extends _NotifyPeer_ {
  /** Forum ID */
  peer: enums.Peer;
  /** [Topic ID](https://core.telegram.org/api/forum#forum-topics) */
  top_msg_id: number;

  protected get [id](): number {
    return 0x226E6308;
  }

  static get [name](): string {
    return "notifyForumTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["top_msg_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.top_msg_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; top_msg_id: number }) {
    super();
    this.peer = params.peer;
    this.top_msg_id = params.top_msg_id;
  }
}

/** User is typing. */
export class SendMessageTypingAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0x16BF744E;
  }

  static get [name](): string {
    return "sendMessageTypingAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload. */
export class SendMessageCancelAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0xFD5EC8F5;
  }

  static get [name](): string {
    return "sendMessageCancelAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is recording a video. */
export class SendMessageRecordVideoAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0xA187D66F;
  }

  static get [name](): string {
    return "sendMessageRecordVideoAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is uploading a video. */
export class SendMessageUploadVideoAction_ extends _SendMessageAction_ {
  /** Progress percentage */
  progress: number;

  protected get [id](): number {
    return 0xE9763AEC;
  }

  static get [name](): string {
    return "sendMessageUploadVideoAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["progress", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.progress, "number", "int"],
    ];
  }

  constructor(params: { progress: number }) {
    super();
    this.progress = params.progress;
  }
}

/** User is recording a voice message. */
export class SendMessageRecordAudioAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0xD52F73F7;
  }

  static get [name](): string {
    return "sendMessageRecordAudioAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is uploading a voice message. */
export class SendMessageUploadAudioAction_ extends _SendMessageAction_ {
  /** Progress percentage */
  progress: number;

  protected get [id](): number {
    return 0xF351D7AB;
  }

  static get [name](): string {
    return "sendMessageUploadAudioAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["progress", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.progress, "number", "int"],
    ];
  }

  constructor(params: { progress: number }) {
    super();
    this.progress = params.progress;
  }
}

/** User is uploading a photo. */
export class SendMessageUploadPhotoAction_ extends _SendMessageAction_ {
  /** Progress percentage */
  progress: number;

  protected get [id](): number {
    return 0xD1D34A26;
  }

  static get [name](): string {
    return "sendMessageUploadPhotoAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["progress", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.progress, "number", "int"],
    ];
  }

  constructor(params: { progress: number }) {
    super();
    this.progress = params.progress;
  }
}

/** User is uploading a file. */
export class SendMessageUploadDocumentAction_ extends _SendMessageAction_ {
  /** Progress percentage */
  progress: number;

  protected get [id](): number {
    return 0xAA0CD9E4;
  }

  static get [name](): string {
    return "sendMessageUploadDocumentAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["progress", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.progress, "number", "int"],
    ];
  }

  constructor(params: { progress: number }) {
    super();
    this.progress = params.progress;
  }
}

/** User is selecting a location to share. */
export class SendMessageGeoLocationAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0x176F8BA1;
  }

  static get [name](): string {
    return "sendMessageGeoLocationAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is selecting a contact to share. */
export class SendMessageChooseContactAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0x628CBC6F;
  }

  static get [name](): string {
    return "sendMessageChooseContactAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is playing a game */
export class SendMessageGamePlayAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0xDD6A8F48;
  }

  static get [name](): string {
    return "sendMessageGamePlayAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is recording a round video to share */
export class SendMessageRecordRoundAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0x88F27FBC;
  }

  static get [name](): string {
    return "sendMessageRecordRoundAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User is uploading a round video */
export class SendMessageUploadRoundAction_ extends _SendMessageAction_ {
  /** Progress percentage */
  progress: number;

  protected get [id](): number {
    return 0x243E1C66;
  }

  static get [name](): string {
    return "sendMessageUploadRoundAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["progress", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.progress, "number", "int"],
    ];
  }

  constructor(params: { progress: number }) {
    super();
    this.progress = params.progress;
  }
}

/** User is currently speaking in the group call */
export class SpeakingInGroupCallAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0xD92C2285;
  }

  static get [name](): string {
    return "speakingInGroupCallAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Chat history is being imported */
export class SendMessageHistoryImportAction_ extends _SendMessageAction_ {
  /** Progress percentage */
  progress: number;

  protected get [id](): number {
    return 0xDBDA9246;
  }

  static get [name](): string {
    return "sendMessageHistoryImportAction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["progress", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.progress, "number", "int"],
    ];
  }

  constructor(params: { progress: number }) {
    super();
    this.progress = params.progress;
  }
}

/** User is choosing a sticker */
export class SendMessageChooseStickerAction_ extends _SendMessageAction_ {
  protected get [id](): number {
    return 0xB05AC6B1;
  }

  static get [name](): string {
    return "sendMessageChooseStickerAction"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** User has clicked on an animated emoji triggering a [reaction, click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions). */
export class SendMessageEmojiInteraction_ extends _SendMessageAction_ {
  /** Emoji */
  emoticon: string;
  /** Message ID of the animated emoji that was clicked */
  msg_id: number;
  /** A JSON object with interaction info, [click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions) */
  interaction: enums.DataJSON;

  protected get [id](): number {
    return 0x25972BCB;
  }

  static get [name](): string {
    return "sendMessageEmojiInteraction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
      ["msg_id", "number", "int"],
      ["interaction", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
      [this.msg_id, "number", "int"],
      [this.interaction, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { emoticon: string; msg_id: number; interaction: enums.DataJSON }) {
    super();
    this.emoticon = params.emoticon;
    this.msg_id = params.msg_id;
    this.interaction = params.interaction;
  }
}

/** User is watching an animated emoji reaction triggered by another user, [click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions). */
export class SendMessageEmojiInteractionSeen_ extends _SendMessageAction_ {
  /** Emoji */
  emoticon: string;

  protected get [id](): number {
    return 0xB665902E;
  }

  static get [name](): string {
    return "sendMessageEmojiInteractionSeen"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
    ];
  }

  constructor(params: { emoticon: string }) {
    super();
    this.emoticon = params.emoticon;
  }
}

/** Users found by name substring and auxiliary data. */
export class contacts_Found_ extends _contacts_Found_ {
  /** Personalized results */
  my_results: Array<enums.Peer>;
  /** List of found user identifiers */
  results: Array<enums.Peer>;
  /** Found chats */
  chats: Array<enums.Chat>;
  /** List of users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xB3134D9D;
  }

  static get [name](): string {
    return "contacts.found"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["my_results", [_Peer_], "Vector<Peer>"],
      ["results", [_Peer_], "Vector<Peer>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.my_results, [_Peer_], "Vector<Peer>"],
      [this.results, [_Peer_], "Vector<Peer>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { my_results: Array<enums.Peer>; results: Array<enums.Peer>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.my_results = params.my_results;
    this.results = params.results;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Whether people will be able to see your exact last online timestamp */
export class InputPrivacyKeyStatusTimestamp_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0x4F96CB18;
  }

  static get [name](): string {
    return "inputPrivacyKeyStatusTimestamp"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people will be able to invite you to chats */
export class InputPrivacyKeyChatInvite_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0xBDFB0426;
  }

  static get [name](): string {
    return "inputPrivacyKeyChatInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether you will accept phone calls */
export class InputPrivacyKeyPhoneCall_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0xFABADC5F;
  }

  static get [name](): string {
    return "inputPrivacyKeyPhoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether to allow P2P communication during VoIP calls */
export class InputPrivacyKeyPhoneP2P_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0xDB9E70D2;
  }

  static get [name](): string {
    return "inputPrivacyKeyPhoneP2P"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether messages forwarded from you will be [anonymous](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding) */
export class InputPrivacyKeyForwards_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0xA4DD4C08;
  }

  static get [name](): string {
    return "inputPrivacyKeyForwards"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people will be able to see your profile picture */
export class InputPrivacyKeyProfilePhoto_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0x5719BACC;
  }

  static get [name](): string {
    return "inputPrivacyKeyProfilePhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people will be able to see your phone number */
export class InputPrivacyKeyPhoneNumber_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0x0352DAFA;
  }

  static get [name](): string {
    return "inputPrivacyKeyPhoneNumber"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people can add you to their contact list by your phone number */
export class InputPrivacyKeyAddedByPhone_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0xD1219BDD;
  }

  static get [name](): string {
    return "inputPrivacyKeyAddedByPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people can send you voice messages */
export class InputPrivacyKeyVoiceMessages_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0xAEE69D68;
  }

  static get [name](): string {
    return "inputPrivacyKeyVoiceMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people can see your bio */
export class InputPrivacyKeyAbout_ extends _InputPrivacyKey_ {
  protected get [id](): number {
    return 0x3823CC40;
  }

  static get [name](): string {
    return "inputPrivacyKeyAbout"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether we can see the last online timestamp of this user */
export class PrivacyKeyStatusTimestamp_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0xBC2EAB30;
  }

  static get [name](): string {
    return "privacyKeyStatusTimestamp"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether the user can be invited to chats */
export class PrivacyKeyChatInvite_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x500E6DFA;
  }

  static get [name](): string {
    return "privacyKeyChatInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether the user accepts phone calls */
export class PrivacyKeyPhoneCall_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x3D662B7B;
  }

  static get [name](): string {
    return "privacyKeyPhoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether P2P connections in phone calls with this user are allowed */
export class PrivacyKeyPhoneP2P_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x39491CC8;
  }

  static get [name](): string {
    return "privacyKeyPhoneP2P"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether messages forwarded from the user will be [anonymously forwarded](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding) */
export class PrivacyKeyForwards_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x69EC56A3;
  }

  static get [name](): string {
    return "privacyKeyForwards"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether the profile picture of the user is visible */
export class PrivacyKeyProfilePhoto_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x96151FED;
  }

  static get [name](): string {
    return "privacyKeyProfilePhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether the user allows us to see his phone number */
export class PrivacyKeyPhoneNumber_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0xD19AE46D;
  }

  static get [name](): string {
    return "privacyKeyPhoneNumber"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether this user can be added to our contact list by their phone number */
export class PrivacyKeyAddedByPhone_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x42FFD42B;
  }

  static get [name](): string {
    return "privacyKeyAddedByPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether the user accepts voice messages */
export class PrivacyKeyVoiceMessages_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0x0697F414;
  }

  static get [name](): string {
    return "privacyKeyVoiceMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Whether people can see your bio */
export class PrivacyKeyAbout_ extends _PrivacyKey_ {
  protected get [id](): number {
    return 0xA486B761;
  }

  static get [name](): string {
    return "privacyKeyAbout"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Allow only contacts */
export class InputPrivacyValueAllowContacts_ extends _InputPrivacyRule_ {
  protected get [id](): number {
    return 0x0D09E07B;
  }

  static get [name](): string {
    return "inputPrivacyValueAllowContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Allow all users */
export class InputPrivacyValueAllowAll_ extends _InputPrivacyRule_ {
  protected get [id](): number {
    return 0x184B35CE;
  }

  static get [name](): string {
    return "inputPrivacyValueAllowAll"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Allow only certain users */
export class InputPrivacyValueAllowUsers_ extends _InputPrivacyRule_ {
  /** Allowed users */
  users: Array<enums.InputUser>;

  protected get [id](): number {
    return 0x131CC67F;
  }

  static get [name](): string {
    return "inputPrivacyValueAllowUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["users", [_InputUser_], "Vector<InputUser>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.users, [_InputUser_], "Vector<InputUser>"],
    ];
  }

  constructor(params: { users: Array<enums.InputUser> }) {
    super();
    this.users = params.users;
  }
}

/** Disallow only contacts */
export class InputPrivacyValueDisallowContacts_ extends _InputPrivacyRule_ {
  protected get [id](): number {
    return 0x0BA52007;
  }

  static get [name](): string {
    return "inputPrivacyValueDisallowContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Disallow all */
export class InputPrivacyValueDisallowAll_ extends _InputPrivacyRule_ {
  protected get [id](): number {
    return 0xD66B66C9;
  }

  static get [name](): string {
    return "inputPrivacyValueDisallowAll"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Disallow only certain users */
export class InputPrivacyValueDisallowUsers_ extends _InputPrivacyRule_ {
  /** Users to disallow */
  users: Array<enums.InputUser>;

  protected get [id](): number {
    return 0x90110467;
  }

  static get [name](): string {
    return "inputPrivacyValueDisallowUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["users", [_InputUser_], "Vector<InputUser>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.users, [_InputUser_], "Vector<InputUser>"],
    ];
  }

  constructor(params: { users: Array<enums.InputUser> }) {
    super();
    this.users = params.users;
  }
}

/** Allow only participants of certain chats */
export class InputPrivacyValueAllowChatParticipants_ extends _InputPrivacyRule_ {
  /** Allowed chat IDs */
  chats: Array<bigint>;

  protected get [id](): number {
    return 0x840649CF;
  }

  static get [name](): string {
    return "inputPrivacyValueAllowChatParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chats", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chats, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { chats: Array<bigint> }) {
    super();
    this.chats = params.chats;
  }
}

/** Disallow only participants of certain chats */
export class InputPrivacyValueDisallowChatParticipants_ extends _InputPrivacyRule_ {
  /** Disallowed chat IDs */
  chats: Array<bigint>;

  protected get [id](): number {
    return 0xE94F0F86;
  }

  static get [name](): string {
    return "inputPrivacyValueDisallowChatParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chats", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chats, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { chats: Array<bigint> }) {
    super();
    this.chats = params.chats;
  }
}

/** Allow only [close friends »](https://core.telegram.org/api/privacy) */
export class InputPrivacyValueAllowCloseFriends_ extends _InputPrivacyRule_ {
  protected get [id](): number {
    return 0x2F453E49;
  }

  static get [name](): string {
    return "inputPrivacyValueAllowCloseFriends"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Allow all contacts */
export class PrivacyValueAllowContacts_ extends _PrivacyRule_ {
  protected get [id](): number {
    return 0xFFFE1BAC;
  }

  static get [name](): string {
    return "privacyValueAllowContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Allow all users */
export class PrivacyValueAllowAll_ extends _PrivacyRule_ {
  protected get [id](): number {
    return 0x65427B82;
  }

  static get [name](): string {
    return "privacyValueAllowAll"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Allow only certain users */
export class PrivacyValueAllowUsers_ extends _PrivacyRule_ {
  /** Allowed users */
  users: Array<bigint>;

  protected get [id](): number {
    return 0xB8905FB2;
  }

  static get [name](): string {
    return "privacyValueAllowUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["users", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.users, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { users: Array<bigint> }) {
    super();
    this.users = params.users;
  }
}

/** Disallow only contacts */
export class PrivacyValueDisallowContacts_ extends _PrivacyRule_ {
  protected get [id](): number {
    return 0xF888FA1A;
  }

  static get [name](): string {
    return "privacyValueDisallowContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Disallow all users */
export class PrivacyValueDisallowAll_ extends _PrivacyRule_ {
  protected get [id](): number {
    return 0x8B73E763;
  }

  static get [name](): string {
    return "privacyValueDisallowAll"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Disallow only certain users */
export class PrivacyValueDisallowUsers_ extends _PrivacyRule_ {
  /** Disallowed users */
  users: Array<bigint>;

  protected get [id](): number {
    return 0xE4621141;
  }

  static get [name](): string {
    return "privacyValueDisallowUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["users", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.users, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { users: Array<bigint> }) {
    super();
    this.users = params.users;
  }
}

/** Allow all participants of certain chats */
export class PrivacyValueAllowChatParticipants_ extends _PrivacyRule_ {
  /** Allowed chats */
  chats: Array<bigint>;

  protected get [id](): number {
    return 0x6B134E8E;
  }

  static get [name](): string {
    return "privacyValueAllowChatParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chats", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chats, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { chats: Array<bigint> }) {
    super();
    this.chats = params.chats;
  }
}

/** Disallow only participants of certain chats */
export class PrivacyValueDisallowChatParticipants_ extends _PrivacyRule_ {
  /** Disallowed chats */
  chats: Array<bigint>;

  protected get [id](): number {
    return 0x41C87565;
  }

  static get [name](): string {
    return "privacyValueDisallowChatParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chats", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chats, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { chats: Array<bigint> }) {
    super();
    this.chats = params.chats;
  }
}

/** Allow only [close friends »](https://core.telegram.org/api/privacy) */
export class PrivacyValueAllowCloseFriends_ extends _PrivacyRule_ {
  protected get [id](): number {
    return 0xF7E8D89B;
  }

  static get [name](): string {
    return "privacyValueAllowCloseFriends"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Privacy rules */
export class account_PrivacyRules_ extends _account_PrivacyRules_ {
  /** Privacy rules */
  rules: Array<enums.PrivacyRule>;
  /** Chats to which the rules apply */
  chats: Array<enums.Chat>;
  /** Users to which the rules apply */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x50A04E45;
  }

  static get [name](): string {
    return "account.privacyRules"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["rules", [_PrivacyRule_], "Vector<PrivacyRule>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.rules, [_PrivacyRule_], "Vector<PrivacyRule>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { rules: Array<enums.PrivacyRule>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.rules = params.rules;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Time to live in days of the current account */
export class AccountDaysTTL_ extends _AccountDaysTTL_ {
  /** This account will self-destruct in the specified number of days */
  days: number;

  protected get [id](): number {
    return 0xB8D0AFDF;
  }

  static get [name](): string {
    return "accountDaysTTL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["days", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.days, "number", "int"],
    ];
  }

  constructor(params: { days: number }) {
    super();
    this.days = params.days;
  }
}

/** Defines the width and height of an image uploaded as document */
export class DocumentAttributeImageSize_ extends _DocumentAttribute_ {
  /** Width of image */
  w: number;
  /** Height of image */
  h: number;

  protected get [id](): number {
    return 0x6C37C15C;
  }

  static get [name](): string {
    return "documentAttributeImageSize"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["w", "number", "int"],
      ["h", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.w, "number", "int"],
      [this.h, "number", "int"],
    ];
  }

  constructor(params: { w: number; h: number }) {
    super();
    this.w = params.w;
    this.h = params.h;
  }
}

/** Defines an animated GIF */
export class DocumentAttributeAnimated_ extends _DocumentAttribute_ {
  protected get [id](): number {
    return 0x11B58939;
  }

  static get [name](): string {
    return "documentAttributeAnimated"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Defines a sticker */
export class DocumentAttributeSticker_ extends _DocumentAttribute_ {
  /** Whether this is a mask sticker */
  mask?: true;
  /** Alternative emoji representation of sticker */
  alt: string;
  /** Associated stickerset */
  stickerset: enums.InputStickerSet;
  /** Mask coordinates (if this is a mask sticker, attached to a photo) */
  mask_coords?: enums.MaskCoords;

  protected get [id](): number {
    return 0x6319D612;
  }

  static get [name](): string {
    return "documentAttributeSticker"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["mask", "true", "flags.1?true"],
      ["alt", "string", "string"],
      ["stickerset", _InputStickerSet_, "InputStickerSet"],
      ["mask_coords", _MaskCoords_, "flags.0?MaskCoords"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.mask ?? null, "true", "flags.1?true"],
      [this.alt, "string", "string"],
      [this.stickerset, _InputStickerSet_, "InputStickerSet"],
      [this.mask_coords ?? null, _MaskCoords_, "flags.0?MaskCoords"],
    ];
  }

  constructor(params: { mask?: true; alt: string; stickerset: enums.InputStickerSet; mask_coords?: enums.MaskCoords }) {
    super();
    this.mask = params.mask;
    this.alt = params.alt;
    this.stickerset = params.stickerset;
    this.mask_coords = params.mask_coords;
  }
}

/** Defines a video */
export class DocumentAttributeVideo_ extends _DocumentAttribute_ {
  /** Whether this is a round video */
  round_message?: true;
  /** Whether the video supports streaming */
  supports_streaming?: true;
  /** Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example) */
  nosound?: true;
  /** Duration in seconds */
  duration: number;
  /** Video width */
  w: number;
  /** Video height */
  h: number;
  /** Number of bytes to preload when preloading videos (particularly [video stories](https://core.telegram.org/api/stories)). */
  preload_prefix_size?: number;

  protected get [id](): number {
    return 0xD38FF1C2;
  }

  static get [name](): string {
    return "documentAttributeVideo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["round_message", "true", "flags.0?true"],
      ["supports_streaming", "true", "flags.1?true"],
      ["nosound", "true", "flags.3?true"],
      ["duration", "number", "double"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["preload_prefix_size", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.round_message ?? null, "true", "flags.0?true"],
      [this.supports_streaming ?? null, "true", "flags.1?true"],
      [this.nosound ?? null, "true", "flags.3?true"],
      [this.duration, "number", "double"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.preload_prefix_size ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params: { round_message?: true; supports_streaming?: true; nosound?: true; duration: number; w: number; h: number; preload_prefix_size?: number }) {
    super();
    this.round_message = params.round_message;
    this.supports_streaming = params.supports_streaming;
    this.nosound = params.nosound;
    this.duration = params.duration;
    this.w = params.w;
    this.h = params.h;
    this.preload_prefix_size = params.preload_prefix_size;
  }
}

/** Represents an audio file */
export class DocumentAttributeAudio_ extends _DocumentAttribute_ {
  /** Whether this is a voice message */
  voice?: true;
  /** Duration in seconds */
  duration: number;
  /** Name of song */
  title?: string;
  /** Performer */
  performer?: string;
  /** Waveform: consists in a series of bitpacked 5-bit values.  
  Example implementation: [android](https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/jni/audio.c#L546). */
  waveform?: Uint8Array;

  protected get [id](): number {
    return 0x9852F9C6;
  }

  static get [name](): string {
    return "documentAttributeAudio"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["voice", "true", "flags.10?true"],
      ["duration", "number", "int"],
      ["title", "string", "flags.0?string"],
      ["performer", "string", "flags.1?string"],
      ["waveform", Uint8Array, "flags.2?bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.voice ?? null, "true", "flags.10?true"],
      [this.duration, "number", "int"],
      [this.title ?? null, "string", "flags.0?string"],
      [this.performer ?? null, "string", "flags.1?string"],
      [this.waveform ?? null, Uint8Array, "flags.2?bytes"],
    ];
  }

  constructor(params: { voice?: true; duration: number; title?: string; performer?: string; waveform?: Uint8Array }) {
    super();
    this.voice = params.voice;
    this.duration = params.duration;
    this.title = params.title;
    this.performer = params.performer;
    this.waveform = params.waveform;
  }
}

/** A simple document with a file name */
export class DocumentAttributeFilename_ extends _DocumentAttribute_ {
  /** The file name */
  file_name: string;

  protected get [id](): number {
    return 0x15590068;
  }

  static get [name](): string {
    return "documentAttributeFilename"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["file_name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.file_name, "string", "string"],
    ];
  }

  constructor(params: { file_name: string }) {
    super();
    this.file_name = params.file_name;
  }
}

/** Whether the current document has stickers attached */
export class DocumentAttributeHasStickers_ extends _DocumentAttribute_ {
  protected get [id](): number {
    return 0x9801D2F7;
  }

  static get [name](): string {
    return "documentAttributeHasStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Info about a custom emoji */
export class DocumentAttributeCustomEmoji_ extends _DocumentAttribute_ {
  /** Whether this custom emoji can be sent by non-Premium users */
  free?: true;
  /** Whether the color of this TGS custom emoji should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. */
  text_color?: true;
  /** The actual emoji */
  alt: string;
  /** The emoji stickerset to which this emoji belongs. */
  stickerset: enums.InputStickerSet;

  protected get [id](): number {
    return 0xFD149899;
  }

  static get [name](): string {
    return "documentAttributeCustomEmoji"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["free", "true", "flags.0?true"],
      ["text_color", "true", "flags.1?true"],
      ["alt", "string", "string"],
      ["stickerset", _InputStickerSet_, "InputStickerSet"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.free ?? null, "true", "flags.0?true"],
      [this.text_color ?? null, "true", "flags.1?true"],
      [this.alt, "string", "string"],
      [this.stickerset, _InputStickerSet_, "InputStickerSet"],
    ];
  }

  constructor(params: { free?: true; text_color?: true; alt: string; stickerset: enums.InputStickerSet }) {
    super();
    this.free = params.free;
    this.text_color = params.text_color;
    this.alt = params.alt;
    this.stickerset = params.stickerset;
  }
}

/** No new stickers were found for the given query */
export class messages_StickersNotModified_ extends _messages_Stickers_ {
  protected get [id](): number {
    return 0xF1749A22;
  }

  static get [name](): string {
    return "messages.stickersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Found stickers */
export class messages_Stickers_ extends _messages_Stickers_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Stickers */
  stickers: Array<enums.Document>;

  protected get [id](): number {
    return 0x30A6EC7E;
  }

  static get [name](): string {
    return "messages.stickers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["stickers", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.stickers, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { hash: bigint; stickers: Array<enums.Document> }) {
    super();
    this.hash = params.hash;
    this.stickers = params.stickers;
  }
}

/** A stickerpack is a group of stickers associated to the same emoji.  
It is **not** a sticker pack the way it is usually intended, you may be looking for a [StickerSet](https://core.telegram.org/type/StickerSet). */
export class StickerPack_ extends _StickerPack_ {
  /** Emoji */
  emoticon: string;
  /** Stickers */
  documents: Array<bigint>;

  protected get [id](): number {
    return 0x12B299D4;
  }

  static get [name](): string {
    return "stickerPack"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
      ["documents", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
      [this.documents, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { emoticon: string; documents: Array<bigint> }) {
    super();
    this.emoticon = params.emoticon;
    this.documents = params.documents;
  }
}

/** Info about all installed stickers hasn't changed */
export class messages_AllStickersNotModified_ extends _messages_AllStickers_ {
  protected get [id](): number {
    return 0xE86602C3;
  }

  static get [name](): string {
    return "messages.allStickersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Info about all installed stickers */
export class messages_AllStickers_ extends _messages_AllStickers_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** All stickersets */
  sets: Array<enums.StickerSet>;

  protected get [id](): number {
    return 0xCDBBCEBB;
  }

  static get [name](): string {
    return "messages.allStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["sets", [_StickerSet_], "Vector<StickerSet>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.sets, [_StickerSet_], "Vector<StickerSet>"],
    ];
  }

  constructor(params: { hash: bigint; sets: Array<enums.StickerSet> }) {
    super();
    this.hash = params.hash;
    this.sets = params.sets;
  }
}

/** Events affected by operation */
export class messages_AffectedMessages_ extends _messages_AffectedMessages_ {
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;

  protected get [id](): number {
    return 0x84D19185;
  }

  static get [name](): string {
    return "messages.affectedMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
    ];
  }

  constructor(params: { pts: number; pts_count: number }) {
    super();
    this.pts = params.pts;
    this.pts_count = params.pts_count;
  }
}

/** No preview is available for the webpage */
export class WebPageEmpty_ extends _WebPage_ {
  /** Preview ID */
  id: bigint;
  /** URL of the webpage. */
  url?: string;

  protected get [id](): number {
    return 0x211A1788;
  }

  static get [name](): string {
    return "webPageEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "bigint", "long"],
      ["url", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "bigint", "long"],
      [this.url ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { id: bigint; url?: string }) {
    super();
    this.id = params.id;
    this.url = params.url;
  }
}

/** A preview of the webpage is currently being generated */
export class WebPagePending_ extends _WebPage_ {
  /** ID of preview */
  id: bigint;
  /** URL of the webpage */
  url?: string;
  /** When was the processing started */
  date: number;

  protected get [id](): number {
    return 0xB0D13E47;
  }

  static get [name](): string {
    return "webPagePending"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "bigint", "long"],
      ["url", "string", "flags.0?string"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "bigint", "long"],
      [this.url ?? null, "string", "flags.0?string"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { id: bigint; url?: string; date: number }) {
    super();
    this.id = params.id;
    this.url = params.url;
    this.date = params.date;
  }
}

/** Webpage preview */
export class WebPage_ extends _WebPage_ {
  /** Whether the size of the media in the preview can be changed. */
  has_large_media?: true;
  /** Preview ID */
  id: bigint;
  /** URL of previewed webpage */
  url: string;
  /** Webpage URL to be displayed to the user */
  display_url: string;
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;
  /** Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else */
  type?: string;
  /** Short name of the site (e.g., Google Docs, App Store) */
  site_name?: string;
  /** Title of the content */
  title?: string;
  /** Content description */
  description?: string;
  /** Image representing the content */
  photo?: enums.Photo;
  /** URL to show in the embedded preview */
  embed_url?: string;
  /** MIME type of the embedded preview, (e.g., text/html or video/mp4) */
  embed_type?: string;
  /** Width of the embedded preview */
  embed_width?: number;
  /** Height of the embedded preview */
  embed_height?: number;
  /** Duration of the content, in seconds */
  duration?: number;
  /** Author of the content */
  author?: string;
  /** Preview of the content as a media file */
  document?: enums.Document;
  /** Page contents in [instant view](https://instantview.telegram.org) format */
  cached_page?: enums.Page;
  /** Webpage attributes */
  attributes?: Array<enums.WebPageAttribute>;

  protected get [id](): number {
    return 0xE89C45B2;
  }

  static get [name](): string {
    return "webPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_large_media", "true", "flags.13?true"],
      ["id", "bigint", "long"],
      ["url", "string", "string"],
      ["display_url", "string", "string"],
      ["hash", "number", "int"],
      ["type", "string", "flags.0?string"],
      ["site_name", "string", "flags.1?string"],
      ["title", "string", "flags.2?string"],
      ["description", "string", "flags.3?string"],
      ["photo", _Photo_, "flags.4?Photo"],
      ["embed_url", "string", "flags.5?string"],
      ["embed_type", "string", "flags.5?string"],
      ["embed_width", "number", "flags.6?int"],
      ["embed_height", "number", "flags.6?int"],
      ["duration", "number", "flags.7?int"],
      ["author", "string", "flags.8?string"],
      ["document", _Document_, "flags.9?Document"],
      ["cached_page", _Page_, "flags.10?Page"],
      ["attributes", [_WebPageAttribute_], "flags.12?Vector<WebPageAttribute>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_large_media ?? null, "true", "flags.13?true"],
      [this.id, "bigint", "long"],
      [this.url, "string", "string"],
      [this.display_url, "string", "string"],
      [this.hash, "number", "int"],
      [this.type ?? null, "string", "flags.0?string"],
      [this.site_name ?? null, "string", "flags.1?string"],
      [this.title ?? null, "string", "flags.2?string"],
      [this.description ?? null, "string", "flags.3?string"],
      [this.photo ?? null, _Photo_, "flags.4?Photo"],
      [this.embed_url ?? null, "string", "flags.5?string"],
      [this.embed_type ?? null, "string", "flags.5?string"],
      [this.embed_width ?? null, "number", "flags.6?int"],
      [this.embed_height ?? null, "number", "flags.6?int"],
      [this.duration ?? null, "number", "flags.7?int"],
      [this.author ?? null, "string", "flags.8?string"],
      [this.document ?? null, _Document_, "flags.9?Document"],
      [this.cached_page ?? null, _Page_, "flags.10?Page"],
      [this.attributes ?? null, [_WebPageAttribute_], "flags.12?Vector<WebPageAttribute>"],
    ];
  }

  constructor(params: { has_large_media?: true; id: bigint; url: string; display_url: string; hash: number; type?: string; site_name?: string; title?: string; description?: string; photo?: enums.Photo; embed_url?: string; embed_type?: string; embed_width?: number; embed_height?: number; duration?: number; author?: string; document?: enums.Document; cached_page?: enums.Page; attributes?: Array<enums.WebPageAttribute> }) {
    super();
    this.has_large_media = params.has_large_media;
    this.id = params.id;
    this.url = params.url;
    this.display_url = params.display_url;
    this.hash = params.hash;
    this.type = params.type;
    this.site_name = params.site_name;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.embed_url = params.embed_url;
    this.embed_type = params.embed_type;
    this.embed_width = params.embed_width;
    this.embed_height = params.embed_height;
    this.duration = params.duration;
    this.author = params.author;
    this.document = params.document;
    this.cached_page = params.cached_page;
    this.attributes = params.attributes;
  }
}

/** The preview of the webpage hasn't changed */
export class WebPageNotModified_ extends _WebPage_ {
  /** Page view count */
  cached_page_views?: number;

  protected get [id](): number {
    return 0x7311CA11;
  }

  static get [name](): string {
    return "webPageNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["cached_page_views", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.cached_page_views ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params?: { cached_page_views?: number }) {
    super();
    this.cached_page_views = params?.cached_page_views;
  }
}

/** Logged-in session */
export class Authorization_ extends _Authorization_ {
  /** Whether this is the current session */
  current?: true;
  /** Whether the session is from an official app */
  official_app?: true;
  /** Whether the session is still waiting for a 2FA password */
  password_pending?: true;
  /** Whether this session will accept encrypted chats */
  encrypted_requests_disabled?: true;
  /** Whether this session will accept phone calls */
  call_requests_disabled?: true;
  /** Whether the session is [unconfirmed, see here »](https://core.telegram.org/api/auth#confirming-login) for more info. */
  unconfirmed?: true;
  /** Identifier */
  hash: bigint;
  /** Device model */
  device_model: string;
  /** Platform */
  platform: string;
  /** System version */
  system_version: string;
  /** [API ID](https://core.telegram.org/api/obtaining_api_id) */
  api_id: number;
  /** App name */
  app_name: string;
  /** App version */
  app_version: string;
  /** When was the session created */
  date_created: number;
  /** When was the session last active */
  date_active: number;
  /** Last known IP */
  ip: string;
  /** Country determined from IP */
  country: string;
  /** Region determined from IP */
  region: string;

  protected get [id](): number {
    return 0xAD01D61D;
  }

  static get [name](): string {
    return "authorization"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["current", "true", "flags.0?true"],
      ["official_app", "true", "flags.1?true"],
      ["password_pending", "true", "flags.2?true"],
      ["encrypted_requests_disabled", "true", "flags.3?true"],
      ["call_requests_disabled", "true", "flags.4?true"],
      ["unconfirmed", "true", "flags.5?true"],
      ["hash", "bigint", "long"],
      ["device_model", "string", "string"],
      ["platform", "string", "string"],
      ["system_version", "string", "string"],
      ["api_id", "number", "int"],
      ["app_name", "string", "string"],
      ["app_version", "string", "string"],
      ["date_created", "number", "int"],
      ["date_active", "number", "int"],
      ["ip", "string", "string"],
      ["country", "string", "string"],
      ["region", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.current ?? null, "true", "flags.0?true"],
      [this.official_app ?? null, "true", "flags.1?true"],
      [this.password_pending ?? null, "true", "flags.2?true"],
      [this.encrypted_requests_disabled ?? null, "true", "flags.3?true"],
      [this.call_requests_disabled ?? null, "true", "flags.4?true"],
      [this.unconfirmed ?? null, "true", "flags.5?true"],
      [this.hash, "bigint", "long"],
      [this.device_model, "string", "string"],
      [this.platform, "string", "string"],
      [this.system_version, "string", "string"],
      [this.api_id, "number", "int"],
      [this.app_name, "string", "string"],
      [this.app_version, "string", "string"],
      [this.date_created, "number", "int"],
      [this.date_active, "number", "int"],
      [this.ip, "string", "string"],
      [this.country, "string", "string"],
      [this.region, "string", "string"],
    ];
  }

  constructor(params: { current?: true; official_app?: true; password_pending?: true; encrypted_requests_disabled?: true; call_requests_disabled?: true; unconfirmed?: true; hash: bigint; device_model: string; platform: string; system_version: string; api_id: number; app_name: string; app_version: string; date_created: number; date_active: number; ip: string; country: string; region: string }) {
    super();
    this.current = params.current;
    this.official_app = params.official_app;
    this.password_pending = params.password_pending;
    this.encrypted_requests_disabled = params.encrypted_requests_disabled;
    this.call_requests_disabled = params.call_requests_disabled;
    this.unconfirmed = params.unconfirmed;
    this.hash = params.hash;
    this.device_model = params.device_model;
    this.platform = params.platform;
    this.system_version = params.system_version;
    this.api_id = params.api_id;
    this.app_name = params.app_name;
    this.app_version = params.app_version;
    this.date_created = params.date_created;
    this.date_active = params.date_active;
    this.ip = params.ip;
    this.country = params.country;
    this.region = params.region;
  }
}

/** Logged-in sessions */
export class account_Authorizations_ extends _account_Authorizations_ {
  /** Time-to-live of session */
  authorization_ttl_days: number;
  /** Logged-in sessions */
  authorizations: Array<enums.Authorization>;

  protected get [id](): number {
    return 0x4BFF8EA0;
  }

  static get [name](): string {
    return "account.authorizations"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["authorization_ttl_days", "number", "int"],
      ["authorizations", [_Authorization_], "Vector<Authorization>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.authorization_ttl_days, "number", "int"],
      [this.authorizations, [_Authorization_], "Vector<Authorization>"],
    ];
  }

  constructor(params: { authorization_ttl_days: number; authorizations: Array<enums.Authorization> }) {
    super();
    this.authorization_ttl_days = params.authorization_ttl_days;
    this.authorizations = params.authorizations;
  }
}

/** Configuration for two-factor authorization */
export class account_Password_ extends _account_Password_ {
  /** Whether the user has a recovery method configured */
  has_recovery?: true;
  /** Whether telegram [passport](https://core.telegram.org/passport) is enabled */
  has_secure_values?: true;
  /** Whether the user has a password */
  has_password?: true;
  /** The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) of the current password */
  current_algo?: enums.PasswordKdfAlgo;
  /** Srp B param for [SRP authorization](https://core.telegram.org/api/srp) */
  srp_B?: Uint8Array;
  /** Srp ID param for [SRP authorization](https://core.telegram.org/api/srp) */
  srp_id?: bigint;
  /** Text hint for the password */
  hint?: string;
  /** A [password recovery email](https://core.telegram.org/api/srp#email-verification) with the specified [pattern](https://core.telegram.org/api/pattern) is still awaiting verification */
  email_unconfirmed_pattern?: string;
  /** The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) to use when creating new passwords */
  new_algo: enums.PasswordKdfAlgo;
  /** The KDF algorithm for telegram [passport](https://core.telegram.org/passport) */
  new_secure_algo: enums.SecurePasswordKdfAlgo;
  /** Secure random string */
  secure_random: Uint8Array;
  /** The 2FA password will be automatically removed at this date, unless the user cancels the operation */
  pending_reset_date?: number;
  /** A verified login email with the specified [pattern](https://core.telegram.org/api/pattern) is configured */
  login_email_pattern?: string;

  protected get [id](): number {
    return 0x957B50FB;
  }

  static get [name](): string {
    return "account.password"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_recovery", "true", "flags.0?true"],
      ["has_secure_values", "true", "flags.1?true"],
      ["has_password", "true", "flags.2?true"],
      ["current_algo", _PasswordKdfAlgo_, "flags.2?PasswordKdfAlgo"],
      ["srp_B", Uint8Array, "flags.2?bytes"],
      ["srp_id", "bigint", "flags.2?long"],
      ["hint", "string", "flags.3?string"],
      ["email_unconfirmed_pattern", "string", "flags.4?string"],
      ["new_algo", _PasswordKdfAlgo_, "PasswordKdfAlgo"],
      ["new_secure_algo", _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
      ["secure_random", Uint8Array, "bytes"],
      ["pending_reset_date", "number", "flags.5?int"],
      ["login_email_pattern", "string", "flags.6?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_recovery ?? null, "true", "flags.0?true"],
      [this.has_secure_values ?? null, "true", "flags.1?true"],
      [this.has_password ?? null, "true", "flags.2?true"],
      [this.current_algo ?? null, _PasswordKdfAlgo_, "flags.2?PasswordKdfAlgo"],
      [this.srp_B ?? null, Uint8Array, "flags.2?bytes"],
      [this.srp_id ?? null, "bigint", "flags.2?long"],
      [this.hint ?? null, "string", "flags.3?string"],
      [this.email_unconfirmed_pattern ?? null, "string", "flags.4?string"],
      [this.new_algo, _PasswordKdfAlgo_, "PasswordKdfAlgo"],
      [this.new_secure_algo, _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
      [this.secure_random, Uint8Array, "bytes"],
      [this.pending_reset_date ?? null, "number", "flags.5?int"],
      [this.login_email_pattern ?? null, "string", "flags.6?string"],
    ];
  }

  constructor(params: { has_recovery?: true; has_secure_values?: true; has_password?: true; current_algo?: enums.PasswordKdfAlgo; srp_B?: Uint8Array; srp_id?: bigint; hint?: string; email_unconfirmed_pattern?: string; new_algo: enums.PasswordKdfAlgo; new_secure_algo: enums.SecurePasswordKdfAlgo; secure_random: Uint8Array; pending_reset_date?: number; login_email_pattern?: string }) {
    super();
    this.has_recovery = params.has_recovery;
    this.has_secure_values = params.has_secure_values;
    this.has_password = params.has_password;
    this.current_algo = params.current_algo;
    this.srp_B = params.srp_B;
    this.srp_id = params.srp_id;
    this.hint = params.hint;
    this.email_unconfirmed_pattern = params.email_unconfirmed_pattern;
    this.new_algo = params.new_algo;
    this.new_secure_algo = params.new_secure_algo;
    this.secure_random = params.secure_random;
    this.pending_reset_date = params.pending_reset_date;
    this.login_email_pattern = params.login_email_pattern;
  }
}

/** Private info associated to the password info (recovery email, telegram [passport](https://core.telegram.org/passport) info & so on) */
export class account_PasswordSettings_ extends _account_PasswordSettings_ {
  /** [2FA Recovery email](https://core.telegram.org/api/srp#email-verification) */
  email?: string;
  /** Telegram [passport](https://core.telegram.org/passport) settings */
  secure_settings?: enums.SecureSecretSettings;

  protected get [id](): number {
    return 0x9A5C33E5;
  }

  static get [name](): string {
    return "account.passwordSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["email", "string", "flags.0?string"],
      ["secure_settings", _SecureSecretSettings_, "flags.1?SecureSecretSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.email ?? null, "string", "flags.0?string"],
      [this.secure_settings ?? null, _SecureSecretSettings_, "flags.1?SecureSecretSettings"],
    ];
  }

  constructor(params?: { email?: string; secure_settings?: enums.SecureSecretSettings }) {
    super();
    this.email = params?.email;
    this.secure_settings = params?.secure_settings;
  }
}

/** Settings for setting up a new password */
export class account_PasswordInputSettings_ extends _account_PasswordInputSettings_ {
  /** The [SRP algorithm](https://core.telegram.org/api/srp) to use */
  new_algo?: enums.PasswordKdfAlgo;
  /** The [computed password hash](https://core.telegram.org/api/srp) */
  new_password_hash?: Uint8Array;
  /** Text hint for the password */
  hint?: string;
  /** Password recovery email */
  email?: string;
  /** Telegram [passport](https://core.telegram.org/passport) settings */
  new_secure_settings?: enums.SecureSecretSettings;

  protected get [id](): number {
    return 0xC23727C9;
  }

  static get [name](): string {
    return "account.passwordInputSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["new_algo", _PasswordKdfAlgo_, "flags.0?PasswordKdfAlgo"],
      ["new_password_hash", Uint8Array, "flags.0?bytes"],
      ["hint", "string", "flags.0?string"],
      ["email", "string", "flags.1?string"],
      ["new_secure_settings", _SecureSecretSettings_, "flags.2?SecureSecretSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.new_algo ?? null, _PasswordKdfAlgo_, "flags.0?PasswordKdfAlgo"],
      [this.new_password_hash ?? null, Uint8Array, "flags.0?bytes"],
      [this.hint ?? null, "string", "flags.0?string"],
      [this.email ?? null, "string", "flags.1?string"],
      [this.new_secure_settings ?? null, _SecureSecretSettings_, "flags.2?SecureSecretSettings"],
    ];
  }

  constructor(params?: { new_algo?: enums.PasswordKdfAlgo; new_password_hash?: Uint8Array; hint?: string; email?: string; new_secure_settings?: enums.SecureSecretSettings }) {
    super();
    this.new_algo = params?.new_algo;
    this.new_password_hash = params?.new_password_hash;
    this.hint = params?.hint;
    this.email = params?.email;
    this.new_secure_settings = params?.new_secure_settings;
  }
}

/** Recovery info of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification). */
export class auth_PasswordRecovery_ extends _auth_PasswordRecovery_ {
  /** The email to which the recovery code was sent must match this [pattern](https://core.telegram.org/api/pattern). */
  email_pattern: string;

  protected get [id](): number {
    return 0x137948A5;
  }

  static get [name](): string {
    return "auth.passwordRecovery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["email_pattern", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.email_pattern, "string", "string"],
    ];
  }

  constructor(params: { email_pattern: string }) {
    super();
    this.email_pattern = params.email_pattern;
  }
}

/** Message ID, for which PUSH-notifications were cancelled. */
export class ReceivedNotifyMessage_ extends _ReceivedNotifyMessage_ {
  /** Message ID, for which PUSH-notifications were canceled */
  id: number;
  /** Reserved for future use */
  flags: number;

  protected get [id](): number {
    return 0xA384B779;
  }

  static get [name](): string {
    return "receivedNotifyMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
      ["flags", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
      [this.flags, "number", "int"],
    ];
  }

  constructor(params: { id: number; flags: number }) {
    super();
    this.id = params.id;
    this.flags = params.flags;
  }
}

/** Exported chat invite */
export class ChatInviteExported_ extends _ExportedChatInvite_ {
  /** Whether this chat invite was revoked */
  revoked?: true;
  /** Whether this chat invite has no expiration */
  permanent?: true;
  /** Whether users importing this invite link will have to be approved to join the channel or group */
  request_needed?: true;
  /** Chat invitation link */
  link: string;
  /** ID of the admin that created this chat invite */
  admin_id: bigint;
  /** When was this chat invite created */
  date: number;
  /** When was this chat invite last modified */
  start_date?: number;
  /** When does this chat invite expire */
  expire_date?: number;
  /** Maximum number of users that can join using this link */
  usage_limit?: number;
  /** How many users joined using this link */
  usage?: number;
  /** Number of users that have already used this link to join */
  requested?: number;
  /** Custom description for the invite link, visible only to admins */
  title?: string;

  protected get [id](): number {
    return 0x0AB4A819;
  }

  static get [name](): string {
    return "chatInviteExported"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["revoked", "true", "flags.0?true"],
      ["permanent", "true", "flags.5?true"],
      ["request_needed", "true", "flags.6?true"],
      ["link", "string", "string"],
      ["admin_id", "bigint", "long"],
      ["date", "number", "int"],
      ["start_date", "number", "flags.4?int"],
      ["expire_date", "number", "flags.1?int"],
      ["usage_limit", "number", "flags.2?int"],
      ["usage", "number", "flags.3?int"],
      ["requested", "number", "flags.7?int"],
      ["title", "string", "flags.8?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.revoked ?? null, "true", "flags.0?true"],
      [this.permanent ?? null, "true", "flags.5?true"],
      [this.request_needed ?? null, "true", "flags.6?true"],
      [this.link, "string", "string"],
      [this.admin_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.start_date ?? null, "number", "flags.4?int"],
      [this.expire_date ?? null, "number", "flags.1?int"],
      [this.usage_limit ?? null, "number", "flags.2?int"],
      [this.usage ?? null, "number", "flags.3?int"],
      [this.requested ?? null, "number", "flags.7?int"],
      [this.title ?? null, "string", "flags.8?string"],
    ];
  }

  constructor(params: { revoked?: true; permanent?: true; request_needed?: true; link: string; admin_id: bigint; date: number; start_date?: number; expire_date?: number; usage_limit?: number; usage?: number; requested?: number; title?: string }) {
    super();
    this.revoked = params.revoked;
    this.permanent = params.permanent;
    this.request_needed = params.request_needed;
    this.link = params.link;
    this.admin_id = params.admin_id;
    this.date = params.date;
    this.start_date = params.start_date;
    this.expire_date = params.expire_date;
    this.usage_limit = params.usage_limit;
    this.usage = params.usage;
    this.requested = params.requested;
    this.title = params.title;
  }
}

/** Used in updates and in the channel log to indicate when a user is requesting to join or has joined a [discussion group](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group) */
export class ChatInvitePublicJoinRequests_ extends _ExportedChatInvite_ {
  protected get [id](): number {
    return 0xED107AB7;
  }

  static get [name](): string {
    return "chatInvitePublicJoinRequests"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The user has already joined this chat */
export class ChatInviteAlready_ extends _ChatInvite_ {
  /** The chat connected to the invite */
  chat: enums.Chat;

  protected get [id](): number {
    return 0x5A686D7C;
  }

  static get [name](): string {
    return "chatInviteAlready"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat", _Chat_, "Chat"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat, _Chat_, "Chat"],
    ];
  }

  constructor(params: { chat: enums.Chat }) {
    super();
    this.chat = params.chat;
  }
}

/** Chat invite info */
export class ChatInvite_ extends _ChatInvite_ {
  /** Whether this is a [channel/supergroup](https://core.telegram.org/api/channel) or a [normal group](https://core.telegram.org/api/channel) */
  channel?: true;
  /** Whether this is a [channel](https://core.telegram.org/api/channel) */
  broadcast?: true;
  /** Whether this is a public [channel/supergroup](https://core.telegram.org/api/channel) */
  public?: true;
  /** Whether this is a [supergroup](https://core.telegram.org/api/channel) */
  megagroup?: true;
  /** Whether the [join request »](https://core.telegram.org/api/invites#join-requests) must be first approved by an administrator */
  request_needed?: true;
  /** Is this chat or channel verified by Telegram? */
  verified?: true;
  /** This chat is probably a scam */
  scam?: true;
  /** If set, this chat was reported by many users as a fake or scam: be careful when interacting with it. */
  fake?: true;
  /** Chat/supergroup/channel title */
  title: string;
  /** Description of the group of channel */
  about?: string;
  /** Chat/supergroup/channel photo */
  photo: enums.Photo;
  /** Participant count */
  participants_count: number;
  /** A few of the participants that are in the group */
  participants?: Array<enums.User>;
  /** [Profile color palette ID](https://core.telegram.org/api/colors) */
  color: number;

  protected get [id](): number {
    return 0xCDE0EC40;
  }

  static get [name](): string {
    return "chatInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["channel", "true", "flags.0?true"],
      ["broadcast", "true", "flags.1?true"],
      ["public", "true", "flags.2?true"],
      ["megagroup", "true", "flags.3?true"],
      ["request_needed", "true", "flags.6?true"],
      ["verified", "true", "flags.7?true"],
      ["scam", "true", "flags.8?true"],
      ["fake", "true", "flags.9?true"],
      ["title", "string", "string"],
      ["about", "string", "flags.5?string"],
      ["photo", _Photo_, "Photo"],
      ["participants_count", "number", "int"],
      ["participants", [_User_], "flags.4?Vector<User>"],
      ["color", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.channel ?? null, "true", "flags.0?true"],
      [this.broadcast ?? null, "true", "flags.1?true"],
      [this.public ?? null, "true", "flags.2?true"],
      [this.megagroup ?? null, "true", "flags.3?true"],
      [this.request_needed ?? null, "true", "flags.6?true"],
      [this.verified ?? null, "true", "flags.7?true"],
      [this.scam ?? null, "true", "flags.8?true"],
      [this.fake ?? null, "true", "flags.9?true"],
      [this.title, "string", "string"],
      [this.about ?? null, "string", "flags.5?string"],
      [this.photo, _Photo_, "Photo"],
      [this.participants_count, "number", "int"],
      [this.participants ?? null, [_User_], "flags.4?Vector<User>"],
      [this.color, "number", "int"],
    ];
  }

  constructor(params: { channel?: true; broadcast?: true; public?: true; megagroup?: true; request_needed?: true; verified?: true; scam?: true; fake?: true; title: string; about?: string; photo: enums.Photo; participants_count: number; participants?: Array<enums.User>; color: number }) {
    super();
    this.channel = params.channel;
    this.broadcast = params.broadcast;
    this.public = params.public;
    this.megagroup = params.megagroup;
    this.request_needed = params.request_needed;
    this.verified = params.verified;
    this.scam = params.scam;
    this.fake = params.fake;
    this.title = params.title;
    this.about = params.about;
    this.photo = params.photo;
    this.participants_count = params.participants_count;
    this.participants = params.participants;
    this.color = params.color;
  }
}

/** A chat invitation that also allows peeking into the group to read messages without joining it. */
export class ChatInvitePeek_ extends _ChatInvite_ {
  /** Chat information */
  chat: enums.Chat;
  /** Read-only anonymous access to this group will be revoked at this date */
  expires: number;

  protected get [id](): number {
    return 0x61695CB0;
  }

  static get [name](): string {
    return "chatInvitePeek"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["chat", _Chat_, "Chat"],
      ["expires", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.chat, _Chat_, "Chat"],
      [this.expires, "number", "int"],
    ];
  }

  constructor(params: { chat: enums.Chat; expires: number }) {
    super();
    this.chat = params.chat;
    this.expires = params.expires;
  }
}

/** Empty constructor */
export class InputStickerSetEmpty_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0xFFB62B95;
  }

  static get [name](): string {
    return "inputStickerSetEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Stickerset by ID */
export class InputStickerSetID_ extends _InputStickerSet_ {
  /** ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0x9DE7A269;
  }

  static get [name](): string {
    return "inputStickerSetID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Stickerset by short name, from a [stickerset deep link »](https://core.telegram.org/api/links#stickerset-links) */
export class InputStickerSetShortName_ extends _InputStickerSet_ {
  /** Short name from a [stickerset deep link »](https://core.telegram.org/api/links#stickerset-links) */
  short_name: string;

  protected get [id](): number {
    return 0x861CC8A0;
  }

  static get [name](): string {
    return "inputStickerSetShortName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["short_name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.short_name, "string", "string"],
    ];
  }

  constructor(params: { short_name: string }) {
    super();
    this.short_name = params.short_name;
  }
}

/** Animated emojis stickerset */
export class InputStickerSetAnimatedEmoji_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0x028703C8;
  }

  static get [name](): string {
    return "inputStickerSetAnimatedEmoji"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Used for fetching [animated dice stickers](https://core.telegram.org/api/dice) */
export class InputStickerSetDice_ extends _InputStickerSet_ {
  /** The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported */
  emoticon: string;

  protected get [id](): number {
    return 0xE67F520E;
  }

  static get [name](): string {
    return "inputStickerSetDice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
    ];
  }

  constructor(params: { emoticon: string }) {
    super();
    this.emoticon = params.emoticon;
  }
}

/** Animated emoji reaction stickerset (contains animations to play when a user clicks on a given animated emoji) */
export class InputStickerSetAnimatedEmojiAnimations_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0x0CDE3739;
  }

  static get [name](): string {
    return "inputStickerSetAnimatedEmojiAnimations"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Stickers to show when receiving a gifted Telegram Premium subscription */
export class InputStickerSetPremiumGifts_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0xC88B3B02;
  }

  static get [name](): string {
    return "inputStickerSetPremiumGifts"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Generic animation stickerset containing animations to play when [reacting to messages using a normal emoji without a custom animation](https://core.telegram.org/api/reactions) */
export class InputStickerSetEmojiGenericAnimations_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0x04C4D4CE;
  }

  static get [name](): string {
    return "inputStickerSetEmojiGenericAnimations"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Default [custom emoji status](https://core.telegram.org/api/emoji-status) stickerset */
export class InputStickerSetEmojiDefaultStatuses_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0x29D0F5EE;
  }

  static get [name](): string {
    return "inputStickerSetEmojiDefaultStatuses"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Default [custom emoji](https://core.telegram.org/api/custom-emoji) stickerset for [forum topic icons](https://core.telegram.org/api/forum#forum-topics) */
export class InputStickerSetEmojiDefaultTopicIcons_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0x44C1F8E9;
  }

  static get [name](): string {
    return "inputStickerSetEmojiDefaultTopicIcons"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Default [custom emoji status](https://core.telegram.org/api/emoji-status) stickerset for channel statuses */
export class InputStickerSetEmojiChannelDefaultStatuses_ extends _InputStickerSet_ {
  protected get [id](): number {
    return 0x49748553;
  }

  static get [name](): string {
    return "inputStickerSetEmojiChannelDefaultStatuses"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a stickerset (stickerpack) */
export class StickerSet_ extends _StickerSet_ {
  /** Whether this stickerset was archived (due to too many saved stickers in the current account) */
  archived?: true;
  /** Is this stickerset official */
  official?: true;
  /** Is this a mask stickerset */
  masks?: true;
  /** Is this an animated stickerpack */
  animated?: true;
  /** Is this a video stickerpack */
  videos?: true;
  /** This is a custom emoji stickerset */
  emojis?: true;
  /** Whether the color of this TGS custom emoji stickerset should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. */
  text_color?: true;
  /** If set, this custom emoji stickerset can be used in [channel emoji statuses](https://core.telegram.org/api/emoji-status). */
  channel_emoji_status?: true;
  /** When was this stickerset installed */
  installed_date?: number;
  /** ID of the stickerset */
  id: bigint;
  /** Access hash of stickerset */
  access_hash: bigint;
  /** Title of stickerset */
  title: string;
  /** Short name of stickerset, used when sharing stickerset using [stickerset deep links](https://core.telegram.org/api/links#stickerset-links). */
  short_name: string;
  /** Stickerset thumbnail */
  thumbs?: Array<enums.PhotoSize>;
  /** DC ID of thumbnail */
  thumb_dc_id?: number;
  /** Thumbnail version */
  thumb_version?: number;
  /** Document ID of custom emoji thumbnail, fetch the document using [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments) */
  thumb_document_id?: bigint;
  /** Number of stickers in pack */
  count: number;
  /** Hash */
  hash: number;

  protected get [id](): number {
    return 0x2DD14EDC;
  }

  static get [name](): string {
    return "stickerSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["archived", "true", "flags.1?true"],
      ["official", "true", "flags.2?true"],
      ["masks", "true", "flags.3?true"],
      ["animated", "true", "flags.5?true"],
      ["videos", "true", "flags.6?true"],
      ["emojis", "true", "flags.7?true"],
      ["text_color", "true", "flags.9?true"],
      ["channel_emoji_status", "true", "flags.10?true"],
      ["installed_date", "number", "flags.0?int"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["title", "string", "string"],
      ["short_name", "string", "string"],
      ["thumbs", [_PhotoSize_], "flags.4?Vector<PhotoSize>"],
      ["thumb_dc_id", "number", "flags.4?int"],
      ["thumb_version", "number", "flags.4?int"],
      ["thumb_document_id", "bigint", "flags.8?long"],
      ["count", "number", "int"],
      ["hash", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.archived ?? null, "true", "flags.1?true"],
      [this.official ?? null, "true", "flags.2?true"],
      [this.masks ?? null, "true", "flags.3?true"],
      [this.animated ?? null, "true", "flags.5?true"],
      [this.videos ?? null, "true", "flags.6?true"],
      [this.emojis ?? null, "true", "flags.7?true"],
      [this.text_color ?? null, "true", "flags.9?true"],
      [this.channel_emoji_status ?? null, "true", "flags.10?true"],
      [this.installed_date ?? null, "number", "flags.0?int"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.title, "string", "string"],
      [this.short_name, "string", "string"],
      [this.thumbs ?? null, [_PhotoSize_], "flags.4?Vector<PhotoSize>"],
      [this.thumb_dc_id ?? null, "number", "flags.4?int"],
      [this.thumb_version ?? null, "number", "flags.4?int"],
      [this.thumb_document_id ?? null, "bigint", "flags.8?long"],
      [this.count, "number", "int"],
      [this.hash, "number", "int"],
    ];
  }

  constructor(params: { archived?: true; official?: true; masks?: true; animated?: true; videos?: true; emojis?: true; text_color?: true; channel_emoji_status?: true; installed_date?: number; id: bigint; access_hash: bigint; title: string; short_name: string; thumbs?: Array<enums.PhotoSize>; thumb_dc_id?: number; thumb_version?: number; thumb_document_id?: bigint; count: number; hash: number }) {
    super();
    this.archived = params.archived;
    this.official = params.official;
    this.masks = params.masks;
    this.animated = params.animated;
    this.videos = params.videos;
    this.emojis = params.emojis;
    this.text_color = params.text_color;
    this.channel_emoji_status = params.channel_emoji_status;
    this.installed_date = params.installed_date;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.title = params.title;
    this.short_name = params.short_name;
    this.thumbs = params.thumbs;
    this.thumb_dc_id = params.thumb_dc_id;
    this.thumb_version = params.thumb_version;
    this.thumb_document_id = params.thumb_document_id;
    this.count = params.count;
    this.hash = params.hash;
  }
}

/** Stickerset and stickers inside it */
export class messages_StickerSet_ extends _messages_StickerSet_ {
  /** The stickerset */
  set: enums.StickerSet;
  /** Emoji info for stickers */
  packs: Array<enums.StickerPack>;
  /** Keywords for some or every sticker in the stickerset. */
  keywords: Array<enums.StickerKeyword>;
  /** Stickers in stickerset */
  documents: Array<enums.Document>;

  protected get [id](): number {
    return 0x6E153F16;
  }

  static get [name](): string {
    return "messages.stickerSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["set", _StickerSet_, "StickerSet"],
      ["packs", [_StickerPack_], "Vector<StickerPack>"],
      ["keywords", [_StickerKeyword_], "Vector<StickerKeyword>"],
      ["documents", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.set, _StickerSet_, "StickerSet"],
      [this.packs, [_StickerPack_], "Vector<StickerPack>"],
      [this.keywords, [_StickerKeyword_], "Vector<StickerKeyword>"],
      [this.documents, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { set: enums.StickerSet; packs: Array<enums.StickerPack>; keywords: Array<enums.StickerKeyword>; documents: Array<enums.Document> }) {
    super();
    this.set = params.set;
    this.packs = params.packs;
    this.keywords = params.keywords;
    this.documents = params.documents;
  }
}

/** The stickerset hasn't changed */
export class messages_StickerSetNotModified_ extends _messages_StickerSet_ {
  protected get [id](): number {
    return 0xD3F924EB;
  }

  static get [name](): string {
    return "messages.stickerSetNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Describes a bot command that can be used in a chat */
export class BotCommand_ extends _BotCommand_ {
  /** `/command` name */
  command: string;
  /** Description of the command */
  description: string;

  protected get [id](): number {
    return 0xC27AC8C7;
  }

  static get [name](): string {
    return "botCommand"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["command", "string", "string"],
      ["description", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.command, "string", "string"],
      [this.description, "string", "string"],
    ];
  }

  constructor(params: { command: string; description: string }) {
    super();
    this.command = params.command;
    this.description = params.description;
  }
}

/** Info about bots (available bot commands, etc) */
export class BotInfo_ extends _BotInfo_ {
  /** ID of the bot */
  user_id?: bigint;
  /** Description of the bot */
  description?: string;
  /** Description photo */
  description_photo?: enums.Photo;
  /** Description animation in MPEG4 format */
  description_document?: enums.Document;
  /** Bot commands that can be used in the chat */
  commands?: Array<enums.BotCommand>;
  /** Indicates the action to execute when pressing the in-UI menu button for bots */
  menu_button?: enums.BotMenuButton;

  protected get [id](): number {
    return 0x8F300B57;
  }

  static get [name](): string {
    return "botInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["user_id", "bigint", "flags.0?long"],
      ["description", "string", "flags.1?string"],
      ["description_photo", _Photo_, "flags.4?Photo"],
      ["description_document", _Document_, "flags.5?Document"],
      ["commands", [_BotCommand_], "flags.2?Vector<BotCommand>"],
      ["menu_button", _BotMenuButton_, "flags.3?BotMenuButton"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.user_id ?? null, "bigint", "flags.0?long"],
      [this.description ?? null, "string", "flags.1?string"],
      [this.description_photo ?? null, _Photo_, "flags.4?Photo"],
      [this.description_document ?? null, _Document_, "flags.5?Document"],
      [this.commands ?? null, [_BotCommand_], "flags.2?Vector<BotCommand>"],
      [this.menu_button ?? null, _BotMenuButton_, "flags.3?BotMenuButton"],
    ];
  }

  constructor(params?: { user_id?: bigint; description?: string; description_photo?: enums.Photo; description_document?: enums.Document; commands?: Array<enums.BotCommand>; menu_button?: enums.BotMenuButton }) {
    super();
    this.user_id = params?.user_id;
    this.description = params?.description;
    this.description_photo = params?.description_photo;
    this.description_document = params?.description_document;
    this.commands = params?.commands;
    this.menu_button = params?.menu_button;
  }
}

/** Bot keyboard button */
export class KeyboardButton_ extends _KeyboardButton_ {
  /** Button text */
  text: string;

  protected get [id](): number {
    return 0xA2FA4880;
  }

  static get [name](): string {
    return "keyboardButton"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** URL button */
export class KeyboardButtonUrl_ extends _KeyboardButton_ {
  /** Button label */
  text: string;
  /** URL */
  url: string;

  protected get [id](): number {
    return 0x258AFF05;
  }

  static get [name](): string {
    return "keyboardButtonUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { text: string; url: string }) {
    super();
    this.text = params.text;
    this.url = params.url;
  }
}

/** Callback button */
export class KeyboardButtonCallback_ extends _KeyboardButton_ {
  /** Whether the user should verify his identity by entering his [2FA SRP parameters](https://core.telegram.org/api/srp) to the [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer) method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to [SRP](https://core.telegram.org/api/srp). This button is mainly used by the official [@botfather](https://t.me/botfather) bot, for verifying the user's identity before transferring ownership of a bot to another user. */
  requires_password?: true;
  /** Button text */
  text: string;
  /** Callback data */
  data: Uint8Array;

  protected get [id](): number {
    return 0x35BBDB6B;
  }

  static get [name](): string {
    return "keyboardButtonCallback"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["requires_password", "true", "flags.0?true"],
      ["text", "string", "string"],
      ["data", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.requires_password ?? null, "true", "flags.0?true"],
      [this.text, "string", "string"],
      [this.data, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { requires_password?: true; text: string; data: Uint8Array }) {
    super();
    this.requires_password = params.requires_password;
    this.text = params.text;
    this.data = params.data;
  }
}

/** Button to request a user's phone number */
export class KeyboardButtonRequestPhone_ extends _KeyboardButton_ {
  /** Button text */
  text: string;

  protected get [id](): number {
    return 0xB16A6C29;
  }

  static get [name](): string {
    return "keyboardButtonRequestPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** Button to request a user's geolocation */
export class KeyboardButtonRequestGeoLocation_ extends _KeyboardButton_ {
  /** Button text */
  text: string;

  protected get [id](): number {
    return 0xFC796B3F;
  }

  static get [name](): string {
    return "keyboardButtonRequestGeoLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** Button to force a user to switch to inline mode: pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. */
export class KeyboardButtonSwitchInline_ extends _KeyboardButton_ {
  /** If set, pressing the button will insert the bot's username and the specified inline `query` in the current chat's input field. */
  same_peer?: true;
  /** Button label */
  text: string;
  /** The inline query to use */
  query: string;
  /** Filter to use when selecting chats. */
  peer_types?: Array<enums.InlineQueryPeerType>;

  protected get [id](): number {
    return 0x93B9FBB5;
  }

  static get [name](): string {
    return "keyboardButtonSwitchInline"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["same_peer", "true", "flags.0?true"],
      ["text", "string", "string"],
      ["query", "string", "string"],
      ["peer_types", [_InlineQueryPeerType_], "flags.1?Vector<InlineQueryPeerType>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.same_peer ?? null, "true", "flags.0?true"],
      [this.text, "string", "string"],
      [this.query, "string", "string"],
      [this.peer_types ?? null, [_InlineQueryPeerType_], "flags.1?Vector<InlineQueryPeerType>"],
    ];
  }

  constructor(params: { same_peer?: true; text: string; query: string; peer_types?: Array<enums.InlineQueryPeerType> }) {
    super();
    this.same_peer = params.same_peer;
    this.text = params.text;
    this.query = params.query;
    this.peer_types = params.peer_types;
  }
}

/** Button to start a game */
export class KeyboardButtonGame_ extends _KeyboardButton_ {
  /** Button text */
  text: string;

  protected get [id](): number {
    return 0x50F41CCF;
  }

  static get [name](): string {
    return "keyboardButtonGame"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** Button to buy a product */
export class KeyboardButtonBuy_ extends _KeyboardButton_ {
  /** Button text */
  text: string;

  protected get [id](): number {
    return 0xAFD93FBB;
  }

  static get [name](): string {
    return "keyboardButtonBuy"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** Button to request a user to authorize via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). When the user clicks on such a button, [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) should be called, providing the `button_id` and the ID of the container message. The returned [urlAuthResultRequest](https://core.telegram.org/constructor/urlAuthResultRequest) object will contain more details about the authorization request (`request_write_access` if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call [messages.acceptUrlAuth](https://core.telegram.org/method/messages.acceptUrlAuth) to get a [urlAuthResultAccepted](https://core.telegram.org/constructor/urlAuthResultAccepted) with the URL to open instead of the `url` of this constructor, or a [urlAuthResultDefault](https://core.telegram.org/constructor/urlAuthResultDefault), in which case the `url` of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the `url` of this constructor must be used. */
export class KeyboardButtonUrlAuth_ extends _KeyboardButton_ {
  /** Button label */
  text: string;
  /** New text of the button in forwarded messages. */
  fwd_text?: string;
  /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  
    
  **NOTE**: Services must **always** check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization). */
  url: string;
  /** ID of the button to pass to [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) */
  button_id: number;

  protected get [id](): number {
    return 0x10B78D29;
  }

  static get [name](): string {
    return "keyboardButtonUrlAuth"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["text", "string", "string"],
      ["fwd_text", "string", "flags.0?string"],
      ["url", "string", "string"],
      ["button_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.text, "string", "string"],
      [this.fwd_text ?? null, "string", "flags.0?string"],
      [this.url, "string", "string"],
      [this.button_id, "number", "int"],
    ];
  }

  constructor(params: { text: string; fwd_text?: string; url: string; button_id: number }) {
    super();
    this.text = params.text;
    this.fwd_text = params.fwd_text;
    this.url = params.url;
    this.button_id = params.button_id;
  }
}

/** Button to request a user to [authorize](https://core.telegram.org/method/messages.acceptUrlAuth) via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). */
export class InputKeyboardButtonUrlAuth_ extends _KeyboardButton_ {
  /** Set this flag to request the permission for your bot to send messages to the user. */
  request_write_access?: true;
  /** Button text */
  text: string;
  /** New text of the button in forwarded messages. */
  fwd_text?: string;
  /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  
  NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization). */
  url: string;
  /** Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details. */
  bot: enums.InputUser;

  protected get [id](): number {
    return 0xD02E7FD4;
  }

  static get [name](): string {
    return "inputKeyboardButtonUrlAuth"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["request_write_access", "true", "flags.0?true"],
      ["text", "string", "string"],
      ["fwd_text", "string", "flags.1?string"],
      ["url", "string", "string"],
      ["bot", _InputUser_, "InputUser"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.request_write_access ?? null, "true", "flags.0?true"],
      [this.text, "string", "string"],
      [this.fwd_text ?? null, "string", "flags.1?string"],
      [this.url, "string", "string"],
      [this.bot, _InputUser_, "InputUser"],
    ];
  }

  constructor(params: { request_write_access?: true; text: string; fwd_text?: string; url: string; bot: enums.InputUser }) {
    super();
    this.request_write_access = params.request_write_access;
    this.text = params.text;
    this.fwd_text = params.fwd_text;
    this.url = params.url;
    this.bot = params.bot;
  }
}

/** A button that allows the user to create and send a poll when pressed; available only in private */
export class KeyboardButtonRequestPoll_ extends _KeyboardButton_ {
  /** If set, only quiz polls can be sent */
  quiz?: boolean;
  /** Button text */
  text: string;

  protected get [id](): number {
    return 0xBBC7515D;
  }

  static get [name](): string {
    return "keyboardButtonRequestPoll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["quiz", "boolean", "flags.0?Bool"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.quiz ?? null, "boolean", "flags.0?Bool"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { quiz?: boolean; text: string }) {
    super();
    this.quiz = params.quiz;
    this.text = params.text;
  }
}

/** Button that links directly to a user profile */
export class InputKeyboardButtonUserProfile_ extends _KeyboardButton_ {
  /** Button text */
  text: string;
  /** User ID */
  user_id: enums.InputUser;

  protected get [id](): number {
    return 0xE988037B;
  }

  static get [name](): string {
    return "inputKeyboardButtonUserProfile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["user_id", _InputUser_, "InputUser"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.user_id, _InputUser_, "InputUser"],
    ];
  }

  constructor(params: { text: string; user_id: enums.InputUser }) {
    super();
    this.text = params.text;
    this.user_id = params.user_id;
  }
}

/** Button that links directly to a user profile */
export class KeyboardButtonUserProfile_ extends _KeyboardButton_ {
  /** Button text */
  text: string;
  /** User ID */
  user_id: bigint;

  protected get [id](): number {
    return 0x308660C1;
  }

  static get [name](): string {
    return "keyboardButtonUserProfile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { text: string; user_id: bigint }) {
    super();
    this.text = params.text;
    this.user_id = params.user_id;
  }
}

/** Button to open a [bot mini app](https://core.telegram.org/api/bots/webapps) using [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), sending over user information after user confirmation. */
export class KeyboardButtonWebView_ extends _KeyboardButton_ {
  /** Button text */
  text: string;
  /** [Web app url](https://core.telegram.org/api/bots/webapps) */
  url: string;

  protected get [id](): number {
    return 0x13767230;
  }

  static get [name](): string {
    return "keyboardButtonWebView"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { text: string; url: string }) {
    super();
    this.text = params.text;
    this.url = params.url;
  }
}

/** Button to open a [bot mini app](https://core.telegram.org/api/bots/webapps) using [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), without sending user information to the web app. */
export class KeyboardButtonSimpleWebView_ extends _KeyboardButton_ {
  /** Button text */
  text: string;
  /** [Web app URL](https://core.telegram.org/api/bots/webapps) */
  url: string;

  protected get [id](): number {
    return 0xA0C0505C;
  }

  static get [name](): string {
    return "keyboardButtonSimpleWebView"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { text: string; url: string }) {
    super();
    this.text = params.text;
    this.url = params.url;
  }
}

/** Prompts the user to select and share one or more peers with the bot using [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer) */
export class KeyboardButtonRequestPeer_ extends _KeyboardButton_ {
  /** Button text */
  text: string;
  /** Button ID, to be passed to [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer). */
  button_id: number;
  /** Filtering criteria to use for the peer selection list shown to the user.  
  The list should display all existing peers of the specified type, and should also offer an option for the user to create and immediately use one or more (up to `max_quantity`) peers of the specified type, if needed. */
  peer_type: enums.RequestPeerType;
  /** Maximum number of peers that can be chosne. */
  max_quantity: number;

  protected get [id](): number {
    return 0x53D7BFD8;
  }

  static get [name](): string {
    return "keyboardButtonRequestPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["button_id", "number", "int"],
      ["peer_type", _RequestPeerType_, "RequestPeerType"],
      ["max_quantity", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.button_id, "number", "int"],
      [this.peer_type, _RequestPeerType_, "RequestPeerType"],
      [this.max_quantity, "number", "int"],
    ];
  }

  constructor(params: { text: string; button_id: number; peer_type: enums.RequestPeerType; max_quantity: number }) {
    super();
    this.text = params.text;
    this.button_id = params.button_id;
    this.peer_type = params.peer_type;
    this.max_quantity = params.max_quantity;
  }
}

/** Inline keyboard row */
export class KeyboardButtonRow_ extends _KeyboardButtonRow_ {
  /** Bot or inline keyboard buttons */
  buttons: Array<enums.KeyboardButton>;

  protected get [id](): number {
    return 0x77608B83;
  }

  static get [name](): string {
    return "keyboardButtonRow"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["buttons", [_KeyboardButton_], "Vector<KeyboardButton>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.buttons, [_KeyboardButton_], "Vector<KeyboardButton>"],
    ];
  }

  constructor(params: { buttons: Array<enums.KeyboardButton> }) {
    super();
    this.buttons = params.buttons;
  }
}

/** Hide sent bot keyboard */
export class ReplyKeyboardHide_ extends _ReplyMarkup_ {
  /** Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\_to\_message\_id), sender of the original message.  
    
  Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet */
  selective?: true;

  protected get [id](): number {
    return 0xA03E5B85;
  }

  static get [name](): string {
    return "replyKeyboardHide"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["selective", "true", "flags.2?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.selective ?? null, "true", "flags.2?true"],
    ];
  }

  constructor(params?: { selective?: true }) {
    super();
    this.selective = params?.selective;
  }
}

/** Force the user to send a reply */
export class ReplyKeyboardForceReply_ extends _ReplyMarkup_ {
  /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. */
  single_use?: true;
  /** Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\_to\_message\_id), sender of the original message.  
  Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. */
  selective?: true;
  /** The placeholder to be shown in the input field when the keyboard is active; 1-64 characters. */
  placeholder?: string;

  protected get [id](): number {
    return 0x86B40B08;
  }

  static get [name](): string {
    return "replyKeyboardForceReply"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["single_use", "true", "flags.1?true"],
      ["selective", "true", "flags.2?true"],
      ["placeholder", "string", "flags.3?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.single_use ?? null, "true", "flags.1?true"],
      [this.selective ?? null, "true", "flags.2?true"],
      [this.placeholder ?? null, "string", "flags.3?string"],
    ];
  }

  constructor(params?: { single_use?: true; selective?: true; placeholder?: string }) {
    super();
    this.single_use = params?.single_use;
    this.selective = params?.selective;
    this.placeholder = params?.placeholder;
  }
}

/** Bot keyboard */
export class ReplyKeyboardMarkup_ extends _ReplyMarkup_ {
  /** Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard. */
  resize?: true;
  /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. */
  single_use?: true;
  /** Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\_to\_message\_id), sender of the original message.  
    
  Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. */
  selective?: true;
  /** Requests clients to always show the keyboard when the regular keyboard is hidden. */
  persistent?: true;
  /** Button row */
  rows: Array<enums.KeyboardButtonRow>;
  /** The placeholder to be shown in the input field when the keyboard is active; 1-64 characters. */
  placeholder?: string;

  protected get [id](): number {
    return 0x85DD99D1;
  }

  static get [name](): string {
    return "replyKeyboardMarkup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["resize", "true", "flags.0?true"],
      ["single_use", "true", "flags.1?true"],
      ["selective", "true", "flags.2?true"],
      ["persistent", "true", "flags.4?true"],
      ["rows", [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
      ["placeholder", "string", "flags.3?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.resize ?? null, "true", "flags.0?true"],
      [this.single_use ?? null, "true", "flags.1?true"],
      [this.selective ?? null, "true", "flags.2?true"],
      [this.persistent ?? null, "true", "flags.4?true"],
      [this.rows, [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
      [this.placeholder ?? null, "string", "flags.3?string"],
    ];
  }

  constructor(params: { resize?: true; single_use?: true; selective?: true; persistent?: true; rows: Array<enums.KeyboardButtonRow>; placeholder?: string }) {
    super();
    this.resize = params.resize;
    this.single_use = params.single_use;
    this.selective = params.selective;
    this.persistent = params.persistent;
    this.rows = params.rows;
    this.placeholder = params.placeholder;
  }
}

/** Bot or inline keyboard */
export class ReplyInlineMarkup_ extends _ReplyMarkup_ {
  /** Bot or inline keyboard rows */
  rows: Array<enums.KeyboardButtonRow>;

  protected get [id](): number {
    return 0x48A30254;
  }

  static get [name](): string {
    return "replyInlineMarkup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["rows", [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.rows, [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
    ];
  }

  constructor(params: { rows: Array<enums.KeyboardButtonRow> }) {
    super();
    this.rows = params.rows;
  }
}

/** Unknown message entity */
export class MessageEntityUnknown_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0xBB92BA95;
  }

  static get [name](): string {
    return "messageEntityUnknown"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity [mentioning](https://core.telegram.org/api/mentions) a user by `@username`; [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) can also be used to mention users by their ID. */
export class MessageEntityMention_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0xFA04579D;
  }

  static get [name](): string {
    return "messageEntityMention"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** **#hashtag** message entity */
export class MessageEntityHashtag_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x6F635B0D;
  }

  static get [name](): string {
    return "messageEntityHashtag"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing a bot /command */
export class MessageEntityBotCommand_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x6CEF8AC7;
  }

  static get [name](): string {
    return "messageEntityBotCommand"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing an in-text url: [https://google.com](https://google.com); for [text urls](https://google.com), use [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl). */
export class MessageEntityUrl_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x6ED02538;
  }

  static get [name](): string {
    return "messageEntityUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing an [email@example.com](mailto:email@example.com). */
export class MessageEntityEmail_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x64E475C2;
  }

  static get [name](): string {
    return "messageEntityEmail"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing **bold text**. */
export class MessageEntityBold_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0xBD610BC9;
  }

  static get [name](): string {
    return "messageEntityBold"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing _italic text_. */
export class MessageEntityItalic_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x826F8B60;
  }

  static get [name](): string {
    return "messageEntityItalic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing a `codeblock`. */
export class MessageEntityCode_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x28A20571;
  }

  static get [name](): string {
    return "messageEntityCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing a preformatted `codeblock`, allowing the user to specify a programming language for the codeblock. */
export class MessageEntityPre_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;
  /** Programming language of the code */
  language: string;

  protected get [id](): number {
    return 0x73924BE0;
  }

  static get [name](): string {
    return "messageEntityPre"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
      ["language", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
      [this.language, "string", "string"],
    ];
  }

  constructor(params: { offset: number; length: number; language: string }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
    this.language = params.language;
  }
}

/** Message entity representing a [text url](https://google.com): for in-text urls like [https://google.com](https://google.com) use [messageEntityUrl](https://core.telegram.org/constructor/messageEntityUrl). */
export class MessageEntityTextUrl_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;
  /** The actual URL */
  url: string;

  protected get [id](): number {
    return 0x76A6D327;
  }

  static get [name](): string {
    return "messageEntityTextUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { offset: number; length: number; url: string }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
    this.url = params.url;
  }
}

/** Message entity representing a [user mention](https://core.telegram.org/api/mentions): for _creating_ a mention use [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName). */
export class MessageEntityMentionName_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;
  /** Identifier of the user that was mentioned */
  user_id: bigint;

  protected get [id](): number {
    return 0xDC7B1140;
  }

  static get [name](): string {
    return "messageEntityMentionName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { offset: number; length: number; user_id: bigint }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
    this.user_id = params.user_id;
  }
}

/** Message entity that can be used to create a user [user mention](https://core.telegram.org/api/mentions): received mentions use the [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) constructor, instead. */
export class InputMessageEntityMentionName_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;
  /** Identifier of the user that was mentioned */
  user_id: enums.InputUser;

  protected get [id](): number {
    return 0x208E68C9;
  }

  static get [name](): string {
    return "inputMessageEntityMentionName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
      ["user_id", _InputUser_, "InputUser"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
      [this.user_id, _InputUser_, "InputUser"],
    ];
  }

  constructor(params: { offset: number; length: number; user_id: enums.InputUser }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
    this.user_id = params.user_id;
  }
}

/** Message entity representing a phone number. */
export class MessageEntityPhone_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x9B69E34B;
  }

  static get [name](): string {
    return "messageEntityPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing a **$cashtag**. */
export class MessageEntityCashtag_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x4C4E743F;
  }

  static get [name](): string {
    return "messageEntityCashtag"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing underlined text. */
export class MessageEntityUnderline_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x9C4E7E8B;
  }

  static get [name](): string {
    return "messageEntityUnderline"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing strikethrough text. */
export class MessageEntityStrike_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0xBF0693D4;
  }

  static get [name](): string {
    return "messageEntityStrike"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Indicates a credit card number */
export class MessageEntityBankCard_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x761E6AF4;
  }

  static get [name](): string {
    return "messageEntityBankCard"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Message entity representing a spoiler */
export class MessageEntitySpoiler_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x32CA960F;
  }

  static get [name](): string {
    return "messageEntitySpoiler"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Represents a custom emoji.  
Note that this entity must wrap exactly one regular emoji (the one contained in [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji).`alt`) in the related text, otherwise the server will ignore it. */
export class MessageEntityCustomEmoji_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;
  /** Document ID of the [custom emoji](https://core.telegram.org/api/custom-emoji), use [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments) to fetch the emoji animation and the actual emoji it represents. */
  document_id: bigint;

  protected get [id](): number {
    return 0xC8CF05F8;
  }

  static get [name](): string {
    return "messageEntityCustomEmoji"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
      ["document_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
      [this.document_id, "bigint", "long"],
    ];
  }

  constructor(params: { offset: number; length: number; document_id: bigint }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
    this.document_id = params.document_id;
  }
}

/** Message entity representing a block quote. */
export class MessageEntityBlockquote_ extends _MessageEntity_ {
  /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  offset: number;
  /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
  length: number;

  protected get [id](): number {
    return 0x020DF5D0;
  }

  static get [name](): string {
    return "messageEntityBlockquote"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "number", "int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "number", "int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { offset: number; length: number }) {
    super();
    this.offset = params.offset;
    this.length = params.length;
  }
}

/** Represents the absence of a channel */
export class InputChannelEmpty_ extends _InputChannel_ {
  protected get [id](): number {
    return 0xEE8C1E86;
  }

  static get [name](): string {
    return "inputChannelEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a channel */
export class InputChannel_ extends _InputChannel_ {
  /** Channel ID */
  channel_id: bigint;
  /** Access hash taken from the [channel](https://core.telegram.org/constructor/channel) constructor */
  access_hash: bigint;

  protected get [id](): number {
    return 0xF35AEC28;
  }

  static get [name](): string {
    return "inputChannel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel_id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel_id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { channel_id: bigint; access_hash: bigint }) {
    super();
    this.channel_id = params.channel_id;
    this.access_hash = params.access_hash;
  }
}

/** Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat. */
export class InputChannelFromMessage_ extends _InputChannel_ {
  /** The chat where the channel was seen */
  peer: enums.InputPeer;
  /** The message ID in the chat where the channel was seen */
  msg_id: number;
  /** The channel ID */
  channel_id: bigint;

  protected get [id](): number {
    return 0x5B934F9D;
  }

  static get [name](): string {
    return "inputChannelFromMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["msg_id", "number", "int"],
      ["channel_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.msg_id, "number", "int"],
      [this.channel_id, "bigint", "long"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; msg_id: number; channel_id: bigint }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
    this.channel_id = params.channel_id;
  }
}

/** Resolved peer */
export class contacts_ResolvedPeer_ extends _contacts_ResolvedPeer_ {
  /** The peer */
  peer: enums.Peer;
  /** Chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x7F077AD9;
  }

  static get [name](): string {
    return "contacts.resolvedPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { peer: enums.Peer; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.peer = params.peer;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Indicates a range of chat messages */
export class MessageRange_ extends _MessageRange_ {
  /** Start of range (message ID) */
  min_id: number;
  /** End of range (message ID) */
  max_id: number;

  protected get [id](): number {
    return 0x0AE30253;
  }

  static get [name](): string {
    return "messageRange"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["min_id", "number", "int"],
      ["max_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.min_id, "number", "int"],
      [this.max_id, "number", "int"],
    ];
  }

  constructor(params: { min_id: number; max_id: number }) {
    super();
    this.min_id = params.min_id;
    this.max_id = params.max_id;
  }
}

/** There are no new updates */
export class updates_ChannelDifferenceEmpty_ extends _updates_ChannelDifference_ {
  /** Whether there are more updates that must be fetched (always false) */
  final?: true;
  /** The latest [PTS](https://core.telegram.org/api/updates) */
  pts: number;
  /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
  timeout?: number;

  protected get [id](): number {
    return 0x3E11AFFB;
  }

  static get [name](): string {
    return "updates.channelDifferenceEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["final", "true", "flags.0?true"],
      ["pts", "number", "int"],
      ["timeout", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.final ?? null, "true", "flags.0?true"],
      [this.pts, "number", "int"],
      [this.timeout ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { final?: true; pts: number; timeout?: number }) {
    super();
    this.final = params.final;
    this.pts = params.pts;
    this.timeout = params.timeout;
  }
}

/** The provided `pts + limit < remote pts`. Simply, there are too many updates to be fetched (more than `limit`), the client has to resolve the update gap in one of the following ways (assuming the existence of a persistent database to locally store messages): */
export class updates_ChannelDifferenceTooLong_ extends _updates_ChannelDifference_ {
  /** Whether there are more updates that must be fetched (always false) */
  final?: true;
  /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
  timeout?: number;
  /** Dialog containing the latest [PTS](https://core.telegram.org/api/updates) that can be used to reset the channel state */
  dialog: enums.Dialog;
  /** The latest messages */
  messages: Array<enums.Message>;
  /** Chats from messages */
  chats: Array<enums.Chat>;
  /** Users from messages */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xA4BCC6FE;
  }

  static get [name](): string {
    return "updates.channelDifferenceTooLong"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["final", "true", "flags.0?true"],
      ["timeout", "number", "flags.1?int"],
      ["dialog", _Dialog_, "Dialog"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.final ?? null, "true", "flags.0?true"],
      [this.timeout ?? null, "number", "flags.1?int"],
      [this.dialog, _Dialog_, "Dialog"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { final?: true; timeout?: number; dialog: enums.Dialog; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.final = params.final;
    this.timeout = params.timeout;
    this.dialog = params.dialog;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** The new updates */
export class updates_ChannelDifference_ extends _updates_ChannelDifference_ {
  /** Whether there are more updates to be fetched using getDifference, starting from the provided `pts` */
  final?: true;
  /** The [PTS](https://core.telegram.org/api/updates) from which to start getting updates the next time */
  pts: number;
  /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
  timeout?: number;
  /** New messages */
  new_messages: Array<enums.Message>;
  /** Other updates */
  other_updates: Array<enums.Update>;
  /** Chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x2064674E;
  }

  static get [name](): string {
    return "updates.channelDifference"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["final", "true", "flags.0?true"],
      ["pts", "number", "int"],
      ["timeout", "number", "flags.1?int"],
      ["new_messages", [_Message_], "Vector<Message>"],
      ["other_updates", [_Update_], "Vector<Update>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.final ?? null, "true", "flags.0?true"],
      [this.pts, "number", "int"],
      [this.timeout ?? null, "number", "flags.1?int"],
      [this.new_messages, [_Message_], "Vector<Message>"],
      [this.other_updates, [_Update_], "Vector<Update>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { final?: true; pts: number; timeout?: number; new_messages: Array<enums.Message>; other_updates: Array<enums.Update>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.final = params.final;
    this.pts = params.pts;
    this.timeout = params.timeout;
    this.new_messages = params.new_messages;
    this.other_updates = params.other_updates;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** No filter */
export class ChannelMessagesFilterEmpty_ extends _ChannelMessagesFilter_ {
  protected get [id](): number {
    return 0x94D42EE7;
  }

  static get [name](): string {
    return "channelMessagesFilterEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Filter for getting only certain types of channel messages */
export class ChannelMessagesFilter_ extends _ChannelMessagesFilter_ {
  /** Whether to exclude new messages from the search */
  exclude_new_messages?: true;
  /** A range of messages to fetch */
  ranges: Array<enums.MessageRange>;

  protected get [id](): number {
    return 0xCD77D957;
  }

  static get [name](): string {
    return "channelMessagesFilter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["exclude_new_messages", "true", "flags.1?true"],
      ["ranges", [_MessageRange_], "Vector<MessageRange>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.exclude_new_messages ?? null, "true", "flags.1?true"],
      [this.ranges, [_MessageRange_], "Vector<MessageRange>"],
    ];
  }

  constructor(params: { exclude_new_messages?: true; ranges: Array<enums.MessageRange> }) {
    super();
    this.exclude_new_messages = params.exclude_new_messages;
    this.ranges = params.ranges;
  }
}

/** Channel/supergroup participant */
export class ChannelParticipant_ extends _ChannelParticipant_ {
  /** Participant user ID */
  user_id: bigint;
  /** Date joined */
  date: number;

  protected get [id](): number {
    return 0xC00C07C0;
  }

  static get [name](): string {
    return "channelParticipant"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; date: number }) {
    super();
    this.user_id = params.user_id;
    this.date = params.date;
  }
}

/** Myself */
export class ChannelParticipantSelf_ extends _ChannelParticipant_ {
  /** Whether I joined upon specific approval of an admin */
  via_request?: true;
  /** User ID */
  user_id: bigint;
  /** User that invited me to the channel/supergroup */
  inviter_id: bigint;
  /** When did I join the channel/supergroup */
  date: number;

  protected get [id](): number {
    return 0x35A8BFA7;
  }

  static get [name](): string {
    return "channelParticipantSelf"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["via_request", "true", "flags.0?true"],
      ["user_id", "bigint", "long"],
      ["inviter_id", "bigint", "long"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.via_request ?? null, "true", "flags.0?true"],
      [this.user_id, "bigint", "long"],
      [this.inviter_id, "bigint", "long"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { via_request?: true; user_id: bigint; inviter_id: bigint; date: number }) {
    super();
    this.via_request = params.via_request;
    this.user_id = params.user_id;
    this.inviter_id = params.inviter_id;
    this.date = params.date;
  }
}

/** Channel/supergroup creator */
export class ChannelParticipantCreator_ extends _ChannelParticipant_ {
  /** User ID */
  user_id: bigint;
  /** Creator admin rights */
  admin_rights: enums.ChatAdminRights;
  /** The role (rank) of the group creator in the group: just an arbitrary string, `admin` by default */
  rank?: string;

  protected get [id](): number {
    return 0x2FE601D3;
  }

  static get [name](): string {
    return "channelParticipantCreator"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["user_id", "bigint", "long"],
      ["admin_rights", _ChatAdminRights_, "ChatAdminRights"],
      ["rank", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.user_id, "bigint", "long"],
      [this.admin_rights, _ChatAdminRights_, "ChatAdminRights"],
      [this.rank ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { user_id: bigint; admin_rights: enums.ChatAdminRights; rank?: string }) {
    super();
    this.user_id = params.user_id;
    this.admin_rights = params.admin_rights;
    this.rank = params.rank;
  }
}

/** Admin */
export class ChannelParticipantAdmin_ extends _ChannelParticipant_ {
  /** Can this admin promote other admins with the same permissions? */
  can_edit?: true;
  /** Is this the current user */
  self?: true;
  /** Admin user ID */
  user_id: bigint;
  /** User that invited the admin to the channel/group */
  inviter_id?: bigint;
  /** User that promoted the user to admin */
  promoted_by: bigint;
  /** When did the user join */
  date: number;
  /** Admin [rights](https://core.telegram.org/api/rights) */
  admin_rights: enums.ChatAdminRights;
  /** The role (rank) of the admin in the group: just an arbitrary string, `admin` by default */
  rank?: string;

  protected get [id](): number {
    return 0x34C3BB53;
  }

  static get [name](): string {
    return "channelParticipantAdmin"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["can_edit", "true", "flags.0?true"],
      ["self", "true", "flags.1?true"],
      ["user_id", "bigint", "long"],
      ["inviter_id", "bigint", "flags.1?long"],
      ["promoted_by", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_rights", _ChatAdminRights_, "ChatAdminRights"],
      ["rank", "string", "flags.2?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.can_edit ?? null, "true", "flags.0?true"],
      [this.self ?? null, "true", "flags.1?true"],
      [this.user_id, "bigint", "long"],
      [this.inviter_id ?? null, "bigint", "flags.1?long"],
      [this.promoted_by, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_rights, _ChatAdminRights_, "ChatAdminRights"],
      [this.rank ?? null, "string", "flags.2?string"],
    ];
  }

  constructor(params: { can_edit?: true; self?: true; user_id: bigint; inviter_id?: bigint; promoted_by: bigint; date: number; admin_rights: enums.ChatAdminRights; rank?: string }) {
    super();
    this.can_edit = params.can_edit;
    this.self = params.self;
    this.user_id = params.user_id;
    this.inviter_id = params.inviter_id;
    this.promoted_by = params.promoted_by;
    this.date = params.date;
    this.admin_rights = params.admin_rights;
    this.rank = params.rank;
  }
}

/** Banned/kicked user */
export class ChannelParticipantBanned_ extends _ChannelParticipant_ {
  /** Whether the user has left the group */
  left?: true;
  /** The banned peer */
  peer: enums.Peer;
  /** User was kicked by the specified admin */
  kicked_by: bigint;
  /** When did the user join the group */
  date: number;
  /** Banned [rights](https://core.telegram.org/api/rights) */
  banned_rights: enums.ChatBannedRights;

  protected get [id](): number {
    return 0x6DF8014E;
  }

  static get [name](): string {
    return "channelParticipantBanned"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["left", "true", "flags.0?true"],
      ["peer", _Peer_, "Peer"],
      ["kicked_by", "bigint", "long"],
      ["date", "number", "int"],
      ["banned_rights", _ChatBannedRights_, "ChatBannedRights"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.left ?? null, "true", "flags.0?true"],
      [this.peer, _Peer_, "Peer"],
      [this.kicked_by, "bigint", "long"],
      [this.date, "number", "int"],
      [this.banned_rights, _ChatBannedRights_, "ChatBannedRights"],
    ];
  }

  constructor(params: { left?: true; peer: enums.Peer; kicked_by: bigint; date: number; banned_rights: enums.ChatBannedRights }) {
    super();
    this.left = params.left;
    this.peer = params.peer;
    this.kicked_by = params.kicked_by;
    this.date = params.date;
    this.banned_rights = params.banned_rights;
  }
}

/** A participant that left the channel/supergroup */
export class ChannelParticipantLeft_ extends _ChannelParticipant_ {
  /** The peer that left */
  peer: enums.Peer;

  protected get [id](): number {
    return 0x1B03F006;
  }

  static get [name](): string {
    return "channelParticipantLeft"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
    ];
  }

  constructor(params: { peer: enums.Peer }) {
    super();
    this.peer = params.peer;
  }
}

/** Fetch only recent participants */
export class ChannelParticipantsRecent_ extends _ChannelParticipantsFilter_ {
  protected get [id](): number {
    return 0xDE3F3C79;
  }

  static get [name](): string {
    return "channelParticipantsRecent"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Fetch only admin participants */
export class ChannelParticipantsAdmins_ extends _ChannelParticipantsFilter_ {
  protected get [id](): number {
    return 0xB4608969;
  }

  static get [name](): string {
    return "channelParticipantsAdmins"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Fetch only kicked participants */
export class ChannelParticipantsKicked_ extends _ChannelParticipantsFilter_ {
  /** Optional filter for searching kicked participants by name (otherwise empty) */
  q: string;

  protected get [id](): number {
    return 0xA3B54985;
  }

  static get [name](): string {
    return "channelParticipantsKicked"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["q", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.q, "string", "string"],
    ];
  }

  constructor(params: { q: string }) {
    super();
    this.q = params.q;
  }
}

/** Fetch only bot participants */
export class ChannelParticipantsBots_ extends _ChannelParticipantsFilter_ {
  protected get [id](): number {
    return 0xB0D1865B;
  }

  static get [name](): string {
    return "channelParticipantsBots"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Fetch only banned participants */
export class ChannelParticipantsBanned_ extends _ChannelParticipantsFilter_ {
  /** Optional filter for searching banned participants by name (otherwise empty) */
  q: string;

  protected get [id](): number {
    return 0x1427A5E1;
  }

  static get [name](): string {
    return "channelParticipantsBanned"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["q", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.q, "string", "string"],
    ];
  }

  constructor(params: { q: string }) {
    super();
    this.q = params.q;
  }
}

/** Query participants by name */
export class ChannelParticipantsSearch_ extends _ChannelParticipantsFilter_ {
  /** Search query */
  q: string;

  protected get [id](): number {
    return 0x0656AC4B;
  }

  static get [name](): string {
    return "channelParticipantsSearch"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["q", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.q, "string", "string"],
    ];
  }

  constructor(params: { q: string }) {
    super();
    this.q = params.q;
  }
}

/** Fetch only participants that are also contacts */
export class ChannelParticipantsContacts_ extends _ChannelParticipantsFilter_ {
  /** Optional search query for searching contact participants by name */
  q: string;

  protected get [id](): number {
    return 0xBB6AE88D;
  }

  static get [name](): string {
    return "channelParticipantsContacts"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["q", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.q, "string", "string"],
    ];
  }

  constructor(params: { q: string }) {
    super();
    this.q = params.q;
  }
}

/** This filter is used when looking for supergroup members to mention.  
This filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific [thread](https://core.telegram.org/api/threads) through the [comment section](https://core.telegram.org/api/threads#channel-comments) of a channel. */
export class ChannelParticipantsMentions_ extends _ChannelParticipantsFilter_ {
  /** Filter by user name or username */
  q?: string;
  /** Look only for users that posted in this [thread](https://core.telegram.org/api/threads) */
  top_msg_id?: number;

  protected get [id](): number {
    return 0xE04B5CEB;
  }

  static get [name](): string {
    return "channelParticipantsMentions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["q", "string", "flags.0?string"],
      ["top_msg_id", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.q ?? null, "string", "flags.0?string"],
      [this.top_msg_id ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params?: { q?: string; top_msg_id?: number }) {
    super();
    this.q = params?.q;
    this.top_msg_id = params?.top_msg_id;
  }
}

/** Represents multiple channel participants */
export class channels_ChannelParticipants_ extends _channels_ChannelParticipants_ {
  /** Total number of participants that correspond to the given query */
  count: number;
  /** Participants */
  participants: Array<enums.ChannelParticipant>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Users mentioned in participant info */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x9AB0FEAF;
  }

  static get [name](): string {
    return "channels.channelParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["participants", [_ChannelParticipant_], "Vector<ChannelParticipant>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.participants, [_ChannelParticipant_], "Vector<ChannelParticipant>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; participants: Array<enums.ChannelParticipant>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.participants = params.participants;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** No new participant info could be found */
export class channels_ChannelParticipantsNotModified_ extends _channels_ChannelParticipants_ {
  protected get [id](): number {
    return 0xF0173FE9;
  }

  static get [name](): string {
    return "channels.channelParticipantsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a channel participant */
export class channels_ChannelParticipant_ extends _channels_ChannelParticipant_ {
  /** The channel participant */
  participant: enums.ChannelParticipant;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xDFB80317;
  }

  static get [name](): string {
    return "channels.channelParticipant"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["participant", _ChannelParticipant_, "ChannelParticipant"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.participant, _ChannelParticipant_, "ChannelParticipant"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { participant: enums.ChannelParticipant; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.participant = params.participant;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Info about the latest telegram Terms Of Service */
export class help_TermsOfService_ extends _help_TermsOfService_ {
  /** Whether a prompt must be showed to the user, in order to accept the new terms. */
  popup?: true;
  /** ID of the new terms */
  id: enums.DataJSON;
  /** Text of the new terms */
  text: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities: Array<enums.MessageEntity>;
  /** Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age. */
  min_age_confirm?: number;

  protected get [id](): number {
    return 0x780A0310;
  }

  static get [name](): string {
    return "help.termsOfService"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["popup", "true", "flags.0?true"],
      ["id", _DataJSON_, "DataJSON"],
      ["text", "string", "string"],
      ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
      ["min_age_confirm", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.popup ?? null, "true", "flags.0?true"],
      [this.id, _DataJSON_, "DataJSON"],
      [this.text, "string", "string"],
      [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
      [this.min_age_confirm ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { popup?: true; id: enums.DataJSON; text: string; entities: Array<enums.MessageEntity>; min_age_confirm?: number }) {
    super();
    this.popup = params.popup;
    this.id = params.id;
    this.text = params.text;
    this.entities = params.entities;
    this.min_age_confirm = params.min_age_confirm;
  }
}

/** No new saved gifs were found */
export class messages_SavedGifsNotModified_ extends _messages_SavedGifs_ {
  protected get [id](): number {
    return 0xE8025CA2;
  }

  static get [name](): string {
    return "messages.savedGifsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Saved gifs */
export class messages_SavedGifs_ extends _messages_SavedGifs_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** List of saved gifs */
  gifs: Array<enums.Document>;

  protected get [id](): number {
    return 0x84A02A0D;
  }

  static get [name](): string {
    return "messages.savedGifs"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["gifs", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.gifs, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { hash: bigint; gifs: Array<enums.Document> }) {
    super();
    this.hash = params.hash;
    this.gifs = params.gifs;
  }
}

/** A media */
export class InputBotInlineMessageMediaAuto_ extends _InputBotInlineMessage_ {
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** Caption */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x3380C786;
  }

  static get [name](): string {
    return "inputBotInlineMessageMediaAuto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["invert_media", "true", "flags.3?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.invert_media ?? null, "true", "flags.3?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { invert_media?: true; message: string; entities?: Array<enums.MessageEntity>; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.invert_media = params.invert_media;
    this.message = params.message;
    this.entities = params.entities;
    this.reply_markup = params.reply_markup;
  }
}

/** Simple text message */
export class InputBotInlineMessageText_ extends _InputBotInlineMessage_ {
  /** Disable webpage preview */
  no_webpage?: true;
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** Message */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x3DCD7A87;
  }

  static get [name](): string {
    return "inputBotInlineMessageText"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["no_webpage", "true", "flags.0?true"],
      ["invert_media", "true", "flags.3?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.no_webpage ?? null, "true", "flags.0?true"],
      [this.invert_media ?? null, "true", "flags.3?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { no_webpage?: true; invert_media?: true; message: string; entities?: Array<enums.MessageEntity>; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.no_webpage = params.no_webpage;
    this.invert_media = params.invert_media;
    this.message = params.message;
    this.entities = params.entities;
    this.reply_markup = params.reply_markup;
  }
}

/** Geolocation */
export class InputBotInlineMessageMediaGeo_ extends _InputBotInlineMessage_ {
  /** Geolocation */
  geo_point: enums.InputGeoPoint;
  /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360 */
  heading?: number;
  /** Validity period */
  period?: number;
  /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000) */
  proximity_notification_radius?: number;
  /** Reply markup for bot/inline keyboards */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x96929A85;
  }

  static get [name](): string {
    return "inputBotInlineMessageMediaGeo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
      ["heading", "number", "flags.0?int"],
      ["period", "number", "flags.1?int"],
      ["proximity_notification_radius", "number", "flags.3?int"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
      [this.heading ?? null, "number", "flags.0?int"],
      [this.period ?? null, "number", "flags.1?int"],
      [this.proximity_notification_radius ?? null, "number", "flags.3?int"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { geo_point: enums.InputGeoPoint; heading?: number; period?: number; proximity_notification_radius?: number; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.geo_point = params.geo_point;
    this.heading = params.heading;
    this.period = params.period;
    this.proximity_notification_radius = params.proximity_notification_radius;
    this.reply_markup = params.reply_markup;
  }
}

/** Venue */
export class InputBotInlineMessageMediaVenue_ extends _InputBotInlineMessage_ {
  /** Geolocation */
  geo_point: enums.InputGeoPoint;
  /** Venue name */
  title: string;
  /** Address */
  address: string;
  /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
  provider: string;
  /** Venue ID in the provider's database */
  venue_id: string;
  /** Venue type in the provider's database */
  venue_type: string;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x417BBF11;
  }

  static get [name](): string {
    return "inputBotInlineMessageMediaVenue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
      ["title", "string", "string"],
      ["address", "string", "string"],
      ["provider", "string", "string"],
      ["venue_id", "string", "string"],
      ["venue_type", "string", "string"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
      [this.title, "string", "string"],
      [this.address, "string", "string"],
      [this.provider, "string", "string"],
      [this.venue_id, "string", "string"],
      [this.venue_type, "string", "string"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { geo_point: enums.InputGeoPoint; title: string; address: string; provider: string; venue_id: string; venue_type: string; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.geo_point = params.geo_point;
    this.title = params.title;
    this.address = params.address;
    this.provider = params.provider;
    this.venue_id = params.venue_id;
    this.venue_type = params.venue_type;
    this.reply_markup = params.reply_markup;
  }
}

/** A contact */
export class InputBotInlineMessageMediaContact_ extends _InputBotInlineMessage_ {
  /** Phone number */
  phone_number: string;
  /** First name */
  first_name: string;
  /** Last name */
  last_name: string;
  /** VCard info */
  vcard: string;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0xA6EDBFFD;
  }

  static get [name](): string {
    return "inputBotInlineMessageMediaContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["phone_number", "string", "string"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
      ["vcard", "string", "string"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.phone_number, "string", "string"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
      [this.vcard, "string", "string"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { phone_number: string; first_name: string; last_name: string; vcard: string; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.phone_number = params.phone_number;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.vcard = params.vcard;
    this.reply_markup = params.reply_markup;
  }
}

/** A game */
export class InputBotInlineMessageGame_ extends _InputBotInlineMessage_ {
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x4B425864;
  }

  static get [name](): string {
    return "inputBotInlineMessageGame"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params?: { reply_markup?: enums.ReplyMarkup }) {
    super();
    this.reply_markup = params?.reply_markup;
  }
}

/** An invoice */
export class InputBotInlineMessageMediaInvoice_ extends _InputBotInlineMessage_ {
  /** Product name, 1-32 characters */
  title: string;
  /** Product description, 1-255 characters */
  description: string;
  /** Invoice photo */
  photo?: enums.InputWebDocument;
  /** The invoice */
  invoice: enums.Invoice;
  /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */
  payload: Uint8Array;
  /** Payments provider token, obtained via [Botfather](https://t.me/botfather) */
  provider: string;
  /** A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. */
  provider_data: enums.DataJSON;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0xD7E78225;
  }

  static get [name](): string {
    return "inputBotInlineMessageMediaInvoice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _InputWebDocument_, "flags.0?InputWebDocument"],
      ["invoice", _Invoice_, "Invoice"],
      ["payload", Uint8Array, "bytes"],
      ["provider", "string", "string"],
      ["provider_data", _DataJSON_, "DataJSON"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo ?? null, _InputWebDocument_, "flags.0?InputWebDocument"],
      [this.invoice, _Invoice_, "Invoice"],
      [this.payload, Uint8Array, "bytes"],
      [this.provider, "string", "string"],
      [this.provider_data, _DataJSON_, "DataJSON"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { title: string; description: string; photo?: enums.InputWebDocument; invoice: enums.Invoice; payload: Uint8Array; provider: string; provider_data: enums.DataJSON; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.invoice = params.invoice;
    this.payload = params.payload;
    this.provider = params.provider;
    this.provider_data = params.provider_data;
    this.reply_markup = params.reply_markup;
  }
}

/** Specifies options that will be used to generate the link preview for the message, or even a standalone link preview without an attached message. */
export class InputBotInlineMessageMediaWebPage_ extends _InputBotInlineMessage_ {
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** If set, specifies that a large media preview should be used. */
  force_large_media?: true;
  /** If set, specifies that a small media preview should be used. */
  force_small_media?: true;
  /** If **not** set, a `WEBPAGE_NOT_FOUND` RPC error will be emitted if a webpage preview cannot be generated for the specified `url`; otherwise, no error will be emitted (unless the provided message is also empty, in which case a `MESSAGE_EMPTY` will be emitted, instead). */
  optional?: true;
  /** The message, can be empty. */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** The URL to use for the link preview. */
  url: string;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0xBDDCC510;
  }

  static get [name](): string {
    return "inputBotInlineMessageMediaWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["invert_media", "true", "flags.3?true"],
      ["force_large_media", "true", "flags.4?true"],
      ["force_small_media", "true", "flags.5?true"],
      ["optional", "true", "flags.6?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["url", "string", "string"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.invert_media ?? null, "true", "flags.3?true"],
      [this.force_large_media ?? null, "true", "flags.4?true"],
      [this.force_small_media ?? null, "true", "flags.5?true"],
      [this.optional ?? null, "true", "flags.6?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.url, "string", "string"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { invert_media?: true; force_large_media?: true; force_small_media?: true; optional?: true; message: string; entities?: Array<enums.MessageEntity>; url: string; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.invert_media = params.invert_media;
    this.force_large_media = params.force_large_media;
    this.force_small_media = params.force_small_media;
    this.optional = params.optional;
    this.message = params.message;
    this.entities = params.entities;
    this.url = params.url;
    this.reply_markup = params.reply_markup;
  }
}

/** An inline bot result */
export class InputBotInlineResult_ extends _InputBotInlineResult_ {
  /** ID of result */
  id: string;
  /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
  type: string;
  /** Result title */
  title?: string;
  /** Result description */
  description?: string;
  /** URL of result */
  url?: string;
  /** Thumbnail for result */
  thumb?: enums.InputWebDocument;
  /** Result contents */
  content?: enums.InputWebDocument;
  /** Message to send when the result is selected */
  send_message: enums.InputBotInlineMessage;

  protected get [id](): number {
    return 0x88BF9319;
  }

  static get [name](): string {
    return "inputBotInlineResult"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "string", "string"],
      ["type", "string", "string"],
      ["title", "string", "flags.1?string"],
      ["description", "string", "flags.2?string"],
      ["url", "string", "flags.3?string"],
      ["thumb", _InputWebDocument_, "flags.4?InputWebDocument"],
      ["content", _InputWebDocument_, "flags.5?InputWebDocument"],
      ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "string", "string"],
      [this.type, "string", "string"],
      [this.title ?? null, "string", "flags.1?string"],
      [this.description ?? null, "string", "flags.2?string"],
      [this.url ?? null, "string", "flags.3?string"],
      [this.thumb ?? null, _InputWebDocument_, "flags.4?InputWebDocument"],
      [this.content ?? null, _InputWebDocument_, "flags.5?InputWebDocument"],
      [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  constructor(params: { id: string; type: string; title?: string; description?: string; url?: string; thumb?: enums.InputWebDocument; content?: enums.InputWebDocument; send_message: enums.InputBotInlineMessage }) {
    super();
    this.id = params.id;
    this.type = params.type;
    this.title = params.title;
    this.description = params.description;
    this.url = params.url;
    this.thumb = params.thumb;
    this.content = params.content;
    this.send_message = params.send_message;
  }
}

/** Photo */
export class InputBotInlineResultPhoto_ extends _InputBotInlineResult_ {
  /** Result ID */
  id: string;
  /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
  type: string;
  /** Photo to send */
  photo: enums.InputPhoto;
  /** Message to send when the result is selected */
  send_message: enums.InputBotInlineMessage;

  protected get [id](): number {
    return 0xA8D864A7;
  }

  static get [name](): string {
    return "inputBotInlineResultPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "string", "string"],
      ["type", "string", "string"],
      ["photo", _InputPhoto_, "InputPhoto"],
      ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "string", "string"],
      [this.type, "string", "string"],
      [this.photo, _InputPhoto_, "InputPhoto"],
      [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  constructor(params: { id: string; type: string; photo: enums.InputPhoto; send_message: enums.InputBotInlineMessage }) {
    super();
    this.id = params.id;
    this.type = params.type;
    this.photo = params.photo;
    this.send_message = params.send_message;
  }
}

/** Document (media of any type except for photos) */
export class InputBotInlineResultDocument_ extends _InputBotInlineResult_ {
  /** Result ID */
  id: string;
  /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
  type: string;
  /** Result title */
  title?: string;
  /** Result description */
  description?: string;
  /** Document to send */
  document: enums.InputDocument;
  /** Message to send when the result is selected */
  send_message: enums.InputBotInlineMessage;

  protected get [id](): number {
    return 0xFFF8FDC4;
  }

  static get [name](): string {
    return "inputBotInlineResultDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "string", "string"],
      ["type", "string", "string"],
      ["title", "string", "flags.1?string"],
      ["description", "string", "flags.2?string"],
      ["document", _InputDocument_, "InputDocument"],
      ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "string", "string"],
      [this.type, "string", "string"],
      [this.title ?? null, "string", "flags.1?string"],
      [this.description ?? null, "string", "flags.2?string"],
      [this.document, _InputDocument_, "InputDocument"],
      [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  constructor(params: { id: string; type: string; title?: string; description?: string; document: enums.InputDocument; send_message: enums.InputBotInlineMessage }) {
    super();
    this.id = params.id;
    this.type = params.type;
    this.title = params.title;
    this.description = params.description;
    this.document = params.document;
    this.send_message = params.send_message;
  }
}

/** Game */
export class InputBotInlineResultGame_ extends _InputBotInlineResult_ {
  /** Result ID */
  id: string;
  /** Game short name */
  short_name: string;
  /** Message to send when the result is selected */
  send_message: enums.InputBotInlineMessage;

  protected get [id](): number {
    return 0x4FA417F2;
  }

  static get [name](): string {
    return "inputBotInlineResultGame"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "string", "string"],
      ["short_name", "string", "string"],
      ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "string", "string"],
      [this.short_name, "string", "string"],
      [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
    ];
  }

  constructor(params: { id: string; short_name: string; send_message: enums.InputBotInlineMessage }) {
    super();
    this.id = params.id;
    this.short_name = params.short_name;
    this.send_message = params.send_message;
  }
}

/** Send whatever media is attached to the [botInlineMediaResult](https://core.telegram.org/constructor/botInlineMediaResult) */
export class BotInlineMessageMediaAuto_ extends _BotInlineMessage_ {
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** Caption */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x764CF810;
  }

  static get [name](): string {
    return "botInlineMessageMediaAuto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["invert_media", "true", "flags.3?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.invert_media ?? null, "true", "flags.3?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { invert_media?: true; message: string; entities?: Array<enums.MessageEntity>; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.invert_media = params.invert_media;
    this.message = params.message;
    this.entities = params.entities;
    this.reply_markup = params.reply_markup;
  }
}

/** Send a simple text message */
export class BotInlineMessageText_ extends _BotInlineMessage_ {
  /** Disable webpage preview */
  no_webpage?: true;
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** The message */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x8C7F65E2;
  }

  static get [name](): string {
    return "botInlineMessageText"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["no_webpage", "true", "flags.0?true"],
      ["invert_media", "true", "flags.3?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.no_webpage ?? null, "true", "flags.0?true"],
      [this.invert_media ?? null, "true", "flags.3?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { no_webpage?: true; invert_media?: true; message: string; entities?: Array<enums.MessageEntity>; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.no_webpage = params.no_webpage;
    this.invert_media = params.invert_media;
    this.message = params.message;
    this.entities = params.entities;
    this.reply_markup = params.reply_markup;
  }
}

/** Send a geolocation */
export class BotInlineMessageMediaGeo_ extends _BotInlineMessage_ {
  /** Geolocation */
  geo: enums.GeoPoint;
  /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360. */
  heading?: number;
  /** Validity period */
  period?: number;
  /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000). */
  proximity_notification_radius?: number;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x051846FD;
  }

  static get [name](): string {
    return "botInlineMessageMediaGeo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["geo", _GeoPoint_, "GeoPoint"],
      ["heading", "number", "flags.0?int"],
      ["period", "number", "flags.1?int"],
      ["proximity_notification_radius", "number", "flags.3?int"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.geo, _GeoPoint_, "GeoPoint"],
      [this.heading ?? null, "number", "flags.0?int"],
      [this.period ?? null, "number", "flags.1?int"],
      [this.proximity_notification_radius ?? null, "number", "flags.3?int"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { geo: enums.GeoPoint; heading?: number; period?: number; proximity_notification_radius?: number; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.geo = params.geo;
    this.heading = params.heading;
    this.period = params.period;
    this.proximity_notification_radius = params.proximity_notification_radius;
    this.reply_markup = params.reply_markup;
  }
}

/** Send a venue */
export class BotInlineMessageMediaVenue_ extends _BotInlineMessage_ {
  /** Geolocation of venue */
  geo: enums.GeoPoint;
  /** Venue name */
  title: string;
  /** Address */
  address: string;
  /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
  provider: string;
  /** Venue ID in the provider's database */
  venue_id: string;
  /** Venue type in the provider's database */
  venue_type: string;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x8A86659C;
  }

  static get [name](): string {
    return "botInlineMessageMediaVenue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["geo", _GeoPoint_, "GeoPoint"],
      ["title", "string", "string"],
      ["address", "string", "string"],
      ["provider", "string", "string"],
      ["venue_id", "string", "string"],
      ["venue_type", "string", "string"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.geo, _GeoPoint_, "GeoPoint"],
      [this.title, "string", "string"],
      [this.address, "string", "string"],
      [this.provider, "string", "string"],
      [this.venue_id, "string", "string"],
      [this.venue_type, "string", "string"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { geo: enums.GeoPoint; title: string; address: string; provider: string; venue_id: string; venue_type: string; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.geo = params.geo;
    this.title = params.title;
    this.address = params.address;
    this.provider = params.provider;
    this.venue_id = params.venue_id;
    this.venue_type = params.venue_type;
    this.reply_markup = params.reply_markup;
  }
}

/** Send a contact */
export class BotInlineMessageMediaContact_ extends _BotInlineMessage_ {
  /** Phone number */
  phone_number: string;
  /** First name */
  first_name: string;
  /** Last name */
  last_name: string;
  /** VCard info */
  vcard: string;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x18D1CDC2;
  }

  static get [name](): string {
    return "botInlineMessageMediaContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["phone_number", "string", "string"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
      ["vcard", "string", "string"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.phone_number, "string", "string"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
      [this.vcard, "string", "string"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { phone_number: string; first_name: string; last_name: string; vcard: string; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.phone_number = params.phone_number;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.vcard = params.vcard;
    this.reply_markup = params.reply_markup;
  }
}

/** Send an invoice */
export class BotInlineMessageMediaInvoice_ extends _BotInlineMessage_ {
  /** Set this flag if you require the user's shipping address to complete the order */
  shipping_address_requested?: true;
  /** Test invoice */
  test?: true;
  /** Product name, 1-32 characters */
  title: string;
  /** Product description, 1-255 characters */
  description: string;
  /** Product photo */
  photo?: enums.WebDocument;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  total_amount: bigint;
  /** Inline keyboard */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x354A9B09;
  }

  static get [name](): string {
    return "botInlineMessageMediaInvoice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["shipping_address_requested", "true", "flags.1?true"],
      ["test", "true", "flags.3?true"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _WebDocument_, "flags.0?WebDocument"],
      ["currency", "string", "string"],
      ["total_amount", "bigint", "long"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.shipping_address_requested ?? null, "true", "flags.1?true"],
      [this.test ?? null, "true", "flags.3?true"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo ?? null, _WebDocument_, "flags.0?WebDocument"],
      [this.currency, "string", "string"],
      [this.total_amount, "bigint", "long"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { shipping_address_requested?: true; test?: true; title: string; description: string; photo?: enums.WebDocument; currency: string; total_amount: bigint; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.shipping_address_requested = params.shipping_address_requested;
    this.test = params.test;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.currency = params.currency;
    this.total_amount = params.total_amount;
    this.reply_markup = params.reply_markup;
  }
}

/** Specifies options that must be used to generate the link preview for the message, or even a standalone link preview without an attached message. */
export class BotInlineMessageMediaWebPage_ extends _BotInlineMessage_ {
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** If set, specifies that a large media preview should be used. */
  force_large_media?: true;
  /** If set, specifies that a small media preview should be used. */
  force_small_media?: true;
  /** If set, indicates that the URL used for the webpage preview was specified manually using [inputMediaWebPage](https://core.telegram.org/constructor/inputMediaWebPage), and may not be related to any of the URLs specified in the message. */
  manual?: true;
  /** If set, the link can be opened directly without user confirmation. */
  safe?: true;
  /** The message, can be empty. */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** The URL to use for the link preview. */
  url: string;
  /** Reply markup for sending bot buttons */
  reply_markup?: enums.ReplyMarkup;

  protected get [id](): number {
    return 0x809AD9A6;
  }

  static get [name](): string {
    return "botInlineMessageMediaWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["invert_media", "true", "flags.3?true"],
      ["force_large_media", "true", "flags.4?true"],
      ["force_small_media", "true", "flags.5?true"],
      ["manual", "true", "flags.7?true"],
      ["safe", "true", "flags.8?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["url", "string", "string"],
      ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.invert_media ?? null, "true", "flags.3?true"],
      [this.force_large_media ?? null, "true", "flags.4?true"],
      [this.force_small_media ?? null, "true", "flags.5?true"],
      [this.manual ?? null, "true", "flags.7?true"],
      [this.safe ?? null, "true", "flags.8?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.url, "string", "string"],
      [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
    ];
  }

  constructor(params: { invert_media?: true; force_large_media?: true; force_small_media?: true; manual?: true; safe?: true; message: string; entities?: Array<enums.MessageEntity>; url: string; reply_markup?: enums.ReplyMarkup }) {
    super();
    this.invert_media = params.invert_media;
    this.force_large_media = params.force_large_media;
    this.force_small_media = params.force_small_media;
    this.manual = params.manual;
    this.safe = params.safe;
    this.message = params.message;
    this.entities = params.entities;
    this.url = params.url;
    this.reply_markup = params.reply_markup;
  }
}

/** Generic result */
export class BotInlineResult_ extends _BotInlineResult_ {
  /** Result ID */
  id: string;
  /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
  type: string;
  /** Result title */
  title?: string;
  /** Result description */
  description?: string;
  /** URL of article or webpage */
  url?: string;
  /** Thumbnail for the result */
  thumb?: enums.WebDocument;
  /** Content of the result */
  content?: enums.WebDocument;
  /** Message to send */
  send_message: enums.BotInlineMessage;

  protected get [id](): number {
    return 0x11965F3A;
  }

  static get [name](): string {
    return "botInlineResult"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "string", "string"],
      ["type", "string", "string"],
      ["title", "string", "flags.1?string"],
      ["description", "string", "flags.2?string"],
      ["url", "string", "flags.3?string"],
      ["thumb", _WebDocument_, "flags.4?WebDocument"],
      ["content", _WebDocument_, "flags.5?WebDocument"],
      ["send_message", _BotInlineMessage_, "BotInlineMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "string", "string"],
      [this.type, "string", "string"],
      [this.title ?? null, "string", "flags.1?string"],
      [this.description ?? null, "string", "flags.2?string"],
      [this.url ?? null, "string", "flags.3?string"],
      [this.thumb ?? null, _WebDocument_, "flags.4?WebDocument"],
      [this.content ?? null, _WebDocument_, "flags.5?WebDocument"],
      [this.send_message, _BotInlineMessage_, "BotInlineMessage"],
    ];
  }

  constructor(params: { id: string; type: string; title?: string; description?: string; url?: string; thumb?: enums.WebDocument; content?: enums.WebDocument; send_message: enums.BotInlineMessage }) {
    super();
    this.id = params.id;
    this.type = params.type;
    this.title = params.title;
    this.description = params.description;
    this.url = params.url;
    this.thumb = params.thumb;
    this.content = params.content;
    this.send_message = params.send_message;
  }
}

/** Media result */
export class BotInlineMediaResult_ extends _BotInlineResult_ {
  /** Result ID */
  id: string;
  /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
  type: string;
  /** If type is `photo`, the photo to send */
  photo?: enums.Photo;
  /** If type is `document`, the document to send */
  document?: enums.Document;
  /** Result title */
  title?: string;
  /** Description */
  description?: string;
  /** Depending on the `type` and on the [constructor](https://core.telegram.org/type/BotInlineMessage), contains the caption of the media or the content of the message to be sent **instead** of the media */
  send_message: enums.BotInlineMessage;

  protected get [id](): number {
    return 0x17DB940B;
  }

  static get [name](): string {
    return "botInlineMediaResult"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "string", "string"],
      ["type", "string", "string"],
      ["photo", _Photo_, "flags.0?Photo"],
      ["document", _Document_, "flags.1?Document"],
      ["title", "string", "flags.2?string"],
      ["description", "string", "flags.3?string"],
      ["send_message", _BotInlineMessage_, "BotInlineMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "string", "string"],
      [this.type, "string", "string"],
      [this.photo ?? null, _Photo_, "flags.0?Photo"],
      [this.document ?? null, _Document_, "flags.1?Document"],
      [this.title ?? null, "string", "flags.2?string"],
      [this.description ?? null, "string", "flags.3?string"],
      [this.send_message, _BotInlineMessage_, "BotInlineMessage"],
    ];
  }

  constructor(params: { id: string; type: string; photo?: enums.Photo; document?: enums.Document; title?: string; description?: string; send_message: enums.BotInlineMessage }) {
    super();
    this.id = params.id;
    this.type = params.type;
    this.photo = params.photo;
    this.document = params.document;
    this.title = params.title;
    this.description = params.description;
    this.send_message = params.send_message;
  }
}

/** Result of a query to an inline bot */
export class messages_BotResults_ extends _messages_BotResults_ {
  /** Whether the result is a picture gallery */
  gallery?: true;
  /** Query ID */
  query_id: bigint;
  /** The next offset to use when navigating through results */
  next_offset?: string;
  /** Shown as a button on top of the remaining inline result list; if clicked, redirects the user to a private chat with the bot with the specified start parameter. */
  switch_pm?: enums.InlineBotSwitchPM;
  /** Shown as a button on top of the remaining inline result list; if clicked, opens the specified [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps). */
  switch_webview?: enums.InlineBotWebView;
  /** The results */
  results: Array<enums.BotInlineResult>;
  /** Caching validity of the results */
  cache_time: number;
  /** Users mentioned in the results */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xE021F2F6;
  }

  static get [name](): string {
    return "messages.botResults"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["gallery", "true", "flags.0?true"],
      ["query_id", "bigint", "long"],
      ["next_offset", "string", "flags.1?string"],
      ["switch_pm", _InlineBotSwitchPM_, "flags.2?InlineBotSwitchPM"],
      ["switch_webview", _InlineBotWebView_, "flags.3?InlineBotWebView"],
      ["results", [_BotInlineResult_], "Vector<BotInlineResult>"],
      ["cache_time", "number", "int"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.gallery ?? null, "true", "flags.0?true"],
      [this.query_id, "bigint", "long"],
      [this.next_offset ?? null, "string", "flags.1?string"],
      [this.switch_pm ?? null, _InlineBotSwitchPM_, "flags.2?InlineBotSwitchPM"],
      [this.switch_webview ?? null, _InlineBotWebView_, "flags.3?InlineBotWebView"],
      [this.results, [_BotInlineResult_], "Vector<BotInlineResult>"],
      [this.cache_time, "number", "int"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { gallery?: true; query_id: bigint; next_offset?: string; switch_pm?: enums.InlineBotSwitchPM; switch_webview?: enums.InlineBotWebView; results: Array<enums.BotInlineResult>; cache_time: number; users: Array<enums.User> }) {
    super();
    this.gallery = params.gallery;
    this.query_id = params.query_id;
    this.next_offset = params.next_offset;
    this.switch_pm = params.switch_pm;
    this.switch_webview = params.switch_webview;
    this.results = params.results;
    this.cache_time = params.cache_time;
    this.users = params.users;
  }
}

/** Link to a message in a supergroup/channel */
export class ExportedMessageLink_ extends _ExportedMessageLink_ {
  /** URL */
  link: string;
  /** Embed code */
  html: string;

  protected get [id](): number {
    return 0x5DAB1AF4;
  }

  static get [name](): string {
    return "exportedMessageLink"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["link", "string", "string"],
      ["html", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.link, "string", "string"],
      [this.html, "string", "string"],
    ];
  }

  constructor(params: { link: string; html: string }) {
    super();
    this.link = params.link;
    this.html = params.html;
  }
}

/** Info about a forwarded message */
export class MessageFwdHeader_ extends _MessageFwdHeader_ {
  /** Whether this message was [imported from a foreign chat service, click here for more info »](https://core.telegram.org/api/import) */
  imported?: true;
  /** Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), set if the original message was outgoing (though the message may have been originally outgoing even if this flag is not set, if `from_id` points to the current user). */
  saved_out?: true;
  /** The ID of the user that originally sent the message */
  from_id?: enums.Peer;
  /** The name of the user that originally sent the message */
  from_name?: string;
  /** When was the message originally sent */
  date: number;
  /** ID of the channel message that was forwarded */
  channel_post?: number;
  /** For channels and if signatures are enabled, author of the channel message */
  post_author?: string;
  /** Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the dialog where the message was originally sent. */
  saved_from_peer?: enums.Peer;
  /** Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the original ID of the message in `saved_from_peer`. */
  saved_from_msg_id?: number;
  /** Only for forwarded messages reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the sender of the original message (i.e. if user A sends a message, then user B forwards it somewhere, then user C saves it to saved messages, this field will contain the ID of user B and `from_id` will contain the ID of user A). */
  saved_from_id?: enums.Peer;
  /** Only for forwarded messages from users with forward privacy enabled, sent by users with forward privacy enabled, reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the sender of the original message (i.e. if user A (fwd privacy enabled) sends a message, then user B (fwd privacy enabled) forwards it somewhere, then user C saves it to saved messages, this field will contain the name of user B and `from_name` will contain the name of user A). */
  saved_from_name?: string;
  /** Only for forwarded messages reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), indicates when was the original message sent (i.e. if user A sends a message @ unixtime 1, then user B forwards it somewhere @ unixtime 2, then user C saves it to saved messages @ unixtime 3, this field will contain 2, `date` will contain 1 and the `date` of the containing [message](https://core.telegram.org/constructor/message) will contain 3). */
  saved_date?: number;
  /** PSA type */
  psa_type?: string;

  protected get [id](): number {
    return 0x4E4DF4BB;
  }

  static get [name](): string {
    return "messageFwdHeader"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["imported", "true", "flags.7?true"],
      ["saved_out", "true", "flags.11?true"],
      ["from_id", _Peer_, "flags.0?Peer"],
      ["from_name", "string", "flags.5?string"],
      ["date", "number", "int"],
      ["channel_post", "number", "flags.2?int"],
      ["post_author", "string", "flags.3?string"],
      ["saved_from_peer", _Peer_, "flags.4?Peer"],
      ["saved_from_msg_id", "number", "flags.4?int"],
      ["saved_from_id", _Peer_, "flags.8?Peer"],
      ["saved_from_name", "string", "flags.9?string"],
      ["saved_date", "number", "flags.10?int"],
      ["psa_type", "string", "flags.6?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.imported ?? null, "true", "flags.7?true"],
      [this.saved_out ?? null, "true", "flags.11?true"],
      [this.from_id ?? null, _Peer_, "flags.0?Peer"],
      [this.from_name ?? null, "string", "flags.5?string"],
      [this.date, "number", "int"],
      [this.channel_post ?? null, "number", "flags.2?int"],
      [this.post_author ?? null, "string", "flags.3?string"],
      [this.saved_from_peer ?? null, _Peer_, "flags.4?Peer"],
      [this.saved_from_msg_id ?? null, "number", "flags.4?int"],
      [this.saved_from_id ?? null, _Peer_, "flags.8?Peer"],
      [this.saved_from_name ?? null, "string", "flags.9?string"],
      [this.saved_date ?? null, "number", "flags.10?int"],
      [this.psa_type ?? null, "string", "flags.6?string"],
    ];
  }

  constructor(params: { imported?: true; saved_out?: true; from_id?: enums.Peer; from_name?: string; date: number; channel_post?: number; post_author?: string; saved_from_peer?: enums.Peer; saved_from_msg_id?: number; saved_from_id?: enums.Peer; saved_from_name?: string; saved_date?: number; psa_type?: string }) {
    super();
    this.imported = params.imported;
    this.saved_out = params.saved_out;
    this.from_id = params.from_id;
    this.from_name = params.from_name;
    this.date = params.date;
    this.channel_post = params.channel_post;
    this.post_author = params.post_author;
    this.saved_from_peer = params.saved_from_peer;
    this.saved_from_msg_id = params.saved_from_msg_id;
    this.saved_from_id = params.saved_from_id;
    this.saved_from_name = params.saved_from_name;
    this.saved_date = params.saved_date;
    this.psa_type = params.psa_type;
  }
}

/** The next time, the authentication code will be delivered via an immediately canceled incoming call. */
export class auth_CodeTypeSms_ extends _auth_CodeType_ {
  protected get [id](): number {
    return 0x72A3158C;
  }

  static get [name](): string {
    return "auth.codeTypeSms"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The next time, the authentication code is to be delivered via an outgoing phone call. */
export class auth_CodeTypeCall_ extends _auth_CodeType_ {
  protected get [id](): number {
    return 0x741CD3E3;
  }

  static get [name](): string {
    return "auth.codeTypeCall"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The next time, the authentication code will be delivered via an immediately canceled incoming call. */
export class auth_CodeTypeFlashCall_ extends _auth_CodeType_ {
  protected get [id](): number {
    return 0x226CCEFB;
  }

  static get [name](): string {
    return "auth.codeTypeFlashCall"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The next time, the authentication code will be delivered via an immediately canceled incoming call, handled manually by the user. */
export class auth_CodeTypeMissedCall_ extends _auth_CodeType_ {
  protected get [id](): number {
    return 0xD61AD6EE;
  }

  static get [name](): string {
    return "auth.codeTypeMissedCall"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The next time, the authentication code will be delivered via [fragment.com](https://fragment.com) */
export class auth_CodeTypeFragmentSms_ extends _auth_CodeType_ {
  protected get [id](): number {
    return 0x06ED998C;
  }

  static get [name](): string {
    return "auth.codeTypeFragmentSms"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The code was sent through the telegram app */
export class auth_SentCodeTypeApp_ extends _auth_SentCodeType_ {
  /** Length of the code in bytes */
  length: number;

  protected get [id](): number {
    return 0x3DBB5986;
  }

  static get [name](): string {
    return "auth.sentCodeTypeApp"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { length: number }) {
    super();
    this.length = params.length;
  }
}

/** The code was sent via SMS */
export class auth_SentCodeTypeSms_ extends _auth_SentCodeType_ {
  /** Length of the code in bytes */
  length: number;

  protected get [id](): number {
    return 0xC000BBA2;
  }

  static get [name](): string {
    return "auth.sentCodeTypeSms"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { length: number }) {
    super();
    this.length = params.length;
  }
}

/** The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input. */
export class auth_SentCodeTypeCall_ extends _auth_SentCodeType_ {
  /** Length of the verification code */
  length: number;

  protected get [id](): number {
    return 0x5353E5A7;
  }

  static get [name](): string {
    return "auth.sentCodeTypeCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { length: number }) {
    super();
    this.length = params.length;
  }
}

/** The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern. */
export class auth_SentCodeTypeFlashCall_ extends _auth_SentCodeType_ {
  /** [pattern](https://core.telegram.org/api/pattern) to match */
  pattern: string;

  protected get [id](): number {
    return 0xAB03C6D9;
  }

  static get [name](): string {
    return "auth.sentCodeTypeFlashCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pattern", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pattern, "string", "string"],
    ];
  }

  constructor(params: { pattern: string }) {
    super();
    this.pattern = params.pattern;
  }
}

/** The code will be sent via a flash phone call, that will be closed immediately. The last digits of the phone number that calls are the code that must be entered manually by the user. */
export class auth_SentCodeTypeMissedCall_ extends _auth_SentCodeType_ {
  /** Prefix of the phone number from which the call will be made */
  prefix: string;
  /** Length of the verification code */
  length: number;

  protected get [id](): number {
    return 0x82006484;
  }

  static get [name](): string {
    return "auth.sentCodeTypeMissedCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prefix", "string", "string"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prefix, "string", "string"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { prefix: string; length: number }) {
    super();
    this.prefix = params.prefix;
    this.length = params.length;
  }
}

/** The code was sent via the [previously configured login email »](https://core.telegram.org/api/auth#email-verification) */
export class auth_SentCodeTypeEmailCode_ extends _auth_SentCodeType_ {
  /** Whether authorization through Apple ID is allowed */
  apple_signin_allowed?: true;
  /** Whether authorization through Google ID is allowed */
  google_signin_allowed?: true;
  /** [Pattern](https://core.telegram.org/api/pattern) of the email */
  email_pattern: string;
  /** Length of the sent verification code */
  length: number;
  /** Clients should wait for the specified amount of seconds before allowing the user to invoke [auth.resetLoginEmail](https://core.telegram.org/method/auth.resetLoginEmail) (will be 0 for [Premium](https://core.telegram.org/api/premium) users). */
  reset_available_period?: number;
  /** An email reset was already requested, and will occur at the specified date. */
  reset_pending_date?: number;

  protected get [id](): number {
    return 0xF450F59B;
  }

  static get [name](): string {
    return "auth.sentCodeTypeEmailCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["apple_signin_allowed", "true", "flags.0?true"],
      ["google_signin_allowed", "true", "flags.1?true"],
      ["email_pattern", "string", "string"],
      ["length", "number", "int"],
      ["reset_available_period", "number", "flags.3?int"],
      ["reset_pending_date", "number", "flags.4?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.apple_signin_allowed ?? null, "true", "flags.0?true"],
      [this.google_signin_allowed ?? null, "true", "flags.1?true"],
      [this.email_pattern, "string", "string"],
      [this.length, "number", "int"],
      [this.reset_available_period ?? null, "number", "flags.3?int"],
      [this.reset_pending_date ?? null, "number", "flags.4?int"],
    ];
  }

  constructor(params: { apple_signin_allowed?: true; google_signin_allowed?: true; email_pattern: string; length: number; reset_available_period?: number; reset_pending_date?: number }) {
    super();
    this.apple_signin_allowed = params.apple_signin_allowed;
    this.google_signin_allowed = params.google_signin_allowed;
    this.email_pattern = params.email_pattern;
    this.length = params.length;
    this.reset_available_period = params.reset_available_period;
    this.reset_pending_date = params.reset_pending_date;
  }
}

/** The user should add and verify an email address in order to login as described [here »](https://core.telegram.org/api/auth#email-verification). */
export class auth_SentCodeTypeSetUpEmailRequired_ extends _auth_SentCodeType_ {
  /** Whether authorization through Apple ID is allowed */
  apple_signin_allowed?: true;
  /** Whether authorization through Google ID is allowed */
  google_signin_allowed?: true;

  protected get [id](): number {
    return 0xA5491DEA;
  }

  static get [name](): string {
    return "auth.sentCodeTypeSetUpEmailRequired"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["apple_signin_allowed", "true", "flags.0?true"],
      ["google_signin_allowed", "true", "flags.1?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.apple_signin_allowed ?? null, "true", "flags.0?true"],
      [this.google_signin_allowed ?? null, "true", "flags.1?true"],
    ];
  }

  constructor(params?: { apple_signin_allowed?: true; google_signin_allowed?: true }) {
    super();
    this.apple_signin_allowed = params?.apple_signin_allowed;
    this.google_signin_allowed = params?.google_signin_allowed;
  }
}

/** The code was delivered via [fragment.com](https://fragment.com). */
export class auth_SentCodeTypeFragmentSms_ extends _auth_SentCodeType_ {
  /** Open the specified URL to log into [fragment.com](https://fragment.com) with the wallet that owns the specified phone number and view the code. */
  url: string;
  /** Length of the delivered code. */
  length: number;

  protected get [id](): number {
    return 0xD9565C39;
  }

  static get [name](): string {
    return "auth.sentCodeTypeFragmentSms"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { url: string; length: number }) {
    super();
    this.url = params.url;
    this.length = params.length;
  }
}

/** An authentication code should be delivered via SMS after Firebase attestation, as described in the [auth documentation »](https://core.telegram.org/api/auth). */
export class auth_SentCodeTypeFirebaseSms_ extends _auth_SentCodeType_ {
  /** On Android, the nonce to be used as described in the [auth documentation »](https://core.telegram.org/api/auth) */
  nonce?: Uint8Array;
  /** On iOS, must be compared with the `receipt` extracted from the received push notification. */
  receipt?: string;
  /** On iOS: if a push notification with the `ios_push_secret` isn't received within `push_timeout` seconds, the `next_type` authentication method must be used, with [auth.resendCode](https://core.telegram.org/method/auth.resendCode). */
  push_timeout?: number;
  /** Length of the code that will be delivered. */
  length: number;

  protected get [id](): number {
    return 0xE57B1432;
  }

  static get [name](): string {
    return "auth.sentCodeTypeFirebaseSms"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["nonce", Uint8Array, "flags.0?bytes"],
      ["receipt", "string", "flags.1?string"],
      ["push_timeout", "number", "flags.1?int"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.nonce ?? null, Uint8Array, "flags.0?bytes"],
      [this.receipt ?? null, "string", "flags.1?string"],
      [this.push_timeout ?? null, "number", "flags.1?int"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { nonce?: Uint8Array; receipt?: string; push_timeout?: number; length: number }) {
    super();
    this.nonce = params.nonce;
    this.receipt = params.receipt;
    this.push_timeout = params.push_timeout;
    this.length = params.length;
  }
}

/** Callback answer sent by the bot in response to a button press */
export class messages_BotCallbackAnswer_ extends _messages_BotCallbackAnswer_ {
  /** Whether an alert should be shown to the user instead of a toast notification */
  alert?: true;
  /** Whether an URL is present */
  has_url?: true;
  /** Whether to show games in WebView or in native UI. */
  native_ui?: true;
  /** Alert to show */
  message?: string;
  /** URL to open */
  url?: string;
  /** For how long should this answer be cached */
  cache_time: number;

  protected get [id](): number {
    return 0x36585EA4;
  }

  static get [name](): string {
    return "messages.botCallbackAnswer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["alert", "true", "flags.1?true"],
      ["has_url", "true", "flags.3?true"],
      ["native_ui", "true", "flags.4?true"],
      ["message", "string", "flags.0?string"],
      ["url", "string", "flags.2?string"],
      ["cache_time", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.alert ?? null, "true", "flags.1?true"],
      [this.has_url ?? null, "true", "flags.3?true"],
      [this.native_ui ?? null, "true", "flags.4?true"],
      [this.message ?? null, "string", "flags.0?string"],
      [this.url ?? null, "string", "flags.2?string"],
      [this.cache_time, "number", "int"],
    ];
  }

  constructor(params: { alert?: true; has_url?: true; native_ui?: true; message?: string; url?: string; cache_time: number }) {
    super();
    this.alert = params.alert;
    this.has_url = params.has_url;
    this.native_ui = params.native_ui;
    this.message = params.message;
    this.url = params.url;
    this.cache_time = params.cache_time;
  }
}

/** Message edit data for media */
export class messages_MessageEditData_ extends _messages_MessageEditData_ {
  /** Media caption, if the specified media's caption can be edited */
  caption?: true;

  protected get [id](): number {
    return 0x26B5DDE6;
  }

  static get [name](): string {
    return "messages.messageEditData"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["caption", "true", "flags.0?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.caption ?? null, "true", "flags.0?true"],
    ];
  }

  constructor(params?: { caption?: true }) {
    super();
    this.caption = params?.caption;
  }
}

/** Represents a sent inline message from the perspective of a bot (legacy constructor) */
export class InputBotInlineMessageID_ extends _InputBotInlineMessageID_ {
  /** DC ID to use when working with this inline message */
  dc_id: number;
  /** ID of message, contains both the (32-bit, legacy) owner ID and the message ID, used only for Bot API backwards compatibility with 32-bit user ID. */
  id: bigint;
  /** Access hash of message */
  access_hash: bigint;

  protected get [id](): number {
    return 0x890C3D89;
  }

  static get [name](): string {
    return "inputBotInlineMessageID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dc_id", "number", "int"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dc_id, "number", "int"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { dc_id: number; id: bigint; access_hash: bigint }) {
    super();
    this.dc_id = params.dc_id;
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Represents a sent inline message from the perspective of a bot */
export class InputBotInlineMessageID64_ extends _InputBotInlineMessageID_ {
  /** DC ID to use when working with this inline message */
  dc_id: number;
  /** ID of the owner of this message */
  owner_id: bigint;
  /** ID of message */
  id: number;
  /** Access hash of message */
  access_hash: bigint;

  protected get [id](): number {
    return 0xB6D915D7;
  }

  static get [name](): string {
    return "inputBotInlineMessageID64"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dc_id", "number", "int"],
      ["owner_id", "bigint", "long"],
      ["id", "number", "int"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dc_id, "number", "int"],
      [this.owner_id, "bigint", "long"],
      [this.id, "number", "int"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { dc_id: number; owner_id: bigint; id: number; access_hash: bigint }) {
    super();
    this.dc_id = params.dc_id;
    this.owner_id = params.owner_id;
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** The bot requested the user to message them in private */
export class InlineBotSwitchPM_ extends _InlineBotSwitchPM_ {
  /** Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter `start_parameter` (can be empty) */
  text: string;
  /** The parameter for the `/start parameter` */
  start_param: string;

  protected get [id](): number {
    return 0x3C20629F;
  }

  static get [name](): string {
    return "inlineBotSwitchPM"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["start_param", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.start_param, "string", "string"],
    ];
  }

  constructor(params: { text: string; start_param: string }) {
    super();
    this.text = params.text;
    this.start_param = params.start_param;
  }
}

/** Dialog info of multiple peers */
export class messages_PeerDialogs_ extends _messages_PeerDialogs_ {
  /** Dialog info */
  dialogs: Array<enums.Dialog>;
  /** Messages mentioned in dialog info */
  messages: Array<enums.Message>;
  /** Chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;
  /** Current [update state of dialog](https://core.telegram.org/api/updates) */
  state: enums.updates.State;

  protected get [id](): number {
    return 0x3371C354;
  }

  static get [name](): string {
    return "messages.peerDialogs"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dialogs", [_Dialog_], "Vector<Dialog>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["state", _updates_State_, "updates.State"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dialogs, [_Dialog_], "Vector<Dialog>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.state, _updates_State_, "updates.State"],
    ];
  }

  constructor(params: { dialogs: Array<enums.Dialog>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User>; state: enums.updates.State }) {
    super();
    this.dialogs = params.dialogs;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
    this.state = params.state;
  }
}

/** Top peer */
export class TopPeer_ extends _TopPeer_ {
  /** Peer */
  peer: enums.Peer;
  /** Rating as computed in [top peer rating »](https://core.telegram.org/api/top-rating) */
  rating: number;

  protected get [id](): number {
    return 0xEDCDC05B;
  }

  static get [name](): string {
    return "topPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["rating", "number", "double"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.rating, "number", "double"],
    ];
  }

  constructor(params: { peer: enums.Peer; rating: number }) {
    super();
    this.peer = params.peer;
    this.rating = params.rating;
  }
}

/** Most used bots */
export class TopPeerCategoryBotsPM_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0xAB661B5B;
  }

  static get [name](): string {
    return "topPeerCategoryBotsPM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Most used inline bots */
export class TopPeerCategoryBotsInline_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0x148677E2;
  }

  static get [name](): string {
    return "topPeerCategoryBotsInline"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Users we've chatted most frequently with */
export class TopPeerCategoryCorrespondents_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0x0637B7ED;
  }

  static get [name](): string {
    return "topPeerCategoryCorrespondents"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Often-opened groups and supergroups */
export class TopPeerCategoryGroups_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0xBD17A14A;
  }

  static get [name](): string {
    return "topPeerCategoryGroups"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Most frequently visited channels */
export class TopPeerCategoryChannels_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0x161D9628;
  }

  static get [name](): string {
    return "topPeerCategoryChannels"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Most frequently called users */
export class TopPeerCategoryPhoneCalls_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0x1E76A78C;
  }

  static get [name](): string {
    return "topPeerCategoryPhoneCalls"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Users to which the users often forwards messages to */
export class TopPeerCategoryForwardUsers_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0xA8406CA9;
  }

  static get [name](): string {
    return "topPeerCategoryForwardUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Chats to which the users often forwards messages to */
export class TopPeerCategoryForwardChats_ extends _TopPeerCategory_ {
  protected get [id](): number {
    return 0xFBEEC0F0;
  }

  static get [name](): string {
    return "topPeerCategoryForwardChats"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Top peer category */
export class TopPeerCategoryPeers_ extends _TopPeerCategoryPeers_ {
  /** Top peer category of peers */
  category: enums.TopPeerCategory;
  /** Count of peers */
  count: number;
  /** Peers */
  peers: Array<enums.TopPeer>;

  protected get [id](): number {
    return 0xFB834291;
  }

  static get [name](): string {
    return "topPeerCategoryPeers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["category", _TopPeerCategory_, "TopPeerCategory"],
      ["count", "number", "int"],
      ["peers", [_TopPeer_], "Vector<TopPeer>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.category, _TopPeerCategory_, "TopPeerCategory"],
      [this.count, "number", "int"],
      [this.peers, [_TopPeer_], "Vector<TopPeer>"],
    ];
  }

  constructor(params: { category: enums.TopPeerCategory; count: number; peers: Array<enums.TopPeer> }) {
    super();
    this.category = params.category;
    this.count = params.count;
    this.peers = params.peers;
  }
}

/** Top peer info hasn't changed */
export class contacts_TopPeersNotModified_ extends _contacts_TopPeers_ {
  protected get [id](): number {
    return 0xDE266EF5;
  }

  static get [name](): string {
    return "contacts.topPeersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Top peers */
export class contacts_TopPeers_ extends _contacts_TopPeers_ {
  /** Top peers by top peer category */
  categories: Array<enums.TopPeerCategoryPeers>;
  /** Chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x70B772A8;
  }

  static get [name](): string {
    return "contacts.topPeers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["categories", [_TopPeerCategoryPeers_], "Vector<TopPeerCategoryPeers>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.categories, [_TopPeerCategoryPeers_], "Vector<TopPeerCategoryPeers>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { categories: Array<enums.TopPeerCategoryPeers>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.categories = params.categories;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Top peers disabled */
export class contacts_TopPeersDisabled_ extends _contacts_TopPeers_ {
  protected get [id](): number {
    return 0xB52C939D;
  }

  static get [name](): string {
    return "contacts.topPeersDisabled"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Empty draft */
export class DraftMessageEmpty_ extends _DraftMessage_ {
  /** When was the draft last updated */
  date?: number;

  protected get [id](): number {
    return 0x1B0C841A;
  }

  static get [name](): string {
    return "draftMessageEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["date", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.date ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params?: { date?: number }) {
    super();
    this.date = params?.date;
  }
}

/** Represents a message [draft](https://core.telegram.org/api/drafts). */
export class DraftMessage_ extends _DraftMessage_ {
  /** Whether no webpage preview will be generated */
  no_webpage?: true;
  /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
  invert_media?: true;
  /** If set, indicates that the message should be sent in reply to the specified message or story. */
  reply_to?: enums.InputReplyTo;
  /** The draft */
  message: string;
  /** Message [entities](https://core.telegram.org/api/entities) for styled text. */
  entities?: Array<enums.MessageEntity>;
  /** Media. */
  media?: enums.InputMedia;
  /** Date of last update of the draft. */
  date: number;

  protected get [id](): number {
    return 0x3FCCF7EF;
  }

  static get [name](): string {
    return "draftMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["no_webpage", "true", "flags.1?true"],
      ["invert_media", "true", "flags.6?true"],
      ["reply_to", _InputReplyTo_, "flags.4?InputReplyTo"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
      ["media", _InputMedia_, "flags.5?InputMedia"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.no_webpage ?? null, "true", "flags.1?true"],
      [this.invert_media ?? null, "true", "flags.6?true"],
      [this.reply_to ?? null, _InputReplyTo_, "flags.4?InputReplyTo"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
      [this.media ?? null, _InputMedia_, "flags.5?InputMedia"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { no_webpage?: true; invert_media?: true; reply_to?: enums.InputReplyTo; message: string; entities?: Array<enums.MessageEntity>; media?: enums.InputMedia; date: number }) {
    super();
    this.no_webpage = params.no_webpage;
    this.invert_media = params.invert_media;
    this.reply_to = params.reply_to;
    this.message = params.message;
    this.entities = params.entities;
    this.media = params.media;
    this.date = params.date;
  }
}

/** Featured stickers haven't changed */
export class messages_FeaturedStickersNotModified_ extends _messages_FeaturedStickers_ {
  /** Total number of featured stickers */
  count: number;

  protected get [id](): number {
    return 0xC6DC0C66;
  }

  static get [name](): string {
    return "messages.featuredStickersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { count: number }) {
    super();
    this.count = params.count;
  }
}

/** Featured stickersets */
export class messages_FeaturedStickers_ extends _messages_FeaturedStickers_ {
  /** Whether this is a premium stickerset */
  premium?: true;
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Total number of featured stickers */
  count: number;
  /** Featured stickersets */
  sets: Array<enums.StickerSetCovered>;
  /** IDs of new featured stickersets */
  unread: Array<bigint>;

  protected get [id](): number {
    return 0xBE382906;
  }

  static get [name](): string {
    return "messages.featuredStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["premium", "true", "flags.0?true"],
      ["hash", "bigint", "long"],
      ["count", "number", "int"],
      ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
      ["unread", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.premium ?? null, "true", "flags.0?true"],
      [this.hash, "bigint", "long"],
      [this.count, "number", "int"],
      [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
      [this.unread, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { premium?: true; hash: bigint; count: number; sets: Array<enums.StickerSetCovered>; unread: Array<bigint> }) {
    super();
    this.premium = params.premium;
    this.hash = params.hash;
    this.count = params.count;
    this.sets = params.sets;
    this.unread = params.unread;
  }
}

/** No new recent sticker was found */
export class messages_RecentStickersNotModified_ extends _messages_RecentStickers_ {
  protected get [id](): number {
    return 0x0B17F890;
  }

  static get [name](): string {
    return "messages.recentStickersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Recently used stickers */
export class messages_RecentStickers_ extends _messages_RecentStickers_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Emojis associated to stickers */
  packs: Array<enums.StickerPack>;
  /** Recent stickers */
  stickers: Array<enums.Document>;
  /** When was each sticker last used */
  dates: Array<number>;

  protected get [id](): number {
    return 0x88D37C56;
  }

  static get [name](): string {
    return "messages.recentStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["packs", [_StickerPack_], "Vector<StickerPack>"],
      ["stickers", [_Document_], "Vector<Document>"],
      ["dates", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.packs, [_StickerPack_], "Vector<StickerPack>"],
      [this.stickers, [_Document_], "Vector<Document>"],
      [this.dates, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { hash: bigint; packs: Array<enums.StickerPack>; stickers: Array<enums.Document>; dates: Array<number> }) {
    super();
    this.hash = params.hash;
    this.packs = params.packs;
    this.stickers = params.stickers;
    this.dates = params.dates;
  }
}

/** Archived stickersets */
export class messages_ArchivedStickers_ extends _messages_ArchivedStickers_ {
  /** Number of archived stickers */
  count: number;
  /** Archived stickersets */
  sets: Array<enums.StickerSetCovered>;

  protected get [id](): number {
    return 0x4FCBA9C8;
  }

  static get [name](): string {
    return "messages.archivedStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
    ];
  }

  constructor(params: { count: number; sets: Array<enums.StickerSetCovered> }) {
    super();
    this.count = params.count;
    this.sets = params.sets;
  }
}

/** The stickerset was installed successfully */
export class messages_StickerSetInstallResultSuccess_ extends _messages_StickerSetInstallResult_ {
  protected get [id](): number {
    return 0x38641628;
  }

  static get [name](): string {
    return "messages.stickerSetInstallResultSuccess"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The stickerset was installed, but since there are too many stickersets some were archived */
export class messages_StickerSetInstallResultArchive_ extends _messages_StickerSetInstallResult_ {
  /** Archived stickersets */
  sets: Array<enums.StickerSetCovered>;

  protected get [id](): number {
    return 0x35E410A8;
  }

  static get [name](): string {
    return "messages.stickerSetInstallResultArchive"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
    ];
  }

  constructor(params: { sets: Array<enums.StickerSetCovered> }) {
    super();
    this.sets = params.sets;
  }
}

/** Stickerset with a single sticker as preview */
export class StickerSetCovered_ extends _StickerSetCovered_ {
  /** Stickerset */
  set: enums.StickerSet;
  /** Preview */
  cover: enums.Document;

  protected get [id](): number {
    return 0x6410A5D2;
  }

  static get [name](): string {
    return "stickerSetCovered"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["set", _StickerSet_, "StickerSet"],
      ["cover", _Document_, "Document"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.set, _StickerSet_, "StickerSet"],
      [this.cover, _Document_, "Document"],
    ];
  }

  constructor(params: { set: enums.StickerSet; cover: enums.Document }) {
    super();
    this.set = params.set;
    this.cover = params.cover;
  }
}

/** Stickerset, with multiple stickers as preview */
export class StickerSetMultiCovered_ extends _StickerSetCovered_ {
  /** Stickerset */
  set: enums.StickerSet;
  /** Preview stickers */
  covers: Array<enums.Document>;

  protected get [id](): number {
    return 0x3407E51B;
  }

  static get [name](): string {
    return "stickerSetMultiCovered"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["set", _StickerSet_, "StickerSet"],
      ["covers", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.set, _StickerSet_, "StickerSet"],
      [this.covers, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { set: enums.StickerSet; covers: Array<enums.Document> }) {
    super();
    this.set = params.set;
    this.covers = params.covers;
  }
}

/** Stickerset preview with all stickers of the stickerset included.  
Currently used only for [custom emoji stickersets](https://core.telegram.org/api/custom-emoji), to avoid a further call to [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet). */
export class StickerSetFullCovered_ extends _StickerSetCovered_ {
  /** Stickerset */
  set: enums.StickerSet;
  /** Emoji information about every sticker in the stickerset */
  packs: Array<enums.StickerPack>;
  /** Keywords for some or every sticker in the stickerset. */
  keywords: Array<enums.StickerKeyword>;
  /** Stickers */
  documents: Array<enums.Document>;

  protected get [id](): number {
    return 0x40D13C0E;
  }

  static get [name](): string {
    return "stickerSetFullCovered"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["set", _StickerSet_, "StickerSet"],
      ["packs", [_StickerPack_], "Vector<StickerPack>"],
      ["keywords", [_StickerKeyword_], "Vector<StickerKeyword>"],
      ["documents", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.set, _StickerSet_, "StickerSet"],
      [this.packs, [_StickerPack_], "Vector<StickerPack>"],
      [this.keywords, [_StickerKeyword_], "Vector<StickerKeyword>"],
      [this.documents, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { set: enums.StickerSet; packs: Array<enums.StickerPack>; keywords: Array<enums.StickerKeyword>; documents: Array<enums.Document> }) {
    super();
    this.set = params.set;
    this.packs = params.packs;
    this.keywords = params.keywords;
    this.documents = params.documents;
  }
}

/** Just the stickerset information, with no previews. */
export class StickerSetNoCovered_ extends _StickerSetCovered_ {
  /** Stickerset information. */
  set: enums.StickerSet;

  protected get [id](): number {
    return 0x77B15D1C;
  }

  static get [name](): string {
    return "stickerSetNoCovered"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["set", _StickerSet_, "StickerSet"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.set, _StickerSet_, "StickerSet"],
    ];
  }

  constructor(params: { set: enums.StickerSet }) {
    super();
    this.set = params.set;
  }
}

/** Position on a photo where a mask should be placed when [attaching stickers to media »](https://core.telegram.org/api/stickers#attached-stickers) */
export class MaskCoords_ extends _MaskCoords_ {
  /** Part of the face, relative to which the mask should be placed */
  n: number;
  /** Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position) */
  x: number;
  /** Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just below the default mask position) */
  y: number;
  /** Mask scaling coefficient. (For example, 2.0 means a doubled size) */
  zoom: number;

  protected get [id](): number {
    return 0xAED6DBB2;
  }

  static get [name](): string {
    return "maskCoords"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["n", "number", "int"],
      ["x", "number", "double"],
      ["y", "number", "double"],
      ["zoom", "number", "double"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.n, "number", "int"],
      [this.x, "number", "double"],
      [this.y, "number", "double"],
      [this.zoom, "number", "double"],
    ];
  }

  constructor(params: { n: number; x: number; y: number; zoom: number }) {
    super();
    this.n = params.n;
    this.x = params.x;
    this.y = params.y;
    this.zoom = params.zoom;
  }
}

/** A photo with stickers attached */
export class InputStickeredMediaPhoto_ extends _InputStickeredMedia_ {
  /** The photo */
  id: enums.InputPhoto;

  protected get [id](): number {
    return 0x4A992157;
  }

  static get [name](): string {
    return "inputStickeredMediaPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", _InputPhoto_, "InputPhoto"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, _InputPhoto_, "InputPhoto"],
    ];
  }

  constructor(params: { id: enums.InputPhoto }) {
    super();
    this.id = params.id;
  }
}

/** A document with stickers attached */
export class InputStickeredMediaDocument_ extends _InputStickeredMedia_ {
  /** The document */
  id: enums.InputDocument;

  protected get [id](): number {
    return 0x0438865B;
  }

  static get [name](): string {
    return "inputStickeredMediaDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", _InputDocument_, "InputDocument"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, _InputDocument_, "InputDocument"],
    ];
  }

  constructor(params: { id: enums.InputDocument }) {
    super();
    this.id = params.id;
  }
}

/** Indicates an already sent game */
export class Game_ extends _Game_ {
  /** ID of the game */
  id: bigint;
  /** Access hash of the game */
  access_hash: bigint;
  /** Short name for the game */
  short_name: string;
  /** Title of the game */
  title: string;
  /** Game description */
  description: string;
  /** Game preview */
  photo: enums.Photo;
  /** Optional attached document */
  document?: enums.Document;

  protected get [id](): number {
    return 0xBDF9653B;
  }

  static get [name](): string {
    return "game"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["short_name", "string", "string"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _Photo_, "Photo"],
      ["document", _Document_, "flags.0?Document"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.short_name, "string", "string"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo, _Photo_, "Photo"],
      [this.document ?? null, _Document_, "flags.0?Document"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; short_name: string; title: string; description: string; photo: enums.Photo; document?: enums.Document }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.short_name = params.short_name;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.document = params.document;
  }
}

/** Indicates an already sent game */
export class InputGameID_ extends _InputGame_ {
  /** game ID from [Game](https://core.telegram.org/type/Game) constructor */
  id: bigint;
  /** access hash from [Game](https://core.telegram.org/type/Game) constructor */
  access_hash: bigint;

  protected get [id](): number {
    return 0x032C3E77;
  }

  static get [name](): string {
    return "inputGameID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Game by short name */
export class InputGameShortName_ extends _InputGame_ {
  /** The bot that provides the game */
  bot_id: enums.InputUser;
  /** The game's short name, usually obtained from a [game link »](https://core.telegram.org/api/links#game-links) */
  short_name: string;

  protected get [id](): number {
    return 0xC331E80A;
  }

  static get [name](): string {
    return "inputGameShortName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bot_id", _InputUser_, "InputUser"],
      ["short_name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bot_id, _InputUser_, "InputUser"],
      [this.short_name, "string", "string"],
    ];
  }

  constructor(params: { bot_id: enums.InputUser; short_name: string }) {
    super();
    this.bot_id = params.bot_id;
    this.short_name = params.short_name;
  }
}

/** Game highscore */
export class HighScore_ extends _HighScore_ {
  /** Position in highscore list */
  pos: number;
  /** User ID */
  user_id: bigint;
  /** Score */
  score: number;

  protected get [id](): number {
    return 0x73A379EB;
  }

  static get [name](): string {
    return "highScore"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pos", "number", "int"],
      ["user_id", "bigint", "long"],
      ["score", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pos, "number", "int"],
      [this.user_id, "bigint", "long"],
      [this.score, "number", "int"],
    ];
  }

  constructor(params: { pos: number; user_id: bigint; score: number }) {
    super();
    this.pos = params.pos;
    this.user_id = params.user_id;
    this.score = params.score;
  }
}

/** Highscores in a game */
export class messages_HighScores_ extends _messages_HighScores_ {
  /** Highscores */
  scores: Array<enums.HighScore>;
  /** Users, associated to the highscores */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x9A3BFD99;
  }

  static get [name](): string {
    return "messages.highScores"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["scores", [_HighScore_], "Vector<HighScore>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.scores, [_HighScore_], "Vector<HighScore>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { scores: Array<enums.HighScore>; users: Array<enums.User> }) {
    super();
    this.scores = params.scores;
    this.users = params.users;
  }
}

/** Empty rich text element */
export class TextEmpty_ extends _RichText_ {
  protected get [id](): number {
    return 0xDC3D824F;
  }

  static get [name](): string {
    return "textEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Plain text */
export class TextPlain_ extends _RichText_ {
  /** Text */
  text: string;

  protected get [id](): number {
    return 0x744694E0;
  }

  static get [name](): string {
    return "textPlain"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { text: string }) {
    super();
    this.text = params.text;
  }
}

/** **Bold** text */
export class TextBold_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x6724ABC4;
  }

  static get [name](): string {
    return "textBold"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** _Italic_ text */
export class TextItalic_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0xD912A59C;
  }

  static get [name](): string {
    return "textItalic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Underlined text */
export class TextUnderline_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0xC12622C4;
  }

  static get [name](): string {
    return "textUnderline"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Strikethrough text */
export class TextStrike_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x9BF8BB95;
  }

  static get [name](): string {
    return "textStrike"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** `fixed-width` rich text */
export class TextFixed_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x6C3F19B9;
  }

  static get [name](): string {
    return "textFixed"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Link */
export class TextUrl_ extends _RichText_ {
  /** Text of link */
  text: enums.RichText;
  /** Webpage HTTP URL */
  url: string;
  /** If a preview was already generated for the page, the page ID */
  webpage_id: bigint;

  protected get [id](): number {
    return 0x3C2884C1;
  }

  static get [name](): string {
    return "textUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["url", "string", "string"],
      ["webpage_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.url, "string", "string"],
      [this.webpage_id, "bigint", "long"],
    ];
  }

  constructor(params: { text: enums.RichText; url: string; webpage_id: bigint }) {
    super();
    this.text = params.text;
    this.url = params.url;
    this.webpage_id = params.webpage_id;
  }
}

/** Rich text email link */
export class TextEmail_ extends _RichText_ {
  /** Link text */
  text: enums.RichText;
  /** Email address */
  email: string;

  protected get [id](): number {
    return 0xDE5A0DD6;
  }

  static get [name](): string {
    return "textEmail"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["email", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.email, "string", "string"],
    ];
  }

  constructor(params: { text: enums.RichText; email: string }) {
    super();
    this.text = params.text;
    this.email = params.email;
  }
}

/** Concatenation of rich texts */
export class TextConcat_ extends _RichText_ {
  /** Concatenated rich texts */
  texts: Array<enums.RichText>;

  protected get [id](): number {
    return 0x7E6260D7;
  }

  static get [name](): string {
    return "textConcat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["texts", [_RichText_], "Vector<RichText>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.texts, [_RichText_], "Vector<RichText>"],
    ];
  }

  constructor(params: { texts: Array<enums.RichText> }) {
    super();
    this.texts = params.texts;
  }
}

/** Subscript text */
export class TextSubscript_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0xED6A8504;
  }

  static get [name](): string {
    return "textSubscript"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Superscript text */
export class TextSuperscript_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0xC7FB5E01;
  }

  static get [name](): string {
    return "textSuperscript"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Highlighted text */
export class TextMarked_ extends _RichText_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x034B8621;
  }

  static get [name](): string {
    return "textMarked"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Rich text linked to a phone number */
export class TextPhone_ extends _RichText_ {
  /** Text */
  text: enums.RichText;
  /** Phone number */
  phone: string;

  protected get [id](): number {
    return 0x1CCB966A;
  }

  static get [name](): string {
    return "textPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["phone", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.phone, "string", "string"],
    ];
  }

  constructor(params: { text: enums.RichText; phone: string }) {
    super();
    this.text = params.text;
    this.phone = params.phone;
  }
}

/** Inline image */
export class TextImage_ extends _RichText_ {
  /** Document ID */
  document_id: bigint;
  /** Width */
  w: number;
  /** Height */
  h: number;

  protected get [id](): number {
    return 0x081CCF4F;
  }

  static get [name](): string {
    return "textImage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["document_id", "bigint", "long"],
      ["w", "number", "int"],
      ["h", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.document_id, "bigint", "long"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
    ];
  }

  constructor(params: { document_id: bigint; w: number; h: number }) {
    super();
    this.document_id = params.document_id;
    this.w = params.w;
    this.h = params.h;
  }
}

/** Text linking to another section of the page */
export class TextAnchor_ extends _RichText_ {
  /** Text */
  text: enums.RichText;
  /** Section name */
  name: string;

  protected get [id](): number {
    return 0x35553762;
  }

  static get [name](): string {
    return "textAnchor"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.name, "string", "string"],
    ];
  }

  constructor(params: { text: enums.RichText; name: string }) {
    super();
    this.text = params.text;
    this.name = params.name;
  }
}

/** Unsupported IV element */
export class PageBlockUnsupported_ extends _PageBlock_ {
  protected get [id](): number {
    return 0x13567E8A;
  }

  static get [name](): string {
    return "pageBlockUnsupported"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Title */
export class PageBlockTitle_ extends _PageBlock_ {
  /** Title */
  text: enums.RichText;

  protected get [id](): number {
    return 0x70ABC3FD;
  }

  static get [name](): string {
    return "pageBlockTitle"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Subtitle */
export class PageBlockSubtitle_ extends _PageBlock_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x8FFA9A1F;
  }

  static get [name](): string {
    return "pageBlockSubtitle"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Author and date of creation of article */
export class PageBlockAuthorDate_ extends _PageBlock_ {
  /** Author name */
  author: enums.RichText;
  /** Date of publication */
  published_date: number;

  protected get [id](): number {
    return 0xBAAFE5E0;
  }

  static get [name](): string {
    return "pageBlockAuthorDate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["author", _RichText_, "RichText"],
      ["published_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.author, _RichText_, "RichText"],
      [this.published_date, "number", "int"],
    ];
  }

  constructor(params: { author: enums.RichText; published_date: number }) {
    super();
    this.author = params.author;
    this.published_date = params.published_date;
  }
}

/** Page header */
export class PageBlockHeader_ extends _PageBlock_ {
  /** Contents */
  text: enums.RichText;

  protected get [id](): number {
    return 0xBFD064EC;
  }

  static get [name](): string {
    return "pageBlockHeader"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Subheader */
export class PageBlockSubheader_ extends _PageBlock_ {
  /** Subheader */
  text: enums.RichText;

  protected get [id](): number {
    return 0xF12BB6E1;
  }

  static get [name](): string {
    return "pageBlockSubheader"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** A paragraph */
export class PageBlockParagraph_ extends _PageBlock_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x467A0766;
  }

  static get [name](): string {
    return "pageBlockParagraph"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Preformatted (`<pre>` text) */
export class PageBlockPreformatted_ extends _PageBlock_ {
  /** Text */
  text: enums.RichText;
  /** Programming language of preformatted text */
  language: string;

  protected get [id](): number {
    return 0xC070D93E;
  }

  static get [name](): string {
    return "pageBlockPreformatted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["language", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.language, "string", "string"],
    ];
  }

  constructor(params: { text: enums.RichText; language: string }) {
    super();
    this.text = params.text;
    this.language = params.language;
  }
}

/** Page footer */
export class PageBlockFooter_ extends _PageBlock_ {
  /** Contents */
  text: enums.RichText;

  protected get [id](): number {
    return 0x48870999;
  }

  static get [name](): string {
    return "pageBlockFooter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** An empty block separating a page */
export class PageBlockDivider_ extends _PageBlock_ {
  protected get [id](): number {
    return 0xDB20B188;
  }

  static get [name](): string {
    return "pageBlockDivider"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Link to section within the page itself (like `<a href="#target">anchor</a>`) */
export class PageBlockAnchor_ extends _PageBlock_ {
  /** Name of target section */
  name: string;

  protected get [id](): number {
    return 0xCE0D37B0;
  }

  static get [name](): string {
    return "pageBlockAnchor"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.name, "string", "string"],
    ];
  }

  constructor(params: { name: string }) {
    super();
    this.name = params.name;
  }
}

/** Unordered list of IV blocks */
export class PageBlockList_ extends _PageBlock_ {
  /** List of blocks in an IV page */
  items: Array<enums.PageListItem>;

  protected get [id](): number {
    return 0xE4E88011;
  }

  static get [name](): string {
    return "pageBlockList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["items", [_PageListItem_], "Vector<PageListItem>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.items, [_PageListItem_], "Vector<PageListItem>"],
    ];
  }

  constructor(params: { items: Array<enums.PageListItem> }) {
    super();
    this.items = params.items;
  }
}

/** Quote (equivalent to the HTML `<blockquote>`) */
export class PageBlockBlockquote_ extends _PageBlock_ {
  /** Quote contents */
  text: enums.RichText;
  /** Caption */
  caption: enums.RichText;

  protected get [id](): number {
    return 0x263D7C26;
  }

  static get [name](): string {
    return "pageBlockBlockquote"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["caption", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.caption, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText; caption: enums.RichText }) {
    super();
    this.text = params.text;
    this.caption = params.caption;
  }
}

/** Pullquote */
export class PageBlockPullquote_ extends _PageBlock_ {
  /** Text */
  text: enums.RichText;
  /** Caption */
  caption: enums.RichText;

  protected get [id](): number {
    return 0x4F4456D3;
  }

  static get [name](): string {
    return "pageBlockPullquote"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["caption", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.caption, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText; caption: enums.RichText }) {
    super();
    this.text = params.text;
    this.caption = params.caption;
  }
}

/** A photo */
export class PageBlockPhoto_ extends _PageBlock_ {
  /** Photo ID */
  photo_id: bigint;
  /** Caption */
  caption: enums.PageCaption;
  /** HTTP URL of page the photo leads to when clicked */
  url?: string;
  /** ID of preview of the page the photo leads to when clicked */
  webpage_id?: bigint;

  protected get [id](): number {
    return 0x1759C560;
  }

  static get [name](): string {
    return "pageBlockPhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["photo_id", "bigint", "long"],
      ["caption", _PageCaption_, "PageCaption"],
      ["url", "string", "flags.0?string"],
      ["webpage_id", "bigint", "flags.0?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.photo_id, "bigint", "long"],
      [this.caption, _PageCaption_, "PageCaption"],
      [this.url ?? null, "string", "flags.0?string"],
      [this.webpage_id ?? null, "bigint", "flags.0?long"],
    ];
  }

  constructor(params: { photo_id: bigint; caption: enums.PageCaption; url?: string; webpage_id?: bigint }) {
    super();
    this.photo_id = params.photo_id;
    this.caption = params.caption;
    this.url = params.url;
    this.webpage_id = params.webpage_id;
  }
}

/** Video */
export class PageBlockVideo_ extends _PageBlock_ {
  /** Whether the video is set to autoplay */
  autoplay?: true;
  /** Whether the video is set to loop */
  loop?: true;
  /** Video ID */
  video_id: bigint;
  /** Caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0x7C8FE7B6;
  }

  static get [name](): string {
    return "pageBlockVideo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["autoplay", "true", "flags.0?true"],
      ["loop", "true", "flags.1?true"],
      ["video_id", "bigint", "long"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.autoplay ?? null, "true", "flags.0?true"],
      [this.loop ?? null, "true", "flags.1?true"],
      [this.video_id, "bigint", "long"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { autoplay?: true; loop?: true; video_id: bigint; caption: enums.PageCaption }) {
    super();
    this.autoplay = params.autoplay;
    this.loop = params.loop;
    this.video_id = params.video_id;
    this.caption = params.caption;
  }
}

/** A page cover */
export class PageBlockCover_ extends _PageBlock_ {
  /** Cover */
  cover: enums.PageBlock;

  protected get [id](): number {
    return 0x39F23300;
  }

  static get [name](): string {
    return "pageBlockCover"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["cover", _PageBlock_, "PageBlock"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.cover, _PageBlock_, "PageBlock"],
    ];
  }

  constructor(params: { cover: enums.PageBlock }) {
    super();
    this.cover = params.cover;
  }
}

/** An embedded webpage */
export class PageBlockEmbed_ extends _PageBlock_ {
  /** Whether the block should be full width */
  full_width?: true;
  /** Whether scrolling should be allowed */
  allow_scrolling?: true;
  /** Web page URL, if available */
  url?: string;
  /** HTML-markup of the embedded page */
  html?: string;
  /** Poster photo, if available */
  poster_photo_id?: bigint;
  /** Block width, if known */
  w?: number;
  /** Block height, if known */
  h?: number;
  /** Caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0xA8718DC5;
  }

  static get [name](): string {
    return "pageBlockEmbed"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["full_width", "true", "flags.0?true"],
      ["allow_scrolling", "true", "flags.3?true"],
      ["url", "string", "flags.1?string"],
      ["html", "string", "flags.2?string"],
      ["poster_photo_id", "bigint", "flags.4?long"],
      ["w", "number", "flags.5?int"],
      ["h", "number", "flags.5?int"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.full_width ?? null, "true", "flags.0?true"],
      [this.allow_scrolling ?? null, "true", "flags.3?true"],
      [this.url ?? null, "string", "flags.1?string"],
      [this.html ?? null, "string", "flags.2?string"],
      [this.poster_photo_id ?? null, "bigint", "flags.4?long"],
      [this.w ?? null, "number", "flags.5?int"],
      [this.h ?? null, "number", "flags.5?int"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { full_width?: true; allow_scrolling?: true; url?: string; html?: string; poster_photo_id?: bigint; w?: number; h?: number; caption: enums.PageCaption }) {
    super();
    this.full_width = params.full_width;
    this.allow_scrolling = params.allow_scrolling;
    this.url = params.url;
    this.html = params.html;
    this.poster_photo_id = params.poster_photo_id;
    this.w = params.w;
    this.h = params.h;
    this.caption = params.caption;
  }
}

/** An embedded post */
export class PageBlockEmbedPost_ extends _PageBlock_ {
  /** Web page URL */
  url: string;
  /** ID of generated webpage preview */
  webpage_id: bigint;
  /** ID of the author's photo */
  author_photo_id: bigint;
  /** Author name */
  author: string;
  /** Creation date */
  date: number;
  /** Post contents */
  blocks: Array<enums.PageBlock>;
  /** Caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0xF259A80B;
  }

  static get [name](): string {
    return "pageBlockEmbedPost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["webpage_id", "bigint", "long"],
      ["author_photo_id", "bigint", "long"],
      ["author", "string", "string"],
      ["date", "number", "int"],
      ["blocks", [_PageBlock_], "Vector<PageBlock>"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.webpage_id, "bigint", "long"],
      [this.author_photo_id, "bigint", "long"],
      [this.author, "string", "string"],
      [this.date, "number", "int"],
      [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { url: string; webpage_id: bigint; author_photo_id: bigint; author: string; date: number; blocks: Array<enums.PageBlock>; caption: enums.PageCaption }) {
    super();
    this.url = params.url;
    this.webpage_id = params.webpage_id;
    this.author_photo_id = params.author_photo_id;
    this.author = params.author;
    this.date = params.date;
    this.blocks = params.blocks;
    this.caption = params.caption;
  }
}

/** Collage of media */
export class PageBlockCollage_ extends _PageBlock_ {
  /** Media elements */
  items: Array<enums.PageBlock>;
  /** Caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0x65A0FA4D;
  }

  static get [name](): string {
    return "pageBlockCollage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["items", [_PageBlock_], "Vector<PageBlock>"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.items, [_PageBlock_], "Vector<PageBlock>"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { items: Array<enums.PageBlock>; caption: enums.PageCaption }) {
    super();
    this.items = params.items;
    this.caption = params.caption;
  }
}

/** Slideshow */
export class PageBlockSlideshow_ extends _PageBlock_ {
  /** Slideshow items */
  items: Array<enums.PageBlock>;
  /** Caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0x031F9590;
  }

  static get [name](): string {
    return "pageBlockSlideshow"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["items", [_PageBlock_], "Vector<PageBlock>"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.items, [_PageBlock_], "Vector<PageBlock>"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { items: Array<enums.PageBlock>; caption: enums.PageCaption }) {
    super();
    this.items = params.items;
    this.caption = params.caption;
  }
}

/** Reference to a telegram channel */
export class PageBlockChannel_ extends _PageBlock_ {
  /** The channel/supergroup/chat */
  channel: enums.Chat;

  protected get [id](): number {
    return 0xEF1751B5;
  }

  static get [name](): string {
    return "pageBlockChannel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel", _Chat_, "Chat"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel, _Chat_, "Chat"],
    ];
  }

  constructor(params: { channel: enums.Chat }) {
    super();
    this.channel = params.channel;
  }
}

/** Audio */
export class PageBlockAudio_ extends _PageBlock_ {
  /** Audio ID (to be fetched from the container [page](https://core.telegram.org/constructor/page) constructor */
  audio_id: bigint;
  /** Audio caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0x804361EA;
  }

  static get [name](): string {
    return "pageBlockAudio"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["audio_id", "bigint", "long"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.audio_id, "bigint", "long"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { audio_id: bigint; caption: enums.PageCaption }) {
    super();
    this.audio_id = params.audio_id;
    this.caption = params.caption;
  }
}

/** Kicker */
export class PageBlockKicker_ extends _PageBlock_ {
  /** Contents */
  text: enums.RichText;

  protected get [id](): number {
    return 0x1E148390;
  }

  static get [name](): string {
    return "pageBlockKicker"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** Table */
export class PageBlockTable_ extends _PageBlock_ {
  /** Does the table have a visible border? */
  bordered?: true;
  /** Is the table striped? */
  striped?: true;
  /** Title */
  title: enums.RichText;
  /** Table rows */
  rows: Array<enums.PageTableRow>;

  protected get [id](): number {
    return 0xBF4DEA82;
  }

  static get [name](): string {
    return "pageBlockTable"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["bordered", "true", "flags.0?true"],
      ["striped", "true", "flags.1?true"],
      ["title", _RichText_, "RichText"],
      ["rows", [_PageTableRow_], "Vector<PageTableRow>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.bordered ?? null, "true", "flags.0?true"],
      [this.striped ?? null, "true", "flags.1?true"],
      [this.title, _RichText_, "RichText"],
      [this.rows, [_PageTableRow_], "Vector<PageTableRow>"],
    ];
  }

  constructor(params: { bordered?: true; striped?: true; title: enums.RichText; rows: Array<enums.PageTableRow> }) {
    super();
    this.bordered = params.bordered;
    this.striped = params.striped;
    this.title = params.title;
    this.rows = params.rows;
  }
}

/** Ordered list of IV blocks */
export class PageBlockOrderedList_ extends _PageBlock_ {
  /** List items */
  items: Array<enums.PageListOrderedItem>;

  protected get [id](): number {
    return 0x9A8AE1E1;
  }

  static get [name](): string {
    return "pageBlockOrderedList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["items", [_PageListOrderedItem_], "Vector<PageListOrderedItem>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.items, [_PageListOrderedItem_], "Vector<PageListOrderedItem>"],
    ];
  }

  constructor(params: { items: Array<enums.PageListOrderedItem> }) {
    super();
    this.items = params.items;
  }
}

/** A collapsible details block */
export class PageBlockDetails_ extends _PageBlock_ {
  /** Whether the block is open by default */
  open?: true;
  /** Block contents */
  blocks: Array<enums.PageBlock>;
  /** Always visible heading for the block */
  title: enums.RichText;

  protected get [id](): number {
    return 0x76768BED;
  }

  static get [name](): string {
    return "pageBlockDetails"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["open", "true", "flags.0?true"],
      ["blocks", [_PageBlock_], "Vector<PageBlock>"],
      ["title", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.open ?? null, "true", "flags.0?true"],
      [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
      [this.title, _RichText_, "RichText"],
    ];
  }

  constructor(params: { open?: true; blocks: Array<enums.PageBlock>; title: enums.RichText }) {
    super();
    this.open = params.open;
    this.blocks = params.blocks;
    this.title = params.title;
  }
}

/** Related articles */
export class PageBlockRelatedArticles_ extends _PageBlock_ {
  /** Title */
  title: enums.RichText;
  /** Related articles */
  articles: Array<enums.PageRelatedArticle>;

  protected get [id](): number {
    return 0x16115A96;
  }

  static get [name](): string {
    return "pageBlockRelatedArticles"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", _RichText_, "RichText"],
      ["articles", [_PageRelatedArticle_], "Vector<PageRelatedArticle>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, _RichText_, "RichText"],
      [this.articles, [_PageRelatedArticle_], "Vector<PageRelatedArticle>"],
    ];
  }

  constructor(params: { title: enums.RichText; articles: Array<enums.PageRelatedArticle> }) {
    super();
    this.title = params.title;
    this.articles = params.articles;
  }
}

/** A map */
export class PageBlockMap_ extends _PageBlock_ {
  /** Location of the map center */
  geo: enums.GeoPoint;
  /** Map zoom level; 13-20 */
  zoom: number;
  /** Map width in pixels before applying scale; 16-102 */
  w: number;
  /** Map height in pixels before applying scale; 16-1024 */
  h: number;
  /** Caption */
  caption: enums.PageCaption;

  protected get [id](): number {
    return 0xA44F3EF6;
  }

  static get [name](): string {
    return "pageBlockMap"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo", _GeoPoint_, "GeoPoint"],
      ["zoom", "number", "int"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["caption", _PageCaption_, "PageCaption"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo, _GeoPoint_, "GeoPoint"],
      [this.zoom, "number", "int"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.caption, _PageCaption_, "PageCaption"],
    ];
  }

  constructor(params: { geo: enums.GeoPoint; zoom: number; w: number; h: number; caption: enums.PageCaption }) {
    super();
    this.geo = params.geo;
    this.zoom = params.zoom;
    this.w = params.w;
    this.h = params.h;
    this.caption = params.caption;
  }
}

/** The phone call was missed */
export class PhoneCallDiscardReasonMissed_ extends _PhoneCallDiscardReason_ {
  protected get [id](): number {
    return 0x85E42301;
  }

  static get [name](): string {
    return "phoneCallDiscardReasonMissed"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The phone call was disconnected */
export class PhoneCallDiscardReasonDisconnect_ extends _PhoneCallDiscardReason_ {
  protected get [id](): number {
    return 0xE095C1A0;
  }

  static get [name](): string {
    return "phoneCallDiscardReasonDisconnect"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The phone call was ended normally */
export class PhoneCallDiscardReasonHangup_ extends _PhoneCallDiscardReason_ {
  protected get [id](): number {
    return 0x57ADC690;
  }

  static get [name](): string {
    return "phoneCallDiscardReasonHangup"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The phone call was discarded because the user is busy in another call */
export class PhoneCallDiscardReasonBusy_ extends _PhoneCallDiscardReason_ {
  protected get [id](): number {
    return 0xFAF7E8C9;
  }

  static get [name](): string {
    return "phoneCallDiscardReasonBusy"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a json-encoded object */
export class DataJSON_ extends _DataJSON_ {
  /** JSON-encoded object */
  data: string;

  protected get [id](): number {
    return 0x7D748D04;
  }

  static get [name](): string {
    return "dataJSON"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["data", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.data, "string", "string"],
    ];
  }

  constructor(params: { data: string }) {
    super();
    this.data = params.data;
  }
}

/** This object represents a portion of the price for goods or services. */
export class LabeledPrice_ extends _LabeledPrice_ {
  /** Portion label */
  label: string;
  /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;

  protected get [id](): number {
    return 0xCB296BF8;
  }

  static get [name](): string {
    return "labeledPrice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["label", "string", "string"],
      ["amount", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.label, "string", "string"],
      [this.amount, "bigint", "long"],
    ];
  }

  constructor(params: { label: string; amount: bigint }) {
    super();
    this.label = params.label;
    this.amount = params.amount;
  }
}

/** Invoice */
export class Invoice_ extends _Invoice_ {
  /** Test invoice */
  test?: true;
  /** Set this flag if you require the user's full name to complete the order */
  name_requested?: true;
  /** Set this flag if you require the user's phone number to complete the order */
  phone_requested?: true;
  /** Set this flag if you require the user's email address to complete the order */
  email_requested?: true;
  /** Set this flag if you require the user's shipping address to complete the order */
  shipping_address_requested?: true;
  /** Set this flag if the final price depends on the shipping method */
  flexible?: true;
  /** Set this flag if user's phone number should be sent to provider */
  phone_to_provider?: true;
  /** Set this flag if user's email address should be sent to provider */
  email_to_provider?: true;
  /** Whether this is a recurring payment */
  recurring?: true;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) */
  prices: Array<enums.LabeledPrice>;
  /** The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  max_tip_amount?: bigint;
  /** A vector of suggested amounts of tips in the _smallest units_ of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed `max_tip_amount`. */
  suggested_tip_amounts?: Array<bigint>;
  /** Terms of service URL */
  terms_url?: string;

  protected get [id](): number {
    return 0x5DB95A15;
  }

  static get [name](): string {
    return "invoice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["test", "true", "flags.0?true"],
      ["name_requested", "true", "flags.1?true"],
      ["phone_requested", "true", "flags.2?true"],
      ["email_requested", "true", "flags.3?true"],
      ["shipping_address_requested", "true", "flags.4?true"],
      ["flexible", "true", "flags.5?true"],
      ["phone_to_provider", "true", "flags.6?true"],
      ["email_to_provider", "true", "flags.7?true"],
      ["recurring", "true", "flags.9?true"],
      ["currency", "string", "string"],
      ["prices", [_LabeledPrice_], "Vector<LabeledPrice>"],
      ["max_tip_amount", "bigint", "flags.8?long"],
      ["suggested_tip_amounts", ["bigint"], "flags.8?Vector<long>"],
      ["terms_url", "string", "flags.10?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.test ?? null, "true", "flags.0?true"],
      [this.name_requested ?? null, "true", "flags.1?true"],
      [this.phone_requested ?? null, "true", "flags.2?true"],
      [this.email_requested ?? null, "true", "flags.3?true"],
      [this.shipping_address_requested ?? null, "true", "flags.4?true"],
      [this.flexible ?? null, "true", "flags.5?true"],
      [this.phone_to_provider ?? null, "true", "flags.6?true"],
      [this.email_to_provider ?? null, "true", "flags.7?true"],
      [this.recurring ?? null, "true", "flags.9?true"],
      [this.currency, "string", "string"],
      [this.prices, [_LabeledPrice_], "Vector<LabeledPrice>"],
      [this.max_tip_amount ?? null, "bigint", "flags.8?long"],
      [this.suggested_tip_amounts ?? null, ["bigint"], "flags.8?Vector<long>"],
      [this.terms_url ?? null, "string", "flags.10?string"],
    ];
  }

  constructor(params: { test?: true; name_requested?: true; phone_requested?: true; email_requested?: true; shipping_address_requested?: true; flexible?: true; phone_to_provider?: true; email_to_provider?: true; recurring?: true; currency: string; prices: Array<enums.LabeledPrice>; max_tip_amount?: bigint; suggested_tip_amounts?: Array<bigint>; terms_url?: string }) {
    super();
    this.test = params.test;
    this.name_requested = params.name_requested;
    this.phone_requested = params.phone_requested;
    this.email_requested = params.email_requested;
    this.shipping_address_requested = params.shipping_address_requested;
    this.flexible = params.flexible;
    this.phone_to_provider = params.phone_to_provider;
    this.email_to_provider = params.email_to_provider;
    this.recurring = params.recurring;
    this.currency = params.currency;
    this.prices = params.prices;
    this.max_tip_amount = params.max_tip_amount;
    this.suggested_tip_amounts = params.suggested_tip_amounts;
    this.terms_url = params.terms_url;
  }
}

/** Payment identifier */
export class PaymentCharge_ extends _PaymentCharge_ {
  /** Telegram payment identifier */
  id: string;
  /** Provider payment identifier */
  provider_charge_id: string;

  protected get [id](): number {
    return 0xEA02C27E;
  }

  static get [name](): string {
    return "paymentCharge"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "string", "string"],
      ["provider_charge_id", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "string", "string"],
      [this.provider_charge_id, "string", "string"],
    ];
  }

  constructor(params: { id: string; provider_charge_id: string }) {
    super();
    this.id = params.id;
    this.provider_charge_id = params.provider_charge_id;
  }
}

/** Shipping address */
export class PostAddress_ extends _PostAddress_ {
  /** First line for the address */
  street_line1: string;
  /** Second line for the address */
  street_line2: string;
  /** City */
  city: string;
  /** State, if applicable (empty otherwise) */
  state: string;
  /** ISO 3166-1 alpha-2 country code */
  country_iso2: string;
  /** Address post code */
  post_code: string;

  protected get [id](): number {
    return 0x1E8CAAEB;
  }

  static get [name](): string {
    return "postAddress"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["street_line1", "string", "string"],
      ["street_line2", "string", "string"],
      ["city", "string", "string"],
      ["state", "string", "string"],
      ["country_iso2", "string", "string"],
      ["post_code", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.street_line1, "string", "string"],
      [this.street_line2, "string", "string"],
      [this.city, "string", "string"],
      [this.state, "string", "string"],
      [this.country_iso2, "string", "string"],
      [this.post_code, "string", "string"],
    ];
  }

  constructor(params: { street_line1: string; street_line2: string; city: string; state: string; country_iso2: string; post_code: string }) {
    super();
    this.street_line1 = params.street_line1;
    this.street_line2 = params.street_line2;
    this.city = params.city;
    this.state = params.state;
    this.country_iso2 = params.country_iso2;
    this.post_code = params.post_code;
  }
}

/** Order info provided by the user */
export class PaymentRequestedInfo_ extends _PaymentRequestedInfo_ {
  /** User's full name */
  name?: string;
  /** User's phone number */
  phone?: string;
  /** User's email address */
  email?: string;
  /** User's shipping address */
  shipping_address?: enums.PostAddress;

  protected get [id](): number {
    return 0x909C3F94;
  }

  static get [name](): string {
    return "paymentRequestedInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["name", "string", "flags.0?string"],
      ["phone", "string", "flags.1?string"],
      ["email", "string", "flags.2?string"],
      ["shipping_address", _PostAddress_, "flags.3?PostAddress"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.name ?? null, "string", "flags.0?string"],
      [this.phone ?? null, "string", "flags.1?string"],
      [this.email ?? null, "string", "flags.2?string"],
      [this.shipping_address ?? null, _PostAddress_, "flags.3?PostAddress"],
    ];
  }

  constructor(params?: { name?: string; phone?: string; email?: string; shipping_address?: enums.PostAddress }) {
    super();
    this.name = params?.name;
    this.phone = params?.phone;
    this.email = params?.email;
    this.shipping_address = params?.shipping_address;
  }
}

/** Saved credit card */
export class PaymentSavedCredentialsCard_ extends _PaymentSavedCredentials_ {
  /** Card ID */
  id: string;
  /** Title */
  title: string;

  protected get [id](): number {
    return 0xCDC27A1F;
  }

  static get [name](): string {
    return "paymentSavedCredentialsCard"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "string", "string"],
      ["title", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "string", "string"],
      [this.title, "string", "string"],
    ];
  }

  constructor(params: { id: string; title: string }) {
    super();
    this.id = params.id;
    this.title = params.title;
  }
}

/** Remote document */
export class WebDocument_ extends _WebDocument_ {
  /** Document URL */
  url: string;
  /** Access hash */
  access_hash: bigint;
  /** File size */
  size: number;
  /** MIME type */
  mime_type: string;
  /** Attributes for media types */
  attributes: Array<enums.DocumentAttribute>;

  protected get [id](): number {
    return 0x1C570ED1;
  }

  static get [name](): string {
    return "webDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["access_hash", "bigint", "long"],
      ["size", "number", "int"],
      ["mime_type", "string", "string"],
      ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.access_hash, "bigint", "long"],
      [this.size, "number", "int"],
      [this.mime_type, "string", "string"],
      [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  constructor(params: { url: string; access_hash: bigint; size: number; mime_type: string; attributes: Array<enums.DocumentAttribute> }) {
    super();
    this.url = params.url;
    this.access_hash = params.access_hash;
    this.size = params.size;
    this.mime_type = params.mime_type;
    this.attributes = params.attributes;
  }
}

/** Remote document that can be downloaded without [proxying through telegram](https://core.telegram.org/api/files) */
export class WebDocumentNoProxy_ extends _WebDocument_ {
  /** Document URL */
  url: string;
  /** File size */
  size: number;
  /** MIME type */
  mime_type: string;
  /** Attributes for media types */
  attributes: Array<enums.DocumentAttribute>;

  protected get [id](): number {
    return 0xF9C8BCC6;
  }

  static get [name](): string {
    return "webDocumentNoProxy"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["size", "number", "int"],
      ["mime_type", "string", "string"],
      ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.size, "number", "int"],
      [this.mime_type, "string", "string"],
      [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  constructor(params: { url: string; size: number; mime_type: string; attributes: Array<enums.DocumentAttribute> }) {
    super();
    this.url = params.url;
    this.size = params.size;
    this.mime_type = params.mime_type;
    this.attributes = params.attributes;
  }
}

/** The document */
export class InputWebDocument_ extends _InputWebDocument_ {
  /** Remote document URL to be downloaded using the appropriate [method](https://core.telegram.org/api/files) */
  url: string;
  /** Remote file size */
  size: number;
  /** Mime type */
  mime_type: string;
  /** Attributes for media types */
  attributes: Array<enums.DocumentAttribute>;

  protected get [id](): number {
    return 0x9BED434D;
  }

  static get [name](): string {
    return "inputWebDocument"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["size", "number", "int"],
      ["mime_type", "string", "string"],
      ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.size, "number", "int"],
      [this.mime_type, "string", "string"],
      [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
    ];
  }

  constructor(params: { url: string; size: number; mime_type: string; attributes: Array<enums.DocumentAttribute> }) {
    super();
    this.url = params.url;
    this.size = params.size;
    this.mime_type = params.mime_type;
    this.attributes = params.attributes;
  }
}

/** Location of a remote HTTP(s) file */
export class InputWebFileLocation_ extends _InputWebFileLocation_ {
  /** HTTP URL of file */
  url: string;
  /** Access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0xC239D686;
  }

  static get [name](): string {
    return "inputWebFileLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { url: string; access_hash: bigint }) {
    super();
    this.url = params.url;
    this.access_hash = params.access_hash;
  }
}

/** Used to download a server-generated image with the map preview from a [geoPoint](https://core.telegram.org/constructor/geoPoint), see the [webfile docs for more info »](https://core.telegram.org/api/files#downloading-webfiles). */
export class InputWebFileGeoPointLocation_ extends _InputWebFileLocation_ {
  /** Generated from the `lat`, `long` and `accuracy_radius` parameters of the [geoPoint](https://core.telegram.org/constructor/geoPoint) */
  geo_point: enums.InputGeoPoint;
  /** Access hash of the [geoPoint](https://core.telegram.org/constructor/geoPoint) */
  access_hash: bigint;
  /** Map width in pixels before applying scale; 16-1024 */
  w: number;
  /** Map height in pixels before applying scale; 16-1024 */
  h: number;
  /** Map zoom level; 13-20 */
  zoom: number;
  /** Map scale; 1-3 */
  scale: number;

  protected get [id](): number {
    return 0x9F2221C9;
  }

  static get [name](): string {
    return "inputWebFileGeoPointLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
      ["access_hash", "bigint", "long"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["zoom", "number", "int"],
      ["scale", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
      [this.access_hash, "bigint", "long"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.zoom, "number", "int"],
      [this.scale, "number", "int"],
    ];
  }

  constructor(params: { geo_point: enums.InputGeoPoint; access_hash: bigint; w: number; h: number; zoom: number; scale: number }) {
    super();
    this.geo_point = params.geo_point;
    this.access_hash = params.access_hash;
    this.w = params.w;
    this.h = params.h;
    this.zoom = params.zoom;
    this.scale = params.scale;
  }
}

/** Used to download an album cover for any music file using [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile), see the [webfile docs for more info »](https://core.telegram.org/api/files#downloading-webfiles). */
export class InputWebFileAudioAlbumThumbLocation_ extends _InputWebFileLocation_ {
  /** Used to return a thumbnail with `100x100` resolution (instead of the default `600x600`) */
  small?: true;
  /** The audio file in question: must NOT be provided in secret chats, provide the `title` and `performer` fields instead. */
  document?: enums.InputDocument;
  /** Song title: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits. */
  title?: string;
  /** Song performer: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits. */
  performer?: string;

  protected get [id](): number {
    return 0xF46FE924;
  }

  static get [name](): string {
    return "inputWebFileAudioAlbumThumbLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["small", "true", "flags.2?true"],
      ["document", _InputDocument_, "flags.0?InputDocument"],
      ["title", "string", "flags.1?string"],
      ["performer", "string", "flags.1?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.small ?? null, "true", "flags.2?true"],
      [this.document ?? null, _InputDocument_, "flags.0?InputDocument"],
      [this.title ?? null, "string", "flags.1?string"],
      [this.performer ?? null, "string", "flags.1?string"],
    ];
  }

  constructor(params?: { small?: true; document?: enums.InputDocument; title?: string; performer?: string }) {
    super();
    this.small = params?.small;
    this.document = params?.document;
    this.title = params?.title;
    this.performer = params?.performer;
  }
}

/** Represents a chunk of an [HTTP webfile](https://core.telegram.org/api/files) downloaded through telegram's secure MTProto servers */
export class upload_WebFile_ extends _upload_WebFile_ {
  /** File size */
  size: number;
  /** Mime type */
  mime_type: string;
  /** File type */
  file_type: enums.storage.FileType;
  /** Modified time */
  mtime: number;
  /** Data */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0x21E753BC;
  }

  static get [name](): string {
    return "upload.webFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["size", "number", "int"],
      ["mime_type", "string", "string"],
      ["file_type", _storage_FileType_, "storage.FileType"],
      ["mtime", "number", "int"],
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.size, "number", "int"],
      [this.mime_type, "string", "string"],
      [this.file_type, _storage_FileType_, "storage.FileType"],
      [this.mtime, "number", "int"],
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { size: number; mime_type: string; file_type: enums.storage.FileType; mtime: number; bytes: Uint8Array }) {
    super();
    this.size = params.size;
    this.mime_type = params.mime_type;
    this.file_type = params.file_type;
    this.mtime = params.mtime;
    this.bytes = params.bytes;
  }
}

/** Payment form */
export class payments_PaymentForm_ extends _payments_PaymentForm_ {
  /** Whether the user can choose to save credentials. */
  can_save_credentials?: true;
  /** Indicates that the user can save payment credentials, but only after setting up a [2FA password](https://core.telegram.org/api/srp) (currently the account doesn't have a [2FA password](https://core.telegram.org/api/srp)) */
  password_missing?: true;
  /** Form ID */
  form_id: bigint;
  /** Bot ID */
  bot_id: bigint;
  /** Form title */
  title: string;
  /** Description */
  description: string;
  /** Product photo */
  photo?: enums.WebDocument;
  /** Invoice */
  invoice: enums.Invoice;
  /** Payment provider ID. */
  provider_id: bigint;
  /** Payment form URL */
  url: string;
  /** Payment provider name.  
  One of the following:  
  \- `stripe` */
  native_provider?: string;
  /** Contains information about the payment provider, if available, to support it natively without the need for opening the URL.  
  A JSON object that can contain the following fields:  
    
  \- `apple_pay_merchant_id`: Apple Pay merchant ID  
  \- `google_pay_public_key`: Google Pay public key  
  \- `need_country`: True, if the user country must be provided,  
  \- `need_zip`: True, if the user ZIP/postal code must be provided,  
  \- `need_cardholder_name`: True, if the cardholder name must be provided */
  native_params?: enums.DataJSON;
  /** Additional payment methods */
  additional_methods?: Array<enums.PaymentFormMethod>;
  /** Saved server-side order information */
  saved_info?: enums.PaymentRequestedInfo;
  /** Contains information about saved card credentials */
  saved_credentials?: Array<enums.PaymentSavedCredentials>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xA0058751;
  }

  static get [name](): string {
    return "payments.paymentForm"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["can_save_credentials", "true", "flags.2?true"],
      ["password_missing", "true", "flags.3?true"],
      ["form_id", "bigint", "long"],
      ["bot_id", "bigint", "long"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _WebDocument_, "flags.5?WebDocument"],
      ["invoice", _Invoice_, "Invoice"],
      ["provider_id", "bigint", "long"],
      ["url", "string", "string"],
      ["native_provider", "string", "flags.4?string"],
      ["native_params", _DataJSON_, "flags.4?DataJSON"],
      ["additional_methods", [_PaymentFormMethod_], "flags.6?Vector<PaymentFormMethod>"],
      ["saved_info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      ["saved_credentials", [_PaymentSavedCredentials_], "flags.1?Vector<PaymentSavedCredentials>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.can_save_credentials ?? null, "true", "flags.2?true"],
      [this.password_missing ?? null, "true", "flags.3?true"],
      [this.form_id, "bigint", "long"],
      [this.bot_id, "bigint", "long"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo ?? null, _WebDocument_, "flags.5?WebDocument"],
      [this.invoice, _Invoice_, "Invoice"],
      [this.provider_id, "bigint", "long"],
      [this.url, "string", "string"],
      [this.native_provider ?? null, "string", "flags.4?string"],
      [this.native_params ?? null, _DataJSON_, "flags.4?DataJSON"],
      [this.additional_methods ?? null, [_PaymentFormMethod_], "flags.6?Vector<PaymentFormMethod>"],
      [this.saved_info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      [this.saved_credentials ?? null, [_PaymentSavedCredentials_], "flags.1?Vector<PaymentSavedCredentials>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { can_save_credentials?: true; password_missing?: true; form_id: bigint; bot_id: bigint; title: string; description: string; photo?: enums.WebDocument; invoice: enums.Invoice; provider_id: bigint; url: string; native_provider?: string; native_params?: enums.DataJSON; additional_methods?: Array<enums.PaymentFormMethod>; saved_info?: enums.PaymentRequestedInfo; saved_credentials?: Array<enums.PaymentSavedCredentials>; users: Array<enums.User> }) {
    super();
    this.can_save_credentials = params.can_save_credentials;
    this.password_missing = params.password_missing;
    this.form_id = params.form_id;
    this.bot_id = params.bot_id;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.invoice = params.invoice;
    this.provider_id = params.provider_id;
    this.url = params.url;
    this.native_provider = params.native_provider;
    this.native_params = params.native_params;
    this.additional_methods = params.additional_methods;
    this.saved_info = params.saved_info;
    this.saved_credentials = params.saved_credentials;
    this.users = params.users;
  }
}

/** Validated user-provided info */
export class payments_ValidatedRequestedInfo_ extends _payments_ValidatedRequestedInfo_ {
  /** ID */
  id?: string;
  /** Shipping options */
  shipping_options?: Array<enums.ShippingOption>;

  protected get [id](): number {
    return 0xD1451883;
  }

  static get [name](): string {
    return "payments.validatedRequestedInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "string", "flags.0?string"],
      ["shipping_options", [_ShippingOption_], "flags.1?Vector<ShippingOption>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id ?? null, "string", "flags.0?string"],
      [this.shipping_options ?? null, [_ShippingOption_], "flags.1?Vector<ShippingOption>"],
    ];
  }

  constructor(params?: { id?: string; shipping_options?: Array<enums.ShippingOption> }) {
    super();
    this.id = params?.id;
    this.shipping_options = params?.shipping_options;
  }
}

/** Payment result */
export class payments_PaymentResult_ extends _payments_PaymentResult_ {
  /** Info about the payment */
  updates: enums.Updates;

  protected get [id](): number {
    return 0x4E5F810D;
  }

  static get [name](): string {
    return "payments.paymentResult"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["updates", _Updates_, "Updates"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.updates, _Updates_, "Updates"],
    ];
  }

  constructor(params: { updates: enums.Updates }) {
    super();
    this.updates = params.updates;
  }
}

/** Payment was not successful, additional verification is needed */
export class payments_PaymentVerificationNeeded_ extends _payments_PaymentResult_ {
  /** URL for additional payment credentials verification */
  url: string;

  protected get [id](): number {
    return 0xD8411139;
  }

  static get [name](): string {
    return "payments.paymentVerificationNeeded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Receipt */
export class payments_PaymentReceipt_ extends _payments_PaymentReceipt_ {
  /** Date of generation */
  date: number;
  /** Bot ID */
  bot_id: bigint;
  /** Provider ID */
  provider_id: bigint;
  /** Title */
  title: string;
  /** Description */
  description: string;
  /** Photo */
  photo?: enums.WebDocument;
  /** Invoice */
  invoice: enums.Invoice;
  /** Info */
  info?: enums.PaymentRequestedInfo;
  /** Selected shipping option */
  shipping?: enums.ShippingOption;
  /** Tipped amount */
  tip_amount?: bigint;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  total_amount: bigint;
  /** Payment credential name */
  credentials_title: string;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x70C4FE03;
  }

  static get [name](): string {
    return "payments.paymentReceipt"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["date", "number", "int"],
      ["bot_id", "bigint", "long"],
      ["provider_id", "bigint", "long"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _WebDocument_, "flags.2?WebDocument"],
      ["invoice", _Invoice_, "Invoice"],
      ["info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      ["shipping", _ShippingOption_, "flags.1?ShippingOption"],
      ["tip_amount", "bigint", "flags.3?long"],
      ["currency", "string", "string"],
      ["total_amount", "bigint", "long"],
      ["credentials_title", "string", "string"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.date, "number", "int"],
      [this.bot_id, "bigint", "long"],
      [this.provider_id, "bigint", "long"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo ?? null, _WebDocument_, "flags.2?WebDocument"],
      [this.invoice, _Invoice_, "Invoice"],
      [this.info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
      [this.shipping ?? null, _ShippingOption_, "flags.1?ShippingOption"],
      [this.tip_amount ?? null, "bigint", "flags.3?long"],
      [this.currency, "string", "string"],
      [this.total_amount, "bigint", "long"],
      [this.credentials_title, "string", "string"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { date: number; bot_id: bigint; provider_id: bigint; title: string; description: string; photo?: enums.WebDocument; invoice: enums.Invoice; info?: enums.PaymentRequestedInfo; shipping?: enums.ShippingOption; tip_amount?: bigint; currency: string; total_amount: bigint; credentials_title: string; users: Array<enums.User> }) {
    super();
    this.date = params.date;
    this.bot_id = params.bot_id;
    this.provider_id = params.provider_id;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.invoice = params.invoice;
    this.info = params.info;
    this.shipping = params.shipping;
    this.tip_amount = params.tip_amount;
    this.currency = params.currency;
    this.total_amount = params.total_amount;
    this.credentials_title = params.credentials_title;
    this.users = params.users;
  }
}

/** Saved server-side order information */
export class payments_SavedInfo_ extends _payments_SavedInfo_ {
  /** Whether the user has some saved payment credentials */
  has_saved_credentials?: true;
  /** Saved server-side order information */
  saved_info?: enums.PaymentRequestedInfo;

  protected get [id](): number {
    return 0xFB8FE43C;
  }

  static get [name](): string {
    return "payments.savedInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_saved_credentials", "true", "flags.1?true"],
      ["saved_info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_saved_credentials ?? null, "true", "flags.1?true"],
      [this.saved_info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
    ];
  }

  constructor(params?: { has_saved_credentials?: true; saved_info?: enums.PaymentRequestedInfo }) {
    super();
    this.has_saved_credentials = params?.has_saved_credentials;
    this.saved_info = params?.saved_info;
  }
}

/** Saved payment credentials */
export class InputPaymentCredentialsSaved_ extends _InputPaymentCredentials_ {
  /** Credential ID */
  id: string;
  /** Temporary password */
  tmp_password: Uint8Array;

  protected get [id](): number {
    return 0xC10EB2CF;
  }

  static get [name](): string {
    return "inputPaymentCredentialsSaved"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "string", "string"],
      ["tmp_password", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "string", "string"],
      [this.tmp_password, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { id: string; tmp_password: Uint8Array }) {
    super();
    this.id = params.id;
    this.tmp_password = params.tmp_password;
  }
}

/** Payment credentials */
export class InputPaymentCredentials_ extends _InputPaymentCredentials_ {
  /** Save payment credential for future use */
  save?: true;
  /** Payment credentials */
  data: enums.DataJSON;

  protected get [id](): number {
    return 0x3417D728;
  }

  static get [name](): string {
    return "inputPaymentCredentials"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["save", "true", "flags.0?true"],
      ["data", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.save ?? null, "true", "flags.0?true"],
      [this.data, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { save?: true; data: enums.DataJSON }) {
    super();
    this.save = params.save;
    this.data = params.data;
  }
}

/** Apple pay payment credentials */
export class InputPaymentCredentialsApplePay_ extends _InputPaymentCredentials_ {
  /** Payment data */
  payment_data: enums.DataJSON;

  protected get [id](): number {
    return 0x0AA1C39F;
  }

  static get [name](): string {
    return "inputPaymentCredentialsApplePay"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["payment_data", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.payment_data, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { payment_data: enums.DataJSON }) {
    super();
    this.payment_data = params.payment_data;
  }
}

/** Google Pay payment credentials */
export class InputPaymentCredentialsGooglePay_ extends _InputPaymentCredentials_ {
  /** Payment token */
  payment_token: enums.DataJSON;

  protected get [id](): number {
    return 0x8AC32801;
  }

  static get [name](): string {
    return "inputPaymentCredentialsGooglePay"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["payment_token", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.payment_token, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { payment_token: enums.DataJSON }) {
    super();
    this.payment_token = params.payment_token;
  }
}

/** Temporary payment password */
export class account_TmpPassword_ extends _account_TmpPassword_ {
  /** Temporary password */
  tmp_password: Uint8Array;
  /** Validity period */
  valid_until: number;

  protected get [id](): number {
    return 0xDB64FD34;
  }

  static get [name](): string {
    return "account.tmpPassword"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["tmp_password", Uint8Array, "bytes"],
      ["valid_until", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.tmp_password, Uint8Array, "bytes"],
      [this.valid_until, "number", "int"],
    ];
  }

  constructor(params: { tmp_password: Uint8Array; valid_until: number }) {
    super();
    this.tmp_password = params.tmp_password;
    this.valid_until = params.valid_until;
  }
}

/** Shipping option */
export class ShippingOption_ extends _ShippingOption_ {
  /** Option ID */
  id: string;
  /** Title */
  title: string;
  /** List of price portions */
  prices: Array<enums.LabeledPrice>;

  protected get [id](): number {
    return 0xB6213CDF;
  }

  static get [name](): string {
    return "shippingOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "string", "string"],
      ["title", "string", "string"],
      ["prices", [_LabeledPrice_], "Vector<LabeledPrice>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "string", "string"],
      [this.title, "string", "string"],
      [this.prices, [_LabeledPrice_], "Vector<LabeledPrice>"],
    ];
  }

  constructor(params: { id: string; title: string; prices: Array<enums.LabeledPrice> }) {
    super();
    this.id = params.id;
    this.title = params.title;
    this.prices = params.prices;
  }
}

/** Sticker in a stickerset */
export class InputStickerSetItem_ extends _InputStickerSetItem_ {
  /** The sticker */
  document: enums.InputDocument;
  /** Associated emoji */
  emoji: string;
  /** Coordinates for mask sticker */
  mask_coords?: enums.MaskCoords;
  /** Set of keywords, separated by commas (can't be provided for mask stickers) */
  keywords?: string;

  protected get [id](): number {
    return 0x32DA9E9C;
  }

  static get [name](): string {
    return "inputStickerSetItem"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["document", _InputDocument_, "InputDocument"],
      ["emoji", "string", "string"],
      ["mask_coords", _MaskCoords_, "flags.0?MaskCoords"],
      ["keywords", "string", "flags.1?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.document, _InputDocument_, "InputDocument"],
      [this.emoji, "string", "string"],
      [this.mask_coords ?? null, _MaskCoords_, "flags.0?MaskCoords"],
      [this.keywords ?? null, "string", "flags.1?string"],
    ];
  }

  constructor(params: { document: enums.InputDocument; emoji: string; mask_coords?: enums.MaskCoords; keywords?: string }) {
    super();
    this.document = params.document;
    this.emoji = params.emoji;
    this.mask_coords = params.mask_coords;
    this.keywords = params.keywords;
  }
}

/** Phone call */
export class InputPhoneCall_ extends _InputPhoneCall_ {
  /** Call ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0x1E36FDED;
  }

  static get [name](): string {
    return "inputPhoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Empty constructor */
export class PhoneCallEmpty_ extends _PhoneCall_ {
  /** Call ID */
  id: bigint;

  protected get [id](): number {
    return 0x5366C915;
  }

  static get [name](): string {
    return "phoneCallEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Incoming phone call */
export class PhoneCallWaiting_ extends _PhoneCall_ {
  /** Is this a video call */
  video?: true;
  /** Call ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** Date */
  date: number;
  /** Admin ID */
  admin_id: bigint;
  /** Participant ID */
  participant_id: bigint;
  /** Phone call protocol info */
  protocol: enums.PhoneCallProtocol;
  /** When was the phone call received */
  receive_date?: number;

  protected get [id](): number {
    return 0xC5226F17;
  }

  static get [name](): string {
    return "phoneCallWaiting"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["video", "true", "flags.6?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
      ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
      ["receive_date", "number", "flags.0?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.video ?? null, "true", "flags.6?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
      [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
      [this.receive_date ?? null, "number", "flags.0?int"],
    ];
  }

  constructor(params: { video?: true; id: bigint; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint; protocol: enums.PhoneCallProtocol; receive_date?: number }) {
    super();
    this.video = params.video;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
    this.protocol = params.protocol;
    this.receive_date = params.receive_date;
  }
}

/** Requested phone call */
export class PhoneCallRequested_ extends _PhoneCall_ {
  /** Whether this is a video call */
  video?: true;
  /** Phone call ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** When was the phone call created */
  date: number;
  /** ID of the creator of the phone call */
  admin_id: bigint;
  /** ID of the other participant of the phone call */
  participant_id: bigint;
  /** [Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls) */
  g_a_hash: Uint8Array;
  /** Call protocol info to be passed to libtgvoip */
  protocol: enums.PhoneCallProtocol;

  protected get [id](): number {
    return 0x14B0ED0C;
  }

  static get [name](): string {
    return "phoneCallRequested"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["video", "true", "flags.6?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
      ["g_a_hash", Uint8Array, "bytes"],
      ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.video ?? null, "true", "flags.6?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
      [this.g_a_hash, Uint8Array, "bytes"],
      [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
    ];
  }

  constructor(params: { video?: true; id: bigint; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint; g_a_hash: Uint8Array; protocol: enums.PhoneCallProtocol }) {
    super();
    this.video = params.video;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
    this.g_a_hash = params.g_a_hash;
    this.protocol = params.protocol;
  }
}

/** An accepted phone call */
export class PhoneCallAccepted_ extends _PhoneCall_ {
  /** Whether this is a video call */
  video?: true;
  /** ID of accepted phone call */
  id: bigint;
  /** Access hash of phone call */
  access_hash: bigint;
  /** When was the call accepted */
  date: number;
  /** ID of the call creator */
  admin_id: bigint;
  /** ID of the other user in the call */
  participant_id: bigint;
  /** B parameter for [secure E2E phone call key exchange](https://core.telegram.org/api/end-to-end/voice-calls) */
  g_b: Uint8Array;
  /** Protocol to use for phone call */
  protocol: enums.PhoneCallProtocol;

  protected get [id](): number {
    return 0x3660C311;
  }

  static get [name](): string {
    return "phoneCallAccepted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["video", "true", "flags.6?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
      ["g_b", Uint8Array, "bytes"],
      ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.video ?? null, "true", "flags.6?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
      [this.g_b, Uint8Array, "bytes"],
      [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
    ];
  }

  constructor(params: { video?: true; id: bigint; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint; g_b: Uint8Array; protocol: enums.PhoneCallProtocol }) {
    super();
    this.video = params.video;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
    this.g_b = params.g_b;
    this.protocol = params.protocol;
  }
}

/** Phone call */
export class PhoneCall_ extends _PhoneCall_ {
  /** Whether P2P connection to the other peer is allowed */
  p2p_allowed?: true;
  /** Whether this is a video call */
  video?: true;
  /** Call ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** Date of creation of the call */
  date: number;
  /** User ID of the creator of the call */
  admin_id: bigint;
  /** User ID of the other participant in the call */
  participant_id: bigint;
  /** [Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls) */
  g_a_or_b: Uint8Array;
  /** [Key fingerprint](https://core.telegram.org/api/end-to-end/voice-calls) */
  key_fingerprint: bigint;
  /** Call protocol info to be passed to libtgvoip */
  protocol: enums.PhoneCallProtocol;
  /** List of endpoints the user can connect to to exchange call data */
  connections: Array<enums.PhoneConnection>;
  /** When was the call actually started */
  start_date: number;

  protected get [id](): number {
    return 0x967F7C67;
  }

  static get [name](): string {
    return "phoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["p2p_allowed", "true", "flags.5?true"],
      ["video", "true", "flags.6?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["date", "number", "int"],
      ["admin_id", "bigint", "long"],
      ["participant_id", "bigint", "long"],
      ["g_a_or_b", Uint8Array, "bytes"],
      ["key_fingerprint", "bigint", "long"],
      ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
      ["connections", [_PhoneConnection_], "Vector<PhoneConnection>"],
      ["start_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.p2p_allowed ?? null, "true", "flags.5?true"],
      [this.video ?? null, "true", "flags.6?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.date, "number", "int"],
      [this.admin_id, "bigint", "long"],
      [this.participant_id, "bigint", "long"],
      [this.g_a_or_b, Uint8Array, "bytes"],
      [this.key_fingerprint, "bigint", "long"],
      [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
      [this.connections, [_PhoneConnection_], "Vector<PhoneConnection>"],
      [this.start_date, "number", "int"],
    ];
  }

  constructor(params: { p2p_allowed?: true; video?: true; id: bigint; access_hash: bigint; date: number; admin_id: bigint; participant_id: bigint; g_a_or_b: Uint8Array; key_fingerprint: bigint; protocol: enums.PhoneCallProtocol; connections: Array<enums.PhoneConnection>; start_date: number }) {
    super();
    this.p2p_allowed = params.p2p_allowed;
    this.video = params.video;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.date = params.date;
    this.admin_id = params.admin_id;
    this.participant_id = params.participant_id;
    this.g_a_or_b = params.g_a_or_b;
    this.key_fingerprint = params.key_fingerprint;
    this.protocol = params.protocol;
    this.connections = params.connections;
    this.start_date = params.start_date;
  }
}

/** Indicates a discarded phone call */
export class PhoneCallDiscarded_ extends _PhoneCall_ {
  /** Whether the server required the user to [rate](https://core.telegram.org/method/phone.setCallRating) the call */
  need_rating?: true;
  /** Whether the server required the client to [send](https://core.telegram.org/method/phone.saveCallDebug) the libtgvoip call debug data */
  need_debug?: true;
  /** Whether the call was a video call */
  video?: true;
  /** Call ID */
  id: bigint;
  /** Why was the phone call discarded */
  reason?: enums.PhoneCallDiscardReason;
  /** Duration of the phone call in seconds */
  duration?: number;

  protected get [id](): number {
    return 0x50CA4DE1;
  }

  static get [name](): string {
    return "phoneCallDiscarded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["need_rating", "true", "flags.2?true"],
      ["need_debug", "true", "flags.3?true"],
      ["video", "true", "flags.6?true"],
      ["id", "bigint", "long"],
      ["reason", _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
      ["duration", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.need_rating ?? null, "true", "flags.2?true"],
      [this.need_debug ?? null, "true", "flags.3?true"],
      [this.video ?? null, "true", "flags.6?true"],
      [this.id, "bigint", "long"],
      [this.reason ?? null, _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
      [this.duration ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { need_rating?: true; need_debug?: true; video?: true; id: bigint; reason?: enums.PhoneCallDiscardReason; duration?: number }) {
    super();
    this.need_rating = params.need_rating;
    this.need_debug = params.need_debug;
    this.video = params.video;
    this.id = params.id;
    this.reason = params.reason;
    this.duration = params.duration;
  }
}

/** Identifies an endpoint that can be used to connect to the other user in a phone call */
export class PhoneConnection_ extends _PhoneConnection_ {
  /** Whether TCP should be used */
  tcp?: true;
  /** Endpoint ID */
  id: bigint;
  /** IP address of endpoint */
  ip: string;
  /** IPv6 address of endpoint */
  ipv6: string;
  /** Port ID */
  port: number;
  /** Our peer tag */
  peer_tag: Uint8Array;

  protected get [id](): number {
    return 0x9CC123C7;
  }

  static get [name](): string {
    return "phoneConnection"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["tcp", "true", "flags.0?true"],
      ["id", "bigint", "long"],
      ["ip", "string", "string"],
      ["ipv6", "string", "string"],
      ["port", "number", "int"],
      ["peer_tag", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.tcp ?? null, "true", "flags.0?true"],
      [this.id, "bigint", "long"],
      [this.ip, "string", "string"],
      [this.ipv6, "string", "string"],
      [this.port, "number", "int"],
      [this.peer_tag, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { tcp?: true; id: bigint; ip: string; ipv6: string; port: number; peer_tag: Uint8Array }) {
    super();
    this.tcp = params.tcp;
    this.id = params.id;
    this.ip = params.ip;
    this.ipv6 = params.ipv6;
    this.port = params.port;
    this.peer_tag = params.peer_tag;
  }
}

/** WebRTC connection parameters */
export class PhoneConnectionWebrtc_ extends _PhoneConnection_ {
  /** Whether this is a TURN endpoint */
  turn?: true;
  /** Whether this is a STUN endpoint */
  stun?: true;
  /** Endpoint ID */
  id: bigint;
  /** IP address */
  ip: string;
  /** IPv6 address */
  ipv6: string;
  /** Port */
  port: number;
  /** Username */
  username: string;
  /** Password */
  password: string;

  protected get [id](): number {
    return 0x635FE375;
  }

  static get [name](): string {
    return "phoneConnectionWebrtc"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["turn", "true", "flags.0?true"],
      ["stun", "true", "flags.1?true"],
      ["id", "bigint", "long"],
      ["ip", "string", "string"],
      ["ipv6", "string", "string"],
      ["port", "number", "int"],
      ["username", "string", "string"],
      ["password", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.turn ?? null, "true", "flags.0?true"],
      [this.stun ?? null, "true", "flags.1?true"],
      [this.id, "bigint", "long"],
      [this.ip, "string", "string"],
      [this.ipv6, "string", "string"],
      [this.port, "number", "int"],
      [this.username, "string", "string"],
      [this.password, "string", "string"],
    ];
  }

  constructor(params: { turn?: true; stun?: true; id: bigint; ip: string; ipv6: string; port: number; username: string; password: string }) {
    super();
    this.turn = params.turn;
    this.stun = params.stun;
    this.id = params.id;
    this.ip = params.ip;
    this.ipv6 = params.ipv6;
    this.port = params.port;
    this.username = params.username;
    this.password = params.password;
  }
}

/** Protocol info for libtgvoip */
export class PhoneCallProtocol_ extends _PhoneCallProtocol_ {
  /** Whether to allow P2P connection to the other participant */
  udp_p2p?: true;
  /** Whether to allow connection to the other participants through the reflector servers */
  udp_reflector?: true;
  /** Minimum layer for remote libtgvoip */
  min_layer: number;
  /** Maximum layer for remote libtgvoip */
  max_layer: number;
  /** When using [phone.requestCall](https://core.telegram.org/method/phone.requestCall) and [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall), specify all library versions supported by the client.  
  The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) and in the [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) update received by the caller. */
  library_versions: Array<string>;

  protected get [id](): number {
    return 0xFC878FC8;
  }

  static get [name](): string {
    return "phoneCallProtocol"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["udp_p2p", "true", "flags.0?true"],
      ["udp_reflector", "true", "flags.1?true"],
      ["min_layer", "number", "int"],
      ["max_layer", "number", "int"],
      ["library_versions", ["string"], "Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.udp_p2p ?? null, "true", "flags.0?true"],
      [this.udp_reflector ?? null, "true", "flags.1?true"],
      [this.min_layer, "number", "int"],
      [this.max_layer, "number", "int"],
      [this.library_versions, ["string"], "Vector<string>"],
    ];
  }

  constructor(params: { udp_p2p?: true; udp_reflector?: true; min_layer: number; max_layer: number; library_versions: Array<string> }) {
    super();
    this.udp_p2p = params.udp_p2p;
    this.udp_reflector = params.udp_reflector;
    this.min_layer = params.min_layer;
    this.max_layer = params.max_layer;
    this.library_versions = params.library_versions;
  }
}

/** A VoIP phone call */
export class phone_PhoneCall_ extends _phone_PhoneCall_ {
  /** The VoIP phone call */
  phone_call: enums.PhoneCall;
  /** VoIP phone call participants */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xEC82E140;
  }

  static get [name](): string {
    return "phone.phoneCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_call", _PhoneCall_, "PhoneCall"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_call, _PhoneCall_, "PhoneCall"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { phone_call: enums.PhoneCall; users: Array<enums.User> }) {
    super();
    this.phone_call = params.phone_call;
    this.users = params.users;
  }
}

/** The file was cleared from the temporary RAM cache of the [CDN](https://core.telegram.org/cdn) and has to be re-uploaded. */
export class upload_CdnFileReuploadNeeded_ extends _upload_CdnFile_ {
  /** Request token (see [CDN](https://core.telegram.org/cdn)) */
  request_token: Uint8Array;

  protected get [id](): number {
    return 0xEEA8E46E;
  }

  static get [name](): string {
    return "upload.cdnFileReuploadNeeded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["request_token", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.request_token, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { request_token: Uint8Array }) {
    super();
    this.request_token = params.request_token;
  }
}

/** Represent a chunk of a [CDN](https://core.telegram.org/cdn) file. */
export class upload_CdnFile_ extends _upload_CdnFile_ {
  /** The data */
  bytes: Uint8Array;

  protected get [id](): number {
    return 0xA99FCA4F;
  }

  static get [name](): string {
    return "upload.cdnFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bytes", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bytes, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { bytes: Uint8Array }) {
    super();
    this.bytes = params.bytes;
  }
}

/** Public key to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs. */
export class CdnPublicKey_ extends _CdnPublicKey_ {
  /** [CDN DC](https://core.telegram.org/cdn) ID */
  dc_id: number;
  /** RSA public key */
  public_key: string;

  protected get [id](): number {
    return 0xC982EABA;
  }

  static get [name](): string {
    return "cdnPublicKey"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dc_id", "number", "int"],
      ["public_key", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dc_id, "number", "int"],
      [this.public_key, "string", "string"],
    ];
  }

  constructor(params: { dc_id: number; public_key: string }) {
    super();
    this.dc_id = params.dc_id;
    this.public_key = params.public_key;
  }
}

/** Configuration for [CDN](https://core.telegram.org/cdn) file downloads. */
export class CdnConfig_ extends _CdnConfig_ {
  /** Vector of public keys to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs. */
  public_keys: Array<enums.CdnPublicKey>;

  protected get [id](): number {
    return 0x5725E40A;
  }

  static get [name](): string {
    return "cdnConfig"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["public_keys", [_CdnPublicKey_], "Vector<CdnPublicKey>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.public_keys, [_CdnPublicKey_], "Vector<CdnPublicKey>"],
    ];
  }

  constructor(params: { public_keys: Array<enums.CdnPublicKey> }) {
    super();
    this.public_keys = params.public_keys;
  }
}

/** Translated localization string */
export class LangPackString_ extends _LangPackString_ {
  /** Language key */
  key: string;
  /** Value */
  value: string;

  protected get [id](): number {
    return 0xCAD181F6;
  }

  static get [name](): string {
    return "langPackString"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["key", "string", "string"],
      ["value", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.key, "string", "string"],
      [this.value, "string", "string"],
    ];
  }

  constructor(params: { key: string; value: string }) {
    super();
    this.key = params.key;
    this.value = params.value;
  }
}

/** A language pack string which has different forms based on the number of some object it mentions. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\_plural\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info */
export class LangPackStringPluralized_ extends _LangPackString_ {
  /** Localization key */
  key: string;
  /** Value for zero objects */
  zero_value?: string;
  /** Value for one object */
  one_value?: string;
  /** Value for two objects */
  two_value?: string;
  /** Value for a few objects */
  few_value?: string;
  /** Value for many objects */
  many_value?: string;
  /** Default value */
  other_value: string;

  protected get [id](): number {
    return 0x6C47AC9F;
  }

  static get [name](): string {
    return "langPackStringPluralized"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["key", "string", "string"],
      ["zero_value", "string", "flags.0?string"],
      ["one_value", "string", "flags.1?string"],
      ["two_value", "string", "flags.2?string"],
      ["few_value", "string", "flags.3?string"],
      ["many_value", "string", "flags.4?string"],
      ["other_value", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.key, "string", "string"],
      [this.zero_value ?? null, "string", "flags.0?string"],
      [this.one_value ?? null, "string", "flags.1?string"],
      [this.two_value ?? null, "string", "flags.2?string"],
      [this.few_value ?? null, "string", "flags.3?string"],
      [this.many_value ?? null, "string", "flags.4?string"],
      [this.other_value, "string", "string"],
    ];
  }

  constructor(params: { key: string; zero_value?: string; one_value?: string; two_value?: string; few_value?: string; many_value?: string; other_value: string }) {
    super();
    this.key = params.key;
    this.zero_value = params.zero_value;
    this.one_value = params.one_value;
    this.two_value = params.two_value;
    this.few_value = params.few_value;
    this.many_value = params.many_value;
    this.other_value = params.other_value;
  }
}

/** Deleted localization string */
export class LangPackStringDeleted_ extends _LangPackString_ {
  /** Localization key */
  key: string;

  protected get [id](): number {
    return 0x2979EEB2;
  }

  static get [name](): string {
    return "langPackStringDeleted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["key", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.key, "string", "string"],
    ];
  }

  constructor(params: { key: string }) {
    super();
    this.key = params.key;
  }
}

/** Changes to the app's localization pack */
export class LangPackDifference_ extends _LangPackDifference_ {
  /** Language code */
  lang_code: string;
  /** Previous version number */
  from_version: number;
  /** New version number */
  version: number;
  /** Localized strings */
  strings: Array<enums.LangPackString>;

  protected get [id](): number {
    return 0xF385C1F6;
  }

  static get [name](): string {
    return "langPackDifference"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["lang_code", "string", "string"],
      ["from_version", "number", "int"],
      ["version", "number", "int"],
      ["strings", [_LangPackString_], "Vector<LangPackString>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.lang_code, "string", "string"],
      [this.from_version, "number", "int"],
      [this.version, "number", "int"],
      [this.strings, [_LangPackString_], "Vector<LangPackString>"],
    ];
  }

  constructor(params: { lang_code: string; from_version: number; version: number; strings: Array<enums.LangPackString> }) {
    super();
    this.lang_code = params.lang_code;
    this.from_version = params.from_version;
    this.version = params.version;
    this.strings = params.strings;
  }
}

/** Identifies a localization pack */
export class LangPackLanguage_ extends _LangPackLanguage_ {
  /** Whether the language pack is official */
  official?: true;
  /** Is this a localization pack for an RTL language */
  rtl?: true;
  /** Is this a beta localization pack? */
  beta?: true;
  /** Language name */
  name: string;
  /** Language name in the language itself */
  native_name: string;
  /** Language code (pack identifier) */
  lang_code: string;
  /** Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs */
  base_lang_code?: string;
  /** A language code to be used to apply plural forms. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\_plural\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info */
  plural_code: string;
  /** Total number of non-deleted strings from the language pack */
  strings_count: number;
  /** Total number of translated strings from the language pack */
  translated_count: number;
  /** Link to language translation interface; empty for custom local language packs */
  translations_url: string;

  protected get [id](): number {
    return 0xEECA5CE3;
  }

  static get [name](): string {
    return "langPackLanguage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["official", "true", "flags.0?true"],
      ["rtl", "true", "flags.2?true"],
      ["beta", "true", "flags.3?true"],
      ["name", "string", "string"],
      ["native_name", "string", "string"],
      ["lang_code", "string", "string"],
      ["base_lang_code", "string", "flags.1?string"],
      ["plural_code", "string", "string"],
      ["strings_count", "number", "int"],
      ["translated_count", "number", "int"],
      ["translations_url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.official ?? null, "true", "flags.0?true"],
      [this.rtl ?? null, "true", "flags.2?true"],
      [this.beta ?? null, "true", "flags.3?true"],
      [this.name, "string", "string"],
      [this.native_name, "string", "string"],
      [this.lang_code, "string", "string"],
      [this.base_lang_code ?? null, "string", "flags.1?string"],
      [this.plural_code, "string", "string"],
      [this.strings_count, "number", "int"],
      [this.translated_count, "number", "int"],
      [this.translations_url, "string", "string"],
    ];
  }

  constructor(params: { official?: true; rtl?: true; beta?: true; name: string; native_name: string; lang_code: string; base_lang_code?: string; plural_code: string; strings_count: number; translated_count: number; translations_url: string }) {
    super();
    this.official = params.official;
    this.rtl = params.rtl;
    this.beta = params.beta;
    this.name = params.name;
    this.native_name = params.native_name;
    this.lang_code = params.lang_code;
    this.base_lang_code = params.base_lang_code;
    this.plural_code = params.plural_code;
    this.strings_count = params.strings_count;
    this.translated_count = params.translated_count;
    this.translations_url = params.translations_url;
  }
}

/** Channel/supergroup title was changed */
export class ChannelAdminLogEventActionChangeTitle_ extends _ChannelAdminLogEventAction_ {
  /** Previous title */
  prev_value: string;
  /** New title */
  new_value: string;

  protected get [id](): number {
    return 0xE6DFB825;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeTitle"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", "string", "string"],
      ["new_value", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, "string", "string"],
      [this.new_value, "string", "string"],
    ];
  }

  constructor(params: { prev_value: string; new_value: string }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The description was changed */
export class ChannelAdminLogEventActionChangeAbout_ extends _ChannelAdminLogEventAction_ {
  /** Previous description */
  prev_value: string;
  /** New description */
  new_value: string;

  protected get [id](): number {
    return 0x55188A2E;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeAbout"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", "string", "string"],
      ["new_value", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, "string", "string"],
      [this.new_value, "string", "string"],
    ];
  }

  constructor(params: { prev_value: string; new_value: string }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** Channel/supergroup username was changed */
export class ChannelAdminLogEventActionChangeUsername_ extends _ChannelAdminLogEventAction_ {
  /** Old username */
  prev_value: string;
  /** New username */
  new_value: string;

  protected get [id](): number {
    return 0x6A4AFC38;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeUsername"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", "string", "string"],
      ["new_value", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, "string", "string"],
      [this.new_value, "string", "string"],
    ];
  }

  constructor(params: { prev_value: string; new_value: string }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The channel/supergroup's picture was changed */
export class ChannelAdminLogEventActionChangePhoto_ extends _ChannelAdminLogEventAction_ {
  /** Previous picture */
  prev_photo: enums.Photo;
  /** New picture */
  new_photo: enums.Photo;

  protected get [id](): number {
    return 0x434BD2AF;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangePhoto"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_photo", _Photo_, "Photo"],
      ["new_photo", _Photo_, "Photo"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_photo, _Photo_, "Photo"],
      [this.new_photo, _Photo_, "Photo"],
    ];
  }

  constructor(params: { prev_photo: enums.Photo; new_photo: enums.Photo }) {
    super();
    this.prev_photo = params.prev_photo;
    this.new_photo = params.new_photo;
  }
}

/** Invites were enabled/disabled */
export class ChannelAdminLogEventActionToggleInvites_ extends _ChannelAdminLogEventAction_ {
  /** New value */
  new_value: boolean;

  protected get [id](): number {
    return 0x1B7907AE;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleInvites"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_value, "boolean", "Bool"],
    ];
  }

  constructor(params: { new_value: boolean }) {
    super();
    this.new_value = params.new_value;
  }
}

/** Channel signatures were enabled/disabled */
export class ChannelAdminLogEventActionToggleSignatures_ extends _ChannelAdminLogEventAction_ {
  /** New value */
  new_value: boolean;

  protected get [id](): number {
    return 0x26AE0971;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleSignatures"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_value, "boolean", "Bool"],
    ];
  }

  constructor(params: { new_value: boolean }) {
    super();
    this.new_value = params.new_value;
  }
}

/** A message was pinned */
export class ChannelAdminLogEventActionUpdatePinned_ extends _ChannelAdminLogEventAction_ {
  /** The message that was pinned */
  message: enums.Message;

  protected get [id](): number {
    return 0xE9E82C18;
  }

  static get [name](): string {
    return "channelAdminLogEventActionUpdatePinned"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** A message was edited */
export class ChannelAdminLogEventActionEditMessage_ extends _ChannelAdminLogEventAction_ {
  /** Old message */
  prev_message: enums.Message;
  /** New message */
  new_message: enums.Message;

  protected get [id](): number {
    return 0x709B2405;
  }

  static get [name](): string {
    return "channelAdminLogEventActionEditMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_message", _Message_, "Message"],
      ["new_message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_message, _Message_, "Message"],
      [this.new_message, _Message_, "Message"],
    ];
  }

  constructor(params: { prev_message: enums.Message; new_message: enums.Message }) {
    super();
    this.prev_message = params.prev_message;
    this.new_message = params.new_message;
  }
}

/** A message was deleted */
export class ChannelAdminLogEventActionDeleteMessage_ extends _ChannelAdminLogEventAction_ {
  /** The message that was deleted */
  message: enums.Message;

  protected get [id](): number {
    return 0x42E047BB;
  }

  static get [name](): string {
    return "channelAdminLogEventActionDeleteMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** A user has joined the group (in the case of big groups, info of the user that has joined isn't shown) */
export class ChannelAdminLogEventActionParticipantJoin_ extends _ChannelAdminLogEventAction_ {
  protected get [id](): number {
    return 0x183040D3;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantJoin"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown) */
export class ChannelAdminLogEventActionParticipantLeave_ extends _ChannelAdminLogEventAction_ {
  protected get [id](): number {
    return 0xF89777F2;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantLeave"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A user was invited to the group */
export class ChannelAdminLogEventActionParticipantInvite_ extends _ChannelAdminLogEventAction_ {
  /** The user that was invited */
  participant: enums.ChannelParticipant;

  protected get [id](): number {
    return 0xE31C34D8;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["participant", _ChannelParticipant_, "ChannelParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.participant, _ChannelParticipant_, "ChannelParticipant"],
    ];
  }

  constructor(params: { participant: enums.ChannelParticipant }) {
    super();
    this.participant = params.participant;
  }
}

/** The banned [rights](https://core.telegram.org/api/rights) of a user were changed */
export class ChannelAdminLogEventActionParticipantToggleBan_ extends _ChannelAdminLogEventAction_ {
  /** Old banned rights of user */
  prev_participant: enums.ChannelParticipant;
  /** New banned rights of user */
  new_participant: enums.ChannelParticipant;

  protected get [id](): number {
    return 0xE6D83D7E;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantToggleBan"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_participant", _ChannelParticipant_, "ChannelParticipant"],
      ["new_participant", _ChannelParticipant_, "ChannelParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_participant, _ChannelParticipant_, "ChannelParticipant"],
      [this.new_participant, _ChannelParticipant_, "ChannelParticipant"],
    ];
  }

  constructor(params: { prev_participant: enums.ChannelParticipant; new_participant: enums.ChannelParticipant }) {
    super();
    this.prev_participant = params.prev_participant;
    this.new_participant = params.new_participant;
  }
}

/** The admin [rights](https://core.telegram.org/api/rights) of a user were changed */
export class ChannelAdminLogEventActionParticipantToggleAdmin_ extends _ChannelAdminLogEventAction_ {
  /** Previous admin rights */
  prev_participant: enums.ChannelParticipant;
  /** New admin rights */
  new_participant: enums.ChannelParticipant;

  protected get [id](): number {
    return 0xD5676710;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantToggleAdmin"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_participant", _ChannelParticipant_, "ChannelParticipant"],
      ["new_participant", _ChannelParticipant_, "ChannelParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_participant, _ChannelParticipant_, "ChannelParticipant"],
      [this.new_participant, _ChannelParticipant_, "ChannelParticipant"],
    ];
  }

  constructor(params: { prev_participant: enums.ChannelParticipant; new_participant: enums.ChannelParticipant }) {
    super();
    this.prev_participant = params.prev_participant;
    this.new_participant = params.new_participant;
  }
}

/** The supergroup's stickerset was changed */
export class ChannelAdminLogEventActionChangeStickerSet_ extends _ChannelAdminLogEventAction_ {
  /** Previous stickerset */
  prev_stickerset: enums.InputStickerSet;
  /** New stickerset */
  new_stickerset: enums.InputStickerSet;

  protected get [id](): number {
    return 0xB1C3CAA7;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeStickerSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_stickerset", _InputStickerSet_, "InputStickerSet"],
      ["new_stickerset", _InputStickerSet_, "InputStickerSet"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_stickerset, _InputStickerSet_, "InputStickerSet"],
      [this.new_stickerset, _InputStickerSet_, "InputStickerSet"],
    ];
  }

  constructor(params: { prev_stickerset: enums.InputStickerSet; new_stickerset: enums.InputStickerSet }) {
    super();
    this.prev_stickerset = params.prev_stickerset;
    this.new_stickerset = params.new_stickerset;
  }
}

/** The hidden prehistory setting was [changed](https://core.telegram.org/method/channels.togglePreHistoryHidden) */
export class ChannelAdminLogEventActionTogglePreHistoryHidden_ extends _ChannelAdminLogEventAction_ {
  /** New value */
  new_value: boolean;

  protected get [id](): number {
    return 0x5F5C95F1;
  }

  static get [name](): string {
    return "channelAdminLogEventActionTogglePreHistoryHidden"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_value, "boolean", "Bool"],
    ];
  }

  constructor(params: { new_value: boolean }) {
    super();
    this.new_value = params.new_value;
  }
}

/** The default banned rights were modified */
export class ChannelAdminLogEventActionDefaultBannedRights_ extends _ChannelAdminLogEventAction_ {
  /** Previous global [banned rights](https://core.telegram.org/api/rights) */
  prev_banned_rights: enums.ChatBannedRights;
  /** New global [banned rights](https://core.telegram.org/api/rights). */
  new_banned_rights: enums.ChatBannedRights;

  protected get [id](): number {
    return 0x2DF5FC0A;
  }

  static get [name](): string {
    return "channelAdminLogEventActionDefaultBannedRights"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_banned_rights", _ChatBannedRights_, "ChatBannedRights"],
      ["new_banned_rights", _ChatBannedRights_, "ChatBannedRights"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_banned_rights, _ChatBannedRights_, "ChatBannedRights"],
      [this.new_banned_rights, _ChatBannedRights_, "ChatBannedRights"],
    ];
  }

  constructor(params: { prev_banned_rights: enums.ChatBannedRights; new_banned_rights: enums.ChatBannedRights }) {
    super();
    this.prev_banned_rights = params.prev_banned_rights;
    this.new_banned_rights = params.new_banned_rights;
  }
}

/** A poll was stopped */
export class ChannelAdminLogEventActionStopPoll_ extends _ChannelAdminLogEventAction_ {
  /** The poll that was stopped */
  message: enums.Message;

  protected get [id](): number {
    return 0x8F079643;
  }

  static get [name](): string {
    return "channelAdminLogEventActionStopPoll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** The linked chat was changed */
export class ChannelAdminLogEventActionChangeLinkedChat_ extends _ChannelAdminLogEventAction_ {
  /** Previous linked chat */
  prev_value: bigint;
  /** New linked chat */
  new_value: bigint;

  protected get [id](): number {
    return 0x050C7AC8;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeLinkedChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", "bigint", "long"],
      ["new_value", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, "bigint", "long"],
      [this.new_value, "bigint", "long"],
    ];
  }

  constructor(params: { prev_value: bigint; new_value: bigint }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The geogroup location was changed */
export class ChannelAdminLogEventActionChangeLocation_ extends _ChannelAdminLogEventAction_ {
  /** Previous location */
  prev_value: enums.ChannelLocation;
  /** New location */
  new_value: enums.ChannelLocation;

  protected get [id](): number {
    return 0x0E6B76AE;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", _ChannelLocation_, "ChannelLocation"],
      ["new_value", _ChannelLocation_, "ChannelLocation"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, _ChannelLocation_, "ChannelLocation"],
      [this.new_value, _ChannelLocation_, "ChannelLocation"],
    ];
  }

  constructor(params: { prev_value: enums.ChannelLocation; new_value: enums.ChannelLocation }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** [Slow mode setting for supergroups was changed](https://core.telegram.org/method/channels.toggleSlowMode) */
export class ChannelAdminLogEventActionToggleSlowMode_ extends _ChannelAdminLogEventAction_ {
  /** Previous slow mode value */
  prev_value: number;
  /** New slow mode value */
  new_value: number;

  protected get [id](): number {
    return 0x53909779;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleSlowMode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", "number", "int"],
      ["new_value", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, "number", "int"],
      [this.new_value, "number", "int"],
    ];
  }

  constructor(params: { prev_value: number; new_value: number }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** A group call was started */
export class ChannelAdminLogEventActionStartGroupCall_ extends _ChannelAdminLogEventAction_ {
  /** Group call */
  call: enums.InputGroupCall;

  protected get [id](): number {
    return 0x23209745;
  }

  static get [name](): string {
    return "channelAdminLogEventActionStartGroupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["call", _InputGroupCall_, "InputGroupCall"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.call, _InputGroupCall_, "InputGroupCall"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall }) {
    super();
    this.call = params.call;
  }
}

/** A group call was terminated */
export class ChannelAdminLogEventActionDiscardGroupCall_ extends _ChannelAdminLogEventAction_ {
  /** The group call that was terminated */
  call: enums.InputGroupCall;

  protected get [id](): number {
    return 0xDB9F9140;
  }

  static get [name](): string {
    return "channelAdminLogEventActionDiscardGroupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["call", _InputGroupCall_, "InputGroupCall"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.call, _InputGroupCall_, "InputGroupCall"],
    ];
  }

  constructor(params: { call: enums.InputGroupCall }) {
    super();
    this.call = params.call;
  }
}

/** A group call participant was muted */
export class ChannelAdminLogEventActionParticipantMute_ extends _ChannelAdminLogEventAction_ {
  /** The participant that was muted */
  participant: enums.GroupCallParticipant;

  protected get [id](): number {
    return 0xF92424D2;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantMute"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["participant", _GroupCallParticipant_, "GroupCallParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.participant, _GroupCallParticipant_, "GroupCallParticipant"],
    ];
  }

  constructor(params: { participant: enums.GroupCallParticipant }) {
    super();
    this.participant = params.participant;
  }
}

/** A group call participant was unmuted */
export class ChannelAdminLogEventActionParticipantUnmute_ extends _ChannelAdminLogEventAction_ {
  /** The participant that was unmuted */
  participant: enums.GroupCallParticipant;

  protected get [id](): number {
    return 0xE64429C0;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantUnmute"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["participant", _GroupCallParticipant_, "GroupCallParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.participant, _GroupCallParticipant_, "GroupCallParticipant"],
    ];
  }

  constructor(params: { participant: enums.GroupCallParticipant }) {
    super();
    this.participant = params.participant;
  }
}

/** Group call settings were changed */
export class ChannelAdminLogEventActionToggleGroupCallSetting_ extends _ChannelAdminLogEventAction_ {
  /** Whether all users are muted by default upon joining */
  join_muted: boolean;

  protected get [id](): number {
    return 0x56D6A247;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleGroupCallSetting"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["join_muted", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.join_muted, "boolean", "Bool"],
    ];
  }

  constructor(params: { join_muted: boolean }) {
    super();
    this.join_muted = params.join_muted;
  }
}

/** A user joined the [supergroup/channel](https://core.telegram.org/api/channel) using a specific invite link */
export class ChannelAdminLogEventActionParticipantJoinByInvite_ extends _ChannelAdminLogEventAction_ {
  /** The participant joined by importing a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
  via_chatlist?: true;
  /** The invite link used to join the [supergroup/channel](https://core.telegram.org/api/channel) */
  invite: enums.ExportedChatInvite;

  protected get [id](): number {
    return 0xFE9FC158;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantJoinByInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["via_chatlist", "true", "flags.0?true"],
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.via_chatlist ?? null, "true", "flags.0?true"],
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  constructor(params: { via_chatlist?: true; invite: enums.ExportedChatInvite }) {
    super();
    this.via_chatlist = params.via_chatlist;
    this.invite = params.invite;
  }
}

/** A chat invite was deleted */
export class ChannelAdminLogEventActionExportedInviteDelete_ extends _ChannelAdminLogEventAction_ {
  /** The deleted chat invite */
  invite: enums.ExportedChatInvite;

  protected get [id](): number {
    return 0x5A50FCA4;
  }

  static get [name](): string {
    return "channelAdminLogEventActionExportedInviteDelete"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  constructor(params: { invite: enums.ExportedChatInvite }) {
    super();
    this.invite = params.invite;
  }
}

/** A specific invite link was revoked */
export class ChannelAdminLogEventActionExportedInviteRevoke_ extends _ChannelAdminLogEventAction_ {
  /** The invite link that was revoked */
  invite: enums.ExportedChatInvite;

  protected get [id](): number {
    return 0x410A134E;
  }

  static get [name](): string {
    return "channelAdminLogEventActionExportedInviteRevoke"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  constructor(params: { invite: enums.ExportedChatInvite }) {
    super();
    this.invite = params.invite;
  }
}

/** A chat invite was edited */
export class ChannelAdminLogEventActionExportedInviteEdit_ extends _ChannelAdminLogEventAction_ {
  /** Previous chat invite information */
  prev_invite: enums.ExportedChatInvite;
  /** New chat invite information */
  new_invite: enums.ExportedChatInvite;

  protected get [id](): number {
    return 0xE90EBB59;
  }

  static get [name](): string {
    return "channelAdminLogEventActionExportedInviteEdit"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_invite", _ExportedChatInvite_, "ExportedChatInvite"],
      ["new_invite", _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_invite, _ExportedChatInvite_, "ExportedChatInvite"],
      [this.new_invite, _ExportedChatInvite_, "ExportedChatInvite"],
    ];
  }

  constructor(params: { prev_invite: enums.ExportedChatInvite; new_invite: enums.ExportedChatInvite }) {
    super();
    this.prev_invite = params.prev_invite;
    this.new_invite = params.new_invite;
  }
}

/** channelAdminLogEvent.user\_id has set the volume of participant.peer to participant.volume */
export class ChannelAdminLogEventActionParticipantVolume_ extends _ChannelAdminLogEventAction_ {
  /** The participant whose volume was changed */
  participant: enums.GroupCallParticipant;

  protected get [id](): number {
    return 0x3E7F6847;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantVolume"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["participant", _GroupCallParticipant_, "GroupCallParticipant"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.participant, _GroupCallParticipant_, "GroupCallParticipant"],
    ];
  }

  constructor(params: { participant: enums.GroupCallParticipant }) {
    super();
    this.participant = params.participant;
  }
}

/** The Time-To-Live of messages in this chat was changed */
export class ChannelAdminLogEventActionChangeHistoryTTL_ extends _ChannelAdminLogEventAction_ {
  /** Previous value */
  prev_value: number;
  /** New value */
  new_value: number;

  protected get [id](): number {
    return 0x6E941A38;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeHistoryTTL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", "number", "int"],
      ["new_value", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, "number", "int"],
      [this.new_value, "number", "int"],
    ];
  }

  constructor(params: { prev_value: number; new_value: number }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** A new member was accepted to the chat by an admin */
export class ChannelAdminLogEventActionParticipantJoinByRequest_ extends _ChannelAdminLogEventAction_ {
  /** The invite link that was used to join the chat */
  invite: enums.ExportedChatInvite;
  /** ID of the admin that approved the invite */
  approved_by: bigint;

  protected get [id](): number {
    return 0xAFB6144A;
  }

  static get [name](): string {
    return "channelAdminLogEventActionParticipantJoinByRequest"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
      ["approved_by", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
      [this.approved_by, "bigint", "long"],
    ];
  }

  constructor(params: { invite: enums.ExportedChatInvite; approved_by: bigint }) {
    super();
    this.invite = params.invite;
    this.approved_by = params.approved_by;
  }
}

/** Forwards were enabled or disabled */
export class ChannelAdminLogEventActionToggleNoForwards_ extends _ChannelAdminLogEventAction_ {
  /** Old value */
  new_value: boolean;

  protected get [id](): number {
    return 0xCB2AC766;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleNoForwards"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_value, "boolean", "Bool"],
    ];
  }

  constructor(params: { new_value: boolean }) {
    super();
    this.new_value = params.new_value;
  }
}

/** A message was posted in a channel */
export class ChannelAdminLogEventActionSendMessage_ extends _ChannelAdminLogEventAction_ {
  /** The message that was sent */
  message: enums.Message;

  protected get [id](): number {
    return 0x278F2868;
  }

  static get [name](): string {
    return "channelAdminLogEventActionSendMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** The set of allowed [message reactions »](https://core.telegram.org/api/reactions) for this channel has changed */
export class ChannelAdminLogEventActionChangeAvailableReactions_ extends _ChannelAdminLogEventAction_ {
  /** Previously allowed reaction emojis */
  prev_value: enums.ChatReactions;
  /** New allowed reaction emojis */
  new_value: enums.ChatReactions;

  protected get [id](): number {
    return 0xBE4E0EF8;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeAvailableReactions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", _ChatReactions_, "ChatReactions"],
      ["new_value", _ChatReactions_, "ChatReactions"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, _ChatReactions_, "ChatReactions"],
      [this.new_value, _ChatReactions_, "ChatReactions"],
    ];
  }

  constructor(params: { prev_value: enums.ChatReactions; new_value: enums.ChatReactions }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The list of usernames associated with the channel was changed */
export class ChannelAdminLogEventActionChangeUsernames_ extends _ChannelAdminLogEventAction_ {
  /** Previous set of usernames */
  prev_value: Array<string>;
  /** New set of usernames */
  new_value: Array<string>;

  protected get [id](): number {
    return 0xF04FB3A9;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeUsernames"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", ["string"], "Vector<string>"],
      ["new_value", ["string"], "Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, ["string"], "Vector<string>"],
      [this.new_value, ["string"], "Vector<string>"],
    ];
  }

  constructor(params: { prev_value: Array<string>; new_value: Array<string> }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** [Forum](https://core.telegram.org/api/forum) functionality was enabled or disabled. */
export class ChannelAdminLogEventActionToggleForum_ extends _ChannelAdminLogEventAction_ {
  /** Whether [forum](https://core.telegram.org/api/forum) functionality was enabled or disabled. */
  new_value: boolean;

  protected get [id](): number {
    return 0x02CC6383;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleForum"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_value, "boolean", "Bool"],
    ];
  }

  constructor(params: { new_value: boolean }) {
    super();
    this.new_value = params.new_value;
  }
}

/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was created */
export class ChannelAdminLogEventActionCreateTopic_ extends _ChannelAdminLogEventAction_ {
  /** The [forum topic](https://core.telegram.org/api/forum#forum-topics) that was created */
  topic: enums.ForumTopic;

  protected get [id](): number {
    return 0x58707D28;
  }

  static get [name](): string {
    return "channelAdminLogEventActionCreateTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["topic", _ForumTopic_, "ForumTopic"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.topic, _ForumTopic_, "ForumTopic"],
    ];
  }

  constructor(params: { topic: enums.ForumTopic }) {
    super();
    this.topic = params.topic;
  }
}

/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was edited */
export class ChannelAdminLogEventActionEditTopic_ extends _ChannelAdminLogEventAction_ {
  /** Previous topic information */
  prev_topic: enums.ForumTopic;
  /** New topic information */
  new_topic: enums.ForumTopic;

  protected get [id](): number {
    return 0xF06FE208;
  }

  static get [name](): string {
    return "channelAdminLogEventActionEditTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_topic", _ForumTopic_, "ForumTopic"],
      ["new_topic", _ForumTopic_, "ForumTopic"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_topic, _ForumTopic_, "ForumTopic"],
      [this.new_topic, _ForumTopic_, "ForumTopic"],
    ];
  }

  constructor(params: { prev_topic: enums.ForumTopic; new_topic: enums.ForumTopic }) {
    super();
    this.prev_topic = params.prev_topic;
    this.new_topic = params.new_topic;
  }
}

/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was deleted */
export class ChannelAdminLogEventActionDeleteTopic_ extends _ChannelAdminLogEventAction_ {
  /** The [forum topic](https://core.telegram.org/api/forum#forum-topics) that was deleted */
  topic: enums.ForumTopic;

  protected get [id](): number {
    return 0xAE168909;
  }

  static get [name](): string {
    return "channelAdminLogEventActionDeleteTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["topic", _ForumTopic_, "ForumTopic"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.topic, _ForumTopic_, "ForumTopic"],
    ];
  }

  constructor(params: { topic: enums.ForumTopic }) {
    super();
    this.topic = params.topic;
  }
}

/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was pinned or unpinned */
export class ChannelAdminLogEventActionPinTopic_ extends _ChannelAdminLogEventAction_ {
  /** Previous topic information */
  prev_topic?: enums.ForumTopic;
  /** New topic information */
  new_topic?: enums.ForumTopic;

  protected get [id](): number {
    return 0x5D8D353B;
  }

  static get [name](): string {
    return "channelAdminLogEventActionPinTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["prev_topic", _ForumTopic_, "flags.0?ForumTopic"],
      ["new_topic", _ForumTopic_, "flags.1?ForumTopic"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.prev_topic ?? null, _ForumTopic_, "flags.0?ForumTopic"],
      [this.new_topic ?? null, _ForumTopic_, "flags.1?ForumTopic"],
    ];
  }

  constructor(params?: { prev_topic?: enums.ForumTopic; new_topic?: enums.ForumTopic }) {
    super();
    this.prev_topic = params?.prev_topic;
    this.new_topic = params?.new_topic;
  }
}

/** [Native antispam](https://core.telegram.org/api/antispam) functionality was enabled or disabled. */
export class ChannelAdminLogEventActionToggleAntiSpam_ extends _ChannelAdminLogEventAction_ {
  /** Whether antispam functionality was enabled or disabled. */
  new_value: boolean;

  protected get [id](): number {
    return 0x64F36DFC;
  }

  static get [name](): string {
    return "channelAdminLogEventActionToggleAntiSpam"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["new_value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.new_value, "boolean", "Bool"],
    ];
  }

  constructor(params: { new_value: boolean }) {
    super();
    this.new_value = params.new_value;
  }
}

/** The [message accent color](https://core.telegram.org/api/colors) was changed */
export class ChannelAdminLogEventActionChangePeerColor_ extends _ChannelAdminLogEventAction_ {
  /** Previous accent palette */
  prev_value: enums.PeerColor;
  /** New accent palette */
  new_value: enums.PeerColor;

  protected get [id](): number {
    return 0x5796E780;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangePeerColor"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", _PeerColor_, "PeerColor"],
      ["new_value", _PeerColor_, "PeerColor"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, _PeerColor_, "PeerColor"],
      [this.new_value, _PeerColor_, "PeerColor"],
    ];
  }

  constructor(params: { prev_value: enums.PeerColor; new_value: enums.PeerColor }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The [profile accent color](https://core.telegram.org/api/colors) was changed */
export class ChannelAdminLogEventActionChangeProfilePeerColor_ extends _ChannelAdminLogEventAction_ {
  /** Previous accent palette */
  prev_value: enums.PeerColor;
  /** New accent palette */
  new_value: enums.PeerColor;

  protected get [id](): number {
    return 0x5E477B25;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeProfilePeerColor"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", _PeerColor_, "PeerColor"],
      ["new_value", _PeerColor_, "PeerColor"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, _PeerColor_, "PeerColor"],
      [this.new_value, _PeerColor_, "PeerColor"],
    ];
  }

  constructor(params: { prev_value: enums.PeerColor; new_value: enums.PeerColor }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The [wallpaper](https://core.telegram.org/api/wallpapers) was changed */
export class ChannelAdminLogEventActionChangeWallpaper_ extends _ChannelAdminLogEventAction_ {
  /** Previous wallpaper */
  prev_value: enums.WallPaper;
  /** New wallpaper */
  new_value: enums.WallPaper;

  protected get [id](): number {
    return 0x31BB5D52;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeWallpaper"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", _WallPaper_, "WallPaper"],
      ["new_value", _WallPaper_, "WallPaper"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, _WallPaper_, "WallPaper"],
      [this.new_value, _WallPaper_, "WallPaper"],
    ];
  }

  constructor(params: { prev_value: enums.WallPaper; new_value: enums.WallPaper }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

/** The [emoji status](https://core.telegram.org/api/emoji-status) was changed */
export class ChannelAdminLogEventActionChangeEmojiStatus_ extends _ChannelAdminLogEventAction_ {
  /** Previous emoji status */
  prev_value: enums.EmojiStatus;
  /** New emoji status */
  new_value: enums.EmojiStatus;

  protected get [id](): number {
    return 0x3EA9FEB1;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeEmojiStatus"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_value", _EmojiStatus_, "EmojiStatus"],
      ["new_value", _EmojiStatus_, "EmojiStatus"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_value, _EmojiStatus_, "EmojiStatus"],
      [this.new_value, _EmojiStatus_, "EmojiStatus"],
    ];
  }

  constructor(params: { prev_value: enums.EmojiStatus; new_value: enums.EmojiStatus }) {
    super();
    this.prev_value = params.prev_value;
    this.new_value = params.new_value;
  }
}

export class ChannelAdminLogEventActionChangeEmojiStickerSet_ extends _ChannelAdminLogEventAction_ {
  prev_stickerset: enums.InputStickerSet;
  new_stickerset: enums.InputStickerSet;

  protected get [id](): number {
    return 0x46D840AB;
  }

  static get [name](): string {
    return "channelAdminLogEventActionChangeEmojiStickerSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["prev_stickerset", _InputStickerSet_, "InputStickerSet"],
      ["new_stickerset", _InputStickerSet_, "InputStickerSet"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.prev_stickerset, _InputStickerSet_, "InputStickerSet"],
      [this.new_stickerset, _InputStickerSet_, "InputStickerSet"],
    ];
  }

  constructor(params: { prev_stickerset: enums.InputStickerSet; new_stickerset: enums.InputStickerSet }) {
    super();
    this.prev_stickerset = params.prev_stickerset;
    this.new_stickerset = params.new_stickerset;
  }
}

/** Admin log event */
export class ChannelAdminLogEvent_ extends _ChannelAdminLogEvent_ {
  /** Event ID */
  id: bigint;
  /** Date */
  date: number;
  /** User ID */
  user_id: bigint;
  /** Action */
  action: enums.ChannelAdminLogEventAction;

  protected get [id](): number {
    return 0x1FAD68CD;
  }

  static get [name](): string {
    return "channelAdminLogEvent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["date", "number", "int"],
      ["user_id", "bigint", "long"],
      ["action", _ChannelAdminLogEventAction_, "ChannelAdminLogEventAction"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.user_id, "bigint", "long"],
      [this.action, _ChannelAdminLogEventAction_, "ChannelAdminLogEventAction"],
    ];
  }

  constructor(params: { id: bigint; date: number; user_id: bigint; action: enums.ChannelAdminLogEventAction }) {
    super();
    this.id = params.id;
    this.date = params.date;
    this.user_id = params.user_id;
    this.action = params.action;
  }
}

/** Admin log events */
export class channels_AdminLogResults_ extends _channels_AdminLogResults_ {
  /** Admin log events */
  events: Array<enums.ChannelAdminLogEvent>;
  /** Chats mentioned in events */
  chats: Array<enums.Chat>;
  /** Users mentioned in events */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xED8AF74D;
  }

  static get [name](): string {
    return "channels.adminLogResults"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["events", [_ChannelAdminLogEvent_], "Vector<ChannelAdminLogEvent>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.events, [_ChannelAdminLogEvent_], "Vector<ChannelAdminLogEvent>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { events: Array<enums.ChannelAdminLogEvent>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.events = params.events;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Filter only certain admin log events */
export class ChannelAdminLogEventsFilter_ extends _ChannelAdminLogEventsFilter_ {
  /** [Join events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin), including [joins using invite links](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByInvite) and [join requests](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByRequest). */
  join?: true;
  /** [Leave events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave) */
  leave?: true;
  /** [Invite events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite) */
  invite?: true;
  /** [Ban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
  ban?: true;
  /** [Unban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
  unban?: true;
  /** [Kick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
  kick?: true;
  /** [Unkick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
  unkick?: true;
  /** [Admin promotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin) */
  promote?: true;
  /** [Admin demotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin) */
  demote?: true;
  /** Info change events (when [about](https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout), [linked chat](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat), [location](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation), [photo](https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto), [stickerset](https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet), [title](https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle) or [username](https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername), [slowmode](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSlowMode), [history TTL](https://core.telegram.org/constructor/channelAdminLogEventActionChangeHistoryTTL) settings of a channel gets modified) */
  info?: true;
  /** Settings change events ([invites](https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites), [hidden prehistory](https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden), [signatures](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures), [default banned rights](https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights), [forum toggle events](https://core.telegram.org/constructor/channelAdminLogEventActionToggleForum)) */
  settings?: true;
  /** [Message pin events](https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned) */
  pinned?: true;
  /** [Message edit events](https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage) */
  edit?: true;
  /** [Message deletion events](https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage) */
  delete?: true;
  /** Group call events */
  group_call?: true;
  /** Invite events */
  invites?: true;
  /** A message was posted in a channel */
  send?: true;
  /** [Forum](https://core.telegram.org/api/forum)\-related events */
  forums?: true;

  protected get [id](): number {
    return 0xEA107AE4;
  }

  static get [name](): string {
    return "channelAdminLogEventsFilter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["join", "true", "flags.0?true"],
      ["leave", "true", "flags.1?true"],
      ["invite", "true", "flags.2?true"],
      ["ban", "true", "flags.3?true"],
      ["unban", "true", "flags.4?true"],
      ["kick", "true", "flags.5?true"],
      ["unkick", "true", "flags.6?true"],
      ["promote", "true", "flags.7?true"],
      ["demote", "true", "flags.8?true"],
      ["info", "true", "flags.9?true"],
      ["settings", "true", "flags.10?true"],
      ["pinned", "true", "flags.11?true"],
      ["edit", "true", "flags.12?true"],
      ["delete", "true", "flags.13?true"],
      ["group_call", "true", "flags.14?true"],
      ["invites", "true", "flags.15?true"],
      ["send", "true", "flags.16?true"],
      ["forums", "true", "flags.17?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.join ?? null, "true", "flags.0?true"],
      [this.leave ?? null, "true", "flags.1?true"],
      [this.invite ?? null, "true", "flags.2?true"],
      [this.ban ?? null, "true", "flags.3?true"],
      [this.unban ?? null, "true", "flags.4?true"],
      [this.kick ?? null, "true", "flags.5?true"],
      [this.unkick ?? null, "true", "flags.6?true"],
      [this.promote ?? null, "true", "flags.7?true"],
      [this.demote ?? null, "true", "flags.8?true"],
      [this.info ?? null, "true", "flags.9?true"],
      [this.settings ?? null, "true", "flags.10?true"],
      [this.pinned ?? null, "true", "flags.11?true"],
      [this.edit ?? null, "true", "flags.12?true"],
      [this.delete ?? null, "true", "flags.13?true"],
      [this.group_call ?? null, "true", "flags.14?true"],
      [this.invites ?? null, "true", "flags.15?true"],
      [this.send ?? null, "true", "flags.16?true"],
      [this.forums ?? null, "true", "flags.17?true"],
    ];
  }

  constructor(params?: { join?: true; leave?: true; invite?: true; ban?: true; unban?: true; kick?: true; unkick?: true; promote?: true; demote?: true; info?: true; settings?: true; pinned?: true; edit?: true; delete?: true; group_call?: true; invites?: true; send?: true; forums?: true }) {
    super();
    this.join = params?.join;
    this.leave = params?.leave;
    this.invite = params?.invite;
    this.ban = params?.ban;
    this.unban = params?.unban;
    this.kick = params?.kick;
    this.unkick = params?.unkick;
    this.promote = params?.promote;
    this.demote = params?.demote;
    this.info = params?.info;
    this.settings = params?.settings;
    this.pinned = params?.pinned;
    this.edit = params?.edit;
    this.delete = params?.delete;
    this.group_call = params?.group_call;
    this.invites = params?.invites;
    this.send = params?.send;
    this.forums = params?.forums;
  }
}

/** Popular contact */
export class PopularContact_ extends _PopularContact_ {
  /** Contact identifier */
  client_id: bigint;
  /** How many people imported this contact */
  importers: number;

  protected get [id](): number {
    return 0x5CE14175;
  }

  static get [name](): string {
    return "popularContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["client_id", "bigint", "long"],
      ["importers", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.client_id, "bigint", "long"],
      [this.importers, "number", "int"],
    ];
  }

  constructor(params: { client_id: bigint; importers: number }) {
    super();
    this.client_id = params.client_id;
    this.importers = params.importers;
  }
}

/** No new favorited stickers were found */
export class messages_FavedStickersNotModified_ extends _messages_FavedStickers_ {
  protected get [id](): number {
    return 0x9E8FA6D3;
  }

  static get [name](): string {
    return "messages.favedStickersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Favorited stickers */
export class messages_FavedStickers_ extends _messages_FavedStickers_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Emojis associated to stickers */
  packs: Array<enums.StickerPack>;
  /** Favorited stickers */
  stickers: Array<enums.Document>;

  protected get [id](): number {
    return 0x2CB51097;
  }

  static get [name](): string {
    return "messages.favedStickers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["packs", [_StickerPack_], "Vector<StickerPack>"],
      ["stickers", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.packs, [_StickerPack_], "Vector<StickerPack>"],
      [this.stickers, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { hash: bigint; packs: Array<enums.StickerPack>; stickers: Array<enums.Document> }) {
    super();
    this.hash = params.hash;
    this.packs = params.packs;
    this.stickers = params.stickers;
  }
}

/** Unknown t.me url */
export class RecentMeUrlUnknown_ extends _RecentMeUrl_ {
  /** URL */
  url: string;

  protected get [id](): number {
    return 0x46E1D13D;
  }

  static get [name](): string {
    return "recentMeUrlUnknown"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Recent t.me link to a user */
export class RecentMeUrlUser_ extends _RecentMeUrl_ {
  /** URL */
  url: string;
  /** User ID */
  user_id: bigint;

  protected get [id](): number {
    return 0xB92C09E2;
  }

  static get [name](): string {
    return "recentMeUrlUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["user_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.user_id, "bigint", "long"],
    ];
  }

  constructor(params: { url: string; user_id: bigint }) {
    super();
    this.url = params.url;
    this.user_id = params.user_id;
  }
}

/** Recent t.me link to a chat */
export class RecentMeUrlChat_ extends _RecentMeUrl_ {
  /** t.me URL */
  url: string;
  /** Chat ID */
  chat_id: bigint;

  protected get [id](): number {
    return 0xB2DA71D2;
  }

  static get [name](): string {
    return "recentMeUrlChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["chat_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.chat_id, "bigint", "long"],
    ];
  }

  constructor(params: { url: string; chat_id: bigint }) {
    super();
    this.url = params.url;
    this.chat_id = params.chat_id;
  }
}

/** Recent t.me invite link to a chat */
export class RecentMeUrlChatInvite_ extends _RecentMeUrl_ {
  /** t.me URL */
  url: string;
  /** Chat invitation */
  chat_invite: enums.ChatInvite;

  protected get [id](): number {
    return 0xEB49081D;
  }

  static get [name](): string {
    return "recentMeUrlChatInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["chat_invite", _ChatInvite_, "ChatInvite"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.chat_invite, _ChatInvite_, "ChatInvite"],
    ];
  }

  constructor(params: { url: string; chat_invite: enums.ChatInvite }) {
    super();
    this.url = params.url;
    this.chat_invite = params.chat_invite;
  }
}

/** Recent t.me stickerset installation URL */
export class RecentMeUrlStickerSet_ extends _RecentMeUrl_ {
  /** t.me URL */
  url: string;
  /** Stickerset */
  set: enums.StickerSetCovered;

  protected get [id](): number {
    return 0xBC0A57DC;
  }

  static get [name](): string {
    return "recentMeUrlStickerSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["set", _StickerSetCovered_, "StickerSetCovered"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.set, _StickerSetCovered_, "StickerSetCovered"],
    ];
  }

  constructor(params: { url: string; set: enums.StickerSetCovered }) {
    super();
    this.url = params.url;
    this.set = params.set;
  }
}

/** Recent t.me URLs */
export class help_RecentMeUrls_ extends _help_RecentMeUrls_ {
  /** URLs */
  urls: Array<enums.RecentMeUrl>;
  /** Chats */
  chats: Array<enums.Chat>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x0E0310D7;
  }

  static get [name](): string {
    return "help.recentMeUrls"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["urls", [_RecentMeUrl_], "Vector<RecentMeUrl>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.urls, [_RecentMeUrl_], "Vector<RecentMeUrl>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { urls: Array<enums.RecentMeUrl>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.urls = params.urls;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** A single media in an [album or grouped media](https://core.telegram.org/api/files#albums-grouped-media) sent with [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia). */
export class InputSingleMedia_ extends _InputSingleMedia_ {
  /** The media */
  media: enums.InputMedia;
  /** Unique client media ID required to prevent message resending */
  random_id: bigint;
  /** A caption for the media */
  message: string;
  /** Message [entities](https://core.telegram.org/api/entities) for styled text */
  entities?: Array<enums.MessageEntity>;

  protected get [id](): number {
    return 0x1CC6E91F;
  }

  static get [name](): string {
    return "inputSingleMedia"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["media", _InputMedia_, "InputMedia"],
      ["random_id", "bigint", "long"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.0?Vector<MessageEntity>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.media, _InputMedia_, "InputMedia"],
      [this.random_id, "bigint", "long"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.0?Vector<MessageEntity>"],
    ];
  }

  constructor(params: { media: enums.InputMedia; random_id: bigint; message: string; entities?: Array<enums.MessageEntity> }) {
    super();
    this.media = params.media;
    this.random_id = params.random_id;
    this.message = params.message;
    this.entities = params.entities;
  }
}

/** Represents a bot logged in using the [Telegram login widget](https://core.telegram.org/widgets/login) */
export class WebAuthorization_ extends _WebAuthorization_ {
  /** Authorization hash */
  hash: bigint;
  /** Bot ID */
  bot_id: bigint;
  /** The domain name of the website on which the user has logged in. */
  domain: string;
  /** Browser user-agent */
  browser: string;
  /** Platform */
  platform: string;
  /** When was the web session created */
  date_created: number;
  /** When was the web session last active */
  date_active: number;
  /** IP address */
  ip: string;
  /** Region, determined from IP address */
  region: string;

  protected get [id](): number {
    return 0xA6F8F452;
  }

  static get [name](): string {
    return "webAuthorization"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["bot_id", "bigint", "long"],
      ["domain", "string", "string"],
      ["browser", "string", "string"],
      ["platform", "string", "string"],
      ["date_created", "number", "int"],
      ["date_active", "number", "int"],
      ["ip", "string", "string"],
      ["region", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.bot_id, "bigint", "long"],
      [this.domain, "string", "string"],
      [this.browser, "string", "string"],
      [this.platform, "string", "string"],
      [this.date_created, "number", "int"],
      [this.date_active, "number", "int"],
      [this.ip, "string", "string"],
      [this.region, "string", "string"],
    ];
  }

  constructor(params: { hash: bigint; bot_id: bigint; domain: string; browser: string; platform: string; date_created: number; date_active: number; ip: string; region: string }) {
    super();
    this.hash = params.hash;
    this.bot_id = params.bot_id;
    this.domain = params.domain;
    this.browser = params.browser;
    this.platform = params.platform;
    this.date_created = params.date_created;
    this.date_active = params.date_active;
    this.ip = params.ip;
    this.region = params.region;
  }
}

/** Web authorizations */
export class account_WebAuthorizations_ extends _account_WebAuthorizations_ {
  /** Web authorization list */
  authorizations: Array<enums.WebAuthorization>;
  /** Users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xED56C9FC;
  }

  static get [name](): string {
    return "account.webAuthorizations"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["authorizations", [_WebAuthorization_], "Vector<WebAuthorization>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.authorizations, [_WebAuthorization_], "Vector<WebAuthorization>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { authorizations: Array<enums.WebAuthorization>; users: Array<enums.User> }) {
    super();
    this.authorizations = params.authorizations;
    this.users = params.users;
  }
}

/** Message by ID */
export class InputMessageID_ extends _InputMessage_ {
  /** Message ID */
  id: number;

  protected get [id](): number {
    return 0xA676A322;
  }

  static get [name](): string {
    return "inputMessageID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { id: number }) {
    super();
    this.id = params.id;
  }
}

/** Message to which the specified message replies to */
export class InputMessageReplyTo_ extends _InputMessage_ {
  /** ID of the message that replies to the message we need */
  id: number;

  protected get [id](): number {
    return 0xBAD88395;
  }

  static get [name](): string {
    return "inputMessageReplyTo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { id: number }) {
    super();
    this.id = params.id;
  }
}

/** Pinned message */
export class InputMessagePinned_ extends _InputMessage_ {
  protected get [id](): number {
    return 0x86872538;
  }

  static get [name](): string {
    return "inputMessagePinned"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Used by bots for fetching information about the message that originated a callback query */
export class InputMessageCallbackQuery_ extends _InputMessage_ {
  /** Message ID */
  id: number;
  /** Callback query ID */
  query_id: bigint;

  protected get [id](): number {
    return 0xACFA1A7E;
  }

  static get [name](): string {
    return "inputMessageCallbackQuery"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
      ["query_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
      [this.query_id, "bigint", "long"],
    ];
  }

  constructor(params: { id: number; query_id: bigint }) {
    super();
    this.id = params.id;
    this.query_id = params.query_id;
  }
}

/** A peer */
export class InputDialogPeer_ extends _InputDialogPeer_ {
  /** Peer */
  peer: enums.InputPeer;

  protected get [id](): number {
    return 0xFCAAFEB7;
  }

  static get [name](): string {
    return "inputDialogPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
    ];
  }

  constructor(params: { peer: enums.InputPeer }) {
    super();
    this.peer = params.peer;
  }
}

/** All peers in a [peer folder](https://core.telegram.org/api/folders#peer-folders) */
export class InputDialogPeerFolder_ extends _InputDialogPeer_ {
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id: number;

  protected get [id](): number {
    return 0x64600527;
  }

  static get [name](): string {
    return "inputDialogPeerFolder"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["folder_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.folder_id, "number", "int"],
    ];
  }

  constructor(params: { folder_id: number }) {
    super();
    this.folder_id = params.folder_id;
  }
}

/** Peer */
export class DialogPeer_ extends _DialogPeer_ {
  /** Peer */
  peer: enums.Peer;

  protected get [id](): number {
    return 0xE56DBF05;
  }

  static get [name](): string {
    return "dialogPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
    ];
  }

  constructor(params: { peer: enums.Peer }) {
    super();
    this.peer = params.peer;
  }
}

/** [Peer folder](https://core.telegram.org/api/folders#peer-folders) */
export class DialogPeerFolder_ extends _DialogPeer_ {
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id: number;

  protected get [id](): number {
    return 0x514519E2;
  }

  static get [name](): string {
    return "dialogPeerFolder"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["folder_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.folder_id, "number", "int"],
    ];
  }

  constructor(params: { folder_id: number }) {
    super();
    this.folder_id = params.folder_id;
  }
}

/** No further results were found */
export class messages_FoundStickerSetsNotModified_ extends _messages_FoundStickerSets_ {
  protected get [id](): number {
    return 0x0D54B65D;
  }

  static get [name](): string {
    return "messages.foundStickerSetsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Found stickersets */
export class messages_FoundStickerSets_ extends _messages_FoundStickerSets_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Found stickersets */
  sets: Array<enums.StickerSetCovered>;

  protected get [id](): number {
    return 0x8AF09DD2;
  }

  static get [name](): string {
    return "messages.foundStickerSets"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
    ];
  }

  constructor(params: { hash: bigint; sets: Array<enums.StickerSetCovered> }) {
    super();
    this.hash = params.hash;
    this.sets = params.sets;
  }
}

/** SHA256 Hash of an uploaded file, to be checked for validity after download */
export class FileHash_ extends _FileHash_ {
  /** Offset from where to start computing SHA-256 hash */
  offset: bigint;
  /** Length */
  limit: number;
  /** SHA-256 Hash of file chunk, to be checked for validity after download */
  hash: Uint8Array;

  protected get [id](): number {
    return 0xF39B035C;
  }

  static get [name](): string {
    return "fileHash"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["offset", "bigint", "long"],
      ["limit", "number", "int"],
      ["hash", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.offset, "bigint", "long"],
      [this.limit, "number", "int"],
      [this.hash, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { offset: bigint; limit: number; hash: Uint8Array }) {
    super();
    this.offset = params.offset;
    this.limit = params.limit;
    this.hash = params.hash;
  }
}

/** Info about an [MTProxy](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) used to connect. */
export class InputClientProxy_ extends _InputClientProxy_ {
  /** Proxy address */
  address: string;
  /** Proxy port */
  port: number;

  protected get [id](): number {
    return 0x75588B3F;
  }

  static get [name](): string {
    return "inputClientProxy"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["address", "string", "string"],
      ["port", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.address, "string", "string"],
      [this.port, "number", "int"],
    ];
  }

  constructor(params: { address: string; port: number }) {
    super();
    this.address = params.address;
    this.port = params.port;
  }
}

/** No changes were made to telegram's terms of service */
export class help_TermsOfServiceUpdateEmpty_ extends _help_TermsOfServiceUpdate_ {
  /** New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) in `expires` seconds */
  expires: number;

  protected get [id](): number {
    return 0xE3309F7F;
  }

  static get [name](): string {
    return "help.termsOfServiceUpdateEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["expires", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.expires, "number", "int"],
    ];
  }

  constructor(params: { expires: number }) {
    super();
    this.expires = params.expires;
  }
}

/** Info about an update of telegram's terms of service. If the terms of service are declined, then the [account.deleteAccount](https://core.telegram.org/method/account.deleteAccount) method should be called with the reason "Decline ToS update" */
export class help_TermsOfServiceUpdate_ extends _help_TermsOfServiceUpdate_ {
  /** New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) in `expires` seconds */
  expires: number;
  /** New terms of service */
  terms_of_service: enums.help.TermsOfService;

  protected get [id](): number {
    return 0x28ECF961;
  }

  static get [name](): string {
    return "help.termsOfServiceUpdate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["expires", "number", "int"],
      ["terms_of_service", _help_TermsOfService_, "help.TermsOfService"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.expires, "number", "int"],
      [this.terms_of_service, _help_TermsOfService_, "help.TermsOfService"],
    ];
  }

  constructor(params: { expires: number; terms_of_service: enums.help.TermsOfService }) {
    super();
    this.expires = params.expires;
    this.terms_of_service = params.terms_of_service;
  }
}

/** Uploaded secure file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile) */
export class InputSecureFileUploaded_ extends _InputSecureFile_ {
  /** Secure file ID */
  id: bigint;
  /** Secure file part count */
  parts: number;
  /** MD5 hash of encrypted uploaded file, to be checked server-side */
  md5_checksum: string;
  /** File hash */
  file_hash: Uint8Array;
  /** Secret */
  secret: Uint8Array;

  protected get [id](): number {
    return 0x3334B0F0;
  }

  static get [name](): string {
    return "inputSecureFileUploaded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["parts", "number", "int"],
      ["md5_checksum", "string", "string"],
      ["file_hash", Uint8Array, "bytes"],
      ["secret", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.parts, "number", "int"],
      [this.md5_checksum, "string", "string"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.secret, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { id: bigint; parts: number; md5_checksum: string; file_hash: Uint8Array; secret: Uint8Array }) {
    super();
    this.id = params.id;
    this.parts = params.parts;
    this.md5_checksum = params.md5_checksum;
    this.file_hash = params.file_hash;
    this.secret = params.secret;
  }
}

/** Pre-uploaded [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile) */
export class InputSecureFile_ extends _InputSecureFile_ {
  /** Secure file ID */
  id: bigint;
  /** Secure file access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0x5367E5BE;
  }

  static get [name](): string {
    return "inputSecureFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Empty constructor */
export class SecureFileEmpty_ extends _SecureFile_ {
  protected get [id](): number {
    return 0x64199744;
  }

  static get [name](): string {
    return "secureFileEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile) */
export class SecureFile_ extends _SecureFile_ {
  /** ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;
  /** File size */
  size: bigint;
  /** DC ID */
  dc_id: number;
  /** Date of upload */
  date: number;
  /** File hash */
  file_hash: Uint8Array;
  /** Secret */
  secret: Uint8Array;

  protected get [id](): number {
    return 0x7D09C27E;
  }

  static get [name](): string {
    return "secureFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["size", "bigint", "long"],
      ["dc_id", "number", "int"],
      ["date", "number", "int"],
      ["file_hash", Uint8Array, "bytes"],
      ["secret", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.size, "bigint", "long"],
      [this.dc_id, "number", "int"],
      [this.date, "number", "int"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.secret, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; size: bigint; dc_id: number; date: number; file_hash: Uint8Array; secret: Uint8Array }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.size = params.size;
    this.dc_id = params.dc_id;
    this.date = params.date;
    this.file_hash = params.file_hash;
    this.secret = params.secret;
  }
}

/** Secure [passport](https://core.telegram.org/passport) data, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#securedata) */
export class SecureData_ extends _SecureData_ {
  /** Data */
  data: Uint8Array;
  /** Data hash */
  data_hash: Uint8Array;
  /** Secret */
  secret: Uint8Array;

  protected get [id](): number {
    return 0x8AEABEC3;
  }

  static get [name](): string {
    return "secureData"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["data", Uint8Array, "bytes"],
      ["data_hash", Uint8Array, "bytes"],
      ["secret", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.data, Uint8Array, "bytes"],
      [this.data_hash, Uint8Array, "bytes"],
      [this.secret, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { data: Uint8Array; data_hash: Uint8Array; secret: Uint8Array }) {
    super();
    this.data = params.data;
    this.data_hash = params.data_hash;
    this.secret = params.secret;
  }
}

/** Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata). */
export class SecurePlainPhone_ extends _SecurePlainData_ {
  /** Phone number */
  phone: string;

  protected get [id](): number {
    return 0x7D6099DD;
  }

  static get [name](): string {
    return "securePlainPhone"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone, "string", "string"],
    ];
  }

  constructor(params: { phone: string }) {
    super();
    this.phone = params.phone;
  }
}

/** Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata). */
export class SecurePlainEmail_ extends _SecurePlainData_ {
  /** Email address */
  email: string;

  protected get [id](): number {
    return 0x21EC5A5F;
  }

  static get [name](): string {
    return "securePlainEmail"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["email", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.email, "string", "string"],
    ];
  }

  constructor(params: { email: string }) {
    super();
    this.email = params.email;
  }
}

/** Personal details */
export class SecureValueTypePersonalDetails_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x9D2A81E3;
  }

  static get [name](): string {
    return "secureValueTypePersonalDetails"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Passport */
export class SecureValueTypePassport_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x3DAC6A00;
  }

  static get [name](): string {
    return "secureValueTypePassport"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Driver's license */
export class SecureValueTypeDriverLicense_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x06E425C4;
  }

  static get [name](): string {
    return "secureValueTypeDriverLicense"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Identity card */
export class SecureValueTypeIdentityCard_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0xA0D0744B;
  }

  static get [name](): string {
    return "secureValueTypeIdentityCard"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Internal [passport](https://core.telegram.org/passport) */
export class SecureValueTypeInternalPassport_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x99A48F23;
  }

  static get [name](): string {
    return "secureValueTypeInternalPassport"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Address */
export class SecureValueTypeAddress_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0xCBE31E26;
  }

  static get [name](): string {
    return "secureValueTypeAddress"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Utility bill */
export class SecureValueTypeUtilityBill_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0xFC36954E;
  }

  static get [name](): string {
    return "secureValueTypeUtilityBill"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Bank statement */
export class SecureValueTypeBankStatement_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x89137C0D;
  }

  static get [name](): string {
    return "secureValueTypeBankStatement"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Rental agreement */
export class SecureValueTypeRentalAgreement_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x8B883488;
  }

  static get [name](): string {
    return "secureValueTypeRentalAgreement"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Internal registration [passport](https://core.telegram.org/passport) */
export class SecureValueTypePassportRegistration_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x99E3806A;
  }

  static get [name](): string {
    return "secureValueTypePassportRegistration"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Temporary registration */
export class SecureValueTypeTemporaryRegistration_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0xEA02EC33;
  }

  static get [name](): string {
    return "secureValueTypeTemporaryRegistration"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Phone */
export class SecureValueTypePhone_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0xB320AADB;
  }

  static get [name](): string {
    return "secureValueTypePhone"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Email */
export class SecureValueTypeEmail_ extends _SecureValueType_ {
  protected get [id](): number {
    return 0x8E3CA7EE;
  }

  static get [name](): string {
    return "secureValueTypeEmail"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Secure value */
export class SecureValue_ extends _SecureValue_ {
  /** Secure [passport](https://core.telegram.org/passport) value type */
  type: enums.SecureValueType;
  /** Encrypted [Telegram Passport](https://core.telegram.org/passport) element data */
  data?: enums.SecureData;
  /** Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document */
  front_side?: enums.SecureFile;
  /** Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document */
  reverse_side?: enums.SecureFile;
  /** Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document */
  selfie?: enums.SecureFile;
  /** Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents */
  translation?: Array<enums.SecureFile>;
  /** Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents */
  files?: Array<enums.SecureFile>;
  /** Plaintext verified [passport](https://core.telegram.org/passport) data */
  plain_data?: enums.SecurePlainData;
  /** Data hash */
  hash: Uint8Array;

  protected get [id](): number {
    return 0x187FA0CA;
  }

  static get [name](): string {
    return "secureValue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["type", _SecureValueType_, "SecureValueType"],
      ["data", _SecureData_, "flags.0?SecureData"],
      ["front_side", _SecureFile_, "flags.1?SecureFile"],
      ["reverse_side", _SecureFile_, "flags.2?SecureFile"],
      ["selfie", _SecureFile_, "flags.3?SecureFile"],
      ["translation", [_SecureFile_], "flags.6?Vector<SecureFile>"],
      ["files", [_SecureFile_], "flags.4?Vector<SecureFile>"],
      ["plain_data", _SecurePlainData_, "flags.5?SecurePlainData"],
      ["hash", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.data ?? null, _SecureData_, "flags.0?SecureData"],
      [this.front_side ?? null, _SecureFile_, "flags.1?SecureFile"],
      [this.reverse_side ?? null, _SecureFile_, "flags.2?SecureFile"],
      [this.selfie ?? null, _SecureFile_, "flags.3?SecureFile"],
      [this.translation ?? null, [_SecureFile_], "flags.6?Vector<SecureFile>"],
      [this.files ?? null, [_SecureFile_], "flags.4?Vector<SecureFile>"],
      [this.plain_data ?? null, _SecurePlainData_, "flags.5?SecurePlainData"],
      [this.hash, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; data?: enums.SecureData; front_side?: enums.SecureFile; reverse_side?: enums.SecureFile; selfie?: enums.SecureFile; translation?: Array<enums.SecureFile>; files?: Array<enums.SecureFile>; plain_data?: enums.SecurePlainData; hash: Uint8Array }) {
    super();
    this.type = params.type;
    this.data = params.data;
    this.front_side = params.front_side;
    this.reverse_side = params.reverse_side;
    this.selfie = params.selfie;
    this.translation = params.translation;
    this.files = params.files;
    this.plain_data = params.plain_data;
    this.hash = params.hash;
  }
}

/** Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption) */
export class InputSecureValue_ extends _InputSecureValue_ {
  /** Secure [passport](https://core.telegram.org/passport) value type */
  type: enums.SecureValueType;
  /** Encrypted [Telegram Passport](https://core.telegram.org/passport) element data */
  data?: enums.SecureData;
  /** Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document */
  front_side?: enums.InputSecureFile;
  /** Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document */
  reverse_side?: enums.InputSecureFile;
  /** Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document */
  selfie?: enums.InputSecureFile;
  /** Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents */
  translation?: Array<enums.InputSecureFile>;
  /** Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents */
  files?: Array<enums.InputSecureFile>;
  /** Plaintext verified [passport](https://core.telegram.org/passport) data */
  plain_data?: enums.SecurePlainData;

  protected get [id](): number {
    return 0xDB21D0A7;
  }

  static get [name](): string {
    return "inputSecureValue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["type", _SecureValueType_, "SecureValueType"],
      ["data", _SecureData_, "flags.0?SecureData"],
      ["front_side", _InputSecureFile_, "flags.1?InputSecureFile"],
      ["reverse_side", _InputSecureFile_, "flags.2?InputSecureFile"],
      ["selfie", _InputSecureFile_, "flags.3?InputSecureFile"],
      ["translation", [_InputSecureFile_], "flags.6?Vector<InputSecureFile>"],
      ["files", [_InputSecureFile_], "flags.4?Vector<InputSecureFile>"],
      ["plain_data", _SecurePlainData_, "flags.5?SecurePlainData"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.data ?? null, _SecureData_, "flags.0?SecureData"],
      [this.front_side ?? null, _InputSecureFile_, "flags.1?InputSecureFile"],
      [this.reverse_side ?? null, _InputSecureFile_, "flags.2?InputSecureFile"],
      [this.selfie ?? null, _InputSecureFile_, "flags.3?InputSecureFile"],
      [this.translation ?? null, [_InputSecureFile_], "flags.6?Vector<InputSecureFile>"],
      [this.files ?? null, [_InputSecureFile_], "flags.4?Vector<InputSecureFile>"],
      [this.plain_data ?? null, _SecurePlainData_, "flags.5?SecurePlainData"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; data?: enums.SecureData; front_side?: enums.InputSecureFile; reverse_side?: enums.InputSecureFile; selfie?: enums.InputSecureFile; translation?: Array<enums.InputSecureFile>; files?: Array<enums.InputSecureFile>; plain_data?: enums.SecurePlainData }) {
    super();
    this.type = params.type;
    this.data = params.data;
    this.front_side = params.front_side;
    this.reverse_side = params.reverse_side;
    this.selfie = params.selfie;
    this.translation = params.translation;
    this.files = params.files;
    this.plain_data = params.plain_data;
  }
}

/** Secure value hash */
export class SecureValueHash_ extends _SecureValueHash_ {
  /** Secure value type */
  type: enums.SecureValueType;
  /** Hash */
  hash: Uint8Array;

  protected get [id](): number {
    return 0xED1ECDB0;
  }

  static get [name](): string {
    return "secureValueHash"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["hash", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.hash, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; hash: Uint8Array }) {
    super();
    this.type = params.type;
    this.hash = params.hash;
  }
}

/** Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes. */
export class SecureValueErrorData_ extends _SecureValueError_ {
  /** The section of the user's Telegram Passport which has the error, one of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeAddress](https://core.telegram.org/constructor/secureValueTypeAddress) */
  type: enums.SecureValueType;
  /** Data hash */
  data_hash: Uint8Array;
  /** Name of the data field which has the error */
  field: string;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0xE8A40BD9;
  }

  static get [name](): string {
    return "secureValueErrorData"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["data_hash", Uint8Array, "bytes"],
      ["field", "string", "string"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.data_hash, Uint8Array, "bytes"],
      [this.field, "string", "string"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; data_hash: Uint8Array; field: string; text: string }) {
    super();
    this.type = params.type;
    this.data_hash = params.data_hash;
    this.field = params.field;
    this.text = params.text;
  }
}

/** Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes. */
export class SecureValueErrorFrontSide_ extends _SecureValueError_ {
  /** One of [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport) */
  type: enums.SecureValueType;
  /** File hash */
  file_hash: Uint8Array;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0x00BE3DFA;
  }

  static get [name](): string {
    return "secureValueErrorFrontSide"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", Uint8Array, "bytes"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Uint8Array; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes. */
export class SecureValueErrorReverseSide_ extends _SecureValueError_ {
  /** One of [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard) */
  type: enums.SecureValueType;
  /** File hash */
  file_hash: Uint8Array;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0x868A2AA5;
  }

  static get [name](): string {
    return "secureValueErrorReverseSide"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", Uint8Array, "bytes"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Uint8Array; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes. */
export class SecureValueErrorSelfie_ extends _SecureValueError_ {
  /** One of [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport) */
  type: enums.SecureValueType;
  /** File hash */
  file_hash: Uint8Array;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0xE537CED6;
  }

  static get [name](): string {
    return "secureValueErrorSelfie"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", Uint8Array, "bytes"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Uint8Array; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes. */
export class SecureValueErrorFile_ extends _SecureValueError_ {
  /** One of [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
  type: enums.SecureValueType;
  /** File hash */
  file_hash: Uint8Array;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0x7A700873;
  }

  static get [name](): string {
    return "secureValueErrorFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", Uint8Array, "bytes"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Uint8Array; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes. */
export class SecureValueErrorFiles_ extends _SecureValueError_ {
  /** One of [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
  type: enums.SecureValueType;
  /** File hash */
  file_hash: Array<Uint8Array>;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0x666220E9;
  }

  static get [name](): string {
    return "secureValueErrorFiles"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", [Uint8Array], "Vector<bytes>"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, [Uint8Array], "Vector<bytes>"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Array<Uint8Array>; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Secure value error */
export class SecureValueError_ extends _SecureValueError_ {
  /** Type of element which has the issue */
  type: enums.SecureValueType;
  /** Hash */
  hash: Uint8Array;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0x869D758F;
  }

  static get [name](): string {
    return "secureValueError"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["hash", Uint8Array, "bytes"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.hash, Uint8Array, "bytes"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; hash: Uint8Array; text: string }) {
    super();
    this.type = params.type;
    this.hash = params.hash;
    this.text = params.text;
  }
}

/** Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes. */
export class SecureValueErrorTranslationFile_ extends _SecureValueError_ {
  /** One of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
  type: enums.SecureValueType;
  /** File hash */
  file_hash: Uint8Array;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0xA1144770;
  }

  static get [name](): string {
    return "secureValueErrorTranslationFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", Uint8Array, "bytes"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, Uint8Array, "bytes"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Uint8Array; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes. */
export class SecureValueErrorTranslationFiles_ extends _SecureValueError_ {
  /** One of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
  type: enums.SecureValueType;
  /** Hash */
  file_hash: Array<Uint8Array>;
  /** Error message */
  text: string;

  protected get [id](): number {
    return 0x34636DD8;
  }

  static get [name](): string {
    return "secureValueErrorTranslationFiles"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["type", _SecureValueType_, "SecureValueType"],
      ["file_hash", [Uint8Array], "Vector<bytes>"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.type, _SecureValueType_, "SecureValueType"],
      [this.file_hash, [Uint8Array], "Vector<bytes>"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { type: enums.SecureValueType; file_hash: Array<Uint8Array>; text: string }) {
    super();
    this.type = params.type;
    this.file_hash = params.file_hash;
    this.text = params.text;
  }
}

/** Encrypted credentials required to decrypt [telegram passport](https://core.telegram.org/passport) data. */
export class SecureCredentialsEncrypted_ extends _SecureCredentialsEncrypted_ {
  /** Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data) */
  data: Uint8Array;
  /** Data hash for data authentication as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data) */
  hash: Uint8Array;
  /** Secret, encrypted with the bot's public RSA key, required for data decryption as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data) */
  secret: Uint8Array;

  protected get [id](): number {
    return 0x33F0EA47;
  }

  static get [name](): string {
    return "secureCredentialsEncrypted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["data", Uint8Array, "bytes"],
      ["hash", Uint8Array, "bytes"],
      ["secret", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.data, Uint8Array, "bytes"],
      [this.hash, Uint8Array, "bytes"],
      [this.secret, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { data: Uint8Array; hash: Uint8Array; secret: Uint8Array }) {
    super();
    this.data = params.data;
    this.hash = params.hash;
    this.secret = params.secret;
  }
}

/** [Telegram Passport](https://core.telegram.org/passport) authorization form */
export class account_AuthorizationForm_ extends _account_AuthorizationForm_ {
  /** Required [Telegram Passport](https://core.telegram.org/passport) documents */
  required_types: Array<enums.SecureRequiredType>;
  /** Already submitted [Telegram Passport](https://core.telegram.org/passport) documents */
  values: Array<enums.SecureValue>;
  /** [Telegram Passport](https://core.telegram.org/passport) errors */
  errors: Array<enums.SecureValueError>;
  /** Info about the bot to which the form will be submitted */
  users: Array<enums.User>;
  /** URL of the service's privacy policy */
  privacy_policy_url?: string;

  protected get [id](): number {
    return 0xAD2E1CD8;
  }

  static get [name](): string {
    return "account.authorizationForm"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["required_types", [_SecureRequiredType_], "Vector<SecureRequiredType>"],
      ["values", [_SecureValue_], "Vector<SecureValue>"],
      ["errors", [_SecureValueError_], "Vector<SecureValueError>"],
      ["users", [_User_], "Vector<User>"],
      ["privacy_policy_url", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.required_types, [_SecureRequiredType_], "Vector<SecureRequiredType>"],
      [this.values, [_SecureValue_], "Vector<SecureValue>"],
      [this.errors, [_SecureValueError_], "Vector<SecureValueError>"],
      [this.users, [_User_], "Vector<User>"],
      [this.privacy_policy_url ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { required_types: Array<enums.SecureRequiredType>; values: Array<enums.SecureValue>; errors: Array<enums.SecureValueError>; users: Array<enums.User>; privacy_policy_url?: string }) {
    super();
    this.required_types = params.required_types;
    this.values = params.values;
    this.errors = params.errors;
    this.users = params.users;
    this.privacy_policy_url = params.privacy_policy_url;
  }
}

/** The sent email code */
export class account_SentEmailCode_ extends _account_SentEmailCode_ {
  /** The email (to which the code was sent) must match this [pattern](https://core.telegram.org/api/pattern) */
  email_pattern: string;
  /** The length of the verification code */
  length: number;

  protected get [id](): number {
    return 0x811F854F;
  }

  static get [name](): string {
    return "account.sentEmailCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["email_pattern", "string", "string"],
      ["length", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.email_pattern, "string", "string"],
      [this.length, "number", "int"],
    ];
  }

  constructor(params: { email_pattern: string; length: number }) {
    super();
    this.email_pattern = params.email_pattern;
    this.length = params.length;
  }
}

/** Deep link info empty */
export class help_DeepLinkInfoEmpty_ extends _help_DeepLinkInfo_ {
  protected get [id](): number {
    return 0x66AFA166;
  }

  static get [name](): string {
    return "help.deepLinkInfoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Deep link info, see [the here for more details](https://core.telegram.org/api/links#unsupported-links) */
export class help_DeepLinkInfo_ extends _help_DeepLinkInfo_ {
  /** An update of the app is required to parse this link */
  update_app?: true;
  /** Message to show to the user */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;

  protected get [id](): number {
    return 0x6A4EE832;
  }

  static get [name](): string {
    return "help.deepLinkInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["update_app", "true", "flags.0?true"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.update_app ?? null, "true", "flags.0?true"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
    ];
  }

  constructor(params: { update_app?: true; message: string; entities?: Array<enums.MessageEntity> }) {
    super();
    this.update_app = params.update_app;
    this.message = params.message;
    this.entities = params.entities;
  }
}

/** Saved contact */
export class SavedPhoneContact_ extends _SavedContact_ {
  /** Phone number */
  phone: string;
  /** First name */
  first_name: string;
  /** Last name */
  last_name: string;
  /** Date added */
  date: number;

  protected get [id](): number {
    return 0x1142BD56;
  }

  static get [name](): string {
    return "savedPhoneContact"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone", "string", "string"],
      ["first_name", "string", "string"],
      ["last_name", "string", "string"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone, "string", "string"],
      [this.first_name, "string", "string"],
      [this.last_name, "string", "string"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { phone: string; first_name: string; last_name: string; date: number }) {
    super();
    this.phone = params.phone;
    this.first_name = params.first_name;
    this.last_name = params.last_name;
    this.date = params.date;
  }
}

/** Takeout info */
export class account_Takeout_ extends _account_Takeout_ {
  /** Takeout ID */
  id: bigint;

  protected get [id](): number {
    return 0x4DBA4501;
  }

  static get [name](): string {
    return "account.takeout"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm) */
export class PasswordKdfAlgoUnknown_ extends _PasswordKdfAlgo_ {
  protected get [id](): number {
    return 0xD45AB096;
  }

  static get [name](): string {
    return "passwordKdfAlgoUnknown"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** This key derivation algorithm defines that [SRP 2FA login](https://core.telegram.org/api/srp) must be used */
export class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_ extends _PasswordKdfAlgo_ {
  /** One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
  salt1: Uint8Array;
  /** One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
  salt2: Uint8Array;
  /** Base (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
  g: number;
  /** 2048-bit modulus (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
  p: Uint8Array;

  protected get [id](): number {
    return 0x3A912D4A;
  }

  static get [name](): string {
    return "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["salt1", Uint8Array, "bytes"],
      ["salt2", Uint8Array, "bytes"],
      ["g", "number", "int"],
      ["p", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.salt1, Uint8Array, "bytes"],
      [this.salt2, Uint8Array, "bytes"],
      [this.g, "number", "int"],
      [this.p, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { salt1: Uint8Array; salt2: Uint8Array; g: number; p: Uint8Array }) {
    super();
    this.salt1 = params.salt1;
    this.salt2 = params.salt2;
    this.g = params.g;
    this.p = params.p;
  }
}

/** Unknown KDF algo (most likely the client has to be updated) */
export class SecurePasswordKdfAlgoUnknown_ extends _SecurePasswordKdfAlgo_ {
  protected get [id](): number {
    return 0x004A8537;
  }

  static get [name](): string {
    return "securePasswordKdfAlgoUnknown"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** PBKDF2 with SHA512 and 100000 iterations KDF algo */
export class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_ extends _SecurePasswordKdfAlgo_ {
  /** Salt */
  salt: Uint8Array;

  protected get [id](): number {
    return 0xBBF2DDA0;
  }

  static get [name](): string {
    return "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["salt", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.salt, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { salt: Uint8Array }) {
    super();
    this.salt = params.salt;
  }
}

/** SHA512 KDF algo */
export class SecurePasswordKdfAlgoSHA512_ extends _SecurePasswordKdfAlgo_ {
  /** Salt */
  salt: Uint8Array;

  protected get [id](): number {
    return 0x86471D92;
  }

  static get [name](): string {
    return "securePasswordKdfAlgoSHA512"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["salt", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.salt, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { salt: Uint8Array }) {
    super();
    this.salt = params.salt;
  }
}

/** Secure settings */
export class SecureSecretSettings_ extends _SecureSecretSettings_ {
  /** Secure KDF algo */
  secure_algo: enums.SecurePasswordKdfAlgo;
  /** Secure secret */
  secure_secret: Uint8Array;
  /** Secret ID */
  secure_secret_id: bigint;

  protected get [id](): number {
    return 0x1527BCAC;
  }

  static get [name](): string {
    return "secureSecretSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["secure_algo", _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
      ["secure_secret", Uint8Array, "bytes"],
      ["secure_secret_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.secure_algo, _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
      [this.secure_secret, Uint8Array, "bytes"],
      [this.secure_secret_id, "bigint", "long"],
    ];
  }

  constructor(params: { secure_algo: enums.SecurePasswordKdfAlgo; secure_secret: Uint8Array; secure_secret_id: bigint }) {
    super();
    this.secure_algo = params.secure_algo;
    this.secure_secret = params.secure_secret;
    this.secure_secret_id = params.secure_secret_id;
  }
}

/** There is no password */
export class InputCheckPasswordEmpty_ extends _InputCheckPasswordSRP_ {
  protected get [id](): number {
    return 0x9880F658;
  }

  static get [name](): string {
    return "inputCheckPasswordEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Constructor for checking the validity of a 2FA SRP password (see [SRP](https://core.telegram.org/api/srp)) */
export class InputCheckPasswordSRP_ extends _InputCheckPasswordSRP_ {
  /** [SRP ID](https://core.telegram.org/api/srp) */
  srp_id: bigint;
  /** `A` parameter (see [SRP](https://core.telegram.org/api/srp)) */
  A: Uint8Array;
  /** `M1` parameter (see [SRP](https://core.telegram.org/api/srp)) */
  M1: Uint8Array;

  protected get [id](): number {
    return 0xD27FF082;
  }

  static get [name](): string {
    return "inputCheckPasswordSRP"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["srp_id", "bigint", "long"],
      ["A", Uint8Array, "bytes"],
      ["M1", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.srp_id, "bigint", "long"],
      [this.A, Uint8Array, "bytes"],
      [this.M1, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { srp_id: bigint; A: Uint8Array; M1: Uint8Array }) {
    super();
    this.srp_id = params.srp_id;
    this.A = params.A;
    this.M1 = params.M1;
  }
}

/** Required type */
export class SecureRequiredType_ extends _SecureRequiredType_ {
  /** Native names */
  native_names?: true;
  /** Is a selfie required */
  selfie_required?: true;
  /** Is a translation required */
  translation_required?: true;
  /** Secure value type */
  type: enums.SecureValueType;

  protected get [id](): number {
    return 0x829D99DA;
  }

  static get [name](): string {
    return "secureRequiredType"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["native_names", "true", "flags.0?true"],
      ["selfie_required", "true", "flags.1?true"],
      ["translation_required", "true", "flags.2?true"],
      ["type", _SecureValueType_, "SecureValueType"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.native_names ?? null, "true", "flags.0?true"],
      [this.selfie_required ?? null, "true", "flags.1?true"],
      [this.translation_required ?? null, "true", "flags.2?true"],
      [this.type, _SecureValueType_, "SecureValueType"],
    ];
  }

  constructor(params: { native_names?: true; selfie_required?: true; translation_required?: true; type: enums.SecureValueType }) {
    super();
    this.native_names = params.native_names;
    this.selfie_required = params.selfie_required;
    this.translation_required = params.translation_required;
    this.type = params.type;
  }
}

/** One of */
export class SecureRequiredTypeOneOf_ extends _SecureRequiredType_ {
  /** Secure required value types */
  types: Array<enums.SecureRequiredType>;

  protected get [id](): number {
    return 0x027477B4;
  }

  static get [name](): string {
    return "secureRequiredTypeOneOf"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["types", [_SecureRequiredType_], "Vector<SecureRequiredType>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.types, [_SecureRequiredType_], "Vector<SecureRequiredType>"],
    ];
  }

  constructor(params: { types: Array<enums.SecureRequiredType> }) {
    super();
    this.types = params.types;
  }
}

/** Password configuration not modified */
export class help_PassportConfigNotModified_ extends _help_PassportConfig_ {
  protected get [id](): number {
    return 0xBFB9F457;
  }

  static get [name](): string {
    return "help.passportConfigNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Telegram [passport](https://core.telegram.org/passport) configuration */
export class help_PassportConfig_ extends _help_PassportConfig_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;
  /** Localization */
  countries_langs: enums.DataJSON;

  protected get [id](): number {
    return 0xA098D6AF;
  }

  static get [name](): string {
    return "help.passportConfig"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "number", "int"],
      ["countries_langs", _DataJSON_, "DataJSON"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "number", "int"],
      [this.countries_langs, _DataJSON_, "DataJSON"],
    ];
  }

  constructor(params: { hash: number; countries_langs: enums.DataJSON }) {
    super();
    this.hash = params.hash;
    this.countries_langs = params.countries_langs;
  }
}

/** Event that occurred in the application. */
export class InputAppEvent_ extends _InputAppEvent_ {
  /** Client's exact timestamp for the event */
  time: number;
  /** Type of event */
  type: string;
  /** Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object */
  peer: bigint;
  /** Details of the event */
  data: enums.JSONValue;

  protected get [id](): number {
    return 0x1D1B1245;
  }

  static get [name](): string {
    return "inputAppEvent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["time", "number", "double"],
      ["type", "string", "string"],
      ["peer", "bigint", "long"],
      ["data", _JSONValue_, "JSONValue"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.time, "number", "double"],
      [this.type, "string", "string"],
      [this.peer, "bigint", "long"],
      [this.data, _JSONValue_, "JSONValue"],
    ];
  }

  constructor(params: { time: number; type: string; peer: bigint; data: enums.JSONValue }) {
    super();
    this.time = params.time;
    this.type = params.type;
    this.peer = params.peer;
    this.data = params.data;
  }
}

/** JSON key: value pair */
export class JsonObjectValue_ extends _JSONObjectValue_ {
  /** Key */
  key: string;
  /** Value */
  value: enums.JSONValue;

  protected get [id](): number {
    return 0xC0DE1BD9;
  }

  static get [name](): string {
    return "jsonObjectValue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["key", "string", "string"],
      ["value", _JSONValue_, "JSONValue"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.key, "string", "string"],
      [this.value, _JSONValue_, "JSONValue"],
    ];
  }

  constructor(params: { key: string; value: enums.JSONValue }) {
    super();
    this.key = params.key;
    this.value = params.value;
  }
}

/** null JSON value */
export class JsonNull_ extends _JSONValue_ {
  protected get [id](): number {
    return 0x3F6D7B68;
  }

  static get [name](): string {
    return "jsonNull"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** JSON boolean value */
export class JsonBool_ extends _JSONValue_ {
  /** Value */
  value: boolean;

  protected get [id](): number {
    return 0xC7345E6A;
  }

  static get [name](): string {
    return "jsonBool"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["value", "boolean", "Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.value, "boolean", "Bool"],
    ];
  }

  constructor(params: { value: boolean }) {
    super();
    this.value = params.value;
  }
}

/** JSON numeric value */
export class JsonNumber_ extends _JSONValue_ {
  /** Value */
  value: number;

  protected get [id](): number {
    return 0x2BE0DFA4;
  }

  static get [name](): string {
    return "jsonNumber"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["value", "number", "double"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.value, "number", "double"],
    ];
  }

  constructor(params: { value: number }) {
    super();
    this.value = params.value;
  }
}

/** JSON string */
export class JsonString_ extends _JSONValue_ {
  /** Value */
  value: string;

  protected get [id](): number {
    return 0xB71E767A;
  }

  static get [name](): string {
    return "jsonString"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["value", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.value, "string", "string"],
    ];
  }

  constructor(params: { value: string }) {
    super();
    this.value = params.value;
  }
}

/** JSON array */
export class JsonArray_ extends _JSONValue_ {
  /** JSON values */
  value: Array<enums.JSONValue>;

  protected get [id](): number {
    return 0xF7444763;
  }

  static get [name](): string {
    return "jsonArray"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["value", [_JSONValue_], "Vector<JSONValue>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.value, [_JSONValue_], "Vector<JSONValue>"],
    ];
  }

  constructor(params: { value: Array<enums.JSONValue> }) {
    super();
    this.value = params.value;
  }
}

/** JSON object value */
export class JsonObject_ extends _JSONValue_ {
  /** Values */
  value: Array<enums.JSONObjectValue>;

  protected get [id](): number {
    return 0x99C1D49D;
  }

  static get [name](): string {
    return "jsonObject"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["value", [_JSONObjectValue_], "Vector<JSONObjectValue>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.value, [_JSONObjectValue_], "Vector<JSONObjectValue>"],
    ];
  }

  constructor(params: { value: Array<enums.JSONObjectValue> }) {
    super();
    this.value = params.value;
  }
}

/** Table cell */
export class PageTableCell_ extends _PageTableCell_ {
  /** Is this element part of the column header */
  header?: true;
  /** Horizontally centered block */
  align_center?: true;
  /** Right-aligned block */
  align_right?: true;
  /** Vertically centered block */
  valign_middle?: true;
  /** Block vertically-aligned to the bottom */
  valign_bottom?: true;
  /** Content */
  text?: enums.RichText;
  /** For how many columns should this cell extend */
  colspan?: number;
  /** For how many rows should this cell extend */
  rowspan?: number;

  protected get [id](): number {
    return 0x34566B6A;
  }

  static get [name](): string {
    return "pageTableCell"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["header", "true", "flags.0?true"],
      ["align_center", "true", "flags.3?true"],
      ["align_right", "true", "flags.4?true"],
      ["valign_middle", "true", "flags.5?true"],
      ["valign_bottom", "true", "flags.6?true"],
      ["text", _RichText_, "flags.7?RichText"],
      ["colspan", "number", "flags.1?int"],
      ["rowspan", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.header ?? null, "true", "flags.0?true"],
      [this.align_center ?? null, "true", "flags.3?true"],
      [this.align_right ?? null, "true", "flags.4?true"],
      [this.valign_middle ?? null, "true", "flags.5?true"],
      [this.valign_bottom ?? null, "true", "flags.6?true"],
      [this.text ?? null, _RichText_, "flags.7?RichText"],
      [this.colspan ?? null, "number", "flags.1?int"],
      [this.rowspan ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params?: { header?: true; align_center?: true; align_right?: true; valign_middle?: true; valign_bottom?: true; text?: enums.RichText; colspan?: number; rowspan?: number }) {
    super();
    this.header = params?.header;
    this.align_center = params?.align_center;
    this.align_right = params?.align_right;
    this.valign_middle = params?.valign_middle;
    this.valign_bottom = params?.valign_bottom;
    this.text = params?.text;
    this.colspan = params?.colspan;
    this.rowspan = params?.rowspan;
  }
}

/** Table row */
export class PageTableRow_ extends _PageTableRow_ {
  /** Table cells */
  cells: Array<enums.PageTableCell>;

  protected get [id](): number {
    return 0xE0C0C5E5;
  }

  static get [name](): string {
    return "pageTableRow"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["cells", [_PageTableCell_], "Vector<PageTableCell>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.cells, [_PageTableCell_], "Vector<PageTableCell>"],
    ];
  }

  constructor(params: { cells: Array<enums.PageTableCell> }) {
    super();
    this.cells = params.cells;
  }
}

/** Page caption */
export class PageCaption_ extends _PageCaption_ {
  /** Caption */
  text: enums.RichText;
  /** Credits */
  credit: enums.RichText;

  protected get [id](): number {
    return 0x6F747657;
  }

  static get [name](): string {
    return "pageCaption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
      ["credit", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
      [this.credit, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText; credit: enums.RichText }) {
    super();
    this.text = params.text;
    this.credit = params.credit;
  }
}

/** List item */
export class PageListItemText_ extends _PageListItem_ {
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0xB92FB6CD;
  }

  static get [name](): string {
    return "pageListItemText"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { text: enums.RichText }) {
    super();
    this.text = params.text;
  }
}

/** List item */
export class PageListItemBlocks_ extends _PageListItem_ {
  /** Blocks */
  blocks: Array<enums.PageBlock>;

  protected get [id](): number {
    return 0x25E073FC;
  }

  static get [name](): string {
    return "pageListItemBlocks"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["blocks", [_PageBlock_], "Vector<PageBlock>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
    ];
  }

  constructor(params: { blocks: Array<enums.PageBlock> }) {
    super();
    this.blocks = params.blocks;
  }
}

/** Ordered list of text items */
export class PageListOrderedItemText_ extends _PageListOrderedItem_ {
  /** Number of element within ordered list */
  num: string;
  /** Text */
  text: enums.RichText;

  protected get [id](): number {
    return 0x5E068047;
  }

  static get [name](): string {
    return "pageListOrderedItemText"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["num", "string", "string"],
      ["text", _RichText_, "RichText"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.num, "string", "string"],
      [this.text, _RichText_, "RichText"],
    ];
  }

  constructor(params: { num: string; text: enums.RichText }) {
    super();
    this.num = params.num;
    this.text = params.text;
  }
}

/** Ordered list of [IV](https://instantview.telegram.org) blocks */
export class PageListOrderedItemBlocks_ extends _PageListOrderedItem_ {
  /** Number of element within ordered list */
  num: string;
  /** Item contents */
  blocks: Array<enums.PageBlock>;

  protected get [id](): number {
    return 0x98DD8936;
  }

  static get [name](): string {
    return "pageListOrderedItemBlocks"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["num", "string", "string"],
      ["blocks", [_PageBlock_], "Vector<PageBlock>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.num, "string", "string"],
      [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
    ];
  }

  constructor(params: { num: string; blocks: Array<enums.PageBlock> }) {
    super();
    this.num = params.num;
    this.blocks = params.blocks;
  }
}

/** Related article */
export class PageRelatedArticle_ extends _PageRelatedArticle_ {
  /** URL of article */
  url: string;
  /** Webpage ID of generated IV preview */
  webpage_id: bigint;
  /** Title */
  title?: string;
  /** Description */
  description?: string;
  /** ID of preview photo */
  photo_id?: bigint;
  /** Author name */
  author?: string;
  /** Date of publication */
  published_date?: number;

  protected get [id](): number {
    return 0xB390DC08;
  }

  static get [name](): string {
    return "pageRelatedArticle"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["url", "string", "string"],
      ["webpage_id", "bigint", "long"],
      ["title", "string", "flags.0?string"],
      ["description", "string", "flags.1?string"],
      ["photo_id", "bigint", "flags.2?long"],
      ["author", "string", "flags.3?string"],
      ["published_date", "number", "flags.4?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.url, "string", "string"],
      [this.webpage_id, "bigint", "long"],
      [this.title ?? null, "string", "flags.0?string"],
      [this.description ?? null, "string", "flags.1?string"],
      [this.photo_id ?? null, "bigint", "flags.2?long"],
      [this.author ?? null, "string", "flags.3?string"],
      [this.published_date ?? null, "number", "flags.4?int"],
    ];
  }

  constructor(params: { url: string; webpage_id: bigint; title?: string; description?: string; photo_id?: bigint; author?: string; published_date?: number }) {
    super();
    this.url = params.url;
    this.webpage_id = params.webpage_id;
    this.title = params.title;
    this.description = params.description;
    this.photo_id = params.photo_id;
    this.author = params.author;
    this.published_date = params.published_date;
  }
}

/** [Instant view](https://instantview.telegram.org) page */
export class Page_ extends _Page_ {
  /** Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using [messages.getWebPagePreview](https://core.telegram.org/method/messages.getWebPagePreview). */
  part?: true;
  /** Whether the page contains RTL text */
  rtl?: true;
  /** Whether this is an [IV v2](https://instantview.telegram.org/docs#what-39s-new-in-2-0) page */
  v2?: true;
  /** Original page HTTP URL */
  url: string;
  /** Page elements (like with HTML elements, only as TL constructors) */
  blocks: Array<enums.PageBlock>;
  /** Photos in page */
  photos: Array<enums.Photo>;
  /** Media in page */
  documents: Array<enums.Document>;
  /** View count */
  views?: number;

  protected get [id](): number {
    return 0x98657F0D;
  }

  static get [name](): string {
    return "page"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["part", "true", "flags.0?true"],
      ["rtl", "true", "flags.1?true"],
      ["v2", "true", "flags.2?true"],
      ["url", "string", "string"],
      ["blocks", [_PageBlock_], "Vector<PageBlock>"],
      ["photos", [_Photo_], "Vector<Photo>"],
      ["documents", [_Document_], "Vector<Document>"],
      ["views", "number", "flags.3?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.part ?? null, "true", "flags.0?true"],
      [this.rtl ?? null, "true", "flags.1?true"],
      [this.v2 ?? null, "true", "flags.2?true"],
      [this.url, "string", "string"],
      [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
      [this.photos, [_Photo_], "Vector<Photo>"],
      [this.documents, [_Document_], "Vector<Document>"],
      [this.views ?? null, "number", "flags.3?int"],
    ];
  }

  constructor(params: { part?: true; rtl?: true; v2?: true; url: string; blocks: Array<enums.PageBlock>; photos: Array<enums.Photo>; documents: Array<enums.Document>; views?: number }) {
    super();
    this.part = params.part;
    this.rtl = params.rtl;
    this.v2 = params.v2;
    this.url = params.url;
    this.blocks = params.blocks;
    this.photos = params.photos;
    this.documents = params.documents;
    this.views = params.views;
  }
}

/** Localized name for telegram support */
export class help_SupportName_ extends _help_SupportName_ {
  /** Localized name */
  name: string;

  protected get [id](): number {
    return 0x8C05F1C9;
  }

  static get [name](): string {
    return "help.supportName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.name, "string", "string"],
    ];
  }

  constructor(params: { name: string }) {
    super();
    this.name = params.name;
  }
}

/** Internal use */
export class help_UserInfoEmpty_ extends _help_UserInfo_ {
  protected get [id](): number {
    return 0xF3AE2EED;
  }

  static get [name](): string {
    return "help.userInfoEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Internal use */
export class help_UserInfo_ extends _help_UserInfo_ {
  /** Info */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities: Array<enums.MessageEntity>;
  /** Author */
  author: string;
  /** Date */
  date: number;

  protected get [id](): number {
    return 0x01EB3758;
  }

  static get [name](): string {
    return "help.userInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
      ["author", "string", "string"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, "string", "string"],
      [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
      [this.author, "string", "string"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { message: string; entities: Array<enums.MessageEntity>; author: string; date: number }) {
    super();
    this.message = params.message;
    this.entities = params.entities;
    this.author = params.author;
    this.date = params.date;
  }
}

/** A possible answer of a poll */
export class PollAnswer_ extends _PollAnswer_ {
  /** Textual representation of the answer */
  text: string;
  /** The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote). */
  option: Uint8Array;

  protected get [id](): number {
    return 0x6CA9C2E9;
  }

  static get [name](): string {
    return "pollAnswer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["option", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.option, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { text: string; option: Uint8Array }) {
    super();
    this.text = params.text;
    this.option = params.option;
  }
}

/** Poll */
export class Poll_ extends _Poll_ {
  /** ID of the poll */
  id: bigint;
  /** Whether the poll is closed and doesn't accept any more answers */
  closed?: true;
  /** Whether cast votes are publicly visible to all users (non-anonymous poll) */
  public_voters?: true;
  /** Whether multiple options can be chosen as answer */
  multiple_choice?: true;
  /** Whether this is a quiz (with wrong and correct answers, results shown in the return type) */
  quiz?: true;
  /** The question of the poll */
  question: string;
  /** The possible answers, vote using [messages.sendVote](https://core.telegram.org/method/messages.sendVote). */
  answers: Array<enums.PollAnswer>;
  /** Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close\_date. */
  close_period?: number;
  /** Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close\_period. */
  close_date?: number;

  protected get [id](): number {
    return 0x86E18161;
  }

  static get [name](): string {
    return "poll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["flags", flags, "#"],
      ["closed", "true", "flags.0?true"],
      ["public_voters", "true", "flags.1?true"],
      ["multiple_choice", "true", "flags.2?true"],
      ["quiz", "true", "flags.3?true"],
      ["question", "string", "string"],
      ["answers", [_PollAnswer_], "Vector<PollAnswer>"],
      ["close_period", "number", "flags.4?int"],
      ["close_date", "number", "flags.5?int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      ["flags", flags, "#"],
      [this.closed ?? null, "true", "flags.0?true"],
      [this.public_voters ?? null, "true", "flags.1?true"],
      [this.multiple_choice ?? null, "true", "flags.2?true"],
      [this.quiz ?? null, "true", "flags.3?true"],
      [this.question, "string", "string"],
      [this.answers, [_PollAnswer_], "Vector<PollAnswer>"],
      [this.close_period ?? null, "number", "flags.4?int"],
      [this.close_date ?? null, "number", "flags.5?int"],
    ];
  }

  constructor(params: { id: bigint; closed?: true; public_voters?: true; multiple_choice?: true; quiz?: true; question: string; answers: Array<enums.PollAnswer>; close_period?: number; close_date?: number }) {
    super();
    this.id = params.id;
    this.closed = params.closed;
    this.public_voters = params.public_voters;
    this.multiple_choice = params.multiple_choice;
    this.quiz = params.quiz;
    this.question = params.question;
    this.answers = params.answers;
    this.close_period = params.close_period;
    this.close_date = params.close_date;
  }
}

/** A poll answer, and how users voted on it */
export class PollAnswerVoters_ extends _PollAnswerVoters_ {
  /** Whether we have chosen this answer */
  chosen?: true;
  /** For quizzes, whether the option we have chosen is correct */
  correct?: true;
  /** The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote). */
  option: Uint8Array;
  /** How many users voted for this option */
  voters: number;

  protected get [id](): number {
    return 0x3B6DDAD2;
  }

  static get [name](): string {
    return "pollAnswerVoters"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["chosen", "true", "flags.0?true"],
      ["correct", "true", "flags.1?true"],
      ["option", Uint8Array, "bytes"],
      ["voters", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.chosen ?? null, "true", "flags.0?true"],
      [this.correct ?? null, "true", "flags.1?true"],
      [this.option, Uint8Array, "bytes"],
      [this.voters, "number", "int"],
    ];
  }

  constructor(params: { chosen?: true; correct?: true; option: Uint8Array; voters: number }) {
    super();
    this.chosen = params.chosen;
    this.correct = params.correct;
    this.option = params.option;
    this.voters = params.voters;
  }
}

/** Results of poll */
export class PollResults_ extends _PollResults_ {
  /** Similar to [min](https://core.telegram.org/api/min) objects, used for poll constructors that are the same for all users so they don't have the option chosen by the current user (you can use [messages.getPollResults](https://core.telegram.org/method/messages.getPollResults) to get the full poll results). */
  min?: true;
  /** Poll results */
  results?: Array<enums.PollAnswerVoters>;
  /** Total number of people that voted in the poll */
  total_voters?: number;
  /** IDs of the last users that recently voted in the poll */
  recent_voters?: Array<enums.Peer>;
  /** Explanation of quiz solution */
  solution?: string;
  /** [Message entities for styled text in quiz solution](https://core.telegram.org/api/entities) */
  solution_entities?: Array<enums.MessageEntity>;

  protected get [id](): number {
    return 0x7ADF2420;
  }

  static get [name](): string {
    return "pollResults"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["min", "true", "flags.0?true"],
      ["results", [_PollAnswerVoters_], "flags.1?Vector<PollAnswerVoters>"],
      ["total_voters", "number", "flags.2?int"],
      ["recent_voters", [_Peer_], "flags.3?Vector<Peer>"],
      ["solution", "string", "flags.4?string"],
      ["solution_entities", [_MessageEntity_], "flags.4?Vector<MessageEntity>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.min ?? null, "true", "flags.0?true"],
      [this.results ?? null, [_PollAnswerVoters_], "flags.1?Vector<PollAnswerVoters>"],
      [this.total_voters ?? null, "number", "flags.2?int"],
      [this.recent_voters ?? null, [_Peer_], "flags.3?Vector<Peer>"],
      [this.solution ?? null, "string", "flags.4?string"],
      [this.solution_entities ?? null, [_MessageEntity_], "flags.4?Vector<MessageEntity>"],
    ];
  }

  constructor(params?: { min?: true; results?: Array<enums.PollAnswerVoters>; total_voters?: number; recent_voters?: Array<enums.Peer>; solution?: string; solution_entities?: Array<enums.MessageEntity> }) {
    super();
    this.min = params?.min;
    this.results = params?.results;
    this.total_voters = params?.total_voters;
    this.recent_voters = params?.recent_voters;
    this.solution = params?.solution;
    this.solution_entities = params?.solution_entities;
  }
}

/** Number of online users in a chat */
export class ChatOnlines_ extends _ChatOnlines_ {
  /** Number of online users */
  onlines: number;

  protected get [id](): number {
    return 0xF041E250;
  }

  static get [name](): string {
    return "chatOnlines"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["onlines", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.onlines, "number", "int"],
    ];
  }

  constructor(params: { onlines: number }) {
    super();
    this.onlines = params.onlines;
  }
}

/** URL with chat statistics */
export class StatsURL_ extends _StatsURL_ {
  /** Chat statistics */
  url: string;

  protected get [id](): number {
    return 0x47A971E0;
  }

  static get [name](): string {
    return "statsURL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Represents the rights of an admin in a [channel/supergroup](https://core.telegram.org/api/channel). */
export class ChatAdminRights_ extends _ChatAdminRights_ {
  /** If set, allows the admin to modify the description of the [channel/supergroup](https://core.telegram.org/api/channel) */
  change_info?: true;
  /** If set, allows the admin to post messages in the [channel](https://core.telegram.org/api/channel) */
  post_messages?: true;
  /** If set, allows the admin to also edit messages from other admins in the [channel](https://core.telegram.org/api/channel) */
  edit_messages?: true;
  /** If set, allows the admin to also delete messages from other admins in the [channel](https://core.telegram.org/api/channel) */
  delete_messages?: true;
  /** If set, allows the admin to ban users from the [channel/supergroup](https://core.telegram.org/api/channel) */
  ban_users?: true;
  /** If set, allows the admin to invite users in the [channel/supergroup](https://core.telegram.org/api/channel) */
  invite_users?: true;
  /** If set, allows the admin to pin messages in the [channel/supergroup](https://core.telegram.org/api/channel) */
  pin_messages?: true;
  /** If set, allows the admin to add other admins with the same (or more limited) permissions in the [channel/supergroup](https://core.telegram.org/api/channel) */
  add_admins?: true;
  /** Whether this admin is anonymous */
  anonymous?: true;
  /** If set, allows the admin to change group call/livestream settings */
  manage_call?: true;
  /** Set this flag if none of the other flags are set, but you still want the user to be an admin: if this or any of the other flags are set, the admin can get the chat [admin log](https://core.telegram.org/api/recent-actions), get [chat statistics](https://core.telegram.org/api/stats), get [message statistics in channels](https://core.telegram.org/api/stats), get channel members, see anonymous administrators in supergroups and ignore slow mode. */
  other?: true;
  /** If set, allows the admin to create, delete or modify [forum topics »](https://core.telegram.org/api/forum#forum-topics). */
  manage_topics?: true;
  /** If set, allows the admin to post [stories](https://core.telegram.org/api/stories) as the [channel](https://core.telegram.org/api/channel). */
  post_stories?: true;
  /** If set, allows the admin to edit [stories](https://core.telegram.org/api/stories) posted by the other admins of the [channel](https://core.telegram.org/api/channel). */
  edit_stories?: true;
  /** If set, allows the admin to delete [stories](https://core.telegram.org/api/stories) posted by the other admins of the [channel](https://core.telegram.org/api/channel). */
  delete_stories?: true;

  protected get [id](): number {
    return 0x5FB224D5;
  }

  static get [name](): string {
    return "chatAdminRights"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["change_info", "true", "flags.0?true"],
      ["post_messages", "true", "flags.1?true"],
      ["edit_messages", "true", "flags.2?true"],
      ["delete_messages", "true", "flags.3?true"],
      ["ban_users", "true", "flags.4?true"],
      ["invite_users", "true", "flags.5?true"],
      ["pin_messages", "true", "flags.7?true"],
      ["add_admins", "true", "flags.9?true"],
      ["anonymous", "true", "flags.10?true"],
      ["manage_call", "true", "flags.11?true"],
      ["other", "true", "flags.12?true"],
      ["manage_topics", "true", "flags.13?true"],
      ["post_stories", "true", "flags.14?true"],
      ["edit_stories", "true", "flags.15?true"],
      ["delete_stories", "true", "flags.16?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.change_info ?? null, "true", "flags.0?true"],
      [this.post_messages ?? null, "true", "flags.1?true"],
      [this.edit_messages ?? null, "true", "flags.2?true"],
      [this.delete_messages ?? null, "true", "flags.3?true"],
      [this.ban_users ?? null, "true", "flags.4?true"],
      [this.invite_users ?? null, "true", "flags.5?true"],
      [this.pin_messages ?? null, "true", "flags.7?true"],
      [this.add_admins ?? null, "true", "flags.9?true"],
      [this.anonymous ?? null, "true", "flags.10?true"],
      [this.manage_call ?? null, "true", "flags.11?true"],
      [this.other ?? null, "true", "flags.12?true"],
      [this.manage_topics ?? null, "true", "flags.13?true"],
      [this.post_stories ?? null, "true", "flags.14?true"],
      [this.edit_stories ?? null, "true", "flags.15?true"],
      [this.delete_stories ?? null, "true", "flags.16?true"],
    ];
  }

  constructor(params?: { change_info?: true; post_messages?: true; edit_messages?: true; delete_messages?: true; ban_users?: true; invite_users?: true; pin_messages?: true; add_admins?: true; anonymous?: true; manage_call?: true; other?: true; manage_topics?: true; post_stories?: true; edit_stories?: true; delete_stories?: true }) {
    super();
    this.change_info = params?.change_info;
    this.post_messages = params?.post_messages;
    this.edit_messages = params?.edit_messages;
    this.delete_messages = params?.delete_messages;
    this.ban_users = params?.ban_users;
    this.invite_users = params?.invite_users;
    this.pin_messages = params?.pin_messages;
    this.add_admins = params?.add_admins;
    this.anonymous = params?.anonymous;
    this.manage_call = params?.manage_call;
    this.other = params?.other;
    this.manage_topics = params?.manage_topics;
    this.post_stories = params?.post_stories;
    this.edit_stories = params?.edit_stories;
    this.delete_stories = params?.delete_stories;
  }
}

/** Represents the rights of a normal user in a [supergroup/channel/chat](https://core.telegram.org/api/channel). In this case, the flags are inverted: if set, a flag **does not allow** a user to do X. */
export class ChatBannedRights_ extends _ChatBannedRights_ {
  /** If set, does not allow a user to view messages in a [supergroup/channel/chat](https://core.telegram.org/api/channel) */
  view_messages?: true;
  /** If set, does not allow a user to send messages in a [supergroup/chat](https://core.telegram.org/api/channel) */
  send_messages?: true;
  /** If set, does not allow a user to send any media in a [supergroup/chat](https://core.telegram.org/api/channel) */
  send_media?: true;
  /** If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel) */
  send_stickers?: true;
  /** If set, does not allow a user to send gifs in a [supergroup/chat](https://core.telegram.org/api/channel) */
  send_gifs?: true;
  /** If set, does not allow a user to send games in a [supergroup/chat](https://core.telegram.org/api/channel) */
  send_games?: true;
  /** If set, does not allow a user to use inline bots in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_inline?: true;
  /** If set, does not allow a user to embed links in the messages of a [supergroup/chat](https://core.telegram.org/api/channel) */
  embed_links?: true;
  /** If set, does not allow a user to send polls in a [supergroup/chat](https://core.telegram.org/api/channel) */
  send_polls?: true;
  /** If set, does not allow any user to change the description of a [supergroup/chat](https://core.telegram.org/api/channel) */
  change_info?: true;
  /** If set, does not allow any user to invite users in a [supergroup/chat](https://core.telegram.org/api/channel) */
  invite_users?: true;
  /** If set, does not allow any user to pin messages in a [supergroup/chat](https://core.telegram.org/api/channel) */
  pin_messages?: true;
  /** If set, does not allow any user to create, delete or modify [forum topics »](https://core.telegram.org/api/forum#forum-topics). */
  manage_topics?: true;
  /** If set, does not allow a user to send photos in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_photos?: true;
  /** If set, does not allow a user to send videos in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_videos?: true;
  /** If set, does not allow a user to send round videos in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_roundvideos?: true;
  /** If set, does not allow a user to send audio files in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_audios?: true;
  /** If set, does not allow a user to send voice messages in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_voices?: true;
  /** If set, does not allow a user to send documents in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_docs?: true;
  /** If set, does not allow a user to send text messages in a [supergroup/chat](https://core.telegram.org/api/channel). */
  send_plain?: true;
  /** Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days). */
  until_date: number;

  protected get [id](): number {
    return 0x9F120418;
  }

  static get [name](): string {
    return "chatBannedRights"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["view_messages", "true", "flags.0?true"],
      ["send_messages", "true", "flags.1?true"],
      ["send_media", "true", "flags.2?true"],
      ["send_stickers", "true", "flags.3?true"],
      ["send_gifs", "true", "flags.4?true"],
      ["send_games", "true", "flags.5?true"],
      ["send_inline", "true", "flags.6?true"],
      ["embed_links", "true", "flags.7?true"],
      ["send_polls", "true", "flags.8?true"],
      ["change_info", "true", "flags.10?true"],
      ["invite_users", "true", "flags.15?true"],
      ["pin_messages", "true", "flags.17?true"],
      ["manage_topics", "true", "flags.18?true"],
      ["send_photos", "true", "flags.19?true"],
      ["send_videos", "true", "flags.20?true"],
      ["send_roundvideos", "true", "flags.21?true"],
      ["send_audios", "true", "flags.22?true"],
      ["send_voices", "true", "flags.23?true"],
      ["send_docs", "true", "flags.24?true"],
      ["send_plain", "true", "flags.25?true"],
      ["until_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.view_messages ?? null, "true", "flags.0?true"],
      [this.send_messages ?? null, "true", "flags.1?true"],
      [this.send_media ?? null, "true", "flags.2?true"],
      [this.send_stickers ?? null, "true", "flags.3?true"],
      [this.send_gifs ?? null, "true", "flags.4?true"],
      [this.send_games ?? null, "true", "flags.5?true"],
      [this.send_inline ?? null, "true", "flags.6?true"],
      [this.embed_links ?? null, "true", "flags.7?true"],
      [this.send_polls ?? null, "true", "flags.8?true"],
      [this.change_info ?? null, "true", "flags.10?true"],
      [this.invite_users ?? null, "true", "flags.15?true"],
      [this.pin_messages ?? null, "true", "flags.17?true"],
      [this.manage_topics ?? null, "true", "flags.18?true"],
      [this.send_photos ?? null, "true", "flags.19?true"],
      [this.send_videos ?? null, "true", "flags.20?true"],
      [this.send_roundvideos ?? null, "true", "flags.21?true"],
      [this.send_audios ?? null, "true", "flags.22?true"],
      [this.send_voices ?? null, "true", "flags.23?true"],
      [this.send_docs ?? null, "true", "flags.24?true"],
      [this.send_plain ?? null, "true", "flags.25?true"],
      [this.until_date, "number", "int"],
    ];
  }

  constructor(params: { view_messages?: true; send_messages?: true; send_media?: true; send_stickers?: true; send_gifs?: true; send_games?: true; send_inline?: true; embed_links?: true; send_polls?: true; change_info?: true; invite_users?: true; pin_messages?: true; manage_topics?: true; send_photos?: true; send_videos?: true; send_roundvideos?: true; send_audios?: true; send_voices?: true; send_docs?: true; send_plain?: true; until_date: number }) {
    super();
    this.view_messages = params.view_messages;
    this.send_messages = params.send_messages;
    this.send_media = params.send_media;
    this.send_stickers = params.send_stickers;
    this.send_gifs = params.send_gifs;
    this.send_games = params.send_games;
    this.send_inline = params.send_inline;
    this.embed_links = params.embed_links;
    this.send_polls = params.send_polls;
    this.change_info = params.change_info;
    this.invite_users = params.invite_users;
    this.pin_messages = params.pin_messages;
    this.manage_topics = params.manage_topics;
    this.send_photos = params.send_photos;
    this.send_videos = params.send_videos;
    this.send_roundvideos = params.send_roundvideos;
    this.send_audios = params.send_audios;
    this.send_voices = params.send_voices;
    this.send_docs = params.send_docs;
    this.send_plain = params.send_plain;
    this.until_date = params.until_date;
  }
}

/** [Wallpaper](https://core.telegram.org/api/wallpapers) */
export class InputWallPaper_ extends _InputWallPaper_ {
  /** [Wallpaper](https://core.telegram.org/api/wallpapers) ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0xE630B979;
  }

  static get [name](): string {
    return "inputWallPaper"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** [Wallpaper](https://core.telegram.org/api/wallpapers) by slug (a unique ID, obtained from a [wallpaper link »](https://core.telegram.org/api/links#wallpaper-links)) */
export class InputWallPaperSlug_ extends _InputWallPaper_ {
  /** Unique wallpaper ID */
  slug: string;

  protected get [id](): number {
    return 0x72091C80;
  }

  static get [name](): string {
    return "inputWallPaperSlug"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["slug", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.slug, "string", "string"],
    ];
  }

  constructor(params: { slug: string }) {
    super();
    this.slug = params.slug;
  }
}

/** [Wallpaper](https://core.telegram.org/api/wallpapers) with no file access hash, used for example when deleting (`unsave=true`) wallpapers using [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper), specifying just the wallpaper ID. */
export class InputWallPaperNoFile_ extends _InputWallPaper_ {
  /** Wallpaper ID */
  id: bigint;

  protected get [id](): number {
    return 0x967A462E;
  }

  static get [name](): string {
    return "inputWallPaperNoFile"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** No new [wallpapers](https://core.telegram.org/api/wallpapers) were found */
export class account_WallPapersNotModified_ extends _account_WallPapers_ {
  protected get [id](): number {
    return 0x1C199183;
  }

  static get [name](): string {
    return "account.wallPapersNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Installed [wallpapers](https://core.telegram.org/api/wallpapers) */
export class account_WallPapers_ extends _account_WallPapers_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** [Wallpapers](https://core.telegram.org/api/wallpapers) */
  wallpapers: Array<enums.WallPaper>;

  protected get [id](): number {
    return 0xCDC3858C;
  }

  static get [name](): string {
    return "account.wallPapers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["wallpapers", [_WallPaper_], "Vector<WallPaper>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.wallpapers, [_WallPaper_], "Vector<WallPaper>"],
    ];
  }

  constructor(params: { hash: bigint; wallpapers: Array<enums.WallPaper> }) {
    super();
    this.hash = params.hash;
    this.wallpapers = params.wallpapers;
  }
}

/** Settings used by telegram servers for sending the confirm code. */
export class CodeSettings_ extends _CodeSettings_ {
  /** Whether to allow phone verification via [phone calls](https://core.telegram.org/api/auth). */
  allow_flashcall?: true;
  /** Pass true if the phone number is used on the current device. Ignored if allow\_flashcall is not set. */
  current_number?: true;
  /** If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the [android SMS receiver APIs](https://developers.google.com/identity/sms-retriever/overview) */
  allow_app_hash?: true;
  /** Whether this device supports receiving the code using the [auth.codeTypeMissedCall](https://core.telegram.org/constructor/auth.codeTypeMissedCall) method */
  allow_missed_call?: true;
  /** Whether Firebase auth is supported */
  allow_firebase?: true;
  /** Previously stored future auth tokens, see [the documentation for more info »](https://core.telegram.org/api/auth#future-auth-tokens) */
  logout_tokens?: Array<Uint8Array>;
  /** Used only by official iOS apps for Firebase auth: device token for apple push. */
  token?: string;
  /** Used only by official iOS apps for firebase auth: whether a sandbox-certificate will be used during transmission of the push notification. */
  app_sandbox?: boolean;

  protected get [id](): number {
    return 0xAD253D78;
  }

  static get [name](): string {
    return "codeSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["allow_flashcall", "true", "flags.0?true"],
      ["current_number", "true", "flags.1?true"],
      ["allow_app_hash", "true", "flags.4?true"],
      ["allow_missed_call", "true", "flags.5?true"],
      ["allow_firebase", "true", "flags.7?true"],
      ["logout_tokens", [Uint8Array], "flags.6?Vector<bytes>"],
      ["token", "string", "flags.8?string"],
      ["app_sandbox", "boolean", "flags.8?Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.allow_flashcall ?? null, "true", "flags.0?true"],
      [this.current_number ?? null, "true", "flags.1?true"],
      [this.allow_app_hash ?? null, "true", "flags.4?true"],
      [this.allow_missed_call ?? null, "true", "flags.5?true"],
      [this.allow_firebase ?? null, "true", "flags.7?true"],
      [this.logout_tokens ?? null, [Uint8Array], "flags.6?Vector<bytes>"],
      [this.token ?? null, "string", "flags.8?string"],
      [this.app_sandbox ?? null, "boolean", "flags.8?Bool"],
    ];
  }

  constructor(params?: { allow_flashcall?: true; current_number?: true; allow_app_hash?: true; allow_missed_call?: true; allow_firebase?: true; logout_tokens?: Array<Uint8Array>; token?: string; app_sandbox?: boolean }) {
    super();
    this.allow_flashcall = params?.allow_flashcall;
    this.current_number = params?.current_number;
    this.allow_app_hash = params?.allow_app_hash;
    this.allow_missed_call = params?.allow_missed_call;
    this.allow_firebase = params?.allow_firebase;
    this.logout_tokens = params?.logout_tokens;
    this.token = params?.token;
    this.app_sandbox = params?.app_sandbox;
  }
}

/** [Wallpaper](https://core.telegram.org/api/wallpapers) rendering information. */
export class WallPaperSettings_ extends _WallPaperSettings_ {
  /** For [image wallpapers »](https://core.telegram.org/api/wallpapers#image-wallpapers): if set, the JPEG must be downscaled to fit in 450x450 square and then box-blurred with radius 12. */
  blur?: true;
  /** If set, the background needs to be slightly moved when the device is rotated. */
  motion?: true;
  /** Used for [solid »](https://core.telegram.org/api/wallpapers#solid-fill), [gradient »](https://core.telegram.org/api/wallpapers#gradient-fill) and [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
  background_color?: number;
  /** Used for [gradient »](https://core.telegram.org/api/wallpapers#gradient-fill) and [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
  second_background_color?: number;
  /** Used for [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
  third_background_color?: number;
  /** Used for [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
  fourth_background_color?: number;
  /** Used for [pattern wallpapers »](https://core.telegram.org/api/wallpapers#pattern-wallpapers). */
  intensity?: number;
  /** Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45. */
  rotation?: number;
  /** If set, this wallpaper can be used as a channel wallpaper and is represented by the specified UTF-8 emoji. */
  emoticon?: string;

  protected get [id](): number {
    return 0x372EFCD0;
  }

  static get [name](): string {
    return "wallPaperSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["blur", "true", "flags.1?true"],
      ["motion", "true", "flags.2?true"],
      ["background_color", "number", "flags.0?int"],
      ["second_background_color", "number", "flags.4?int"],
      ["third_background_color", "number", "flags.5?int"],
      ["fourth_background_color", "number", "flags.6?int"],
      ["intensity", "number", "flags.3?int"],
      ["rotation", "number", "flags.4?int"],
      ["emoticon", "string", "flags.7?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.blur ?? null, "true", "flags.1?true"],
      [this.motion ?? null, "true", "flags.2?true"],
      [this.background_color ?? null, "number", "flags.0?int"],
      [this.second_background_color ?? null, "number", "flags.4?int"],
      [this.third_background_color ?? null, "number", "flags.5?int"],
      [this.fourth_background_color ?? null, "number", "flags.6?int"],
      [this.intensity ?? null, "number", "flags.3?int"],
      [this.rotation ?? null, "number", "flags.4?int"],
      [this.emoticon ?? null, "string", "flags.7?string"],
    ];
  }

  constructor(params?: { blur?: true; motion?: true; background_color?: number; second_background_color?: number; third_background_color?: number; fourth_background_color?: number; intensity?: number; rotation?: number; emoticon?: string }) {
    super();
    this.blur = params?.blur;
    this.motion = params?.motion;
    this.background_color = params?.background_color;
    this.second_background_color = params?.second_background_color;
    this.third_background_color = params?.third_background_color;
    this.fourth_background_color = params?.fourth_background_color;
    this.intensity = params?.intensity;
    this.rotation = params?.rotation;
    this.emoticon = params?.emoticon;
  }
}

/** Autodownload settings */
export class AutoDownloadSettings_ extends _AutoDownloadSettings_ {
  /** Disable automatic media downloads? */
  disabled?: true;
  /** Whether to preload the first seconds of videos larger than the specified limit */
  video_preload_large?: true;
  /** Whether to preload the next audio track when you're listening to music */
  audio_preload_next?: true;
  /** Whether to enable data saving mode in phone calls */
  phonecalls_less_data?: true;
  /** Whether to preload [stories](https://core.telegram.org/api/stories); in particular, the first [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`preload_prefix_size` bytes of story videos should be preloaded. */
  stories_preload?: true;
  /** Maximum size of photos to preload */
  photo_size_max: number;
  /** Maximum size of videos to preload */
  video_size_max: bigint;
  /** Maximum size of other files to preload */
  file_size_max: bigint;
  /** Maximum suggested bitrate for **uploading** videos */
  video_upload_maxbitrate: number;
  /** A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files smaller than 20MB. */
  small_queue_active_operations_max: number;
  /** A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files bigger than 20MB. */
  large_queue_active_operations_max: number;

  protected get [id](): number {
    return 0xBAA57628;
  }

  static get [name](): string {
    return "autoDownloadSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["disabled", "true", "flags.0?true"],
      ["video_preload_large", "true", "flags.1?true"],
      ["audio_preload_next", "true", "flags.2?true"],
      ["phonecalls_less_data", "true", "flags.3?true"],
      ["stories_preload", "true", "flags.4?true"],
      ["photo_size_max", "number", "int"],
      ["video_size_max", "bigint", "long"],
      ["file_size_max", "bigint", "long"],
      ["video_upload_maxbitrate", "number", "int"],
      ["small_queue_active_operations_max", "number", "int"],
      ["large_queue_active_operations_max", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.disabled ?? null, "true", "flags.0?true"],
      [this.video_preload_large ?? null, "true", "flags.1?true"],
      [this.audio_preload_next ?? null, "true", "flags.2?true"],
      [this.phonecalls_less_data ?? null, "true", "flags.3?true"],
      [this.stories_preload ?? null, "true", "flags.4?true"],
      [this.photo_size_max, "number", "int"],
      [this.video_size_max, "bigint", "long"],
      [this.file_size_max, "bigint", "long"],
      [this.video_upload_maxbitrate, "number", "int"],
      [this.small_queue_active_operations_max, "number", "int"],
      [this.large_queue_active_operations_max, "number", "int"],
    ];
  }

  constructor(params: { disabled?: true; video_preload_large?: true; audio_preload_next?: true; phonecalls_less_data?: true; stories_preload?: true; photo_size_max: number; video_size_max: bigint; file_size_max: bigint; video_upload_maxbitrate: number; small_queue_active_operations_max: number; large_queue_active_operations_max: number }) {
    super();
    this.disabled = params.disabled;
    this.video_preload_large = params.video_preload_large;
    this.audio_preload_next = params.audio_preload_next;
    this.phonecalls_less_data = params.phonecalls_less_data;
    this.stories_preload = params.stories_preload;
    this.photo_size_max = params.photo_size_max;
    this.video_size_max = params.video_size_max;
    this.file_size_max = params.file_size_max;
    this.video_upload_maxbitrate = params.video_upload_maxbitrate;
    this.small_queue_active_operations_max = params.small_queue_active_operations_max;
    this.large_queue_active_operations_max = params.large_queue_active_operations_max;
  }
}

/** Media autodownload settings */
export class account_AutoDownloadSettings_ extends _account_AutoDownloadSettings_ {
  /** Low data usage preset */
  low: enums.AutoDownloadSettings;
  /** Medium data usage preset */
  medium: enums.AutoDownloadSettings;
  /** High data usage preset */
  high: enums.AutoDownloadSettings;

  protected get [id](): number {
    return 0x63CACF26;
  }

  static get [name](): string {
    return "account.autoDownloadSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["low", _AutoDownloadSettings_, "AutoDownloadSettings"],
      ["medium", _AutoDownloadSettings_, "AutoDownloadSettings"],
      ["high", _AutoDownloadSettings_, "AutoDownloadSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.low, _AutoDownloadSettings_, "AutoDownloadSettings"],
      [this.medium, _AutoDownloadSettings_, "AutoDownloadSettings"],
      [this.high, _AutoDownloadSettings_, "AutoDownloadSettings"],
    ];
  }

  constructor(params: { low: enums.AutoDownloadSettings; medium: enums.AutoDownloadSettings; high: enums.AutoDownloadSettings }) {
    super();
    this.low = params.low;
    this.medium = params.medium;
    this.high = params.high;
  }
}

/** Emoji keyword */
export class EmojiKeyword_ extends _EmojiKeyword_ {
  /** Keyword */
  keyword: string;
  /** Emojis associated to keyword */
  emoticons: Array<string>;

  protected get [id](): number {
    return 0xD5B3B9F9;
  }

  static get [name](): string {
    return "emojiKeyword"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["keyword", "string", "string"],
      ["emoticons", ["string"], "Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.keyword, "string", "string"],
      [this.emoticons, ["string"], "Vector<string>"],
    ];
  }

  constructor(params: { keyword: string; emoticons: Array<string> }) {
    super();
    this.keyword = params.keyword;
    this.emoticons = params.emoticons;
  }
}

/** Deleted emoji keyword */
export class EmojiKeywordDeleted_ extends _EmojiKeyword_ {
  /** Keyword */
  keyword: string;
  /** Emojis that were associated to keyword */
  emoticons: Array<string>;

  protected get [id](): number {
    return 0x236DF622;
  }

  static get [name](): string {
    return "emojiKeywordDeleted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["keyword", "string", "string"],
      ["emoticons", ["string"], "Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.keyword, "string", "string"],
      [this.emoticons, ["string"], "Vector<string>"],
    ];
  }

  constructor(params: { keyword: string; emoticons: Array<string> }) {
    super();
    this.keyword = params.keyword;
    this.emoticons = params.emoticons;
  }
}

/** Changes to emoji keywords */
export class EmojiKeywordsDifference_ extends _EmojiKeywordsDifference_ {
  /** Language code for keywords */
  lang_code: string;
  /** Previous emoji keyword list version */
  from_version: number;
  /** Current version of emoji keyword list */
  version: number;
  /** Emojis associated to keywords */
  keywords: Array<enums.EmojiKeyword>;

  protected get [id](): number {
    return 0x5CC761BD;
  }

  static get [name](): string {
    return "emojiKeywordsDifference"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["lang_code", "string", "string"],
      ["from_version", "number", "int"],
      ["version", "number", "int"],
      ["keywords", [_EmojiKeyword_], "Vector<EmojiKeyword>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.lang_code, "string", "string"],
      [this.from_version, "number", "int"],
      [this.version, "number", "int"],
      [this.keywords, [_EmojiKeyword_], "Vector<EmojiKeyword>"],
    ];
  }

  constructor(params: { lang_code: string; from_version: number; version: number; keywords: Array<enums.EmojiKeyword> }) {
    super();
    this.lang_code = params.lang_code;
    this.from_version = params.from_version;
    this.version = params.version;
    this.keywords = params.keywords;
  }
}

/** An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation */
export class EmojiURL_ extends _EmojiURL_ {
  /** An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation */
  url: string;

  protected get [id](): number {
    return 0xA575739D;
  }

  static get [name](): string {
    return "emojiURL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Emoji language */
export class EmojiLanguage_ extends _EmojiLanguage_ {
  /** Language code */
  lang_code: string;

  protected get [id](): number {
    return 0xB3FB5361;
  }

  static get [name](): string {
    return "emojiLanguage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["lang_code", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.lang_code, "string", "string"],
    ];
  }

  constructor(params: { lang_code: string }) {
    super();
    this.lang_code = params.lang_code;
  }
}

/** Folder */
export class Folder_ extends _Folder_ {
  /** Automatically add new channels to this folder */
  autofill_new_broadcasts?: true;
  /** Automatically add joined new public supergroups to this folder */
  autofill_public_groups?: true;
  /** Automatically add new private chats to this folder */
  autofill_new_correspondents?: true;
  /** Folder ID */
  id: number;
  /** Folder title */
  title: string;
  /** Folder picture */
  photo?: enums.ChatPhoto;

  protected get [id](): number {
    return 0xFF544E65;
  }

  static get [name](): string {
    return "folder"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["autofill_new_broadcasts", "true", "flags.0?true"],
      ["autofill_public_groups", "true", "flags.1?true"],
      ["autofill_new_correspondents", "true", "flags.2?true"],
      ["id", "number", "int"],
      ["title", "string", "string"],
      ["photo", _ChatPhoto_, "flags.3?ChatPhoto"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.autofill_new_broadcasts ?? null, "true", "flags.0?true"],
      [this.autofill_public_groups ?? null, "true", "flags.1?true"],
      [this.autofill_new_correspondents ?? null, "true", "flags.2?true"],
      [this.id, "number", "int"],
      [this.title, "string", "string"],
      [this.photo ?? null, _ChatPhoto_, "flags.3?ChatPhoto"],
    ];
  }

  constructor(params: { autofill_new_broadcasts?: true; autofill_public_groups?: true; autofill_new_correspondents?: true; id: number; title: string; photo?: enums.ChatPhoto }) {
    super();
    this.autofill_new_broadcasts = params.autofill_new_broadcasts;
    this.autofill_public_groups = params.autofill_public_groups;
    this.autofill_new_correspondents = params.autofill_new_correspondents;
    this.id = params.id;
    this.title = params.title;
    this.photo = params.photo;
  }
}

/** Peer in a folder */
export class InputFolderPeer_ extends _InputFolderPeer_ {
  /** Peer */
  peer: enums.InputPeer;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id: number;

  protected get [id](): number {
    return 0xFBD2C296;
  }

  static get [name](): string {
    return "inputFolderPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["folder_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.folder_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; folder_id: number }) {
    super();
    this.peer = params.peer;
    this.folder_id = params.folder_id;
  }
}

/** Peer in a folder */
export class FolderPeer_ extends _FolderPeer_ {
  /** Folder peer info */
  peer: enums.Peer;
  /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
  folder_id: number;

  protected get [id](): number {
    return 0xE9BAA668;
  }

  static get [name](): string {
    return "folderPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["folder_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.folder_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; folder_id: number }) {
    super();
    this.peer = params.peer;
    this.folder_id = params.folder_id;
  }
}

/** Indicates how many results would be found by a [messages.search](https://core.telegram.org/method/messages.search) call with the same parameters */
export class messages_SearchCounter_ extends _messages_SearchCounter_ {
  /** If set, the results may be inexact */
  inexact?: true;
  /** Provided message filter */
  filter: enums.MessagesFilter;
  /** Number of results that were found server-side */
  count: number;

  protected get [id](): number {
    return 0xE844EBFF;
  }

  static get [name](): string {
    return "messages.searchCounter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inexact", "true", "flags.1?true"],
      ["filter", _MessagesFilter_, "MessagesFilter"],
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inexact ?? null, "true", "flags.1?true"],
      [this.filter, _MessagesFilter_, "MessagesFilter"],
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { inexact?: true; filter: enums.MessagesFilter; count: number }) {
    super();
    this.inexact = params.inexact;
    this.filter = params.filter;
    this.count = params.count;
  }
}

/** Details about the authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization) */
export class UrlAuthResultRequest_ extends _UrlAuthResult_ {
  /** Whether the bot would like to send messages to the user */
  request_write_access?: true;
  /** Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details. */
  bot: enums.User;
  /** The domain name of the website on which the user will log in. */
  domain: string;

  protected get [id](): number {
    return 0x92D33A0E;
  }

  static get [name](): string {
    return "urlAuthResultRequest"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["request_write_access", "true", "flags.0?true"],
      ["bot", _User_, "User"],
      ["domain", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.request_write_access ?? null, "true", "flags.0?true"],
      [this.bot, _User_, "User"],
      [this.domain, "string", "string"],
    ];
  }

  constructor(params: { request_write_access?: true; bot: enums.User; domain: string }) {
    super();
    this.request_write_access = params.request_write_access;
    this.bot = params.bot;
    this.domain = params.domain;
  }
}

/** Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization) */
export class UrlAuthResultAccepted_ extends _UrlAuthResult_ {
  /** The URL name of the website on which the user has logged in. */
  url: string;

  protected get [id](): number {
    return 0x8F8C0E4E;
  }

  static get [name](): string {
    return "urlAuthResultAccepted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization) */
export class UrlAuthResultDefault_ extends _UrlAuthResult_ {
  protected get [id](): number {
    return 0xA9D6DB1F;
  }

  static get [name](): string {
    return "urlAuthResultDefault"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** No location (normal supergroup) */
export class ChannelLocationEmpty_ extends _ChannelLocation_ {
  protected get [id](): number {
    return 0xBFB5AD8B;
  }

  static get [name](): string {
    return "channelLocationEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Geographical location of supergroup (geogroups) */
export class ChannelLocation_ extends _ChannelLocation_ {
  /** Geographical location of supergroup */
  geo_point: enums.GeoPoint;
  /** Textual description of the address */
  address: string;

  protected get [id](): number {
    return 0x209B82DB;
  }

  static get [name](): string {
    return "channelLocation"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["geo_point", _GeoPoint_, "GeoPoint"],
      ["address", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.geo_point, _GeoPoint_, "GeoPoint"],
      [this.address, "string", "string"],
    ];
  }

  constructor(params: { geo_point: enums.GeoPoint; address: string }) {
    super();
    this.geo_point = params.geo_point;
    this.address = params.address;
  }
}

/** Peer geolocated nearby */
export class PeerLocated_ extends _PeerLocated_ {
  /** Peer */
  peer: enums.Peer;
  /** Validity period of current data */
  expires: number;
  /** Distance from the peer in meters */
  distance: number;

  protected get [id](): number {
    return 0xCA461B5D;
  }

  static get [name](): string {
    return "peerLocated"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["expires", "number", "int"],
      ["distance", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.expires, "number", "int"],
      [this.distance, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; expires: number; distance: number }) {
    super();
    this.peer = params.peer;
    this.expires = params.expires;
    this.distance = params.distance;
  }
}

/** Current peer */
export class PeerSelfLocated_ extends _PeerLocated_ {
  /** Expiry of geolocation info for current peer */
  expires: number;

  protected get [id](): number {
    return 0xF8EC284B;
  }

  static get [name](): string {
    return "peerSelfLocated"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["expires", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.expires, "number", "int"],
    ];
  }

  constructor(params: { expires: number }) {
    super();
    this.expires = params.expires;
  }
}

/** Restriction reason. */
export class RestrictionReason_ extends _RestrictionReason_ {
  /** Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (`android-ios`, `ios-wp`, etc) */
  platform: string;
  /** Restriction reason (`porno`, `terms`, etc.) */
  reason: string;
  /** Error message to be shown to the user */
  text: string;

  protected get [id](): number {
    return 0xD072ACB4;
  }

  static get [name](): string {
    return "restrictionReason"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["platform", "string", "string"],
      ["reason", "string", "string"],
      ["text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.platform, "string", "string"],
      [this.reason, "string", "string"],
      [this.text, "string", "string"],
    ];
  }

  constructor(params: { platform: string; reason: string; text: string }) {
    super();
    this.platform = params.platform;
    this.reason = params.reason;
    this.text = params.text;
  }
}

/** Theme */
export class InputTheme_ extends _InputTheme_ {
  /** ID */
  id: bigint;
  /** Access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0x3C5693E9;
  }

  static get [name](): string {
    return "inputTheme"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Theme by theme ID */
export class InputThemeSlug_ extends _InputTheme_ {
  /** Unique theme ID obtained from a [theme deep link »](https://core.telegram.org/api/links#theme-links) */
  slug: string;

  protected get [id](): number {
    return 0xF5890DF1;
  }

  static get [name](): string {
    return "inputThemeSlug"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["slug", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.slug, "string", "string"],
    ];
  }

  constructor(params: { slug: string }) {
    super();
    this.slug = params.slug;
  }
}

/** Theme */
export class Theme_ extends _Theme_ {
  /** Whether the current user is the creator of this theme */
  creator?: true;
  /** Whether this is the default theme */
  default?: true;
  /** Whether this theme is meant to be used as a [chat theme](https://telegram.org/blog/chat-themes-interactive-emoji-read-receipts) */
  for_chat?: true;
  /** Theme ID */
  id: bigint;
  /** Theme access hash */
  access_hash: bigint;
  /** Unique theme ID */
  slug: string;
  /** Theme name */
  title: string;
  /** Theme */
  document?: enums.Document;
  /** Theme settings */
  settings?: Array<enums.ThemeSettings>;
  /** Theme emoji */
  emoticon?: string;
  /** Installation count */
  installs_count?: number;

  protected get [id](): number {
    return 0xA00E67D6;
  }

  static get [name](): string {
    return "theme"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["creator", "true", "flags.0?true"],
      ["default", "true", "flags.1?true"],
      ["for_chat", "true", "flags.5?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["slug", "string", "string"],
      ["title", "string", "string"],
      ["document", _Document_, "flags.2?Document"],
      ["settings", [_ThemeSettings_], "flags.3?Vector<ThemeSettings>"],
      ["emoticon", "string", "flags.6?string"],
      ["installs_count", "number", "flags.4?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.creator ?? null, "true", "flags.0?true"],
      [this.default ?? null, "true", "flags.1?true"],
      [this.for_chat ?? null, "true", "flags.5?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.slug, "string", "string"],
      [this.title, "string", "string"],
      [this.document ?? null, _Document_, "flags.2?Document"],
      [this.settings ?? null, [_ThemeSettings_], "flags.3?Vector<ThemeSettings>"],
      [this.emoticon ?? null, "string", "flags.6?string"],
      [this.installs_count ?? null, "number", "flags.4?int"],
    ];
  }

  constructor(params: { creator?: true; default?: true; for_chat?: true; id: bigint; access_hash: bigint; slug: string; title: string; document?: enums.Document; settings?: Array<enums.ThemeSettings>; emoticon?: string; installs_count?: number }) {
    super();
    this.creator = params.creator;
    this.default = params.default;
    this.for_chat = params.for_chat;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.slug = params.slug;
    this.title = params.title;
    this.document = params.document;
    this.settings = params.settings;
    this.emoticon = params.emoticon;
    this.installs_count = params.installs_count;
  }
}

/** No new themes were installed */
export class account_ThemesNotModified_ extends _account_Themes_ {
  protected get [id](): number {
    return 0xF41EB622;
  }

  static get [name](): string {
    return "account.themesNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Installed themes */
export class account_Themes_ extends _account_Themes_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Themes */
  themes: Array<enums.Theme>;

  protected get [id](): number {
    return 0x9A3D8C6D;
  }

  static get [name](): string {
    return "account.themes"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["themes", [_Theme_], "Vector<Theme>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.themes, [_Theme_], "Vector<Theme>"],
    ];
  }

  constructor(params: { hash: bigint; themes: Array<enums.Theme> }) {
    super();
    this.hash = params.hash;
    this.themes = params.themes;
  }
}

/** Login token (for [QR code login](https://core.telegram.org/api/qr-login)) */
export class auth_LoginToken_ extends _auth_LoginToken_ {
  /** Expiration date of QR code */
  expires: number;
  /** Token to render in QR code */
  token: Uint8Array;

  protected get [id](): number {
    return 0x629F1980;
  }

  static get [name](): string {
    return "auth.loginToken"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["expires", "number", "int"],
      ["token", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.expires, "number", "int"],
      [this.token, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { expires: number; token: Uint8Array }) {
    super();
    this.expires = params.expires;
    this.token = params.token;
  }
}

/** Repeat the query to the specified DC */
export class auth_LoginTokenMigrateTo_ extends _auth_LoginToken_ {
  /** DC ID */
  dc_id: number;
  /** Token to use for login */
  token: Uint8Array;

  protected get [id](): number {
    return 0x068E9916;
  }

  static get [name](): string {
    return "auth.loginTokenMigrateTo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dc_id", "number", "int"],
      ["token", Uint8Array, "bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dc_id, "number", "int"],
      [this.token, Uint8Array, "bytes"],
    ];
  }

  constructor(params: { dc_id: number; token: Uint8Array }) {
    super();
    this.dc_id = params.dc_id;
    this.token = params.token;
  }
}

/** Login via token (QR code) succeeded! */
export class auth_LoginTokenSuccess_ extends _auth_LoginToken_ {
  /** Authorization info */
  authorization: enums.auth.Authorization;

  protected get [id](): number {
    return 0x390D5C5E;
  }

  static get [name](): string {
    return "auth.loginTokenSuccess"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["authorization", _auth_Authorization_, "auth.Authorization"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.authorization, _auth_Authorization_, "auth.Authorization"],
    ];
  }

  constructor(params: { authorization: enums.auth.Authorization }) {
    super();
    this.authorization = params.authorization;
  }
}

/** Sensitive content settings */
export class account_ContentSettings_ extends _account_ContentSettings_ {
  /** Whether viewing of sensitive (NSFW) content is enabled */
  sensitive_enabled?: true;
  /** Whether the current client can change the sensitive content settings to view NSFW content */
  sensitive_can_change?: true;

  protected get [id](): number {
    return 0x57E28221;
  }

  static get [name](): string {
    return "account.contentSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["sensitive_enabled", "true", "flags.0?true"],
      ["sensitive_can_change", "true", "flags.1?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.sensitive_enabled ?? null, "true", "flags.0?true"],
      [this.sensitive_can_change ?? null, "true", "flags.1?true"],
    ];
  }

  constructor(params?: { sensitive_enabled?: true; sensitive_can_change?: true }) {
    super();
    this.sensitive_enabled = params?.sensitive_enabled;
    this.sensitive_can_change = params?.sensitive_can_change;
  }
}

/** Inactive chat list */
export class messages_InactiveChats_ extends _messages_InactiveChats_ {
  /** When was the chat last active */
  dates: Array<number>;
  /** Chat list */
  chats: Array<enums.Chat>;
  /** Users mentioned in the chat list */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xA927FEC5;
  }

  static get [name](): string {
    return "messages.inactiveChats"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dates", ["number"], "Vector<int>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dates, ["number"], "Vector<int>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { dates: Array<number>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.dates = params.dates;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Classic theme */
export class BaseThemeClassic_ extends _BaseTheme_ {
  protected get [id](): number {
    return 0xC3A12462;
  }

  static get [name](): string {
    return "baseThemeClassic"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Day theme */
export class BaseThemeDay_ extends _BaseTheme_ {
  protected get [id](): number {
    return 0xFBD81688;
  }

  static get [name](): string {
    return "baseThemeDay"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Night theme */
export class BaseThemeNight_ extends _BaseTheme_ {
  protected get [id](): number {
    return 0xB7B31EA8;
  }

  static get [name](): string {
    return "baseThemeNight"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Tinted theme */
export class BaseThemeTinted_ extends _BaseTheme_ {
  protected get [id](): number {
    return 0x6D5F77EE;
  }

  static get [name](): string {
    return "baseThemeTinted"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Arctic theme */
export class BaseThemeArctic_ extends _BaseTheme_ {
  protected get [id](): number {
    return 0x5B11125A;
  }

  static get [name](): string {
    return "baseThemeArctic"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Theme settings */
export class InputThemeSettings_ extends _InputThemeSettings_ {
  /** If set, the freeform gradient fill needs to be animated on every sent message */
  message_colors_animated?: true;
  /** Default theme on which this theme is based */
  base_theme: enums.BaseTheme;
  /** Accent color, ARGB format */
  accent_color: number;
  /** Accent color of outgoing messages in ARGB format */
  outbox_accent_color?: number;
  /** The fill to be used as a background for outgoing messages, in RGB24 format.  
  If just one or two equal colors are provided, describes a solid fill of a background.  
  If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.  
  If three or four colors are provided, describes a freeform gradient fill of a background. */
  message_colors?: Array<number>;
  /** [inputWallPaper](https://core.telegram.org/constructor/inputWallPaper) or [inputWallPaperSlug](https://core.telegram.org/constructor/inputWallPaper) when passing wallpaper files for [image](https://core.telegram.org/api/wallpapers#image-wallpapers) or [pattern](https://core.telegram.org/api/wallpapers#pattern-wallpapers) wallpapers, [inputWallPaperNoFile](https://core.telegram.org/constructor/inputWallPaperNoFile) with `id=0` otherwise. */
  wallpaper?: enums.InputWallPaper;
  /** [Wallpaper](https://core.telegram.org/api/wallpapers) settings. */
  wallpaper_settings?: enums.WallPaperSettings;

  protected get [id](): number {
    return 0x8FDE504F;
  }

  static get [name](): string {
    return "inputThemeSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["message_colors_animated", "true", "flags.2?true"],
      ["base_theme", _BaseTheme_, "BaseTheme"],
      ["accent_color", "number", "int"],
      ["outbox_accent_color", "number", "flags.3?int"],
      ["message_colors", ["number"], "flags.0?Vector<int>"],
      ["wallpaper", _InputWallPaper_, "flags.1?InputWallPaper"],
      ["wallpaper_settings", _WallPaperSettings_, "flags.1?WallPaperSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.message_colors_animated ?? null, "true", "flags.2?true"],
      [this.base_theme, _BaseTheme_, "BaseTheme"],
      [this.accent_color, "number", "int"],
      [this.outbox_accent_color ?? null, "number", "flags.3?int"],
      [this.message_colors ?? null, ["number"], "flags.0?Vector<int>"],
      [this.wallpaper ?? null, _InputWallPaper_, "flags.1?InputWallPaper"],
      [this.wallpaper_settings ?? null, _WallPaperSettings_, "flags.1?WallPaperSettings"],
    ];
  }

  constructor(params: { message_colors_animated?: true; base_theme: enums.BaseTheme; accent_color: number; outbox_accent_color?: number; message_colors?: Array<number>; wallpaper?: enums.InputWallPaper; wallpaper_settings?: enums.WallPaperSettings }) {
    super();
    this.message_colors_animated = params.message_colors_animated;
    this.base_theme = params.base_theme;
    this.accent_color = params.accent_color;
    this.outbox_accent_color = params.outbox_accent_color;
    this.message_colors = params.message_colors;
    this.wallpaper = params.wallpaper;
    this.wallpaper_settings = params.wallpaper_settings;
  }
}

/** Theme settings */
export class ThemeSettings_ extends _ThemeSettings_ {
  /** If set, the freeform gradient fill needs to be animated on every sent message. */
  message_colors_animated?: true;
  /** Base theme */
  base_theme: enums.BaseTheme;
  /** Accent color, ARGB format */
  accent_color: number;
  /** Accent color of outgoing messages in ARGB format */
  outbox_accent_color?: number;
  /** The fill to be used as a background for outgoing messages, in RGB24 format.  
  If just one or two equal colors are provided, describes a solid fill of a background.  
  If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.  
  If three or four colors are provided, describes a freeform gradient fill of a background. */
  message_colors?: Array<number>;
  /** [Wallpaper](https://core.telegram.org/api/wallpapers) */
  wallpaper?: enums.WallPaper;

  protected get [id](): number {
    return 0xFA58B6D4;
  }

  static get [name](): string {
    return "themeSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["message_colors_animated", "true", "flags.2?true"],
      ["base_theme", _BaseTheme_, "BaseTheme"],
      ["accent_color", "number", "int"],
      ["outbox_accent_color", "number", "flags.3?int"],
      ["message_colors", ["number"], "flags.0?Vector<int>"],
      ["wallpaper", _WallPaper_, "flags.1?WallPaper"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.message_colors_animated ?? null, "true", "flags.2?true"],
      [this.base_theme, _BaseTheme_, "BaseTheme"],
      [this.accent_color, "number", "int"],
      [this.outbox_accent_color ?? null, "number", "flags.3?int"],
      [this.message_colors ?? null, ["number"], "flags.0?Vector<int>"],
      [this.wallpaper ?? null, _WallPaper_, "flags.1?WallPaper"],
    ];
  }

  constructor(params: { message_colors_animated?: true; base_theme: enums.BaseTheme; accent_color: number; outbox_accent_color?: number; message_colors?: Array<number>; wallpaper?: enums.WallPaper }) {
    super();
    this.message_colors_animated = params.message_colors_animated;
    this.base_theme = params.base_theme;
    this.accent_color = params.accent_color;
    this.outbox_accent_color = params.outbox_accent_color;
    this.message_colors = params.message_colors;
    this.wallpaper = params.wallpaper;
  }
}

/** Page theme */
export class WebPageAttributeTheme_ extends _WebPageAttribute_ {
  /** Theme files */
  documents?: Array<enums.Document>;
  /** Theme settings */
  settings?: enums.ThemeSettings;

  protected get [id](): number {
    return 0x54B56617;
  }

  static get [name](): string {
    return "webPageAttributeTheme"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["documents", [_Document_], "flags.0?Vector<Document>"],
      ["settings", _ThemeSettings_, "flags.1?ThemeSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.documents ?? null, [_Document_], "flags.0?Vector<Document>"],
      [this.settings ?? null, _ThemeSettings_, "flags.1?ThemeSettings"],
    ];
  }

  constructor(params?: { documents?: Array<enums.Document>; settings?: enums.ThemeSettings }) {
    super();
    this.documents = params?.documents;
    this.settings = params?.settings;
  }
}

/** Webpage preview of a Telegram story */
export class WebPageAttributeStory_ extends _WebPageAttribute_ {
  /** Peer that posted the story */
  peer: enums.Peer;
  /** [Story ID](https://core.telegram.org/api/stories#watching-stories) */
  id: number;
  /** May contain the story, if not the story should be fetched when and if needed using [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) with the above `id` and `peer`. */
  story?: enums.StoryItem;

  protected get [id](): number {
    return 0x2E94C3E7;
  }

  static get [name](): string {
    return "webPageAttributeStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["peer", _Peer_, "Peer"],
      ["id", "number", "int"],
      ["story", _StoryItem_, "flags.0?StoryItem"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.peer, _Peer_, "Peer"],
      [this.id, "number", "int"],
      [this.story ?? null, _StoryItem_, "flags.0?StoryItem"],
    ];
  }

  constructor(params: { peer: enums.Peer; id: number; story?: enums.StoryItem }) {
    super();
    this.peer = params.peer;
    this.id = params.id;
    this.story = params.story;
  }
}

/** How users voted in a poll */
export class messages_VotesList_ extends _messages_VotesList_ {
  /** Total number of votes for all options (or only for the chosen `option`, if provided to [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes)) */
  count: number;
  /** Vote info for each user */
  votes: Array<enums.MessagePeerVote>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Info about users that voted in the poll */
  users: Array<enums.User>;
  /** Offset to use with the next [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes) request, empty string if no more results are available. */
  next_offset?: string;

  protected get [id](): number {
    return 0x4899484E;
  }

  static get [name](): string {
    return "messages.votesList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["count", "number", "int"],
      ["votes", [_MessagePeerVote_], "Vector<MessagePeerVote>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["next_offset", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.count, "number", "int"],
      [this.votes, [_MessagePeerVote_], "Vector<MessagePeerVote>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.next_offset ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { count: number; votes: Array<enums.MessagePeerVote>; chats: Array<enums.Chat>; users: Array<enums.User>; next_offset?: string }) {
    super();
    this.count = params.count;
    this.votes = params.votes;
    this.chats = params.chats;
    this.users = params.users;
    this.next_offset = params.next_offset;
  }
}

/** Credit card info URL provided by the bank */
export class BankCardOpenUrl_ extends _BankCardOpenUrl_ {
  /** Info URL */
  url: string;
  /** Bank name */
  name: string;

  protected get [id](): number {
    return 0xF568028A;
  }

  static get [name](): string {
    return "bankCardOpenUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.name, "string", "string"],
    ];
  }

  constructor(params: { url: string; name: string }) {
    super();
    this.url = params.url;
    this.name = params.name;
  }
}

/** Credit card info, provided by the card's bank(s) */
export class payments_BankCardData_ extends _payments_BankCardData_ {
  /** Credit card title */
  title: string;
  /** Info URL(s) provided by the card's bank(s) */
  open_urls: Array<enums.BankCardOpenUrl>;

  protected get [id](): number {
    return 0x3E24E573;
  }

  static get [name](): string {
    return "payments.bankCardData"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
      ["open_urls", [_BankCardOpenUrl_], "Vector<BankCardOpenUrl>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
      [this.open_urls, [_BankCardOpenUrl_], "Vector<BankCardOpenUrl>"],
    ];
  }

  constructor(params: { title: string; open_urls: Array<enums.BankCardOpenUrl> }) {
    super();
    this.title = params.title;
    this.open_urls = params.open_urls;
  }
}

/** Dialog filter AKA [folder](https://core.telegram.org/api/folders) */
export class DialogFilter_ extends _DialogFilter_ {
  /** Whether to include all contacts in this [folder](https://core.telegram.org/api/folders) */
  contacts?: true;
  /** Whether to include all non-contacts in this [folder](https://core.telegram.org/api/folders) */
  non_contacts?: true;
  /** Whether to include all groups in this [folder](https://core.telegram.org/api/folders) */
  groups?: true;
  /** Whether to include all channels in this [folder](https://core.telegram.org/api/folders) */
  broadcasts?: true;
  /** Whether to include all bots in this [folder](https://core.telegram.org/api/folders) */
  bots?: true;
  /** Whether to exclude muted chats from this [folder](https://core.telegram.org/api/folders) */
  exclude_muted?: true;
  /** Whether to exclude read chats from this [folder](https://core.telegram.org/api/folders) */
  exclude_read?: true;
  /** Whether to exclude archived chats from this [folder](https://core.telegram.org/api/folders) */
  exclude_archived?: true;
  /** [Folder](https://core.telegram.org/api/folders) ID */
  id: number;
  /** [Folder](https://core.telegram.org/api/folders) name */
  title: string;
  /** Emoji to use as icon for the folder. */
  emoticon?: string;
  /** Pinned chats, [folders](https://core.telegram.org/api/folders) can have unlimited pinned chats */
  pinned_peers: Array<enums.InputPeer>;
  /** Include the following chats in this [folder](https://core.telegram.org/api/folders) */
  include_peers: Array<enums.InputPeer>;
  /** Exclude the following chats from this [folder](https://core.telegram.org/api/folders) */
  exclude_peers: Array<enums.InputPeer>;

  protected get [id](): number {
    return 0x7438F7E8;
  }

  static get [name](): string {
    return "dialogFilter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["contacts", "true", "flags.0?true"],
      ["non_contacts", "true", "flags.1?true"],
      ["groups", "true", "flags.2?true"],
      ["broadcasts", "true", "flags.3?true"],
      ["bots", "true", "flags.4?true"],
      ["exclude_muted", "true", "flags.11?true"],
      ["exclude_read", "true", "flags.12?true"],
      ["exclude_archived", "true", "flags.13?true"],
      ["id", "number", "int"],
      ["title", "string", "string"],
      ["emoticon", "string", "flags.25?string"],
      ["pinned_peers", [_InputPeer_], "Vector<InputPeer>"],
      ["include_peers", [_InputPeer_], "Vector<InputPeer>"],
      ["exclude_peers", [_InputPeer_], "Vector<InputPeer>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.contacts ?? null, "true", "flags.0?true"],
      [this.non_contacts ?? null, "true", "flags.1?true"],
      [this.groups ?? null, "true", "flags.2?true"],
      [this.broadcasts ?? null, "true", "flags.3?true"],
      [this.bots ?? null, "true", "flags.4?true"],
      [this.exclude_muted ?? null, "true", "flags.11?true"],
      [this.exclude_read ?? null, "true", "flags.12?true"],
      [this.exclude_archived ?? null, "true", "flags.13?true"],
      [this.id, "number", "int"],
      [this.title, "string", "string"],
      [this.emoticon ?? null, "string", "flags.25?string"],
      [this.pinned_peers, [_InputPeer_], "Vector<InputPeer>"],
      [this.include_peers, [_InputPeer_], "Vector<InputPeer>"],
      [this.exclude_peers, [_InputPeer_], "Vector<InputPeer>"],
    ];
  }

  constructor(params: { contacts?: true; non_contacts?: true; groups?: true; broadcasts?: true; bots?: true; exclude_muted?: true; exclude_read?: true; exclude_archived?: true; id: number; title: string; emoticon?: string; pinned_peers: Array<enums.InputPeer>; include_peers: Array<enums.InputPeer>; exclude_peers: Array<enums.InputPeer> }) {
    super();
    this.contacts = params.contacts;
    this.non_contacts = params.non_contacts;
    this.groups = params.groups;
    this.broadcasts = params.broadcasts;
    this.bots = params.bots;
    this.exclude_muted = params.exclude_muted;
    this.exclude_read = params.exclude_read;
    this.exclude_archived = params.exclude_archived;
    this.id = params.id;
    this.title = params.title;
    this.emoticon = params.emoticon;
    this.pinned_peers = params.pinned_peers;
    this.include_peers = params.include_peers;
    this.exclude_peers = params.exclude_peers;
  }
}

/** Used only when reordering folders to indicate the default (all chats) folder. */
export class DialogFilterDefault_ extends _DialogFilter_ {
  protected get [id](): number {
    return 0x363293AE;
  }

  static get [name](): string {
    return "dialogFilterDefault"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A folder imported using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class DialogFilterChatlist_ extends _DialogFilter_ {
  /** Whether the current user has created some [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links) to share the folder as well. */
  has_my_invites?: true;
  /** ID of the folder */
  id: number;
  /** Name of the folder */
  title: string;
  /** Emoji to use as icon for the folder. */
  emoticon?: string;
  /** Pinned chats, [folders](https://core.telegram.org/api/folders) can have unlimited pinned chats */
  pinned_peers: Array<enums.InputPeer>;
  /** Chats to include in the folder */
  include_peers: Array<enums.InputPeer>;

  protected get [id](): number {
    return 0xD64A04A8;
  }

  static get [name](): string {
    return "dialogFilterChatlist"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_my_invites", "true", "flags.26?true"],
      ["id", "number", "int"],
      ["title", "string", "string"],
      ["emoticon", "string", "flags.25?string"],
      ["pinned_peers", [_InputPeer_], "Vector<InputPeer>"],
      ["include_peers", [_InputPeer_], "Vector<InputPeer>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_my_invites ?? null, "true", "flags.26?true"],
      [this.id, "number", "int"],
      [this.title, "string", "string"],
      [this.emoticon ?? null, "string", "flags.25?string"],
      [this.pinned_peers, [_InputPeer_], "Vector<InputPeer>"],
      [this.include_peers, [_InputPeer_], "Vector<InputPeer>"],
    ];
  }

  constructor(params: { has_my_invites?: true; id: number; title: string; emoticon?: string; pinned_peers: Array<enums.InputPeer>; include_peers: Array<enums.InputPeer> }) {
    super();
    this.has_my_invites = params.has_my_invites;
    this.id = params.id;
    this.title = params.title;
    this.emoticon = params.emoticon;
    this.pinned_peers = params.pinned_peers;
    this.include_peers = params.include_peers;
  }
}

/** Suggested [folders](https://core.telegram.org/api/folders) */
export class DialogFilterSuggested_ extends _DialogFilterSuggested_ {
  /** [Folder info](https://core.telegram.org/api/folders) */
  filter: enums.DialogFilter;
  /** [Folder](https://core.telegram.org/api/folders) description */
  description: string;

  protected get [id](): number {
    return 0x77744D4A;
  }

  static get [name](): string {
    return "dialogFilterSuggested"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["filter", _DialogFilter_, "DialogFilter"],
      ["description", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.filter, _DialogFilter_, "DialogFilter"],
      [this.description, "string", "string"],
    ];
  }

  constructor(params: { filter: enums.DialogFilter; description: string }) {
    super();
    this.filter = params.filter;
    this.description = params.description;
  }
}

/** [Channel statistics](https://core.telegram.org/api/stats) date range */
export class StatsDateRangeDays_ extends _StatsDateRangeDays_ {
  /** Initial date */
  min_date: number;
  /** Final date */
  max_date: number;

  protected get [id](): number {
    return 0xB637EDAF;
  }

  static get [name](): string {
    return "statsDateRangeDays"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["min_date", "number", "int"],
      ["max_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.min_date, "number", "int"],
      [this.max_date, "number", "int"],
    ];
  }

  constructor(params: { min_date: number; max_date: number }) {
    super();
    this.min_date = params.min_date;
    this.max_date = params.max_date;
  }
}

/** Statistics value couple; initial and final value for period of time currently in consideration */
export class StatsAbsValueAndPrev_ extends _StatsAbsValueAndPrev_ {
  /** Current value */
  current: number;
  /** Previous value */
  previous: number;

  protected get [id](): number {
    return 0xCB43ACDE;
  }

  static get [name](): string {
    return "statsAbsValueAndPrev"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["current", "number", "double"],
      ["previous", "number", "double"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.current, "number", "double"],
      [this.previous, "number", "double"],
    ];
  }

  constructor(params: { current: number; previous: number }) {
    super();
    this.current = params.current;
    this.previous = params.previous;
  }
}

/** [Channel statistics percentage](https://core.telegram.org/api/stats).  
Compute the percentage simply by doing `part * total / 100` */
export class StatsPercentValue_ extends _StatsPercentValue_ {
  /** Partial value */
  part: number;
  /** Total value */
  total: number;

  protected get [id](): number {
    return 0xCBCE2FE0;
  }

  static get [name](): string {
    return "statsPercentValue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["part", "number", "double"],
      ["total", "number", "double"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.part, "number", "double"],
      [this.total, "number", "double"],
    ];
  }

  constructor(params: { part: number; total: number }) {
    super();
    this.part = params.part;
    this.total = params.total;
  }
}

/** This [channel statistics graph](https://core.telegram.org/api/stats) must be generated asynchronously using [stats.loadAsyncGraph](https://core.telegram.org/method/stats.loadAsyncGraph) to reduce server load */
export class StatsGraphAsync_ extends _StatsGraph_ {
  /** Token to use for fetching the async graph */
  token: string;

  protected get [id](): number {
    return 0x4A27EB2D;
  }

  static get [name](): string {
    return "statsGraphAsync"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["token", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.token, "string", "string"],
    ];
  }

  constructor(params: { token: string }) {
    super();
    this.token = params.token;
  }
}

/** An error occurred while generating the [statistics graph](https://core.telegram.org/api/stats) */
export class StatsGraphError_ extends _StatsGraph_ {
  /** The error */
  error: string;

  protected get [id](): number {
    return 0xBEDC9822;
  }

  static get [name](): string {
    return "statsGraphError"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["error", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.error, "string", "string"],
    ];
  }

  constructor(params: { error: string }) {
    super();
    this.error = params.error;
  }
}

/** [Channel statistics graph](https://core.telegram.org/api/stats) */
export class StatsGraph_ extends _StatsGraph_ {
  /** Statistics data */
  json: enums.DataJSON;
  /** Zoom token */
  zoom_token?: string;

  protected get [id](): number {
    return 0x8EA464B6;
  }

  static get [name](): string {
    return "statsGraph"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["json", _DataJSON_, "DataJSON"],
      ["zoom_token", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.json, _DataJSON_, "DataJSON"],
      [this.zoom_token ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { json: enums.DataJSON; zoom_token?: string }) {
    super();
    this.json = params.json;
    this.zoom_token = params.zoom_token;
  }
}

/** [Channel statistics](https://core.telegram.org/api/stats). */
export class stats_BroadcastStats_ extends _stats_BroadcastStats_ {
  /** Period in consideration */
  period: enums.StatsDateRangeDays;
  /** Follower count change for period in consideration */
  followers: enums.StatsAbsValueAndPrev;
  /** `total_viewcount/postcount`, for posts posted during the period in consideration.  
  Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`). */
  views_per_post: enums.StatsAbsValueAndPrev;
  /** `total_sharecount/postcount`, for posts posted during the period in consideration.  
  Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
  shares_per_post: enums.StatsAbsValueAndPrev;
  /** `total_reactions/postcount`, for posts posted during the period in consideration.  
  Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
  reactions_per_post: enums.StatsAbsValueAndPrev;
  /** `total_views/storycount`, for posts posted during the period in consideration.  
  Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
  views_per_story: enums.StatsAbsValueAndPrev;
  /** `total_shares/storycount`, for posts posted during the period in consideration.  
  Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
  shares_per_story: enums.StatsAbsValueAndPrev;
  /** `total_reactions/storycount`, for posts posted during the period in consideration.  
  Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
  reactions_per_story: enums.StatsAbsValueAndPrev;
  /** Percentage of subscribers with enabled notifications */
  enabled_notifications: enums.StatsPercentValue;
  /** Channel growth graph (absolute subscriber count) */
  growth_graph: enums.StatsGraph;
  /** Followers growth graph (relative subscriber count) */
  followers_graph: enums.StatsGraph;
  /** Muted users graph (relative) */
  mute_graph: enums.StatsGraph;
  /** Views per hour graph (absolute) */
  top_hours_graph: enums.StatsGraph;
  /** Interactions graph (absolute) */
  interactions_graph: enums.StatsGraph;
  /** IV interactions graph (absolute) */
  iv_interactions_graph: enums.StatsGraph;
  /** Views by source graph (absolute) */
  views_by_source_graph: enums.StatsGraph;
  /** New followers by source graph (absolute) */
  new_followers_by_source_graph: enums.StatsGraph;
  /** Subscriber language graph (pie chart) */
  languages_graph: enums.StatsGraph;
  /** A graph containing the number of reactions on posts categorized by emotion */
  reactions_by_emotion_graph: enums.StatsGraph;
  /** A graph containing the number of story views and shares */
  story_interactions_graph: enums.StatsGraph;
  /** A graph containing the number of reactions on stories categorized by emotion */
  story_reactions_by_emotion_graph: enums.StatsGraph;
  /** Detailed statistics about number of views and shares of recently sent messages and stories */
  recent_posts_interactions: Array<enums.PostInteractionCounters>;

  protected get [id](): number {
    return 0x396CA5FC;
  }

  static get [name](): string {
    return "stats.broadcastStats"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["period", _StatsDateRangeDays_, "StatsDateRangeDays"],
      ["followers", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["views_per_post", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["shares_per_post", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["reactions_per_post", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["views_per_story", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["shares_per_story", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["reactions_per_story", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["enabled_notifications", _StatsPercentValue_, "StatsPercentValue"],
      ["growth_graph", _StatsGraph_, "StatsGraph"],
      ["followers_graph", _StatsGraph_, "StatsGraph"],
      ["mute_graph", _StatsGraph_, "StatsGraph"],
      ["top_hours_graph", _StatsGraph_, "StatsGraph"],
      ["interactions_graph", _StatsGraph_, "StatsGraph"],
      ["iv_interactions_graph", _StatsGraph_, "StatsGraph"],
      ["views_by_source_graph", _StatsGraph_, "StatsGraph"],
      ["new_followers_by_source_graph", _StatsGraph_, "StatsGraph"],
      ["languages_graph", _StatsGraph_, "StatsGraph"],
      ["reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
      ["story_interactions_graph", _StatsGraph_, "StatsGraph"],
      ["story_reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
      ["recent_posts_interactions", [_PostInteractionCounters_], "Vector<PostInteractionCounters>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.period, _StatsDateRangeDays_, "StatsDateRangeDays"],
      [this.followers, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.views_per_post, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.shares_per_post, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.reactions_per_post, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.views_per_story, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.shares_per_story, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.reactions_per_story, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.enabled_notifications, _StatsPercentValue_, "StatsPercentValue"],
      [this.growth_graph, _StatsGraph_, "StatsGraph"],
      [this.followers_graph, _StatsGraph_, "StatsGraph"],
      [this.mute_graph, _StatsGraph_, "StatsGraph"],
      [this.top_hours_graph, _StatsGraph_, "StatsGraph"],
      [this.interactions_graph, _StatsGraph_, "StatsGraph"],
      [this.iv_interactions_graph, _StatsGraph_, "StatsGraph"],
      [this.views_by_source_graph, _StatsGraph_, "StatsGraph"],
      [this.new_followers_by_source_graph, _StatsGraph_, "StatsGraph"],
      [this.languages_graph, _StatsGraph_, "StatsGraph"],
      [this.reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
      [this.story_interactions_graph, _StatsGraph_, "StatsGraph"],
      [this.story_reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
      [this.recent_posts_interactions, [_PostInteractionCounters_], "Vector<PostInteractionCounters>"],
    ];
  }

  constructor(params: { period: enums.StatsDateRangeDays; followers: enums.StatsAbsValueAndPrev; views_per_post: enums.StatsAbsValueAndPrev; shares_per_post: enums.StatsAbsValueAndPrev; reactions_per_post: enums.StatsAbsValueAndPrev; views_per_story: enums.StatsAbsValueAndPrev; shares_per_story: enums.StatsAbsValueAndPrev; reactions_per_story: enums.StatsAbsValueAndPrev; enabled_notifications: enums.StatsPercentValue; growth_graph: enums.StatsGraph; followers_graph: enums.StatsGraph; mute_graph: enums.StatsGraph; top_hours_graph: enums.StatsGraph; interactions_graph: enums.StatsGraph; iv_interactions_graph: enums.StatsGraph; views_by_source_graph: enums.StatsGraph; new_followers_by_source_graph: enums.StatsGraph; languages_graph: enums.StatsGraph; reactions_by_emotion_graph: enums.StatsGraph; story_interactions_graph: enums.StatsGraph; story_reactions_by_emotion_graph: enums.StatsGraph; recent_posts_interactions: Array<enums.PostInteractionCounters> }) {
    super();
    this.period = params.period;
    this.followers = params.followers;
    this.views_per_post = params.views_per_post;
    this.shares_per_post = params.shares_per_post;
    this.reactions_per_post = params.reactions_per_post;
    this.views_per_story = params.views_per_story;
    this.shares_per_story = params.shares_per_story;
    this.reactions_per_story = params.reactions_per_story;
    this.enabled_notifications = params.enabled_notifications;
    this.growth_graph = params.growth_graph;
    this.followers_graph = params.followers_graph;
    this.mute_graph = params.mute_graph;
    this.top_hours_graph = params.top_hours_graph;
    this.interactions_graph = params.interactions_graph;
    this.iv_interactions_graph = params.iv_interactions_graph;
    this.views_by_source_graph = params.views_by_source_graph;
    this.new_followers_by_source_graph = params.new_followers_by_source_graph;
    this.languages_graph = params.languages_graph;
    this.reactions_by_emotion_graph = params.reactions_by_emotion_graph;
    this.story_interactions_graph = params.story_interactions_graph;
    this.story_reactions_by_emotion_graph = params.story_reactions_by_emotion_graph;
    this.recent_posts_interactions = params.recent_posts_interactions;
  }
}

/** No PSA/MTProxy info is available */
export class help_PromoDataEmpty_ extends _help_PromoData_ {
  /** Re-fetch PSA/MTProxy info after the specified number of seconds */
  expires: number;

  protected get [id](): number {
    return 0x98F6AC75;
  }

  static get [name](): string {
    return "help.promoDataEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["expires", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.expires, "number", "int"],
    ];
  }

  constructor(params: { expires: number }) {
    super();
    this.expires = params.expires;
  }
}

/** MTProxy/Public Service Announcement information */
export class help_PromoData_ extends _help_PromoData_ {
  /** MTProxy-related channel */
  proxy?: true;
  /** Expiry of PSA/MTProxy info */
  expires: number;
  /** MTProxy/PSA peer */
  peer: enums.Peer;
  /** Chat info */
  chats: Array<enums.Chat>;
  /** User info */
  users: Array<enums.User>;
  /** PSA type */
  psa_type?: string;
  /** PSA message */
  psa_message?: string;

  protected get [id](): number {
    return 0x8C39793F;
  }

  static get [name](): string {
    return "help.promoData"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["proxy", "true", "flags.0?true"],
      ["expires", "number", "int"],
      ["peer", _Peer_, "Peer"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["psa_type", "string", "flags.1?string"],
      ["psa_message", "string", "flags.2?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.proxy ?? null, "true", "flags.0?true"],
      [this.expires, "number", "int"],
      [this.peer, _Peer_, "Peer"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.psa_type ?? null, "string", "flags.1?string"],
      [this.psa_message ?? null, "string", "flags.2?string"],
    ];
  }

  constructor(params: { proxy?: true; expires: number; peer: enums.Peer; chats: Array<enums.Chat>; users: Array<enums.User>; psa_type?: string; psa_message?: string }) {
    super();
    this.proxy = params.proxy;
    this.expires = params.expires;
    this.peer = params.peer;
    this.chats = params.chats;
    this.users = params.users;
    this.psa_type = params.psa_type;
    this.psa_message = params.psa_message;
  }
}

/** An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) in MPEG4 format */
export class VideoSize_ extends _VideoSize_ {
  /** `u` for animated profile pictures, and `v` for trimmed and downscaled video previews */
  type: string;
  /** Video width */
  w: number;
  /** Video height */
  h: number;
  /** File size */
  size: number;
  /** Timestamp that should be shown as static preview to the user (seconds) */
  video_start_ts?: number;

  protected get [id](): number {
    return 0xDE33B094;
  }

  static get [name](): string {
    return "videoSize"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["type", "string", "string"],
      ["w", "number", "int"],
      ["h", "number", "int"],
      ["size", "number", "int"],
      ["video_start_ts", "number", "flags.0?double"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.type, "string", "string"],
      [this.w, "number", "int"],
      [this.h, "number", "int"],
      [this.size, "number", "int"],
      [this.video_start_ts ?? null, "number", "flags.0?double"],
    ];
  }

  constructor(params: { type: string; w: number; h: number; size: number; video_start_ts?: number }) {
    super();
    this.type = params.type;
    this.w = params.w;
    this.h = params.h;
    this.size = params.size;
    this.video_start_ts = params.video_start_ts;
  }
}

/** An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) based on a [custom emoji sticker](https://core.telegram.org/api/custom-emoji). */
export class VideoSizeEmojiMarkup_ extends _VideoSize_ {
  /** [Custom emoji ID](https://core.telegram.org/api/custom-emoji): the custom emoji sticker is shown at the center of the profile picture and occupies at most 67% of it. */
  emoji_id: bigint;
  /** 1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0. */
  background_colors: Array<number>;

  protected get [id](): number {
    return 0xF85C413C;
  }

  static get [name](): string {
    return "videoSizeEmojiMarkup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoji_id", "bigint", "long"],
      ["background_colors", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoji_id, "bigint", "long"],
      [this.background_colors, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { emoji_id: bigint; background_colors: Array<number> }) {
    super();
    this.emoji_id = params.emoji_id;
    this.background_colors = params.background_colors;
  }
}

/** An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) based on a [sticker](https://core.telegram.org/api/stickers). */
export class VideoSizeStickerMarkup_ extends _VideoSize_ {
  /** Stickerset */
  stickerset: enums.InputStickerSet;
  /** Sticker ID */
  sticker_id: bigint;
  /** 1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0. */
  background_colors: Array<number>;

  protected get [id](): number {
    return 0x0DA082FE;
  }

  static get [name](): string {
    return "videoSizeStickerMarkup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["stickerset", _InputStickerSet_, "InputStickerSet"],
      ["sticker_id", "bigint", "long"],
      ["background_colors", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.stickerset, _InputStickerSet_, "InputStickerSet"],
      [this.sticker_id, "bigint", "long"],
      [this.background_colors, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { stickerset: enums.InputStickerSet; sticker_id: bigint; background_colors: Array<number> }) {
    super();
    this.stickerset = params.stickerset;
    this.sticker_id = params.sticker_id;
    this.background_colors = params.background_colors;
  }
}

/** Information about an active user in a supergroup */
export class StatsGroupTopPoster_ extends _StatsGroupTopPoster_ {
  /** User ID */
  user_id: bigint;
  /** Number of messages for [statistics](https://core.telegram.org/api/stats) period in consideration */
  messages: number;
  /** Average number of characters per message */
  avg_chars: number;

  protected get [id](): number {
    return 0x9D04AF9B;
  }

  static get [name](): string {
    return "statsGroupTopPoster"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["messages", "number", "int"],
      ["avg_chars", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.messages, "number", "int"],
      [this.avg_chars, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; messages: number; avg_chars: number }) {
    super();
    this.user_id = params.user_id;
    this.messages = params.messages;
    this.avg_chars = params.avg_chars;
  }
}

/** Information about an active admin in a supergroup */
export class StatsGroupTopAdmin_ extends _StatsGroupTopAdmin_ {
  /** User ID */
  user_id: bigint;
  /** Number of deleted messages for [statistics](https://core.telegram.org/api/stats) period in consideration */
  deleted: number;
  /** Number of kicked users for [statistics](https://core.telegram.org/api/stats) period in consideration */
  kicked: number;
  /** Number of banned users for [statistics](https://core.telegram.org/api/stats) period in consideration */
  banned: number;

  protected get [id](): number {
    return 0xD7584C87;
  }

  static get [name](): string {
    return "statsGroupTopAdmin"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["deleted", "number", "int"],
      ["kicked", "number", "int"],
      ["banned", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.deleted, "number", "int"],
      [this.kicked, "number", "int"],
      [this.banned, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; deleted: number; kicked: number; banned: number }) {
    super();
    this.user_id = params.user_id;
    this.deleted = params.deleted;
    this.kicked = params.kicked;
    this.banned = params.banned;
  }
}

/** Information about an active supergroup inviter */
export class StatsGroupTopInviter_ extends _StatsGroupTopInviter_ {
  /** User ID */
  user_id: bigint;
  /** Number of invitations for [statistics](https://core.telegram.org/api/stats) period in consideration */
  invitations: number;

  protected get [id](): number {
    return 0x535F779D;
  }

  static get [name](): string {
    return "statsGroupTopInviter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["invitations", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.invitations, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; invitations: number }) {
    super();
    this.user_id = params.user_id;
    this.invitations = params.invitations;
  }
}

/** Supergroup [statistics](https://core.telegram.org/api/stats) */
export class stats_MegagroupStats_ extends _stats_MegagroupStats_ {
  /** Period in consideration */
  period: enums.StatsDateRangeDays;
  /** Member count change for period in consideration */
  members: enums.StatsAbsValueAndPrev;
  /** Message number change for period in consideration */
  messages: enums.StatsAbsValueAndPrev;
  /** Number of users that viewed messages, for range in consideration */
  viewers: enums.StatsAbsValueAndPrev;
  /** Number of users that posted messages, for range in consideration */
  posters: enums.StatsAbsValueAndPrev;
  /** Supergroup growth graph (absolute subscriber count) */
  growth_graph: enums.StatsGraph;
  /** Members growth (relative subscriber count) */
  members_graph: enums.StatsGraph;
  /** New members by source graph */
  new_members_by_source_graph: enums.StatsGraph;
  /** Subscriber language graph (pie chart) */
  languages_graph: enums.StatsGraph;
  /** Message activity graph (stacked bar graph, message type) */
  messages_graph: enums.StatsGraph;
  /** Group activity graph (deleted, modified messages, blocked users) */
  actions_graph: enums.StatsGraph;
  /** Activity per hour graph (absolute) */
  top_hours_graph: enums.StatsGraph;
  /** Activity per day of week graph (absolute) */
  weekdays_graph: enums.StatsGraph;
  /** Info about most active group members */
  top_posters: Array<enums.StatsGroupTopPoster>;
  /** Info about most active group admins */
  top_admins: Array<enums.StatsGroupTopAdmin>;
  /** Info about most active group inviters */
  top_inviters: Array<enums.StatsGroupTopInviter>;
  /** Info about users mentioned in statistics */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xEF7FF916;
  }

  static get [name](): string {
    return "stats.megagroupStats"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["period", _StatsDateRangeDays_, "StatsDateRangeDays"],
      ["members", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["messages", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["viewers", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["posters", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      ["growth_graph", _StatsGraph_, "StatsGraph"],
      ["members_graph", _StatsGraph_, "StatsGraph"],
      ["new_members_by_source_graph", _StatsGraph_, "StatsGraph"],
      ["languages_graph", _StatsGraph_, "StatsGraph"],
      ["messages_graph", _StatsGraph_, "StatsGraph"],
      ["actions_graph", _StatsGraph_, "StatsGraph"],
      ["top_hours_graph", _StatsGraph_, "StatsGraph"],
      ["weekdays_graph", _StatsGraph_, "StatsGraph"],
      ["top_posters", [_StatsGroupTopPoster_], "Vector<StatsGroupTopPoster>"],
      ["top_admins", [_StatsGroupTopAdmin_], "Vector<StatsGroupTopAdmin>"],
      ["top_inviters", [_StatsGroupTopInviter_], "Vector<StatsGroupTopInviter>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.period, _StatsDateRangeDays_, "StatsDateRangeDays"],
      [this.members, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.messages, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.viewers, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.posters, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
      [this.growth_graph, _StatsGraph_, "StatsGraph"],
      [this.members_graph, _StatsGraph_, "StatsGraph"],
      [this.new_members_by_source_graph, _StatsGraph_, "StatsGraph"],
      [this.languages_graph, _StatsGraph_, "StatsGraph"],
      [this.messages_graph, _StatsGraph_, "StatsGraph"],
      [this.actions_graph, _StatsGraph_, "StatsGraph"],
      [this.top_hours_graph, _StatsGraph_, "StatsGraph"],
      [this.weekdays_graph, _StatsGraph_, "StatsGraph"],
      [this.top_posters, [_StatsGroupTopPoster_], "Vector<StatsGroupTopPoster>"],
      [this.top_admins, [_StatsGroupTopAdmin_], "Vector<StatsGroupTopAdmin>"],
      [this.top_inviters, [_StatsGroupTopInviter_], "Vector<StatsGroupTopInviter>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { period: enums.StatsDateRangeDays; members: enums.StatsAbsValueAndPrev; messages: enums.StatsAbsValueAndPrev; viewers: enums.StatsAbsValueAndPrev; posters: enums.StatsAbsValueAndPrev; growth_graph: enums.StatsGraph; members_graph: enums.StatsGraph; new_members_by_source_graph: enums.StatsGraph; languages_graph: enums.StatsGraph; messages_graph: enums.StatsGraph; actions_graph: enums.StatsGraph; top_hours_graph: enums.StatsGraph; weekdays_graph: enums.StatsGraph; top_posters: Array<enums.StatsGroupTopPoster>; top_admins: Array<enums.StatsGroupTopAdmin>; top_inviters: Array<enums.StatsGroupTopInviter>; users: Array<enums.User> }) {
    super();
    this.period = params.period;
    this.members = params.members;
    this.messages = params.messages;
    this.viewers = params.viewers;
    this.posters = params.posters;
    this.growth_graph = params.growth_graph;
    this.members_graph = params.members_graph;
    this.new_members_by_source_graph = params.new_members_by_source_graph;
    this.languages_graph = params.languages_graph;
    this.messages_graph = params.messages_graph;
    this.actions_graph = params.actions_graph;
    this.top_hours_graph = params.top_hours_graph;
    this.weekdays_graph = params.weekdays_graph;
    this.top_posters = params.top_posters;
    this.top_admins = params.top_admins;
    this.top_inviters = params.top_inviters;
    this.users = params.users;
  }
}

/** Global privacy settings */
export class GlobalPrivacySettings_ extends _GlobalPrivacySettings_ {
  /** Whether to archive and mute new chats from non-contacts */
  archive_and_mute_new_noncontact_peers?: true;
  /** Whether unmuted chats will be kept in the Archive chat list when they get a new message. */
  keep_archived_unmuted?: true;
  /** Whether unmuted chats that are always included or pinned in a [folder](https://core.telegram.org/api/folders), will be kept in the Archive chat list when they get a new message. Ignored if `keep_archived_unmuted` is set. */
  keep_archived_folders?: true;
  hide_read_marks?: true;
  new_noncontact_peers_require_premium?: true;

  protected get [id](): number {
    return 0x734C4CCB;
  }

  static get [name](): string {
    return "globalPrivacySettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["archive_and_mute_new_noncontact_peers", "true", "flags.0?true"],
      ["keep_archived_unmuted", "true", "flags.1?true"],
      ["keep_archived_folders", "true", "flags.2?true"],
      ["hide_read_marks", "true", "flags.3?true"],
      ["new_noncontact_peers_require_premium", "true", "flags.4?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.archive_and_mute_new_noncontact_peers ?? null, "true", "flags.0?true"],
      [this.keep_archived_unmuted ?? null, "true", "flags.1?true"],
      [this.keep_archived_folders ?? null, "true", "flags.2?true"],
      [this.hide_read_marks ?? null, "true", "flags.3?true"],
      [this.new_noncontact_peers_require_premium ?? null, "true", "flags.4?true"],
    ];
  }

  constructor(params?: { archive_and_mute_new_noncontact_peers?: true; keep_archived_unmuted?: true; keep_archived_folders?: true; hide_read_marks?: true; new_noncontact_peers_require_premium?: true }) {
    super();
    this.archive_and_mute_new_noncontact_peers = params?.archive_and_mute_new_noncontact_peers;
    this.keep_archived_unmuted = params?.keep_archived_unmuted;
    this.keep_archived_folders = params?.keep_archived_folders;
    this.hide_read_marks = params?.hide_read_marks;
    this.new_noncontact_peers_require_premium = params?.new_noncontact_peers_require_premium;
  }
}

/** Country code and phone number pattern of a specific country */
export class help_CountryCode_ extends _help_CountryCode_ {
  /** ISO country code */
  country_code: string;
  /** Possible phone prefixes */
  prefixes?: Array<string>;
  /** Phone patterns: for example, `XXX XXX XXX` */
  patterns?: Array<string>;

  protected get [id](): number {
    return 0x4203C5EF;
  }

  static get [name](): string {
    return "help.countryCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["country_code", "string", "string"],
      ["prefixes", ["string"], "flags.0?Vector<string>"],
      ["patterns", ["string"], "flags.1?Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.country_code, "string", "string"],
      [this.prefixes ?? null, ["string"], "flags.0?Vector<string>"],
      [this.patterns ?? null, ["string"], "flags.1?Vector<string>"],
    ];
  }

  constructor(params: { country_code: string; prefixes?: Array<string>; patterns?: Array<string> }) {
    super();
    this.country_code = params.country_code;
    this.prefixes = params.prefixes;
    this.patterns = params.patterns;
  }
}

/** Name, ISO code, localized name and phone codes/patterns of a specific country */
export class help_Country_ extends _help_Country_ {
  /** Whether this country should not be shown in the list */
  hidden?: true;
  /** ISO code of country */
  iso2: string;
  /** Name of the country in the country's language */
  default_name: string;
  /** Name of the country in the user's language, if different from the original name */
  name?: string;
  /** Phone codes/patterns */
  country_codes: Array<enums.help.CountryCode>;

  protected get [id](): number {
    return 0xC3878E23;
  }

  static get [name](): string {
    return "help.country"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["hidden", "true", "flags.0?true"],
      ["iso2", "string", "string"],
      ["default_name", "string", "string"],
      ["name", "string", "flags.1?string"],
      ["country_codes", [_help_CountryCode_], "Vector<help.CountryCode>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.hidden ?? null, "true", "flags.0?true"],
      [this.iso2, "string", "string"],
      [this.default_name, "string", "string"],
      [this.name ?? null, "string", "flags.1?string"],
      [this.country_codes, [_help_CountryCode_], "Vector<help.CountryCode>"],
    ];
  }

  constructor(params: { hidden?: true; iso2: string; default_name: string; name?: string; country_codes: Array<enums.help.CountryCode> }) {
    super();
    this.hidden = params.hidden;
    this.iso2 = params.iso2;
    this.default_name = params.default_name;
    this.name = params.name;
    this.country_codes = params.country_codes;
  }
}

/** The country list has not changed */
export class help_CountriesListNotModified_ extends _help_CountriesList_ {
  protected get [id](): number {
    return 0x93CC1F32;
  }

  static get [name](): string {
    return "help.countriesListNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Name, ISO code, localized name and phone codes/patterns of all available countries */
export class help_CountriesList_ extends _help_CountriesList_ {
  /** Name, ISO code, localized name and phone codes/patterns of all available countries */
  countries: Array<enums.help.Country>;
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;

  protected get [id](): number {
    return 0x87D0759E;
  }

  static get [name](): string {
    return "help.countriesList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["countries", [_help_Country_], "Vector<help.Country>"],
      ["hash", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.countries, [_help_Country_], "Vector<help.Country>"],
      [this.hash, "number", "int"],
    ];
  }

  constructor(params: { countries: Array<enums.help.Country>; hash: number }) {
    super();
    this.countries = params.countries;
    this.hash = params.hash;
  }
}

/** View, forward counter + info about replies of a specific message */
export class MessageViews_ extends _MessageViews_ {
  /** View count of message */
  views?: number;
  /** Forward count of message */
  forwards?: number;
  /** Reply and [thread](https://core.telegram.org/api/threads) information of message */
  replies?: enums.MessageReplies;

  protected get [id](): number {
    return 0x455B853D;
  }

  static get [name](): string {
    return "messageViews"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["views", "number", "flags.0?int"],
      ["forwards", "number", "flags.1?int"],
      ["replies", _MessageReplies_, "flags.2?MessageReplies"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.views ?? null, "number", "flags.0?int"],
      [this.forwards ?? null, "number", "flags.1?int"],
      [this.replies ?? null, _MessageReplies_, "flags.2?MessageReplies"],
    ];
  }

  constructor(params?: { views?: number; forwards?: number; replies?: enums.MessageReplies }) {
    super();
    this.views = params?.views;
    this.forwards = params?.forwards;
    this.replies = params?.replies;
  }
}

/** View, forward counter + info about replies */
export class messages_MessageViews_ extends _messages_MessageViews_ {
  /** View, forward counter + info about replies */
  views: Array<enums.MessageViews>;
  /** Chats mentioned in constructor */
  chats: Array<enums.Chat>;
  /** Users mentioned in constructor */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xB6C4F543;
  }

  static get [name](): string {
    return "messages.messageViews"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["views", [_MessageViews_], "Vector<MessageViews>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.views, [_MessageViews_], "Vector<MessageViews>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { views: Array<enums.MessageViews>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.views = params.views;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Information about a [message thread](https://core.telegram.org/api/threads) */
export class messages_DiscussionMessage_ extends _messages_DiscussionMessage_ {
  /** The messages from which the thread starts. The messages are returned in reverse chronological order (i.e., in order of decreasing message ID). */
  messages: Array<enums.Message>;
  /** Message ID of latest reply in this [thread](https://core.telegram.org/api/threads) */
  max_id?: number;
  /** Message ID of latest read incoming message in this [thread](https://core.telegram.org/api/threads) */
  read_inbox_max_id?: number;
  /** Message ID of latest read outgoing message in this [thread](https://core.telegram.org/api/threads) */
  read_outbox_max_id?: number;
  /** Number of unread messages */
  unread_count: number;
  /** Chats mentioned in constructor */
  chats: Array<enums.Chat>;
  /** Users mentioned in constructor */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xA6341782;
  }

  static get [name](): string {
    return "messages.discussionMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["messages", [_Message_], "Vector<Message>"],
      ["max_id", "number", "flags.0?int"],
      ["read_inbox_max_id", "number", "flags.1?int"],
      ["read_outbox_max_id", "number", "flags.2?int"],
      ["unread_count", "number", "int"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.max_id ?? null, "number", "flags.0?int"],
      [this.read_inbox_max_id ?? null, "number", "flags.1?int"],
      [this.read_outbox_max_id ?? null, "number", "flags.2?int"],
      [this.unread_count, "number", "int"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { messages: Array<enums.Message>; max_id?: number; read_inbox_max_id?: number; read_outbox_max_id?: number; unread_count: number; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.messages = params.messages;
    this.max_id = params.max_id;
    this.read_inbox_max_id = params.read_inbox_max_id;
    this.read_outbox_max_id = params.read_outbox_max_id;
    this.unread_count = params.unread_count;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Message replies and [thread](https://core.telegram.org/api/threads) information */
export class MessageReplyHeader_ extends _MessageReplyHeader_ {
  /** This is a reply to a scheduled message. */
  reply_to_scheduled?: true;
  /** Whether this message was sent in a [forum topic](https://core.telegram.org/api/forum#forum-topics) (except for the General topic). */
  forum_topic?: true;
  /** Whether this message is quoting a part of another message. */
  quote?: true;
  /** ID of message to which this message is replying */
  reply_to_msg_id?: number;
  /** For replies sent in [channel discussion threads](https://core.telegram.org/api/threads) of which the current user is not a member, the discussion group ID */
  reply_to_peer_id?: enums.Peer;
  /** When replying to a message sent by a certain peer to another chat, contains info about the peer that originally sent the message to that other chat. */
  reply_from?: enums.MessageFwdHeader;
  /** When replying to a media sent by a certain peer to another chat, contains the media of the replied-to message. */
  reply_media?: enums.MessageMedia;
  /** ID of the message that started this [message thread](https://core.telegram.org/api/threads) */
  reply_to_top_id?: number;
  /** Used to quote-reply to only a certain section (specified here) of the original message. */
  quote_text?: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) from the `quote_text` field. */
  quote_entities?: Array<enums.MessageEntity>;
  /** Offset of the message `quote_text` within the original message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)). */
  quote_offset?: number;

  protected get [id](): number {
    return 0xAFBC09DB;
  }

  static get [name](): string {
    return "messageReplyHeader"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["reply_to_scheduled", "true", "flags.2?true"],
      ["forum_topic", "true", "flags.3?true"],
      ["quote", "true", "flags.9?true"],
      ["reply_to_msg_id", "number", "flags.4?int"],
      ["reply_to_peer_id", _Peer_, "flags.0?Peer"],
      ["reply_from", _MessageFwdHeader_, "flags.5?MessageFwdHeader"],
      ["reply_media", _MessageMedia_, "flags.8?MessageMedia"],
      ["reply_to_top_id", "number", "flags.1?int"],
      ["quote_text", "string", "flags.6?string"],
      ["quote_entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      ["quote_offset", "number", "flags.10?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.reply_to_scheduled ?? null, "true", "flags.2?true"],
      [this.forum_topic ?? null, "true", "flags.3?true"],
      [this.quote ?? null, "true", "flags.9?true"],
      [this.reply_to_msg_id ?? null, "number", "flags.4?int"],
      [this.reply_to_peer_id ?? null, _Peer_, "flags.0?Peer"],
      [this.reply_from ?? null, _MessageFwdHeader_, "flags.5?MessageFwdHeader"],
      [this.reply_media ?? null, _MessageMedia_, "flags.8?MessageMedia"],
      [this.reply_to_top_id ?? null, "number", "flags.1?int"],
      [this.quote_text ?? null, "string", "flags.6?string"],
      [this.quote_entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
      [this.quote_offset ?? null, "number", "flags.10?int"],
    ];
  }

  constructor(params?: { reply_to_scheduled?: true; forum_topic?: true; quote?: true; reply_to_msg_id?: number; reply_to_peer_id?: enums.Peer; reply_from?: enums.MessageFwdHeader; reply_media?: enums.MessageMedia; reply_to_top_id?: number; quote_text?: string; quote_entities?: Array<enums.MessageEntity>; quote_offset?: number }) {
    super();
    this.reply_to_scheduled = params?.reply_to_scheduled;
    this.forum_topic = params?.forum_topic;
    this.quote = params?.quote;
    this.reply_to_msg_id = params?.reply_to_msg_id;
    this.reply_to_peer_id = params?.reply_to_peer_id;
    this.reply_from = params?.reply_from;
    this.reply_media = params?.reply_media;
    this.reply_to_top_id = params?.reply_to_top_id;
    this.quote_text = params?.quote_text;
    this.quote_entities = params?.quote_entities;
    this.quote_offset = params?.quote_offset;
  }
}

/** Represents a reply to a [story](https://core.telegram.org/api/stories) */
export class MessageReplyStoryHeader_ extends _MessageReplyHeader_ {
  peer: enums.Peer;
  /** Story ID */
  story_id: number;

  protected get [id](): number {
    return 0x0E5AF939;
  }

  static get [name](): string {
    return "messageReplyStoryHeader"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["story_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.story_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; story_id: number }) {
    super();
    this.peer = params.peer;
    this.story_id = params.story_id;
  }
}

/** Info about [the comment section of a channel post, or a simple message thread](https://core.telegram.org/api/threads) */
export class MessageReplies_ extends _MessageReplies_ {
  /** Whether this constructor contains information about the [comment section of a channel post, or a simple message thread](https://core.telegram.org/api/threads) */
  comments?: true;
  /** Contains the total number of replies in this thread or comment section. */
  replies: number;
  /** [PTS](https://core.telegram.org/api/updates) of the message that started this thread. */
  replies_pts: number;
  /** For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews. */
  recent_repliers?: Array<enums.Peer>;
  /** For channel post comments, contains the ID of the associated [discussion supergroup](https://core.telegram.org/api/discussion) */
  channel_id?: bigint;
  /** ID of the latest message in this thread or comment section. */
  max_id?: number;
  /** Contains the ID of the latest read message in this thread or comment section. */
  read_max_id?: number;

  protected get [id](): number {
    return 0x83D60FC2;
  }

  static get [name](): string {
    return "messageReplies"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["comments", "true", "flags.0?true"],
      ["replies", "number", "int"],
      ["replies_pts", "number", "int"],
      ["recent_repliers", [_Peer_], "flags.1?Vector<Peer>"],
      ["channel_id", "bigint", "flags.0?long"],
      ["max_id", "number", "flags.2?int"],
      ["read_max_id", "number", "flags.3?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.comments ?? null, "true", "flags.0?true"],
      [this.replies, "number", "int"],
      [this.replies_pts, "number", "int"],
      [this.recent_repliers ?? null, [_Peer_], "flags.1?Vector<Peer>"],
      [this.channel_id ?? null, "bigint", "flags.0?long"],
      [this.max_id ?? null, "number", "flags.2?int"],
      [this.read_max_id ?? null, "number", "flags.3?int"],
    ];
  }

  constructor(params: { comments?: true; replies: number; replies_pts: number; recent_repliers?: Array<enums.Peer>; channel_id?: bigint; max_id?: number; read_max_id?: number }) {
    super();
    this.comments = params.comments;
    this.replies = params.replies;
    this.replies_pts = params.replies_pts;
    this.recent_repliers = params.recent_repliers;
    this.channel_id = params.channel_id;
    this.max_id = params.max_id;
    this.read_max_id = params.read_max_id;
  }
}

/** Information about a blocked peer */
export class PeerBlocked_ extends _PeerBlocked_ {
  /** Peer ID */
  peer_id: enums.Peer;
  /** When was the peer blocked */
  date: number;

  protected get [id](): number {
    return 0xE8FD8014;
  }

  static get [name](): string {
    return "peerBlocked"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer_id", _Peer_, "Peer"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer_id, _Peer_, "Peer"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { peer_id: enums.Peer; date: number }) {
    super();
    this.peer_id = params.peer_id;
    this.date = params.date;
  }
}

/** Message statistics */
export class stats_MessageStats_ extends _stats_MessageStats_ {
  /** Message view graph */
  views_graph: enums.StatsGraph;
  /** A graph containing the number of reactions on stories categorized by emotion */
  reactions_by_emotion_graph: enums.StatsGraph;

  protected get [id](): number {
    return 0x7FE91C14;
  }

  static get [name](): string {
    return "stats.messageStats"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["views_graph", _StatsGraph_, "StatsGraph"],
      ["reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.views_graph, _StatsGraph_, "StatsGraph"],
      [this.reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
    ];
  }

  constructor(params: { views_graph: enums.StatsGraph; reactions_by_emotion_graph: enums.StatsGraph }) {
    super();
    this.views_graph = params.views_graph;
    this.reactions_by_emotion_graph = params.reactions_by_emotion_graph;
  }
}

/** An ended group call */
export class GroupCallDiscarded_ extends _GroupCall_ {
  /** Group call ID */
  id: bigint;
  /** Group call access hash */
  access_hash: bigint;
  /** Group call duration */
  duration: number;

  protected get [id](): number {
    return 0x7780BCB4;
  }

  static get [name](): string {
    return "groupCallDiscarded"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["duration", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.duration, "number", "int"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; duration: number }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.duration = params.duration;
  }
}

/** Info about a group call or livestream */
export class GroupCall_ extends _GroupCall_ {
  /** Whether the user should be muted upon joining the call */
  join_muted?: true;
  /** Whether the current user can change the value of the `join_muted` flag using [phone.toggleGroupCallSettings](https://core.telegram.org/method/phone.toggleGroupCallSettings) */
  can_change_join_muted?: true;
  /** Specifies the ordering to use when locally sorting by date and displaying in the UI group call participants. */
  join_date_asc?: true;
  /** Whether we subscribed to the scheduled call */
  schedule_start_subscribed?: true;
  /** Whether you can start streaming video into the call */
  can_start_video?: true;
  /** Whether the group call is currently being recorded */
  record_video_active?: true;
  /** Whether RTMP streams are allowed */
  rtmp_stream?: true;
  /** Whether the listeners list is hidden and cannot be fetched using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). The `phone.groupParticipants.count` and `groupCall.participants_count` counters will still include listeners. */
  listeners_hidden?: true;
  /** Group call ID */
  id: bigint;
  /** Group call access hash */
  access_hash: bigint;
  /** Participant count */
  participants_count: number;
  /** Group call title */
  title?: string;
  /** DC ID to be used for livestream chunks */
  stream_dc_id?: number;
  /** When was the recording started */
  record_start_date?: number;
  /** When is the call scheduled to start */
  schedule_date?: number;
  /** Number of people currently streaming video into the call */
  unmuted_video_count?: number;
  /** Maximum number of people allowed to stream video into the call */
  unmuted_video_limit: number;
  /** Version */
  version: number;

  protected get [id](): number {
    return 0xD597650C;
  }

  static get [name](): string {
    return "groupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["join_muted", "true", "flags.1?true"],
      ["can_change_join_muted", "true", "flags.2?true"],
      ["join_date_asc", "true", "flags.6?true"],
      ["schedule_start_subscribed", "true", "flags.8?true"],
      ["can_start_video", "true", "flags.9?true"],
      ["record_video_active", "true", "flags.11?true"],
      ["rtmp_stream", "true", "flags.12?true"],
      ["listeners_hidden", "true", "flags.13?true"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["participants_count", "number", "int"],
      ["title", "string", "flags.3?string"],
      ["stream_dc_id", "number", "flags.4?int"],
      ["record_start_date", "number", "flags.5?int"],
      ["schedule_date", "number", "flags.7?int"],
      ["unmuted_video_count", "number", "flags.10?int"],
      ["unmuted_video_limit", "number", "int"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.join_muted ?? null, "true", "flags.1?true"],
      [this.can_change_join_muted ?? null, "true", "flags.2?true"],
      [this.join_date_asc ?? null, "true", "flags.6?true"],
      [this.schedule_start_subscribed ?? null, "true", "flags.8?true"],
      [this.can_start_video ?? null, "true", "flags.9?true"],
      [this.record_video_active ?? null, "true", "flags.11?true"],
      [this.rtmp_stream ?? null, "true", "flags.12?true"],
      [this.listeners_hidden ?? null, "true", "flags.13?true"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.participants_count, "number", "int"],
      [this.title ?? null, "string", "flags.3?string"],
      [this.stream_dc_id ?? null, "number", "flags.4?int"],
      [this.record_start_date ?? null, "number", "flags.5?int"],
      [this.schedule_date ?? null, "number", "flags.7?int"],
      [this.unmuted_video_count ?? null, "number", "flags.10?int"],
      [this.unmuted_video_limit, "number", "int"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { join_muted?: true; can_change_join_muted?: true; join_date_asc?: true; schedule_start_subscribed?: true; can_start_video?: true; record_video_active?: true; rtmp_stream?: true; listeners_hidden?: true; id: bigint; access_hash: bigint; participants_count: number; title?: string; stream_dc_id?: number; record_start_date?: number; schedule_date?: number; unmuted_video_count?: number; unmuted_video_limit: number; version: number }) {
    super();
    this.join_muted = params.join_muted;
    this.can_change_join_muted = params.can_change_join_muted;
    this.join_date_asc = params.join_date_asc;
    this.schedule_start_subscribed = params.schedule_start_subscribed;
    this.can_start_video = params.can_start_video;
    this.record_video_active = params.record_video_active;
    this.rtmp_stream = params.rtmp_stream;
    this.listeners_hidden = params.listeners_hidden;
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.participants_count = params.participants_count;
    this.title = params.title;
    this.stream_dc_id = params.stream_dc_id;
    this.record_start_date = params.record_start_date;
    this.schedule_date = params.schedule_date;
    this.unmuted_video_count = params.unmuted_video_count;
    this.unmuted_video_limit = params.unmuted_video_limit;
    this.version = params.version;
  }
}

/** Points to a specific group call */
export class InputGroupCall_ extends _InputGroupCall_ {
  /** Group call ID */
  id: bigint;
  /** Group call access hash */
  access_hash: bigint;

  protected get [id](): number {
    return 0xD8AA840F;
  }

  static get [name](): string {
    return "inputGroupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Info about a group call participant */
export class GroupCallParticipant_ extends _GroupCallParticipant_ {
  /** Whether the participant is muted */
  muted?: true;
  /** Whether the participant has left */
  left?: true;
  /** Whether the participant can unmute themselves */
  can_self_unmute?: true;
  /** Whether the participant has just joined */
  just_joined?: true;
  /** If set, and [updateGroupCallParticipants](https://core.telegram.org/constructor/updateGroupCallParticipants).version < locally stored call.version, info about this participant should be ignored. If (...), and [updateGroupCallParticipants](https://core.telegram.org/constructor/updateGroupCallParticipants).version > call.version+1, the participant list should be refetched using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). */
  versioned?: true;
  /** If not set, the `volume` and `muted_by_you` fields can be safely used to overwrite locally cached information; otherwise, `volume` will contain valid information only if `volume_by_admin` is set both in the cache and in the received constructor. */
  min?: true;
  /** Whether this participant was muted by the current user */
  muted_by_you?: true;
  /** Whether our volume can only changed by an admin */
  volume_by_admin?: true;
  /** Whether this participant is the current user */
  self?: true;
  /** Whether this participant is currently broadcasting video */
  video_joined?: true;
  /** Peer information */
  peer: enums.Peer;
  /** When did this participant join the group call */
  date: number;
  /** When was this participant last active in the group call */
  active_date?: number;
  /** Source ID */
  source: number;
  /** Volume, if not set the volume is set to 100%. */
  volume?: number;
  /** Info about this participant */
  about?: string;
  /** Specifies the UI visualization order of peers with raised hands: peers with a higher rating should be showed first in the list. */
  raise_hand_rating?: bigint;
  /** Info about the video stream the participant is currently broadcasting */
  video?: enums.GroupCallParticipantVideo;
  /** Info about the screen sharing stream the participant is currently broadcasting */
  presentation?: enums.GroupCallParticipantVideo;

  protected get [id](): number {
    return 0xEBA636FE;
  }

  static get [name](): string {
    return "groupCallParticipant"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["muted", "true", "flags.0?true"],
      ["left", "true", "flags.1?true"],
      ["can_self_unmute", "true", "flags.2?true"],
      ["just_joined", "true", "flags.4?true"],
      ["versioned", "true", "flags.5?true"],
      ["min", "true", "flags.8?true"],
      ["muted_by_you", "true", "flags.9?true"],
      ["volume_by_admin", "true", "flags.10?true"],
      ["self", "true", "flags.12?true"],
      ["video_joined", "true", "flags.15?true"],
      ["peer", _Peer_, "Peer"],
      ["date", "number", "int"],
      ["active_date", "number", "flags.3?int"],
      ["source", "number", "int"],
      ["volume", "number", "flags.7?int"],
      ["about", "string", "flags.11?string"],
      ["raise_hand_rating", "bigint", "flags.13?long"],
      ["video", _GroupCallParticipantVideo_, "flags.6?GroupCallParticipantVideo"],
      ["presentation", _GroupCallParticipantVideo_, "flags.14?GroupCallParticipantVideo"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.muted ?? null, "true", "flags.0?true"],
      [this.left ?? null, "true", "flags.1?true"],
      [this.can_self_unmute ?? null, "true", "flags.2?true"],
      [this.just_joined ?? null, "true", "flags.4?true"],
      [this.versioned ?? null, "true", "flags.5?true"],
      [this.min ?? null, "true", "flags.8?true"],
      [this.muted_by_you ?? null, "true", "flags.9?true"],
      [this.volume_by_admin ?? null, "true", "flags.10?true"],
      [this.self ?? null, "true", "flags.12?true"],
      [this.video_joined ?? null, "true", "flags.15?true"],
      [this.peer, _Peer_, "Peer"],
      [this.date, "number", "int"],
      [this.active_date ?? null, "number", "flags.3?int"],
      [this.source, "number", "int"],
      [this.volume ?? null, "number", "flags.7?int"],
      [this.about ?? null, "string", "flags.11?string"],
      [this.raise_hand_rating ?? null, "bigint", "flags.13?long"],
      [this.video ?? null, _GroupCallParticipantVideo_, "flags.6?GroupCallParticipantVideo"],
      [this.presentation ?? null, _GroupCallParticipantVideo_, "flags.14?GroupCallParticipantVideo"],
    ];
  }

  constructor(params: { muted?: true; left?: true; can_self_unmute?: true; just_joined?: true; versioned?: true; min?: true; muted_by_you?: true; volume_by_admin?: true; self?: true; video_joined?: true; peer: enums.Peer; date: number; active_date?: number; source: number; volume?: number; about?: string; raise_hand_rating?: bigint; video?: enums.GroupCallParticipantVideo; presentation?: enums.GroupCallParticipantVideo }) {
    super();
    this.muted = params.muted;
    this.left = params.left;
    this.can_self_unmute = params.can_self_unmute;
    this.just_joined = params.just_joined;
    this.versioned = params.versioned;
    this.min = params.min;
    this.muted_by_you = params.muted_by_you;
    this.volume_by_admin = params.volume_by_admin;
    this.self = params.self;
    this.video_joined = params.video_joined;
    this.peer = params.peer;
    this.date = params.date;
    this.active_date = params.active_date;
    this.source = params.source;
    this.volume = params.volume;
    this.about = params.about;
    this.raise_hand_rating = params.raise_hand_rating;
    this.video = params.video;
    this.presentation = params.presentation;
  }
}

/** Contains info about a group call, and partial info about its participants. */
export class phone_GroupCall_ extends _phone_GroupCall_ {
  /** Info about the group call */
  call: enums.GroupCall;
  /** A partial list of participants. */
  participants: Array<enums.GroupCallParticipant>;
  /** Next offset to use when fetching the remaining participants using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants) */
  participants_next_offset: string;
  /** Chats mentioned in the participants vector */
  chats: Array<enums.Chat>;
  /** Users mentioned in the participants vector */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x9E727AAD;
  }

  static get [name](): string {
    return "phone.groupCall"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["call", _GroupCall_, "GroupCall"],
      ["participants", [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
      ["participants_next_offset", "string", "string"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.call, _GroupCall_, "GroupCall"],
      [this.participants, [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
      [this.participants_next_offset, "string", "string"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { call: enums.GroupCall; participants: Array<enums.GroupCallParticipant>; participants_next_offset: string; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.call = params.call;
    this.participants = params.participants;
    this.participants_next_offset = params.participants_next_offset;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Info about the participants of a group call or livestream */
export class phone_GroupParticipants_ extends _phone_GroupParticipants_ {
  /** Number of participants */
  count: number;
  /** List of participants */
  participants: Array<enums.GroupCallParticipant>;
  /** If not empty, the specified list of participants is partial, and more participants can be fetched specifying this parameter as `offset` in [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). */
  next_offset: string;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;
  /** Version info */
  version: number;

  protected get [id](): number {
    return 0xF47751B6;
  }

  static get [name](): string {
    return "phone.groupParticipants"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["participants", [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
      ["next_offset", "string", "string"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["version", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.participants, [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
      [this.next_offset, "string", "string"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.version, "number", "int"],
    ];
  }

  constructor(params: { count: number; participants: Array<enums.GroupCallParticipant>; next_offset: string; chats: Array<enums.Chat>; users: Array<enums.User>; version: number }) {
    super();
    this.count = params.count;
    this.participants = params.participants;
    this.next_offset = params.next_offset;
    this.chats = params.chats;
    this.users = params.users;
    this.version = params.version;
  }
}

/** Peer type: private chat with the bot itself */
export class InlineQueryPeerTypeSameBotPM_ extends _InlineQueryPeerType_ {
  protected get [id](): number {
    return 0x3081ED9D;
  }

  static get [name](): string {
    return "inlineQueryPeerTypeSameBotPM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Peer type: private chat */
export class InlineQueryPeerTypePM_ extends _InlineQueryPeerType_ {
  protected get [id](): number {
    return 0x833C0FAC;
  }

  static get [name](): string {
    return "inlineQueryPeerTypePM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Peer type: [chat](https://core.telegram.org/api/channel) */
export class InlineQueryPeerTypeChat_ extends _InlineQueryPeerType_ {
  protected get [id](): number {
    return 0xD766C50A;
  }

  static get [name](): string {
    return "inlineQueryPeerTypeChat"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Peer type: [supergroup](https://core.telegram.org/api/channel) */
export class InlineQueryPeerTypeMegagroup_ extends _InlineQueryPeerType_ {
  protected get [id](): number {
    return 0x5EC4BE43;
  }

  static get [name](): string {
    return "inlineQueryPeerTypeMegagroup"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Peer type: [channel](https://core.telegram.org/api/channel) */
export class InlineQueryPeerTypeBroadcast_ extends _InlineQueryPeerType_ {
  protected get [id](): number {
    return 0x6334EE9A;
  }

  static get [name](): string {
    return "inlineQueryPeerTypeBroadcast"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Peer type: private chat with a bot. */
export class InlineQueryPeerTypeBotPM_ extends _InlineQueryPeerType_ {
  protected get [id](): number {
    return 0x0E3B2D0C;
  }

  static get [name](): string {
    return "inlineQueryPeerTypeBotPM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** ID of a specific [chat import session, click here for more info »](https://core.telegram.org/api/import). */
export class messages_HistoryImport_ extends _messages_HistoryImport_ {
  /** [History import ID](https://core.telegram.org/api/import) */
  id: bigint;

  protected get [id](): number {
    return 0x1662AF0B;
  }

  static get [name](): string {
    return "messages.historyImport"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** Contains information about a chat export file [generated by a foreign chat app, click here for more info](https://core.telegram.org/api/import).  
If neither the `pm` or `group` flags are set, the specified chat export was generated from a chat of unknown type. */
export class messages_HistoryImportParsed_ extends _messages_HistoryImportParsed_ {
  /** The chat export file was generated from a private chat. */
  pm?: true;
  /** The chat export file was generated from a group chat. */
  group?: true;
  /** Title of the chat. */
  title?: string;

  protected get [id](): number {
    return 0x5E0FB7B9;
  }

  static get [name](): string {
    return "messages.historyImportParsed"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pm", "true", "flags.0?true"],
      ["group", "true", "flags.1?true"],
      ["title", "string", "flags.2?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pm ?? null, "true", "flags.0?true"],
      [this.group ?? null, "true", "flags.1?true"],
      [this.title ?? null, "string", "flags.2?string"],
    ];
  }

  constructor(params?: { pm?: true; group?: true; title?: string }) {
    super();
    this.pm = params?.pm;
    this.group = params?.group;
    this.title = params?.title;
  }
}

/** Messages found and affected by changes */
export class messages_AffectedFoundMessages_ extends _messages_AffectedFoundMessages_ {
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;
  /** [Number of events that were generated](https://core.telegram.org/api/updates) */
  pts_count: number;
  /** If bigger than zero, the request must be repeated to remove more messages */
  offset: number;
  /** Affected message IDs */
  messages: Array<number>;

  protected get [id](): number {
    return 0xEF8D3E6C;
  }

  static get [name](): string {
    return "messages.affectedFoundMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["pts", "number", "int"],
      ["pts_count", "number", "int"],
      ["offset", "number", "int"],
      ["messages", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.pts, "number", "int"],
      [this.pts_count, "number", "int"],
      [this.offset, "number", "int"],
      [this.messages, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { pts: number; pts_count: number; offset: number; messages: Array<number> }) {
    super();
    this.pts = params.pts;
    this.pts_count = params.pts_count;
    this.offset = params.offset;
    this.messages = params.messages;
  }
}

/** When and which user joined the chat using a chat invite */
export class ChatInviteImporter_ extends _ChatInviteImporter_ {
  /** Whether this user currently has a pending [join request »](https://core.telegram.org/api/invites#join-requests) */
  requested?: true;
  /** The participant joined by importing a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
  via_chatlist?: true;
  /** The user */
  user_id: bigint;
  /** When did the user join */
  date: number;
  /** For users with pending requests, contains bio of the user that requested to join */
  about?: string;
  /** The administrator that approved the [join request »](https://core.telegram.org/api/invites#join-requests) of the user */
  approved_by?: bigint;

  protected get [id](): number {
    return 0x8C5ADFD9;
  }

  static get [name](): string {
    return "chatInviteImporter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["requested", "true", "flags.0?true"],
      ["via_chatlist", "true", "flags.3?true"],
      ["user_id", "bigint", "long"],
      ["date", "number", "int"],
      ["about", "string", "flags.2?string"],
      ["approved_by", "bigint", "flags.1?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.requested ?? null, "true", "flags.0?true"],
      [this.via_chatlist ?? null, "true", "flags.3?true"],
      [this.user_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.about ?? null, "string", "flags.2?string"],
      [this.approved_by ?? null, "bigint", "flags.1?long"],
    ];
  }

  constructor(params: { requested?: true; via_chatlist?: true; user_id: bigint; date: number; about?: string; approved_by?: bigint }) {
    super();
    this.requested = params.requested;
    this.via_chatlist = params.via_chatlist;
    this.user_id = params.user_id;
    this.date = params.date;
    this.about = params.about;
    this.approved_by = params.approved_by;
  }
}

/** Info about chat invites exported by a certain admin. */
export class messages_ExportedChatInvites_ extends _messages_ExportedChatInvites_ {
  /** Number of invites exported by the admin */
  count: number;
  /** Exported invites */
  invites: Array<enums.ExportedChatInvite>;
  /** Info about the admin */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xBDC62DCC;
  }

  static get [name](): string {
    return "messages.exportedChatInvites"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["invites", [_ExportedChatInvite_], "Vector<ExportedChatInvite>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.invites, [_ExportedChatInvite_], "Vector<ExportedChatInvite>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; invites: Array<enums.ExportedChatInvite>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.invites = params.invites;
    this.users = params.users;
  }
}

/** Info about a chat invite */
export class messages_ExportedChatInvite_ extends _messages_ExportedChatInvite_ {
  /** Info about the chat invite */
  invite: enums.ExportedChatInvite;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x1871BE50;
  }

  static get [name](): string {
    return "messages.exportedChatInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { invite: enums.ExportedChatInvite; users: Array<enums.User> }) {
    super();
    this.invite = params.invite;
    this.users = params.users;
  }
}

/** The specified chat invite was replaced with another one */
export class messages_ExportedChatInviteReplaced_ extends _messages_ExportedChatInvite_ {
  /** The replaced chat invite */
  invite: enums.ExportedChatInvite;
  /** The invite that replaces the previous invite */
  new_invite: enums.ExportedChatInvite;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x222600EF;
  }

  static get [name](): string {
    return "messages.exportedChatInviteReplaced"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
      ["new_invite", _ExportedChatInvite_, "ExportedChatInvite"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
      [this.new_invite, _ExportedChatInvite_, "ExportedChatInvite"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { invite: enums.ExportedChatInvite; new_invite: enums.ExportedChatInvite; users: Array<enums.User> }) {
    super();
    this.invite = params.invite;
    this.new_invite = params.new_invite;
    this.users = params.users;
  }
}

/** Info about the users that joined the chat using a specific chat invite */
export class messages_ChatInviteImporters_ extends _messages_ChatInviteImporters_ {
  /** Number of users that joined */
  count: number;
  /** The users that joined */
  importers: Array<enums.ChatInviteImporter>;
  /** The users that joined */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x81B6B00A;
  }

  static get [name](): string {
    return "messages.chatInviteImporters"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["importers", [_ChatInviteImporter_], "Vector<ChatInviteImporter>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.importers, [_ChatInviteImporter_], "Vector<ChatInviteImporter>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; importers: Array<enums.ChatInviteImporter>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.importers = params.importers;
    this.users = params.users;
  }
}

/** Info about chat invites generated by admins. */
export class ChatAdminWithInvites_ extends _ChatAdminWithInvites_ {
  /** The admin */
  admin_id: bigint;
  /** Number of invites generated by the admin */
  invites_count: number;
  /** Number of revoked invites */
  revoked_invites_count: number;

  protected get [id](): number {
    return 0xF2ECEF23;
  }

  static get [name](): string {
    return "chatAdminWithInvites"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["admin_id", "bigint", "long"],
      ["invites_count", "number", "int"],
      ["revoked_invites_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.admin_id, "bigint", "long"],
      [this.invites_count, "number", "int"],
      [this.revoked_invites_count, "number", "int"],
    ];
  }

  constructor(params: { admin_id: bigint; invites_count: number; revoked_invites_count: number }) {
    super();
    this.admin_id = params.admin_id;
    this.invites_count = params.invites_count;
    this.revoked_invites_count = params.revoked_invites_count;
  }
}

/** Info about chat invites generated by admins. */
export class messages_ChatAdminsWithInvites_ extends _messages_ChatAdminsWithInvites_ {
  /** Info about chat invites generated by admins. */
  admins: Array<enums.ChatAdminWithInvites>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xB69B72D7;
  }

  static get [name](): string {
    return "messages.chatAdminsWithInvites"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["admins", [_ChatAdminWithInvites_], "Vector<ChatAdminWithInvites>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.admins, [_ChatAdminWithInvites_], "Vector<ChatAdminWithInvites>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { admins: Array<enums.ChatAdminWithInvites>; users: Array<enums.User> }) {
    super();
    this.admins = params.admins;
    this.users = params.users;
  }
}

/** Contains a confirmation text to be shown to the user, upon [importing chat history, click here for more info »](https://core.telegram.org/api/import). */
export class messages_CheckedHistoryImportPeer_ extends _messages_CheckedHistoryImportPeer_ {
  /** A confirmation text to be shown to the user, upon [importing chat history »](https://core.telegram.org/api/import). */
  confirm_text: string;

  protected get [id](): number {
    return 0xA24DE717;
  }

  static get [name](): string {
    return "messages.checkedHistoryImportPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["confirm_text", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.confirm_text, "string", "string"],
    ];
  }

  constructor(params: { confirm_text: string }) {
    super();
    this.confirm_text = params.confirm_text;
  }
}

/** A list of peers that can be used to join a group call, presenting yourself as a specific user/channel. */
export class phone_JoinAsPeers_ extends _phone_JoinAsPeers_ {
  /** Peers */
  peers: Array<enums.Peer>;
  /** Chats mentioned in the peers vector */
  chats: Array<enums.Chat>;
  /** Users mentioned in the peers vector */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xAFE5623F;
  }

  static get [name](): string {
    return "phone.joinAsPeers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peers", [_Peer_], "Vector<Peer>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peers, [_Peer_], "Vector<Peer>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { peers: Array<enums.Peer>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.peers = params.peers;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** An invite to a group call or livestream */
export class phone_ExportedGroupCallInvite_ extends _phone_ExportedGroupCallInvite_ {
  /** Invite link */
  link: string;

  protected get [id](): number {
    return 0x204BD158;
  }

  static get [name](): string {
    return "phone.exportedGroupCallInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["link", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.link, "string", "string"],
    ];
  }

  constructor(params: { link: string }) {
    super();
    this.link = params.link;
  }
}

/** Describes a group of video synchronization source identifiers */
export class GroupCallParticipantVideoSourceGroup_ extends _GroupCallParticipantVideoSourceGroup_ {
  /** SDP semantics */
  semantics: string;
  /** Source IDs */
  sources: Array<number>;

  protected get [id](): number {
    return 0xDCB118B7;
  }

  static get [name](): string {
    return "groupCallParticipantVideoSourceGroup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["semantics", "string", "string"],
      ["sources", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.semantics, "string", "string"],
      [this.sources, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { semantics: string; sources: Array<number> }) {
    super();
    this.semantics = params.semantics;
    this.sources = params.sources;
  }
}

/** Info about a video stream */
export class GroupCallParticipantVideo_ extends _GroupCallParticipantVideo_ {
  /** Whether the stream is currently paused */
  paused?: true;
  /** Endpoint */
  endpoint: string;
  /** Source groups */
  source_groups: Array<enums.GroupCallParticipantVideoSourceGroup>;
  /** Audio source ID */
  audio_source?: number;

  protected get [id](): number {
    return 0x67753AC8;
  }

  static get [name](): string {
    return "groupCallParticipantVideo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["paused", "true", "flags.0?true"],
      ["endpoint", "string", "string"],
      ["source_groups", [_GroupCallParticipantVideoSourceGroup_], "Vector<GroupCallParticipantVideoSourceGroup>"],
      ["audio_source", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.paused ?? null, "true", "flags.0?true"],
      [this.endpoint, "string", "string"],
      [this.source_groups, [_GroupCallParticipantVideoSourceGroup_], "Vector<GroupCallParticipantVideoSourceGroup>"],
      [this.audio_source ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { paused?: true; endpoint: string; source_groups: Array<enums.GroupCallParticipantVideoSourceGroup>; audio_source?: number }) {
    super();
    this.paused = params.paused;
    this.endpoint = params.endpoint;
    this.source_groups = params.source_groups;
    this.audio_source = params.audio_source;
  }
}

/** A suggested short name for a stickerpack */
export class stickers_SuggestedShortName_ extends _stickers_SuggestedShortName_ {
  /** Suggested short name */
  short_name: string;

  protected get [id](): number {
    return 0x85FEA03F;
  }

  static get [name](): string {
    return "stickers.suggestedShortName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["short_name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.short_name, "string", "string"],
    ];
  }

  constructor(params: { short_name: string }) {
    super();
    this.short_name = params.short_name;
  }
}

/** The commands will be valid in all dialogs */
export class BotCommandScopeDefault_ extends _BotCommandScope_ {
  protected get [id](): number {
    return 0x2F6CB2AB;
  }

  static get [name](): string {
    return "botCommandScopeDefault"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The specified bot commands will only be valid in all private chats with users. */
export class BotCommandScopeUsers_ extends _BotCommandScope_ {
  protected get [id](): number {
    return 0x3C4F04D8;
  }

  static get [name](): string {
    return "botCommandScopeUsers"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The specified bot commands will be valid in all [groups and supergroups](https://core.telegram.org/api/channel). */
export class BotCommandScopeChats_ extends _BotCommandScope_ {
  protected get [id](): number {
    return 0x6FE1A881;
  }

  static get [name](): string {
    return "botCommandScopeChats"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The specified bot commands will be valid only for chat administrators, in all [groups and supergroups](https://core.telegram.org/api/channel). */
export class BotCommandScopeChatAdmins_ extends _BotCommandScope_ {
  protected get [id](): number {
    return 0xB9AA606A;
  }

  static get [name](): string {
    return "botCommandScopeChatAdmins"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The specified bot commands will be valid only in a specific dialog. */
export class BotCommandScopePeer_ extends _BotCommandScope_ {
  /** The dialog */
  peer: enums.InputPeer;

  protected get [id](): number {
    return 0xDB9D897D;
  }

  static get [name](): string {
    return "botCommandScopePeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
    ];
  }

  constructor(params: { peer: enums.InputPeer }) {
    super();
    this.peer = params.peer;
  }
}

/** The specified bot commands will be valid for all admins of the specified [group or supergroup](https://core.telegram.org/api/channel). */
export class BotCommandScopePeerAdmins_ extends _BotCommandScope_ {
  /** The chat */
  peer: enums.InputPeer;

  protected get [id](): number {
    return 0x3FD863D1;
  }

  static get [name](): string {
    return "botCommandScopePeerAdmins"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
    ];
  }

  constructor(params: { peer: enums.InputPeer }) {
    super();
    this.peer = params.peer;
  }
}

/** The specified bot commands will be valid only for a specific user in the specified [group or supergroup](https://core.telegram.org/api/channel). */
export class BotCommandScopePeerUser_ extends _BotCommandScope_ {
  /** The chat */
  peer: enums.InputPeer;
  /** The user */
  user_id: enums.InputUser;

  protected get [id](): number {
    return 0x0A1321F3;
  }

  static get [name](): string {
    return "botCommandScopePeerUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["user_id", _InputUser_, "InputUser"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.user_id, _InputUser_, "InputUser"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; user_id: enums.InputUser }) {
    super();
    this.peer = params.peer;
    this.user_id = params.user_id;
  }
}

/** You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset. */
export class account_ResetPasswordFailedWait_ extends _account_ResetPasswordResult_ {
  /** Wait until this date before requesting another reset. */
  retry_date: number;

  protected get [id](): number {
    return 0xE3779861;
  }

  static get [name](): string {
    return "account.resetPasswordFailedWait"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["retry_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.retry_date, "number", "int"],
    ];
  }

  constructor(params: { retry_date: number }) {
    super();
    this.retry_date = params.retry_date;
  }
}

/** You successfully requested a password reset, please wait until the specified date before finalizing the reset. */
export class account_ResetPasswordRequestedWait_ extends _account_ResetPasswordResult_ {
  /** Wait until this date before finalizing the reset. */
  until_date: number;

  protected get [id](): number {
    return 0xE9EFFC7D;
  }

  static get [name](): string {
    return "account.resetPasswordRequestedWait"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["until_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.until_date, "number", "int"],
    ];
  }

  constructor(params: { until_date: number }) {
    super();
    this.until_date = params.until_date;
  }
}

/** The 2FA password was reset successfully. */
export class account_ResetPasswordOk_ extends _account_ResetPasswordResult_ {
  protected get [id](): number {
    return 0xE926D63E;
  }

  static get [name](): string {
    return "account.resetPasswordOk"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A [sponsored message](https://core.telegram.org/api/sponsored-messages). */
export class SponsoredMessage_ extends _SponsoredMessage_ {
  /** Whether the message needs to be labeled as "recommended" instead of "sponsored" */
  recommended?: true;
  /** Whether a profile photo bubble should be displayed for this message, like for messages sent in groups. The photo shown in the bubble is obtained either from the peer contained in `from_id`, or from `chat_invite`. */
  show_peer_photo?: true;
  /** Message ID */
  random_id: Uint8Array;
  /** ID of the sender of the message */
  from_id?: enums.Peer;
  /** Information about the chat invite hash specified in `chat_invite_hash` */
  chat_invite?: enums.ChatInvite;
  /** Chat invite */
  chat_invite_hash?: string;
  /** Optional link to a channel post if `from_id` points to a channel */
  channel_post?: number;
  /** Parameter for the bot start message if the sponsored chat is a chat with a bot. */
  start_param?: string;
  /** Sponsored website */
  webpage?: enums.SponsoredWebPage;
  /** [Mini App »](https://core.telegram.org/api/bots/webapps) to open when the sponsored message is clicked. */
  app?: enums.BotApp;
  /** Sponsored message */
  message: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** Text of the sponsored message button. */
  button_text?: string;
  /** If set, contains additional information about the sponsor to be shown along with the message. */
  sponsor_info?: string;
  /** If set, contains additional information about the sponsored message to be shown along with the message. */
  additional_info?: string;

  protected get [id](): number {
    return 0xED5383F7;
  }

  static get [name](): string {
    return "sponsoredMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["recommended", "true", "flags.5?true"],
      ["show_peer_photo", "true", "flags.6?true"],
      ["random_id", Uint8Array, "bytes"],
      ["from_id", _Peer_, "flags.3?Peer"],
      ["chat_invite", _ChatInvite_, "flags.4?ChatInvite"],
      ["chat_invite_hash", "string", "flags.4?string"],
      ["channel_post", "number", "flags.2?int"],
      ["start_param", "string", "flags.0?string"],
      ["webpage", _SponsoredWebPage_, "flags.9?SponsoredWebPage"],
      ["app", _BotApp_, "flags.10?BotApp"],
      ["message", "string", "string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["button_text", "string", "flags.11?string"],
      ["sponsor_info", "string", "flags.7?string"],
      ["additional_info", "string", "flags.8?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.recommended ?? null, "true", "flags.5?true"],
      [this.show_peer_photo ?? null, "true", "flags.6?true"],
      [this.random_id, Uint8Array, "bytes"],
      [this.from_id ?? null, _Peer_, "flags.3?Peer"],
      [this.chat_invite ?? null, _ChatInvite_, "flags.4?ChatInvite"],
      [this.chat_invite_hash ?? null, "string", "flags.4?string"],
      [this.channel_post ?? null, "number", "flags.2?int"],
      [this.start_param ?? null, "string", "flags.0?string"],
      [this.webpage ?? null, _SponsoredWebPage_, "flags.9?SponsoredWebPage"],
      [this.app ?? null, _BotApp_, "flags.10?BotApp"],
      [this.message, "string", "string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.button_text ?? null, "string", "flags.11?string"],
      [this.sponsor_info ?? null, "string", "flags.7?string"],
      [this.additional_info ?? null, "string", "flags.8?string"],
    ];
  }

  constructor(params: { recommended?: true; show_peer_photo?: true; random_id: Uint8Array; from_id?: enums.Peer; chat_invite?: enums.ChatInvite; chat_invite_hash?: string; channel_post?: number; start_param?: string; webpage?: enums.SponsoredWebPage; app?: enums.BotApp; message: string; entities?: Array<enums.MessageEntity>; button_text?: string; sponsor_info?: string; additional_info?: string }) {
    super();
    this.recommended = params.recommended;
    this.show_peer_photo = params.show_peer_photo;
    this.random_id = params.random_id;
    this.from_id = params.from_id;
    this.chat_invite = params.chat_invite;
    this.chat_invite_hash = params.chat_invite_hash;
    this.channel_post = params.channel_post;
    this.start_param = params.start_param;
    this.webpage = params.webpage;
    this.app = params.app;
    this.message = params.message;
    this.entities = params.entities;
    this.button_text = params.button_text;
    this.sponsor_info = params.sponsor_info;
    this.additional_info = params.additional_info;
  }
}

/** A set of sponsored messages associated to a channel */
export class messages_SponsoredMessages_ extends _messages_SponsoredMessages_ {
  /** If set, specifies the minimum number of messages between shown sponsored messages; otherwise, only one sponsored message must be shown after all ordinary messages. */
  posts_between?: number;
  /** Sponsored messages */
  messages: Array<enums.SponsoredMessage>;
  /** Chats mentioned in the sponsored messages */
  chats: Array<enums.Chat>;
  /** Users mentioned in the sponsored messages */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xC9EE1D87;
  }

  static get [name](): string {
    return "messages.sponsoredMessages"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["posts_between", "number", "flags.0?int"],
      ["messages", [_SponsoredMessage_], "Vector<SponsoredMessage>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.posts_between ?? null, "number", "flags.0?int"],
      [this.messages, [_SponsoredMessage_], "Vector<SponsoredMessage>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { posts_between?: number; messages: Array<enums.SponsoredMessage>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.posts_between = params.posts_between;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** No sponsored messages are available. */
export class messages_SponsoredMessagesEmpty_ extends _messages_SponsoredMessages_ {
  protected get [id](): number {
    return 0x1839490F;
  }

  static get [name](): string {
    return "messages.sponsoredMessagesEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Information about found messages sent on a specific day, used to split the `messages` in [messages.searchResultsCalendar](https://core.telegram.org/constructor/messages.searchResultsCalendar) constructors by days. */
export class SearchResultsCalendarPeriod_ extends _SearchResultsCalendarPeriod_ {
  /** The day this object is referring to. */
  date: number;
  /** First message ID that was sent on this day. */
  min_msg_id: number;
  /** Last message ID that was sent on this day. */
  max_msg_id: number;
  /** All messages that were sent on this day. */
  count: number;

  protected get [id](): number {
    return 0xC9B0539F;
  }

  static get [name](): string {
    return "searchResultsCalendarPeriod"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["date", "number", "int"],
      ["min_msg_id", "number", "int"],
      ["max_msg_id", "number", "int"],
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.date, "number", "int"],
      [this.min_msg_id, "number", "int"],
      [this.max_msg_id, "number", "int"],
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { date: number; min_msg_id: number; max_msg_id: number; count: number }) {
    super();
    this.date = params.date;
    this.min_msg_id = params.min_msg_id;
    this.max_msg_id = params.max_msg_id;
    this.count = params.count;
  }
}

/** Information about found messages sent on a specific day */
export class messages_SearchResultsCalendar_ extends _messages_SearchResultsCalendar_ {
  /** If set, indicates that the results may be inexact */
  inexact?: true;
  /** Total number of results matching query */
  count: number;
  /** Starting timestamp of attached messages */
  min_date: number;
  /** Ending timestamp of attached messages */
  min_msg_id: number;
  /** Indicates the absolute position of `messages[0]` within the total result set with count `count`.  
  This is useful, for example, if we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`. */
  offset_id_offset?: number;
  /** Used to split the `messages` by days: multiple [SearchResultsCalendarPeriod](https://core.telegram.org/type/SearchResultsCalendarPeriod) constructors are returned, each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.  
  This information can be easily used to split the returned `messages` by day. */
  periods: Array<enums.SearchResultsCalendarPeriod>;
  /** Messages */
  messages: Array<enums.Message>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x147EE23C;
  }

  static get [name](): string {
    return "messages.searchResultsCalendar"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inexact", "true", "flags.0?true"],
      ["count", "number", "int"],
      ["min_date", "number", "int"],
      ["min_msg_id", "number", "int"],
      ["offset_id_offset", "number", "flags.1?int"],
      ["periods", [_SearchResultsCalendarPeriod_], "Vector<SearchResultsCalendarPeriod>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inexact ?? null, "true", "flags.0?true"],
      [this.count, "number", "int"],
      [this.min_date, "number", "int"],
      [this.min_msg_id, "number", "int"],
      [this.offset_id_offset ?? null, "number", "flags.1?int"],
      [this.periods, [_SearchResultsCalendarPeriod_], "Vector<SearchResultsCalendarPeriod>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { inexact?: true; count: number; min_date: number; min_msg_id: number; offset_id_offset?: number; periods: Array<enums.SearchResultsCalendarPeriod>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.inexact = params.inexact;
    this.count = params.count;
    this.min_date = params.min_date;
    this.min_msg_id = params.min_msg_id;
    this.offset_id_offset = params.offset_id_offset;
    this.periods = params.periods;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Information about a message in a specific position */
export class SearchResultPosition_ extends _SearchResultsPosition_ {
  /** Message ID */
  msg_id: number;
  /** When was the message sent */
  date: number;
  /** 0-based message position in the full list of suitable messages */
  offset: number;

  protected get [id](): number {
    return 0x7F648B67;
  }

  static get [name](): string {
    return "searchResultPosition"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_id", "number", "int"],
      ["date", "number", "int"],
      ["offset", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_id, "number", "int"],
      [this.date, "number", "int"],
      [this.offset, "number", "int"],
    ];
  }

  constructor(params: { msg_id: number; date: number; offset: number }) {
    super();
    this.msg_id = params.msg_id;
    this.date = params.date;
    this.offset = params.offset;
  }
}

/** Information about sparse positions of messages */
export class messages_SearchResultsPositions_ extends _messages_SearchResultsPositions_ {
  /** Total number of found messages */
  count: number;
  /** List of message positions */
  positions: Array<enums.SearchResultsPosition>;

  protected get [id](): number {
    return 0x53B22BAF;
  }

  static get [name](): string {
    return "messages.searchResultsPositions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["positions", [_SearchResultsPosition_], "Vector<SearchResultsPosition>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.positions, [_SearchResultsPosition_], "Vector<SearchResultsPosition>"],
    ];
  }

  constructor(params: { count: number; positions: Array<enums.SearchResultsPosition> }) {
    super();
    this.count = params.count;
    this.positions = params.positions;
  }
}

/** A list of peers that can be used to send messages in a specific group */
export class channels_SendAsPeers_ extends _channels_SendAsPeers_ {
  /** Peers that can be used to send messages to the group */
  peers: Array<enums.SendAsPeer>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xF496B0C6;
  }

  static get [name](): string {
    return "channels.sendAsPeers"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peers", [_SendAsPeer_], "Vector<SendAsPeer>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peers, [_SendAsPeer_], "Vector<SendAsPeer>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { peers: Array<enums.SendAsPeer>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.peers = params.peers;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Full user information */
export class users_UserFull_ extends _users_UserFull_ {
  /** Full user information */
  full_user: enums.UserFull;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x3B6D152E;
  }

  static get [name](): string {
    return "users.userFull"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["full_user", _UserFull_, "UserFull"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.full_user, _UserFull_, "UserFull"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { full_user: enums.UserFull; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.full_user = params.full_user;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Peer settings */
export class messages_PeerSettings_ extends _messages_PeerSettings_ {
  /** Peer settings */
  settings: enums.PeerSettings;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x6880B94D;
  }

  static get [name](): string {
    return "messages.peerSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["settings", _PeerSettings_, "PeerSettings"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.settings, _PeerSettings_, "PeerSettings"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { settings: enums.PeerSettings; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.settings = params.settings;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** [Future auth token »](https://core.telegram.org/api/auth#future-auth-tokens) to be used on subsequent authorizations */
export class auth_LoggedOut_ extends _auth_LoggedOut_ {
  /** [Future auth token »](https://core.telegram.org/api/auth#future-auth-tokens) to be used on subsequent authorizations */
  future_auth_token?: Uint8Array;

  protected get [id](): number {
    return 0xC3A2835F;
  }

  static get [name](): string {
    return "auth.loggedOut"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["future_auth_token", Uint8Array, "flags.0?bytes"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.future_auth_token ?? null, Uint8Array, "flags.0?bytes"],
    ];
  }

  constructor(params?: { future_auth_token?: Uint8Array }) {
    super();
    this.future_auth_token = params?.future_auth_token;
  }
}

/** Reactions */
export class ReactionCount_ extends _ReactionCount_ {
  /** If set, indicates that the current user also sent this reaction.  
  The integer value indicates when was the reaction added: the bigger the value, the newer the reaction. */
  chosen_order?: number;
  /** The reaction. */
  reaction: enums.Reaction;
  /** Number of users that reacted with this emoji. */
  count: number;

  protected get [id](): number {
    return 0xA3D1CB80;
  }

  static get [name](): string {
    return "reactionCount"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["chosen_order", "number", "flags.0?int"],
      ["reaction", _Reaction_, "Reaction"],
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.chosen_order ?? null, "number", "flags.0?int"],
      [this.reaction, _Reaction_, "Reaction"],
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { chosen_order?: number; reaction: enums.Reaction; count: number }) {
    super();
    this.chosen_order = params.chosen_order;
    this.reaction = params.reaction;
    this.count = params.count;
  }
}

/** [Message reactions »](https://core.telegram.org/api/reactions) */
export class MessageReactions_ extends _MessageReactions_ {
  /** Similar to [min](https://core.telegram.org/api/min) objects, used for [message reaction »](https://core.telegram.org/api/reactions) constructors that are the same for all users so they don't have the reactions sent by the current user (you can use [messages.getMessagesReactions](https://core.telegram.org/method/messages.getMessagesReactions) to get the full reaction info). */
  min?: true;
  /** Whether [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList) can be used to see how each specific peer reacted to the message */
  can_see_list?: true;
  reactions_as_tags?: true;
  /** Reactions */
  results: Array<enums.ReactionCount>;
  /** List of recent peers and their reactions */
  recent_reactions?: Array<enums.MessagePeerReaction>;

  protected get [id](): number {
    return 0x4F2B9479;
  }

  static get [name](): string {
    return "messageReactions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["min", "true", "flags.0?true"],
      ["can_see_list", "true", "flags.2?true"],
      ["reactions_as_tags", "true", "flags.3?true"],
      ["results", [_ReactionCount_], "Vector<ReactionCount>"],
      ["recent_reactions", [_MessagePeerReaction_], "flags.1?Vector<MessagePeerReaction>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.min ?? null, "true", "flags.0?true"],
      [this.can_see_list ?? null, "true", "flags.2?true"],
      [this.reactions_as_tags ?? null, "true", "flags.3?true"],
      [this.results, [_ReactionCount_], "Vector<ReactionCount>"],
      [this.recent_reactions ?? null, [_MessagePeerReaction_], "flags.1?Vector<MessagePeerReaction>"],
    ];
  }

  constructor(params: { min?: true; can_see_list?: true; reactions_as_tags?: true; results: Array<enums.ReactionCount>; recent_reactions?: Array<enums.MessagePeerReaction> }) {
    super();
    this.min = params.min;
    this.can_see_list = params.can_see_list;
    this.reactions_as_tags = params.reactions_as_tags;
    this.results = params.results;
    this.recent_reactions = params.recent_reactions;
  }
}

/** List of peers that reacted to a specific message */
export class messages_MessageReactionsList_ extends _messages_MessageReactionsList_ {
  /** Total number of reactions matching query */
  count: number;
  /** List of peers that reacted to a specific message */
  reactions: Array<enums.MessagePeerReaction>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;
  /** If set, indicates the next offset to use to load more results by invoking [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList). */
  next_offset?: string;

  protected get [id](): number {
    return 0x31BD492D;
  }

  static get [name](): string {
    return "messages.messageReactionsList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["count", "number", "int"],
      ["reactions", [_MessagePeerReaction_], "Vector<MessagePeerReaction>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["next_offset", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.count, "number", "int"],
      [this.reactions, [_MessagePeerReaction_], "Vector<MessagePeerReaction>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.next_offset ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { count: number; reactions: Array<enums.MessagePeerReaction>; chats: Array<enums.Chat>; users: Array<enums.User>; next_offset?: string }) {
    super();
    this.count = params.count;
    this.reactions = params.reactions;
    this.chats = params.chats;
    this.users = params.users;
    this.next_offset = params.next_offset;
  }
}

/** Animations associated with a message reaction */
export class AvailableReaction_ extends _AvailableReaction_ {
  /** If not set, the reaction can be added to new messages and enabled in chats. */
  inactive?: true;
  /** Whether this reaction can only be used by Telegram Premium users */
  premium?: true;
  /** Reaction emoji */
  reaction: string;
  /** Reaction description */
  title: string;
  /** Static icon for the reaction */
  static_icon: enums.Document;
  /** The animated sticker to show when the user opens the reaction dropdown */
  appear_animation: enums.Document;
  /** The animated sticker to show when the user hovers over the reaction */
  select_animation: enums.Document;
  /** The animated sticker to show when the reaction is chosen and activated */
  activate_animation: enums.Document;
  /** The background effect (still an animated sticker) to play under the `activate_animation`, when the reaction is chosen and activated */
  effect_animation: enums.Document;
  /** The animation that plays around the button when you press an existing reaction (played together with `center_icon`). */
  around_animation?: enums.Document;
  /** The animation of the emoji inside the button when you press an existing reaction (played together with `around_animation`). */
  center_icon?: enums.Document;

  protected get [id](): number {
    return 0xC077EC01;
  }

  static get [name](): string {
    return "availableReaction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inactive", "true", "flags.0?true"],
      ["premium", "true", "flags.2?true"],
      ["reaction", "string", "string"],
      ["title", "string", "string"],
      ["static_icon", _Document_, "Document"],
      ["appear_animation", _Document_, "Document"],
      ["select_animation", _Document_, "Document"],
      ["activate_animation", _Document_, "Document"],
      ["effect_animation", _Document_, "Document"],
      ["around_animation", _Document_, "flags.1?Document"],
      ["center_icon", _Document_, "flags.1?Document"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inactive ?? null, "true", "flags.0?true"],
      [this.premium ?? null, "true", "flags.2?true"],
      [this.reaction, "string", "string"],
      [this.title, "string", "string"],
      [this.static_icon, _Document_, "Document"],
      [this.appear_animation, _Document_, "Document"],
      [this.select_animation, _Document_, "Document"],
      [this.activate_animation, _Document_, "Document"],
      [this.effect_animation, _Document_, "Document"],
      [this.around_animation ?? null, _Document_, "flags.1?Document"],
      [this.center_icon ?? null, _Document_, "flags.1?Document"],
    ];
  }

  constructor(params: { inactive?: true; premium?: true; reaction: string; title: string; static_icon: enums.Document; appear_animation: enums.Document; select_animation: enums.Document; activate_animation: enums.Document; effect_animation: enums.Document; around_animation?: enums.Document; center_icon?: enums.Document }) {
    super();
    this.inactive = params.inactive;
    this.premium = params.premium;
    this.reaction = params.reaction;
    this.title = params.title;
    this.static_icon = params.static_icon;
    this.appear_animation = params.appear_animation;
    this.select_animation = params.select_animation;
    this.activate_animation = params.activate_animation;
    this.effect_animation = params.effect_animation;
    this.around_animation = params.around_animation;
    this.center_icon = params.center_icon;
  }
}

/** No new reactions are available */
export class messages_AvailableReactionsNotModified_ extends _messages_AvailableReactions_ {
  protected get [id](): number {
    return 0x9F071957;
  }

  static get [name](): string {
    return "messages.availableReactionsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Animations and metadata associated with [message reactions »](https://core.telegram.org/api/reactions) */
export class messages_AvailableReactions_ extends _messages_AvailableReactions_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;
  /** Animations and metadata associated with [message reactions »](https://core.telegram.org/api/reactions) */
  reactions: Array<enums.AvailableReaction>;

  protected get [id](): number {
    return 0x768E3AAD;
  }

  static get [name](): string {
    return "messages.availableReactions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "number", "int"],
      ["reactions", [_AvailableReaction_], "Vector<AvailableReaction>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "number", "int"],
      [this.reactions, [_AvailableReaction_], "Vector<AvailableReaction>"],
    ];
  }

  constructor(params: { hash: number; reactions: Array<enums.AvailableReaction> }) {
    super();
    this.hash = params.hash;
    this.reactions = params.reactions;
  }
}

/** How a certain peer reacted to the message */
export class MessagePeerReaction_ extends _MessagePeerReaction_ {
  /** Whether the specified [message reaction »](https://core.telegram.org/api/reactions) should elicit a bigger and longer reaction */
  big?: true;
  /** Whether the reaction wasn't yet marked as read by the current user */
  unread?: true;
  /** Starting from layer 159, [messages.sendReaction](https://core.telegram.org/method/messages.sendReaction) will send reactions from the peer (user or channel) specified using [messages.saveDefaultSendAs](https://core.telegram.org/method/messages.saveDefaultSendAs).  
  If set, this flag indicates that this reaction was sent by us, even if the `peer` doesn't point to the current account. */
  my?: true;
  /** Peer that reacted to the message */
  peer_id: enums.Peer;
  /** When was this reaction added */
  date: number;
  /** Reaction emoji */
  reaction: enums.Reaction;

  protected get [id](): number {
    return 0x8C79B63C;
  }

  static get [name](): string {
    return "messagePeerReaction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["big", "true", "flags.0?true"],
      ["unread", "true", "flags.1?true"],
      ["my", "true", "flags.2?true"],
      ["peer_id", _Peer_, "Peer"],
      ["date", "number", "int"],
      ["reaction", _Reaction_, "Reaction"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.big ?? null, "true", "flags.0?true"],
      [this.unread ?? null, "true", "flags.1?true"],
      [this.my ?? null, "true", "flags.2?true"],
      [this.peer_id, _Peer_, "Peer"],
      [this.date, "number", "int"],
      [this.reaction, _Reaction_, "Reaction"],
    ];
  }

  constructor(params: { big?: true; unread?: true; my?: true; peer_id: enums.Peer; date: number; reaction: enums.Reaction }) {
    super();
    this.big = params.big;
    this.unread = params.unread;
    this.my = params.my;
    this.peer_id = params.peer_id;
    this.date = params.date;
    this.reaction = params.reaction;
  }
}

/** Info about an RTMP stream in a group call or livestream */
export class GroupCallStreamChannel_ extends _GroupCallStreamChannel_ {
  /** Channel ID */
  channel: number;
  /** Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`. */
  scale: number;
  /** Last seen timestamp to easily start fetching livestream chunks using [inputGroupCallStream](https://core.telegram.org/constructor/inputGroupCallStream) */
  last_timestamp_ms: bigint;

  protected get [id](): number {
    return 0x80EB48AF;
  }

  static get [name](): string {
    return "groupCallStreamChannel"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channel", "number", "int"],
      ["scale", "number", "int"],
      ["last_timestamp_ms", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channel, "number", "int"],
      [this.scale, "number", "int"],
      [this.last_timestamp_ms, "bigint", "long"],
    ];
  }

  constructor(params: { channel: number; scale: number; last_timestamp_ms: bigint }) {
    super();
    this.channel = params.channel;
    this.scale = params.scale;
    this.last_timestamp_ms = params.last_timestamp_ms;
  }
}

/** Info about RTMP streams in a group call or livestream */
export class phone_GroupCallStreamChannels_ extends _phone_GroupCallStreamChannels_ {
  /** RTMP streams */
  channels: Array<enums.GroupCallStreamChannel>;

  protected get [id](): number {
    return 0xD0E482B2;
  }

  static get [name](): string {
    return "phone.groupCallStreamChannels"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["channels", [_GroupCallStreamChannel_], "Vector<GroupCallStreamChannel>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.channels, [_GroupCallStreamChannel_], "Vector<GroupCallStreamChannel>"],
    ];
  }

  constructor(params: { channels: Array<enums.GroupCallStreamChannel> }) {
    super();
    this.channels = params.channels;
  }
}

/** RTMP URL and stream key to be used in streaming software */
export class phone_GroupCallStreamRtmpUrl_ extends _phone_GroupCallStreamRtmpUrl_ {
  /** RTMP URL */
  url: string;
  /** Stream key */
  key: string;

  protected get [id](): number {
    return 0x2DBF3432;
  }

  static get [name](): string {
    return "phone.groupCallStreamRtmpUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["key", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.key, "string", "string"],
    ];
  }

  constructor(params: { url: string; key: string }) {
    super();
    this.url = params.url;
    this.key = params.key;
  }
}

/** Represents an attachment menu icon color for [bot mini apps »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBotIconColor_ extends _AttachMenuBotIconColor_ {
  /** One of the following values:  
  `light_icon` - Color of the attachment menu icon (light mode)  
  `light_text` - Color of the attachment menu label, once selected (light mode)  
  `dark_icon` - Color of the attachment menu icon (dark mode)  
  `dark_text` - Color of the attachment menu label, once selected (dark mode) */
  name: string;
  /** Color in RGB24 format */
  color: number;

  protected get [id](): number {
    return 0x4576F3F0;
  }

  static get [name](): string {
    return "attachMenuBotIconColor"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["name", "string", "string"],
      ["color", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.name, "string", "string"],
      [this.color, "number", "int"],
    ];
  }

  constructor(params: { name: string; color: number }) {
    super();
    this.name = params.name;
    this.color = params.color;
  }
}

/** Represents an attachment menu icon for [bot mini apps »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBotIcon_ extends _AttachMenuBotIcon_ {
  /** One of the following values: note that animated icons must be played when the user clicks on the button, activating the bot mini app.  
    
  `default_static` - Default attachment menu icon in SVG format  
  `placeholder_static` - Default placeholder for opened Web Apps in SVG format  
  `ios_static` - Attachment menu icon in SVG format for the official iOS app  
  `ios_animated` - Animated attachment menu icon in TGS format for the official iOS app  
  `android_animated` - Animated attachment menu icon in TGS format for the official Android app  
  `macos_animated` - Animated attachment menu icon in TGS format for the official native Mac OS app  
  `ios_side_menu_static` - Side menu icon in PNG format for the official iOS app  
  `android_side_menu_static` - Side menu icon in SVG format for the official android app  
  `macos_side_menu_static` - Side menu icon in PNG format for the official native Mac OS app */
  name: string;
  /** The actual icon file. */
  icon: enums.Document;
  /** Attachment menu icon colors. */
  colors?: Array<enums.AttachMenuBotIconColor>;

  protected get [id](): number {
    return 0xB2A7386B;
  }

  static get [name](): string {
    return "attachMenuBotIcon"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["name", "string", "string"],
      ["icon", _Document_, "Document"],
      ["colors", [_AttachMenuBotIconColor_], "flags.0?Vector<AttachMenuBotIconColor>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.name, "string", "string"],
      [this.icon, _Document_, "Document"],
      [this.colors ?? null, [_AttachMenuBotIconColor_], "flags.0?Vector<AttachMenuBotIconColor>"],
    ];
  }

  constructor(params: { name: string; icon: enums.Document; colors?: Array<enums.AttachMenuBotIconColor> }) {
    super();
    this.name = params.name;
    this.icon = params.icon;
    this.colors = params.colors;
  }
}

/** Represents a [bot mini app that can be launched from the attachment/side menu »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBot_ extends _AttachMenuBot_ {
  /** If set, before launching the mini app the client should ask the user to add the mini app to the attachment/side menu, and only if the user accepts, after invoking [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) the app should be opened. */
  inactive?: true;
  /** Deprecated flag, can be ignored. */
  has_settings?: true;
  /** Whether the bot would like to send messages to the user. */
  request_write_access?: true;
  /** Whether, when installed, an attachment menu entry should be shown for the Mini App. */
  show_in_attach_menu?: true;
  /** Whether, when installed, an entry in the main view side menu should be shown for the Mini App. */
  show_in_side_menu?: true;
  /** If `inactive` if set and the user hasn't previously accepted the third-party mini apps [Terms of Service](https://telegram.org/tos/mini-apps) for this bot, when showing the mini app installation prompt, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown. */
  side_menu_disclaimer_needed?: true;
  /** Bot ID */
  bot_id: bigint;
  /** Attachment menu item name */
  short_name: string;
  /** List of dialog types where this attachment menu entry should be shown */
  peer_types?: Array<enums.AttachMenuPeerType>;
  /** List of platform-specific static icons and animations to use for the attachment menu button */
  icons: Array<enums.AttachMenuBotIcon>;

  protected get [id](): number {
    return 0xD90D8DFE;
  }

  static get [name](): string {
    return "attachMenuBot"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inactive", "true", "flags.0?true"],
      ["has_settings", "true", "flags.1?true"],
      ["request_write_access", "true", "flags.2?true"],
      ["show_in_attach_menu", "true", "flags.3?true"],
      ["show_in_side_menu", "true", "flags.4?true"],
      ["side_menu_disclaimer_needed", "true", "flags.5?true"],
      ["bot_id", "bigint", "long"],
      ["short_name", "string", "string"],
      ["peer_types", [_AttachMenuPeerType_], "flags.3?Vector<AttachMenuPeerType>"],
      ["icons", [_AttachMenuBotIcon_], "Vector<AttachMenuBotIcon>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inactive ?? null, "true", "flags.0?true"],
      [this.has_settings ?? null, "true", "flags.1?true"],
      [this.request_write_access ?? null, "true", "flags.2?true"],
      [this.show_in_attach_menu ?? null, "true", "flags.3?true"],
      [this.show_in_side_menu ?? null, "true", "flags.4?true"],
      [this.side_menu_disclaimer_needed ?? null, "true", "flags.5?true"],
      [this.bot_id, "bigint", "long"],
      [this.short_name, "string", "string"],
      [this.peer_types ?? null, [_AttachMenuPeerType_], "flags.3?Vector<AttachMenuPeerType>"],
      [this.icons, [_AttachMenuBotIcon_], "Vector<AttachMenuBotIcon>"],
    ];
  }

  constructor(params: { inactive?: true; has_settings?: true; request_write_access?: true; show_in_attach_menu?: true; show_in_side_menu?: true; side_menu_disclaimer_needed?: true; bot_id: bigint; short_name: string; peer_types?: Array<enums.AttachMenuPeerType>; icons: Array<enums.AttachMenuBotIcon> }) {
    super();
    this.inactive = params.inactive;
    this.has_settings = params.has_settings;
    this.request_write_access = params.request_write_access;
    this.show_in_attach_menu = params.show_in_attach_menu;
    this.show_in_side_menu = params.show_in_side_menu;
    this.side_menu_disclaimer_needed = params.side_menu_disclaimer_needed;
    this.bot_id = params.bot_id;
    this.short_name = params.short_name;
    this.peer_types = params.peer_types;
    this.icons = params.icons;
  }
}

/** The list of bot mini apps hasn't changed */
export class AttachMenuBotsNotModified_ extends _AttachMenuBots_ {
  protected get [id](): number {
    return 0xF1D88A5C;
  }

  static get [name](): string {
    return "attachMenuBotsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a list of [bot mini apps that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBots_ extends _AttachMenuBots_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** List of [bot mini apps that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
  bots: Array<enums.AttachMenuBot>;
  /** Info about related users/bots */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x3C4301C0;
  }

  static get [name](): string {
    return "attachMenuBots"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["bots", [_AttachMenuBot_], "Vector<AttachMenuBot>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.bots, [_AttachMenuBot_], "Vector<AttachMenuBot>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { hash: bigint; bots: Array<enums.AttachMenuBot>; users: Array<enums.User> }) {
    super();
    this.hash = params.hash;
    this.bots = params.bots;
    this.users = params.users;
  }
}

/** Represents a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBotsBot_ extends _AttachMenuBotsBot_ {
  /** Represents a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
  bot: enums.AttachMenuBot;
  /** Info about related users and bots */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x93BF667F;
  }

  static get [name](): string {
    return "attachMenuBotsBot"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bot", _AttachMenuBot_, "AttachMenuBot"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bot, _AttachMenuBot_, "AttachMenuBot"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { bot: enums.AttachMenuBot; users: Array<enums.User> }) {
    super();
    this.bot = params.bot;
    this.users = params.users;
  }
}

/** Contains the webview URL with appropriate theme and user info parameters added */
export class WebViewResultUrl_ extends _WebViewResult_ {
  /** Webview session ID */
  query_id: bigint;
  /** Webview URL to open */
  url: string;

  protected get [id](): number {
    return 0x0C14557C;
  }

  static get [name](): string {
    return "webViewResultUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["query_id", "bigint", "long"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.query_id, "bigint", "long"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { query_id: bigint; url: string }) {
    super();
    this.query_id = params.query_id;
    this.url = params.url;
  }
}

/** Contains the webview URL with appropriate theme parameters added */
export class SimpleWebViewResultUrl_ extends _SimpleWebViewResult_ {
  /** URL */
  url: string;

  protected get [id](): number {
    return 0x882F76BB;
  }

  static get [name](): string {
    return "simpleWebViewResultUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Info about a sent inline webview message */
export class WebViewMessageSent_ extends _WebViewMessageSent_ {
  /** Message ID */
  msg_id?: enums.InputBotInlineMessageID;

  protected get [id](): number {
    return 0x0C94511C;
  }

  static get [name](): string {
    return "webViewMessageSent"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["msg_id", _InputBotInlineMessageID_, "flags.0?InputBotInlineMessageID"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.msg_id ?? null, _InputBotInlineMessageID_, "flags.0?InputBotInlineMessageID"],
    ];
  }

  constructor(params?: { msg_id?: enums.InputBotInlineMessageID }) {
    super();
    this.msg_id = params?.msg_id;
  }
}

/** Placeholder [bot menu button](https://core.telegram.org/api/bots/menu) never returned to users: see [the docs for more info](https://core.telegram.org/api/bots/menu). */
export class BotMenuButtonDefault_ extends _BotMenuButton_ {
  protected get [id](): number {
    return 0x7533A588;
  }

  static get [name](): string {
    return "botMenuButtonDefault"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** [Bot menu button](https://core.telegram.org/api/bots/menu) that opens the bot command list when clicked. */
export class BotMenuButtonCommands_ extends _BotMenuButton_ {
  protected get [id](): number {
    return 0x4258C205;
  }

  static get [name](): string {
    return "botMenuButtonCommands"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** [Bot menu button](https://core.telegram.org/api/bots/menu) that opens a [web app](https://core.telegram.org/api/bots/webapps) when clicked. */
export class BotMenuButton_ extends _BotMenuButton_ {
  /** Title to be displayed on the menu button instead of 'Menu' */
  text: string;
  /** URL of a [web app](https://core.telegram.org/api/bots/webapps) to open when the user clicks on the button */
  url: string;

  protected get [id](): number {
    return 0xC7B57CE6;
  }

  static get [name](): string {
    return "botMenuButton"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { text: string; url: string }) {
    super();
    this.text = params.text;
    this.url = params.url;
  }
}

/** The notification sound list hasn't changed. */
export class account_SavedRingtonesNotModified_ extends _account_SavedRingtones_ {
  protected get [id](): number {
    return 0xFBF6E8B1;
  }

  static get [name](): string {
    return "account.savedRingtonesNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A list of saved notification sounds */
export class account_SavedRingtones_ extends _account_SavedRingtones_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Saved notification sounds */
  ringtones: Array<enums.Document>;

  protected get [id](): number {
    return 0xC1E92CC5;
  }

  static get [name](): string {
    return "account.savedRingtones"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["ringtones", [_Document_], "Vector<Document>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.ringtones, [_Document_], "Vector<Document>"],
    ];
  }

  constructor(params: { hash: bigint; ringtones: Array<enums.Document> }) {
    super();
    this.hash = params.hash;
    this.ringtones = params.ringtones;
  }
}

/** Indicates the default notification sound should be used */
export class NotificationSoundDefault_ extends _NotificationSound_ {
  protected get [id](): number {
    return 0x97E8BEBE;
  }

  static get [name](): string {
    return "notificationSoundDefault"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** No notification sound should be used */
export class NotificationSoundNone_ extends _NotificationSound_ {
  protected get [id](): number {
    return 0x6F0C34DF;
  }

  static get [name](): string {
    return "notificationSoundNone"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Indicates a specific local notification sound should be used */
export class NotificationSoundLocal_ extends _NotificationSound_ {
  /** Notification sound title */
  title: string;
  /** Notification sound identifier (arbitrary data used by the client to identify a specific local notification sound) */
  data: string;

  protected get [id](): number {
    return 0x830B9AE4;
  }

  static get [name](): string {
    return "notificationSoundLocal"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
      ["data", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
      [this.data, "string", "string"],
    ];
  }

  constructor(params: { title: string; data: string }) {
    super();
    this.title = params.title;
    this.data = params.data;
  }
}

/** A specific previously uploaded notification sound should be used */
export class NotificationSoundRingtone_ extends _NotificationSound_ {
  /** Document ID of notification sound uploaded using [account.uploadRingtone](https://core.telegram.org/method/account.uploadRingtone) */
  id: bigint;

  protected get [id](): number {
    return 0xFF6C8049;
  }

  static get [name](): string {
    return "notificationSoundRingtone"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint }) {
    super();
    this.id = params.id;
  }
}

/** The notification sound was already in MP3 format and was saved without any modification */
export class account_SavedRingtone_ extends _account_SavedRingtone_ {
  protected get [id](): number {
    return 0xB7263F6D;
  }

  static get [name](): string {
    return "account.savedRingtone"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The notification sound was not in MP3 format and was successfully converted and saved, use the returned [Document](https://core.telegram.org/type/Document) to refer to the notification sound from now on */
export class account_SavedRingtoneConverted_ extends _account_SavedRingtone_ {
  /** The converted notification sound */
  document: enums.Document;

  protected get [id](): number {
    return 0x1F307EB7;
  }

  static get [name](): string {
    return "account.savedRingtoneConverted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["document", _Document_, "Document"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.document, _Document_, "Document"],
    ];
  }

  constructor(params: { document: enums.Document }) {
    super();
    this.document = params.document;
  }
}

/** The bot attachment menu entry is available in the chat with the bot that offers it */
export class AttachMenuPeerTypeSameBotPM_ extends _AttachMenuPeerType_ {
  protected get [id](): number {
    return 0x7D6BE90E;
  }

  static get [name](): string {
    return "attachMenuPeerTypeSameBotPM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The bot attachment menu entry is available in private chats with other bots (excluding the bot that offers the current attachment menu) */
export class AttachMenuPeerTypeBotPM_ extends _AttachMenuPeerType_ {
  protected get [id](): number {
    return 0xC32BFA1A;
  }

  static get [name](): string {
    return "attachMenuPeerTypeBotPM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The bot attachment menu entry is available in private chats with other users (not bots) */
export class AttachMenuPeerTypePM_ extends _AttachMenuPeerType_ {
  protected get [id](): number {
    return 0xF146D31F;
  }

  static get [name](): string {
    return "attachMenuPeerTypePM"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The bot attachment menu entry is available in [groups and supergroups](https://core.telegram.org/api/channel) */
export class AttachMenuPeerTypeChat_ extends _AttachMenuPeerType_ {
  protected get [id](): number {
    return 0x0509113F;
  }

  static get [name](): string {
    return "attachMenuPeerTypeChat"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** The bot attachment menu entry is available in channels */
export class AttachMenuPeerTypeBroadcast_ extends _AttachMenuPeerType_ {
  protected get [id](): number {
    return 0x7BFBDEFC;
  }

  static get [name](): string {
    return "attachMenuPeerTypeBroadcast"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** An invoice contained in a [messageMediaInvoice](https://core.telegram.org/constructor/messageMediaInvoice) message. */
export class InputInvoiceMessage_ extends _InputInvoice_ {
  /** Chat where the invoice was sent */
  peer: enums.InputPeer;
  /** Message ID */
  msg_id: number;

  protected get [id](): number {
    return 0xC5B56859;
  }

  static get [name](): string {
    return "inputInvoiceMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["msg_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.msg_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; msg_id: number }) {
    super();
    this.peer = params.peer;
    this.msg_id = params.msg_id;
  }
}

/** An invoice slug taken from an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or from the [`premium_invoice_slug` app config parameter »](https://core.telegram.org/api/config#premium-invoice-slug) */
export class InputInvoiceSlug_ extends _InputInvoice_ {
  /** The invoice slug */
  slug: string;

  protected get [id](): number {
    return 0xC326CAEF;
  }

  static get [name](): string {
    return "inputInvoiceSlug"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["slug", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.slug, "string", "string"],
    ];
  }

  constructor(params: { slug: string }) {
    super();
    this.slug = params.slug;
  }
}

/** Used if the user wishes to start a channel [giveaway](https://core.telegram.org/api/giveaways) or send some [giftcodes](https://core.telegram.org/api/giveaways) to members of a channel, in exchange for [boosts](https://core.telegram.org/api/boost). */
export class InputInvoicePremiumGiftCode_ extends _InputInvoice_ {
  /** Should be populated with [inputStorePaymentPremiumGiveaway](https://core.telegram.org/constructor/inputStorePaymentPremiumGiveaway) for [giveaways](https://core.telegram.org/api/giveaways) and [inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode) for [gifts](https://core.telegram.org/api/giveaways). */
  purpose: enums.InputStorePaymentPurpose;
  /** Should be populated with one of the giveaway options returned by [payments.getPremiumGiftCodeOptions](https://core.telegram.org/method/payments.getPremiumGiftCodeOptions), see the [giveaways »](https://core.telegram.org/api/giveaways) documentation for more info. */
  option: enums.PremiumGiftCodeOption;

  protected get [id](): number {
    return 0x98986C0D;
  }

  static get [name](): string {
    return "inputInvoicePremiumGiftCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["purpose", _InputStorePaymentPurpose_, "InputStorePaymentPurpose"],
      ["option", _PremiumGiftCodeOption_, "PremiumGiftCodeOption"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.purpose, _InputStorePaymentPurpose_, "InputStorePaymentPurpose"],
      [this.option, _PremiumGiftCodeOption_, "PremiumGiftCodeOption"],
    ];
  }

  constructor(params: { purpose: enums.InputStorePaymentPurpose; option: enums.PremiumGiftCodeOption }) {
    super();
    this.purpose = params.purpose;
    this.option = params.option;
  }
}

/** Exported [invoice deep link](https://core.telegram.org/api/links#invoice-links) */
export class payments_ExportedInvoice_ extends _payments_ExportedInvoice_ {
  /** Exported [invoice deep link](https://core.telegram.org/api/links#invoice-links) */
  url: string;

  protected get [id](): number {
    return 0xAED0CBD9;
  }

  static get [name](): string {
    return "payments.exportedInvoice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** [Transcribed text from a voice message »](https://core.telegram.org/api/transcribe) */
export class messages_TranscribedAudio_ extends _messages_TranscribedAudio_ {
  /** Whether the transcription is partial because audio transcription is still in progress, if set the user may receive further [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) updates with the updated transcription. */
  pending?: true;
  /** Transcription ID */
  transcription_id: bigint;
  /** Transcripted text */
  text: string;
  /** For non-[Premium](https://core.telegram.org/api/premium) users, this flag will be set, indicating the remaining transcriptions in the free trial period. */
  trial_remains_num?: number;
  /** For non-[Premium](https://core.telegram.org/api/premium) users, this flag will be set, indicating the date when the `trial_remains_num` counter will be reset to the maximum value of [transcribe\_audio\_trial\_weekly\_number](https://core.telegram.org/api/config#transcribe-audio-trial-weekly-number). */
  trial_remains_until_date?: number;

  protected get [id](): number {
    return 0xCFB9D957;
  }

  static get [name](): string {
    return "messages.transcribedAudio"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pending", "true", "flags.0?true"],
      ["transcription_id", "bigint", "long"],
      ["text", "string", "string"],
      ["trial_remains_num", "number", "flags.1?int"],
      ["trial_remains_until_date", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pending ?? null, "true", "flags.0?true"],
      [this.transcription_id, "bigint", "long"],
      [this.text, "string", "string"],
      [this.trial_remains_num ?? null, "number", "flags.1?int"],
      [this.trial_remains_until_date ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { pending?: true; transcription_id: bigint; text: string; trial_remains_num?: number; trial_remains_until_date?: number }) {
    super();
    this.pending = params.pending;
    this.transcription_id = params.transcription_id;
    this.text = params.text;
    this.trial_remains_num = params.trial_remains_num;
    this.trial_remains_until_date = params.trial_remains_until_date;
  }
}

/** Telegram Premium promotion information */
export class help_PremiumPromo_ extends _help_PremiumPromo_ {
  /** Description of the current state of the user's Telegram Premium subscription */
  status_text: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  status_entities: Array<enums.MessageEntity>;
  /** A list of [premium feature identifiers »](https://core.telegram.org/api/premium), associated to each video */
  video_sections: Array<string>;
  /** A list of videos */
  videos: Array<enums.Document>;
  /** Telegram Premium subscription options */
  period_options: Array<enums.PremiumSubscriptionOption>;
  /** Related user information */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x5334759C;
  }

  static get [name](): string {
    return "help.premiumPromo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["status_text", "string", "string"],
      ["status_entities", [_MessageEntity_], "Vector<MessageEntity>"],
      ["video_sections", ["string"], "Vector<string>"],
      ["videos", [_Document_], "Vector<Document>"],
      ["period_options", [_PremiumSubscriptionOption_], "Vector<PremiumSubscriptionOption>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.status_text, "string", "string"],
      [this.status_entities, [_MessageEntity_], "Vector<MessageEntity>"],
      [this.video_sections, ["string"], "Vector<string>"],
      [this.videos, [_Document_], "Vector<Document>"],
      [this.period_options, [_PremiumSubscriptionOption_], "Vector<PremiumSubscriptionOption>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { status_text: string; status_entities: Array<enums.MessageEntity>; video_sections: Array<string>; videos: Array<enums.Document>; period_options: Array<enums.PremiumSubscriptionOption>; users: Array<enums.User> }) {
    super();
    this.status_text = params.status_text;
    this.status_entities = params.status_entities;
    this.video_sections = params.video_sections;
    this.videos = params.videos;
    this.period_options = params.period_options;
    this.users = params.users;
  }
}

/** Info about a Telegram Premium purchase */
export class InputStorePaymentPremiumSubscription_ extends _InputStorePaymentPurpose_ {
  /** Pass true if this is a restore of a Telegram Premium purchase; only for the App Store */
  restore?: true;
  /** Pass true if this is an upgrade from a monthly subscription to a yearly subscription; only for App Store */
  upgrade?: true;

  protected get [id](): number {
    return 0xA6751E66;
  }

  static get [name](): string {
    return "inputStorePaymentPremiumSubscription"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["restore", "true", "flags.0?true"],
      ["upgrade", "true", "flags.1?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.restore ?? null, "true", "flags.0?true"],
      [this.upgrade ?? null, "true", "flags.1?true"],
    ];
  }

  constructor(params?: { restore?: true; upgrade?: true }) {
    super();
    this.restore = params?.restore;
    this.upgrade = params?.upgrade;
  }
}

/** Info about a gifted Telegram Premium purchase */
export class InputStorePaymentGiftPremium_ extends _InputStorePaymentPurpose_ {
  /** The user to which the Telegram Premium subscription was gifted */
  user_id: enums.InputUser;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;

  protected get [id](): number {
    return 0x616F7FE8;
  }

  static get [name](): string {
    return "inputStorePaymentGiftPremium"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", _InputUser_, "InputUser"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, _InputUser_, "InputUser"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
    ];
  }

  constructor(params: { user_id: enums.InputUser; currency: string; amount: bigint }) {
    super();
    this.user_id = params.user_id;
    this.currency = params.currency;
    this.amount = params.amount;
  }
}

/** Used to gift [Telegram Premium](https://core.telegram.org/api/premium) subscriptions only to some specific subscribers of a channel or to some of our contacts, see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways and gifts. */
export class InputStorePaymentPremiumGiftCode_ extends _InputStorePaymentPurpose_ {
  /** The users that will receive the [Telegram Premium](https://core.telegram.org/api/premium) subscriptions. */
  users: Array<enums.InputUser>;
  /** If set, the gifts will be sent on behalf of a channel we are an admin of, which will also assign some [boosts](https://core.telegram.org/api/boost) to it. Otherwise, the gift will be sent directly from the currently logged in users, and we will gain some extra [boost slots](https://core.telegram.org/api/boost). See [here »](https://core.telegram.org/api/giveaways) for more info on giveaways and gifts. */
  boost_peer?: enums.InputPeer;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;

  protected get [id](): number {
    return 0xA3805F3F;
  }

  static get [name](): string {
    return "inputStorePaymentPremiumGiftCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["users", [_InputUser_], "Vector<InputUser>"],
      ["boost_peer", _InputPeer_, "flags.0?InputPeer"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.users, [_InputUser_], "Vector<InputUser>"],
      [this.boost_peer ?? null, _InputPeer_, "flags.0?InputPeer"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
    ];
  }

  constructor(params: { users: Array<enums.InputUser>; boost_peer?: enums.InputPeer; currency: string; amount: bigint }) {
    super();
    this.users = params.users;
    this.boost_peer = params.boost_peer;
    this.currency = params.currency;
    this.amount = params.amount;
  }
}

/** Used to pay for a [giveaway, see here »](https://core.telegram.org/api/giveaways) for more info. */
export class InputStorePaymentPremiumGiveaway_ extends _InputStorePaymentPurpose_ {
  /** If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway. */
  only_new_subscribers?: true;
  /** If set, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel once the giveaway ends. */
  winners_are_visible?: true;
  /** The channel starting the giveaway, that the user must join to participate, that will receive the giveaway [boosts](https://core.telegram.org/api/boost); see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways. */
  boost_peer: enums.InputPeer;
  /** Additional channels that the user must join to participate to the giveaway can be specified here. */
  additional_peers?: Array<enums.InputPeer>;
  /** The set of users that can participate to the giveaway can be restricted by passing here an explicit whitelist of up to [giveaway\_countries\_max](https://core.telegram.org/api/config#giveaway-countries-max) countries, specified as two-letter ISO 3166-1 alpha-2 country codes. */
  countries_iso2?: Array<string>;
  /** Can contain a textual description of additional giveaway prizes. */
  prize_description?: string;
  /** Random ID to avoid resending the giveaway */
  random_id: bigint;
  /** The end date of the giveaway, must be at most [giveaway\_period\_max](https://core.telegram.org/api/config#giveaway-period-max) seconds in the future; see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways. */
  until_date: number;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;

  protected get [id](): number {
    return 0x160544CA;
  }

  static get [name](): string {
    return "inputStorePaymentPremiumGiveaway"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["only_new_subscribers", "true", "flags.0?true"],
      ["winners_are_visible", "true", "flags.3?true"],
      ["boost_peer", _InputPeer_, "InputPeer"],
      ["additional_peers", [_InputPeer_], "flags.1?Vector<InputPeer>"],
      ["countries_iso2", ["string"], "flags.2?Vector<string>"],
      ["prize_description", "string", "flags.4?string"],
      ["random_id", "bigint", "long"],
      ["until_date", "number", "int"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.only_new_subscribers ?? null, "true", "flags.0?true"],
      [this.winners_are_visible ?? null, "true", "flags.3?true"],
      [this.boost_peer, _InputPeer_, "InputPeer"],
      [this.additional_peers ?? null, [_InputPeer_], "flags.1?Vector<InputPeer>"],
      [this.countries_iso2 ?? null, ["string"], "flags.2?Vector<string>"],
      [this.prize_description ?? null, "string", "flags.4?string"],
      [this.random_id, "bigint", "long"],
      [this.until_date, "number", "int"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
    ];
  }

  constructor(params: { only_new_subscribers?: true; winners_are_visible?: true; boost_peer: enums.InputPeer; additional_peers?: Array<enums.InputPeer>; countries_iso2?: Array<string>; prize_description?: string; random_id: bigint; until_date: number; currency: string; amount: bigint }) {
    super();
    this.only_new_subscribers = params.only_new_subscribers;
    this.winners_are_visible = params.winners_are_visible;
    this.boost_peer = params.boost_peer;
    this.additional_peers = params.additional_peers;
    this.countries_iso2 = params.countries_iso2;
    this.prize_description = params.prize_description;
    this.random_id = params.random_id;
    this.until_date = params.until_date;
    this.currency = params.currency;
    this.amount = params.amount;
  }
}

/** Telegram Premium gift option */
export class PremiumGiftOption_ extends _PremiumGiftOption_ {
  /** Duration of gifted Telegram Premium subscription */
  months: number;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;
  /** An [invoice deep link »](https://core.telegram.org/api/links#invoice-links) to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available. */
  bot_url: string;
  /** An identifier for the App Store/Play Store product associated with the Premium gift. */
  store_product?: string;

  protected get [id](): number {
    return 0x74C34319;
  }

  static get [name](): string {
    return "premiumGiftOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["months", "number", "int"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
      ["bot_url", "string", "string"],
      ["store_product", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.months, "number", "int"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
      [this.bot_url, "string", "string"],
      [this.store_product ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { months: number; currency: string; amount: bigint; bot_url: string; store_product?: string }) {
    super();
    this.months = params.months;
    this.currency = params.currency;
    this.amount = params.amount;
    this.bot_url = params.bot_url;
    this.store_product = params.store_product;
  }
}

/** Represents an additional payment method */
export class PaymentFormMethod_ extends _PaymentFormMethod_ {
  /** URL to open in a webview to process the payment */
  url: string;
  /** Payment method description */
  title: string;

  protected get [id](): number {
    return 0x88F8F21B;
  }

  static get [name](): string {
    return "paymentFormMethod"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["title", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.title, "string", "string"],
    ];
  }

  constructor(params: { url: string; title: string }) {
    super();
    this.url = params.url;
    this.title = params.title;
  }
}

/** No emoji status is set */
export class EmojiStatusEmpty_ extends _EmojiStatus_ {
  protected get [id](): number {
    return 0x2DE11AAE;
  }

  static get [name](): string {
    return "emojiStatusEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** An [emoji status](https://core.telegram.org/api/emoji-status) */
export class EmojiStatus_ extends _EmojiStatus_ {
  /** [Custom emoji document ID](https://core.telegram.org/api/custom-emoji) */
  document_id: bigint;

  protected get [id](): number {
    return 0x929B619D;
  }

  static get [name](): string {
    return "emojiStatus"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["document_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.document_id, "bigint", "long"],
    ];
  }

  constructor(params: { document_id: bigint }) {
    super();
    this.document_id = params.document_id;
  }
}

/** An [emoji status](https://core.telegram.org/api/emoji-status) valid until the specified date */
export class EmojiStatusUntil_ extends _EmojiStatus_ {
  /** [Custom emoji document ID](https://core.telegram.org/api/custom-emoji) */
  document_id: bigint;
  /** This status is valid until this date */
  until: number;

  protected get [id](): number {
    return 0xFA30A8C7;
  }

  static get [name](): string {
    return "emojiStatusUntil"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["document_id", "bigint", "long"],
      ["until", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.document_id, "bigint", "long"],
      [this.until, "number", "int"],
    ];
  }

  constructor(params: { document_id: bigint; until: number }) {
    super();
    this.document_id = params.document_id;
    this.until = params.until;
  }
}

/** The server-side list of [emoji statuses](https://core.telegram.org/api/emoji-status) hasn't changed */
export class account_EmojiStatusesNotModified_ extends _account_EmojiStatuses_ {
  protected get [id](): number {
    return 0xD08CE645;
  }

  static get [name](): string {
    return "account.emojiStatusesNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** A list of [emoji statuses](https://core.telegram.org/api/emoji-status) */
export class account_EmojiStatuses_ extends _account_EmojiStatuses_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** [Emoji statuses](https://core.telegram.org/api/emoji-status) */
  statuses: Array<enums.EmojiStatus>;

  protected get [id](): number {
    return 0x90C467D1;
  }

  static get [name](): string {
    return "account.emojiStatuses"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["statuses", [_EmojiStatus_], "Vector<EmojiStatus>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.statuses, [_EmojiStatus_], "Vector<EmojiStatus>"],
    ];
  }

  constructor(params: { hash: bigint; statuses: Array<enums.EmojiStatus> }) {
    super();
    this.hash = params.hash;
    this.statuses = params.statuses;
  }
}

/** No reaction */
export class ReactionEmpty_ extends _Reaction_ {
  protected get [id](): number {
    return 0x79F5D419;
  }

  static get [name](): string {
    return "reactionEmpty"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Normal emoji message reaction */
export class ReactionEmoji_ extends _Reaction_ {
  /** Emoji */
  emoticon: string;

  protected get [id](): number {
    return 0x1B2286B8;
  }

  static get [name](): string {
    return "reactionEmoji"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["emoticon", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.emoticon, "string", "string"],
    ];
  }

  constructor(params: { emoticon: string }) {
    super();
    this.emoticon = params.emoticon;
  }
}

/** [Custom emoji](https://core.telegram.org/api/custom-emoji) message reaction */
export class ReactionCustomEmoji_ extends _Reaction_ {
  /** [Custom emoji document ID](https://core.telegram.org/api/custom-emoji) */
  document_id: bigint;

  protected get [id](): number {
    return 0x8935FC73;
  }

  static get [name](): string {
    return "reactionCustomEmoji"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["document_id", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.document_id, "bigint", "long"],
    ];
  }

  constructor(params: { document_id: bigint }) {
    super();
    this.document_id = params.document_id;
  }
}

/** No reactions are allowed */
export class ChatReactionsNone_ extends _ChatReactions_ {
  protected get [id](): number {
    return 0xEAFC32BC;
  }

  static get [name](): string {
    return "chatReactionsNone"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** All reactions or all non-custom reactions are allowed */
export class ChatReactionsAll_ extends _ChatReactions_ {
  /** Whether to allow custom reactions */
  allow_custom?: true;

  protected get [id](): number {
    return 0x52928BCA;
  }

  static get [name](): string {
    return "chatReactionsAll"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["allow_custom", "true", "flags.0?true"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.allow_custom ?? null, "true", "flags.0?true"],
    ];
  }

  constructor(params?: { allow_custom?: true }) {
    super();
    this.allow_custom = params?.allow_custom;
  }
}

/** Some reactions are allowed */
export class ChatReactionsSome_ extends _ChatReactions_ {
  /** Allowed set of reactions: the [reactions\_in\_chat\_max](https://core.telegram.org/api/config#reactions-in-chat-max) configuration field indicates the maximum number of reactions that can be specified in this field. */
  reactions: Array<enums.Reaction>;

  protected get [id](): number {
    return 0x661D4037;
  }

  static get [name](): string {
    return "chatReactionsSome"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["reactions", [_Reaction_], "Vector<Reaction>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.reactions, [_Reaction_], "Vector<Reaction>"],
    ];
  }

  constructor(params: { reactions: Array<enums.Reaction> }) {
    super();
    this.reactions = params.reactions;
  }
}

/** The server-side list of [message reactions](https://core.telegram.org/api/reactions) hasn't changed */
export class messages_ReactionsNotModified_ extends _messages_Reactions_ {
  protected get [id](): number {
    return 0xB06FDBDF;
  }

  static get [name](): string {
    return "messages.reactionsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** List of [message reactions](https://core.telegram.org/api/reactions) */
export class messages_Reactions_ extends _messages_Reactions_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Reactions */
  reactions: Array<enums.Reaction>;

  protected get [id](): number {
    return 0xEAFDF716;
  }

  static get [name](): string {
    return "messages.reactions"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["reactions", [_Reaction_], "Vector<Reaction>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.reactions, [_Reaction_], "Vector<Reaction>"],
    ];
  }

  constructor(params: { hash: bigint; reactions: Array<enums.Reaction> }) {
    super();
    this.hash = params.hash;
    this.reactions = params.reactions;
  }
}

/** Email verification purpose: setup login email */
export class EmailVerifyPurposeLoginSetup_ extends _EmailVerifyPurpose_ {
  /** Phone number */
  phone_number: string;
  /** Phone code hash as specified by the [documentation](https://core.telegram.org/api/auth#email-verification) */
  phone_code_hash: string;

  protected get [id](): number {
    return 0x4345BE73;
  }

  static get [name](): string {
    return "emailVerifyPurposeLoginSetup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["phone_number", "string", "string"],
      ["phone_code_hash", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.phone_number, "string", "string"],
      [this.phone_code_hash, "string", "string"],
    ];
  }

  constructor(params: { phone_number: string; phone_code_hash: string }) {
    super();
    this.phone_number = params.phone_number;
    this.phone_code_hash = params.phone_code_hash;
  }
}

/** Email verification purpose: change login email */
export class EmailVerifyPurposeLoginChange_ extends _EmailVerifyPurpose_ {
  protected get [id](): number {
    return 0x527D22EB;
  }

  static get [name](): string {
    return "emailVerifyPurposeLoginChange"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Verify an email for use in [telegram passport](https://core.telegram.org/api/passport) */
export class EmailVerifyPurposePassport_ extends _EmailVerifyPurpose_ {
  protected get [id](): number {
    return 0xBBF51685;
  }

  static get [name](): string {
    return "emailVerifyPurposePassport"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Email verification code */
export class EmailVerificationCode_ extends _EmailVerification_ {
  /** Received verification code */
  code: string;

  protected get [id](): number {
    return 0x922E55A9;
  }

  static get [name](): string {
    return "emailVerificationCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["code", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.code, "string", "string"],
    ];
  }

  constructor(params: { code: string }) {
    super();
    this.code = params.code;
  }
}

/** Google ID email verification token */
export class EmailVerificationGoogle_ extends _EmailVerification_ {
  /** Token */
  token: string;

  protected get [id](): number {
    return 0xDB909EC2;
  }

  static get [name](): string {
    return "emailVerificationGoogle"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["token", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.token, "string", "string"],
    ];
  }

  constructor(params: { token: string }) {
    super();
    this.token = params.token;
  }
}

/** Apple ID email verification token */
export class EmailVerificationApple_ extends _EmailVerification_ {
  /** Token */
  token: string;

  protected get [id](): number {
    return 0x96D074FD;
  }

  static get [name](): string {
    return "emailVerificationApple"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["token", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.token, "string", "string"],
    ];
  }

  constructor(params: { token: string }) {
    super();
    this.token = params.token;
  }
}

/** The email was verified correctly. */
export class account_EmailVerified_ extends _account_EmailVerified_ {
  /** The verified email address. */
  email: string;

  protected get [id](): number {
    return 0x2B96CD1B;
  }

  static get [name](): string {
    return "account.emailVerified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["email", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.email, "string", "string"],
    ];
  }

  constructor(params: { email: string }) {
    super();
    this.email = params.email;
  }
}

/** The email was verified correctly, and a login code was just sent to it. */
export class account_EmailVerifiedLogin_ extends _account_EmailVerified_ {
  /** The verified email address. */
  email: string;
  /** Info about the sent [login code](https://core.telegram.org/api/auth) */
  sent_code: enums.auth.SentCode;

  protected get [id](): number {
    return 0xE1BB0D61;
  }

  static get [name](): string {
    return "account.emailVerifiedLogin"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["email", "string", "string"],
      ["sent_code", _auth_SentCode_, "auth.SentCode"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.email, "string", "string"],
      [this.sent_code, _auth_SentCode_, "auth.SentCode"],
    ];
  }

  constructor(params: { email: string; sent_code: enums.auth.SentCode }) {
    super();
    this.email = params.email;
    this.sent_code = params.sent_code;
  }
}

/** Describes a Telegram Premium subscription option */
export class PremiumSubscriptionOption_ extends _PremiumSubscriptionOption_ {
  /** Whether this subscription option is currently in use. */
  current?: true;
  /** Whether this subscription option can be used to upgrade the existing Telegram Premium subscription. When upgrading Telegram Premium subscriptions bought through stores, make sure that the store transaction ID is equal to `transaction`, to avoid upgrading someone else's account, if the client is currently logged into multiple accounts. */
  can_purchase_upgrade?: true;
  /** Identifier of the last in-store transaction for the currently used subscription on the current account. */
  transaction?: string;
  /** Duration of subscription in months */
  months: number;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;
  /** [Deep link](https://core.telegram.org/api/links) used to initiate payment */
  bot_url: string;
  /** Store product ID, only for official apps */
  store_product?: string;

  protected get [id](): number {
    return 0x5F2D1DF2;
  }

  static get [name](): string {
    return "premiumSubscriptionOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["current", "true", "flags.1?true"],
      ["can_purchase_upgrade", "true", "flags.2?true"],
      ["transaction", "string", "flags.3?string"],
      ["months", "number", "int"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
      ["bot_url", "string", "string"],
      ["store_product", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.current ?? null, "true", "flags.1?true"],
      [this.can_purchase_upgrade ?? null, "true", "flags.2?true"],
      [this.transaction ?? null, "string", "flags.3?string"],
      [this.months, "number", "int"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
      [this.bot_url, "string", "string"],
      [this.store_product ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { current?: true; can_purchase_upgrade?: true; transaction?: string; months: number; currency: string; amount: bigint; bot_url: string; store_product?: string }) {
    super();
    this.current = params.current;
    this.can_purchase_upgrade = params.can_purchase_upgrade;
    this.transaction = params.transaction;
    this.months = params.months;
    this.currency = params.currency;
    this.amount = params.amount;
    this.bot_url = params.bot_url;
    this.store_product = params.store_product;
  }
}

/** Indicates a peer that can be used to send messages */
export class SendAsPeer_ extends _SendAsPeer_ {
  /** Whether a Telegram Premium account is required to send messages as this peer */
  premium_required?: true;
  /** Peer */
  peer: enums.Peer;

  protected get [id](): number {
    return 0xB81C7034;
  }

  static get [name](): string {
    return "sendAsPeer"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["premium_required", "true", "flags.0?true"],
      ["peer", _Peer_, "Peer"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.premium_required ?? null, "true", "flags.0?true"],
      [this.peer, _Peer_, "Peer"],
    ];
  }

  constructor(params: { premium_required?: true; peer: enums.Peer }) {
    super();
    this.premium_required = params.premium_required;
    this.peer = params.peer;
  }
}

/** Extended media preview */
export class MessageExtendedMediaPreview_ extends _MessageExtendedMedia_ {
  /** Width */
  w?: number;
  /** Height */
  h?: number;
  /** Thumbnail */
  thumb?: enums.PhotoSize;
  /** Video duration */
  video_duration?: number;

  protected get [id](): number {
    return 0xAD628CC8;
  }

  static get [name](): string {
    return "messageExtendedMediaPreview"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["w", "number", "flags.0?int"],
      ["h", "number", "flags.0?int"],
      ["thumb", _PhotoSize_, "flags.1?PhotoSize"],
      ["video_duration", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.w ?? null, "number", "flags.0?int"],
      [this.h ?? null, "number", "flags.0?int"],
      [this.thumb ?? null, _PhotoSize_, "flags.1?PhotoSize"],
      [this.video_duration ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params?: { w?: number; h?: number; thumb?: enums.PhotoSize; video_duration?: number }) {
    super();
    this.w = params?.w;
    this.h = params?.h;
    this.thumb = params?.thumb;
    this.video_duration = params?.video_duration;
  }
}

/** Extended media */
export class MessageExtendedMedia_ extends _MessageExtendedMedia_ {
  /** Media */
  media: enums.MessageMedia;

  protected get [id](): number {
    return 0xEE479C64;
  }

  static get [name](): string {
    return "messageExtendedMedia"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["media", _MessageMedia_, "MessageMedia"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.media, _MessageMedia_, "MessageMedia"],
    ];
  }

  constructor(params: { media: enums.MessageMedia }) {
    super();
    this.media = params.media;
  }
}

/** Keywords for a certain sticker */
export class StickerKeyword_ extends _StickerKeyword_ {
  /** Sticker ID */
  document_id: bigint;
  /** Keywords */
  keyword: Array<string>;

  protected get [id](): number {
    return 0xFCFEB29C;
  }

  static get [name](): string {
    return "stickerKeyword"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["document_id", "bigint", "long"],
      ["keyword", ["string"], "Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.document_id, "bigint", "long"],
      [this.keyword, ["string"], "Vector<string>"],
    ];
  }

  constructor(params: { document_id: bigint; keyword: Array<string> }) {
    super();
    this.document_id = params.document_id;
    this.keyword = params.keyword;
  }
}

/** Contains information about a username. */
export class Username_ extends _Username_ {
  /** Whether the username is editable, meaning it wasn't bought on [fragment](https://fragment.com). */
  editable?: true;
  /** Whether the username is active. */
  active?: true;
  /** The username. */
  username: string;

  protected get [id](): number {
    return 0xB4073647;
  }

  static get [name](): string {
    return "username"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["editable", "true", "flags.0?true"],
      ["active", "true", "flags.1?true"],
      ["username", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.editable ?? null, "true", "flags.0?true"],
      [this.active ?? null, "true", "flags.1?true"],
      [this.username, "string", "string"],
    ];
  }

  constructor(params: { editable?: true; active?: true; username: string }) {
    super();
    this.editable = params.editable;
    this.active = params.active;
    this.username = params.username;
  }
}

/** Represents a deleted forum topic. */
export class ForumTopicDeleted_ extends _ForumTopic_ {
  /** The ID of the deleted forum topic. */
  id: number;

  protected get [id](): number {
    return 0x023F109B;
  }

  static get [name](): string {
    return "forumTopicDeleted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { id: number }) {
    super();
    this.id = params.id;
  }
}

/** Represents a [forum topic](https://core.telegram.org/api/forum#forum-topics). */
export class ForumTopic_ extends _ForumTopic_ {
  /** Whether the topic was created by the current user */
  my?: true;
  /** Whether the topic is closed (no messages can be sent to it) */
  closed?: true;
  /** Whether the topic is pinned */
  pinned?: true;
  /** Whether this constructor is a reduced version of the full topic information.  
  If set, only the `my`, `closed`, `id`, `date`, `title`, `icon_color`, `icon_emoji_id` and `from_id` parameters will contain valid information.  
  Reduced info is usually only returned in topic-related [admin log events »](https://core.telegram.org/api/recent-actions) and in the [messages.channelMessages](https://core.telegram.org/constructor/messages.channelMessages) constructor: if needed, full information can be fetched using [channels.getForumTopicsByID](https://core.telegram.org/method/channels.getForumTopicsByID). */
  short?: true;
  /** Whether the topic is hidden (only valid for the "General" topic, `id=1`) */
  hidden?: true;
  /** [Topic ID](https://core.telegram.org/api/forum#forum-topics) */
  id: number;
  /** Topic creation date */
  date: number;
  /** Topic title */
  title: string;
  /** If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`. */
  icon_color: number;
  /** ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon. */
  icon_emoji_id?: bigint;
  /** ID of the last message that was sent to this topic */
  top_message: number;
  /** Position up to which all incoming messages are read. */
  read_inbox_max_id: number;
  /** Position up to which all outgoing messages are read. */
  read_outbox_max_id: number;
  /** Number of unread messages */
  unread_count: number;
  /** Number of [unread mentions](https://core.telegram.org/api/mentions) */
  unread_mentions_count: number;
  /** Number of unread reactions to messages you sent */
  unread_reactions_count: number;
  /** ID of the peer that created the topic */
  from_id: enums.Peer;
  /** Notification settings */
  notify_settings: enums.PeerNotifySettings;
  /** Message [draft](https://core.telegram.org/api/drafts) */
  draft?: enums.DraftMessage;

  protected get [id](): number {
    return 0x71701DA9;
  }

  static get [name](): string {
    return "forumTopic"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["my", "true", "flags.1?true"],
      ["closed", "true", "flags.2?true"],
      ["pinned", "true", "flags.3?true"],
      ["short", "true", "flags.5?true"],
      ["hidden", "true", "flags.6?true"],
      ["id", "number", "int"],
      ["date", "number", "int"],
      ["title", "string", "string"],
      ["icon_color", "number", "int"],
      ["icon_emoji_id", "bigint", "flags.0?long"],
      ["top_message", "number", "int"],
      ["read_inbox_max_id", "number", "int"],
      ["read_outbox_max_id", "number", "int"],
      ["unread_count", "number", "int"],
      ["unread_mentions_count", "number", "int"],
      ["unread_reactions_count", "number", "int"],
      ["from_id", _Peer_, "Peer"],
      ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
      ["draft", _DraftMessage_, "flags.4?DraftMessage"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.my ?? null, "true", "flags.1?true"],
      [this.closed ?? null, "true", "flags.2?true"],
      [this.pinned ?? null, "true", "flags.3?true"],
      [this.short ?? null, "true", "flags.5?true"],
      [this.hidden ?? null, "true", "flags.6?true"],
      [this.id, "number", "int"],
      [this.date, "number", "int"],
      [this.title, "string", "string"],
      [this.icon_color, "number", "int"],
      [this.icon_emoji_id ?? null, "bigint", "flags.0?long"],
      [this.top_message, "number", "int"],
      [this.read_inbox_max_id, "number", "int"],
      [this.read_outbox_max_id, "number", "int"],
      [this.unread_count, "number", "int"],
      [this.unread_mentions_count, "number", "int"],
      [this.unread_reactions_count, "number", "int"],
      [this.from_id, _Peer_, "Peer"],
      [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
      [this.draft ?? null, _DraftMessage_, "flags.4?DraftMessage"],
    ];
  }

  constructor(params: { my?: true; closed?: true; pinned?: true; short?: true; hidden?: true; id: number; date: number; title: string; icon_color: number; icon_emoji_id?: bigint; top_message: number; read_inbox_max_id: number; read_outbox_max_id: number; unread_count: number; unread_mentions_count: number; unread_reactions_count: number; from_id: enums.Peer; notify_settings: enums.PeerNotifySettings; draft?: enums.DraftMessage }) {
    super();
    this.my = params.my;
    this.closed = params.closed;
    this.pinned = params.pinned;
    this.short = params.short;
    this.hidden = params.hidden;
    this.id = params.id;
    this.date = params.date;
    this.title = params.title;
    this.icon_color = params.icon_color;
    this.icon_emoji_id = params.icon_emoji_id;
    this.top_message = params.top_message;
    this.read_inbox_max_id = params.read_inbox_max_id;
    this.read_outbox_max_id = params.read_outbox_max_id;
    this.unread_count = params.unread_count;
    this.unread_mentions_count = params.unread_mentions_count;
    this.unread_reactions_count = params.unread_reactions_count;
    this.from_id = params.from_id;
    this.notify_settings = params.notify_settings;
    this.draft = params.draft;
  }
}

/** Contains information about multiple [forum topics](https://core.telegram.org/api/forum#forum-topics) */
export class messages_ForumTopics_ extends _messages_ForumTopics_ {
  /** Whether the returned topics are ordered by creation date; if set, pagination by `offset_date` should use [forumTopic](https://core.telegram.org/constructor/forumTopic).`date`; otherwise topics are ordered by the last message date, so paginate by the `date` of the [message](https://core.telegram.org/type/Message) referenced by [forumTopic](https://core.telegram.org/constructor/forumTopic).`top_message`. */
  order_by_create_date?: true;
  /** Total number of topics matching query; may be more than the topics contained in `topics`, in which case [pagination](https://core.telegram.org/api/offsets) is required. */
  count: number;
  /** Forum topics */
  topics: Array<enums.ForumTopic>;
  /** Related messages (contains the messages mentioned by [forumTopic](https://core.telegram.org/constructor/forumTopic).`top_message`). */
  messages: Array<enums.Message>;
  /** Related chats */
  chats: Array<enums.Chat>;
  /** Related users */
  users: Array<enums.User>;
  /** [Event count after generation](https://core.telegram.org/api/updates) */
  pts: number;

  protected get [id](): number {
    return 0x367617D3;
  }

  static get [name](): string {
    return "messages.forumTopics"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["order_by_create_date", "true", "flags.0?true"],
      ["count", "number", "int"],
      ["topics", [_ForumTopic_], "Vector<ForumTopic>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["pts", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.order_by_create_date ?? null, "true", "flags.0?true"],
      [this.count, "number", "int"],
      [this.topics, [_ForumTopic_], "Vector<ForumTopic>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.pts, "number", "int"],
    ];
  }

  constructor(params: { order_by_create_date?: true; count: number; topics: Array<enums.ForumTopic>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User>; pts: number }) {
    super();
    this.order_by_create_date = params.order_by_create_date;
    this.count = params.count;
    this.topics = params.topics;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
    this.pts = params.pts;
  }
}

/** Contains info about the default value of the Time-To-Live setting, applied to all new chats. */
export class DefaultHistoryTTL_ extends _DefaultHistoryTTL_ {
  /** Time-To-Live setting applied to all new chats. */
  period: number;

  protected get [id](): number {
    return 0x43B46B20;
  }

  static get [name](): string {
    return "defaultHistoryTTL"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["period", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.period, "number", "int"],
    ];
  }

  constructor(params: { period: number }) {
    super();
    this.period = params.period;
  }
}

/** Describes a [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links). */
export class ExportedContactToken_ extends _ExportedContactToken_ {
  /** The [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links). */
  url: string;
  /** Its expiration date */
  expires: number;

  protected get [id](): number {
    return 0x41BF109B;
  }

  static get [name](): string {
    return "exportedContactToken"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
      ["expires", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
      [this.expires, "number", "int"],
    ];
  }

  constructor(params: { url: string; expires: number }) {
    super();
    this.url = params.url;
    this.expires = params.expires;
  }
}

/** Choose a user. */
export class RequestPeerTypeUser_ extends _RequestPeerType_ {
  /** Whether to allow choosing only bots. */
  bot?: boolean;
  /** Whether to allow choosing only [Premium](https://core.telegram.org/api/premium) users. */
  premium?: boolean;

  protected get [id](): number {
    return 0x5F3B8A00;
  }

  static get [name](): string {
    return "requestPeerTypeUser"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["bot", "boolean", "flags.0?Bool"],
      ["premium", "boolean", "flags.1?Bool"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.bot ?? null, "boolean", "flags.0?Bool"],
      [this.premium ?? null, "boolean", "flags.1?Bool"],
    ];
  }

  constructor(params?: { bot?: boolean; premium?: boolean }) {
    super();
    this.bot = params?.bot;
    this.premium = params?.premium;
  }
}

/** Choose a chat or supergroup */
export class RequestPeerTypeChat_ extends _RequestPeerType_ {
  /** Whether to allow only choosing chats or supergroups that were created by the current user. */
  creator?: true;
  /** Whether to allow only choosing chats or supergroups where the bot is a participant. */
  bot_participant?: true;
  /** If specified, allows only choosing channels with or without a username, according to the value of [Bool](https://core.telegram.org/type/Bool). */
  has_username?: boolean;
  /** If specified, allows only choosing chats or supergroups that are or aren't [forums](https://core.telegram.org/api/forum), according to the value of [Bool](https://core.telegram.org/type/Bool). */
  forum?: boolean;
  /** If specified, allows only choosing chats or supergroups where the current user is an admin with at least the specified admin rights. */
  user_admin_rights?: enums.ChatAdminRights;
  /** If specified, allows only choosing chats or supergroups where the bot is an admin with at least the specified admin rights. */
  bot_admin_rights?: enums.ChatAdminRights;

  protected get [id](): number {
    return 0xC9F06E1B;
  }

  static get [name](): string {
    return "requestPeerTypeChat"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["creator", "true", "flags.0?true"],
      ["bot_participant", "true", "flags.5?true"],
      ["has_username", "boolean", "flags.3?Bool"],
      ["forum", "boolean", "flags.4?Bool"],
      ["user_admin_rights", _ChatAdminRights_, "flags.1?ChatAdminRights"],
      ["bot_admin_rights", _ChatAdminRights_, "flags.2?ChatAdminRights"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.creator ?? null, "true", "flags.0?true"],
      [this.bot_participant ?? null, "true", "flags.5?true"],
      [this.has_username ?? null, "boolean", "flags.3?Bool"],
      [this.forum ?? null, "boolean", "flags.4?Bool"],
      [this.user_admin_rights ?? null, _ChatAdminRights_, "flags.1?ChatAdminRights"],
      [this.bot_admin_rights ?? null, _ChatAdminRights_, "flags.2?ChatAdminRights"],
    ];
  }

  constructor(params?: { creator?: true; bot_participant?: true; has_username?: boolean; forum?: boolean; user_admin_rights?: enums.ChatAdminRights; bot_admin_rights?: enums.ChatAdminRights }) {
    super();
    this.creator = params?.creator;
    this.bot_participant = params?.bot_participant;
    this.has_username = params?.has_username;
    this.forum = params?.forum;
    this.user_admin_rights = params?.user_admin_rights;
    this.bot_admin_rights = params?.bot_admin_rights;
  }
}

/** Choose a channel */
export class RequestPeerTypeBroadcast_ extends _RequestPeerType_ {
  /** Whether to allow only choosing channels that were created by the current user. */
  creator?: true;
  /** If specified, allows only choosing channels with or without a username, according to the value of [Bool](https://core.telegram.org/type/Bool). */
  has_username?: boolean;
  /** If specified, allows only choosing channels where the current user is an admin with at least the specified admin rights. */
  user_admin_rights?: enums.ChatAdminRights;
  /** If specified, allows only choosing channels where the bot is an admin with at least the specified admin rights. */
  bot_admin_rights?: enums.ChatAdminRights;

  protected get [id](): number {
    return 0x339BEF6C;
  }

  static get [name](): string {
    return "requestPeerTypeBroadcast"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["creator", "true", "flags.0?true"],
      ["has_username", "boolean", "flags.3?Bool"],
      ["user_admin_rights", _ChatAdminRights_, "flags.1?ChatAdminRights"],
      ["bot_admin_rights", _ChatAdminRights_, "flags.2?ChatAdminRights"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.creator ?? null, "true", "flags.0?true"],
      [this.has_username ?? null, "boolean", "flags.3?Bool"],
      [this.user_admin_rights ?? null, _ChatAdminRights_, "flags.1?ChatAdminRights"],
      [this.bot_admin_rights ?? null, _ChatAdminRights_, "flags.2?ChatAdminRights"],
    ];
  }

  constructor(params?: { creator?: true; has_username?: boolean; user_admin_rights?: enums.ChatAdminRights; bot_admin_rights?: enums.ChatAdminRights }) {
    super();
    this.creator = params?.creator;
    this.has_username = params?.has_username;
    this.user_admin_rights = params?.user_admin_rights;
    this.bot_admin_rights = params?.bot_admin_rights;
  }
}

/** The list of [custom emojis](https://core.telegram.org/api/custom-emoji) hasn't changed. */
export class EmojiListNotModified_ extends _EmojiList_ {
  protected get [id](): number {
    return 0x481EADFA;
  }

  static get [name](): string {
    return "emojiListNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a list of [custom emojis](https://core.telegram.org/api/custom-emoji). */
export class EmojiList_ extends _EmojiList_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: bigint;
  /** Custom emoji IDs */
  document_id: Array<bigint>;

  protected get [id](): number {
    return 0x7A1E11D1;
  }

  static get [name](): string {
    return "emojiList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "bigint", "long"],
      ["document_id", ["bigint"], "Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "bigint", "long"],
      [this.document_id, ["bigint"], "Vector<long>"],
    ];
  }

  constructor(params: { hash: bigint; document_id: Array<bigint> }) {
    super();
    this.hash = params.hash;
    this.document_id = params.document_id;
  }
}

/** Represents an [emoji category](https://core.telegram.org/api/custom-emoji#emoji-categories). */
export class EmojiGroup_ extends _EmojiGroup_ {
  /** Category name, i.e. "Animals", "Flags", "Faces" and so on... */
  title: string;
  /** A single custom emoji used as preview for the category. */
  icon_emoji_id: bigint;
  /** A list of UTF-8 emojis, matching the category. */
  emoticons: Array<string>;

  protected get [id](): number {
    return 0x7A9ABDA9;
  }

  static get [name](): string {
    return "emojiGroup"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["title", "string", "string"],
      ["icon_emoji_id", "bigint", "long"],
      ["emoticons", ["string"], "Vector<string>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.title, "string", "string"],
      [this.icon_emoji_id, "bigint", "long"],
      [this.emoticons, ["string"], "Vector<string>"],
    ];
  }

  constructor(params: { title: string; icon_emoji_id: bigint; emoticons: Array<string> }) {
    super();
    this.title = params.title;
    this.icon_emoji_id = params.icon_emoji_id;
    this.emoticons = params.emoticons;
  }
}

/** The list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories) hasn't changed. */
export class messages_EmojiGroupsNotModified_ extends _messages_EmojiGroups_ {
  protected get [id](): number {
    return 0x6FB4AD87;
  }

  static get [name](): string {
    return "messages.emojiGroupsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Represents a list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories). */
export class messages_EmojiGroups_ extends _messages_EmojiGroups_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;
  /** A list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories). */
  groups: Array<enums.EmojiGroup>;

  protected get [id](): number {
    return 0x881FB94B;
  }

  static get [name](): string {
    return "messages.emojiGroups"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "number", "int"],
      ["groups", [_EmojiGroup_], "Vector<EmojiGroup>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "number", "int"],
      [this.groups, [_EmojiGroup_], "Vector<EmojiGroup>"],
    ];
  }

  constructor(params: { hash: number; groups: Array<enums.EmojiGroup> }) {
    super();
    this.hash = params.hash;
    this.groups = params.groups;
  }
}

/** Styled text with [message entities](https://core.telegram.org/api/entities) */
export class TextWithEntities_ extends _TextWithEntities_ {
  /** Text */
  text: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities: Array<enums.MessageEntity>;

  protected get [id](): number {
    return 0x751F3146;
  }

  static get [name](): string {
    return "textWithEntities"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
    ];
  }

  constructor(params: { text: string; entities: Array<enums.MessageEntity> }) {
    super();
    this.text = params.text;
    this.entities = params.entities;
  }
}

/** Translated text with [entities](https://core.telegram.org/api/entities) */
export class messages_TranslateResult_ extends _messages_TranslatedText_ {
  /** Text+[entities](https://core.telegram.org/api/entities), for each input message. */
  result: Array<enums.TextWithEntities>;

  protected get [id](): number {
    return 0x33DB32F8;
  }

  static get [name](): string {
    return "messages.translateResult"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["result", [_TextWithEntities_], "Vector<TextWithEntities>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.result, [_TextWithEntities_], "Vector<TextWithEntities>"],
    ];
  }

  constructor(params: { result: Array<enums.TextWithEntities> }) {
    super();
    this.result = params.result;
  }
}

/** Media autosave settings */
export class AutoSaveSettings_ extends _AutoSaveSettings_ {
  /** Whether photos should be autosaved to the gallery. */
  photos?: true;
  /** Whether videos should be autosaved to the gallery. */
  videos?: true;
  /** If set, specifies a size limit for autosavable videos */
  video_max_size?: bigint;

  protected get [id](): number {
    return 0xC84834CE;
  }

  static get [name](): string {
    return "autoSaveSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["photos", "true", "flags.0?true"],
      ["videos", "true", "flags.1?true"],
      ["video_max_size", "bigint", "flags.2?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.photos ?? null, "true", "flags.0?true"],
      [this.videos ?? null, "true", "flags.1?true"],
      [this.video_max_size ?? null, "bigint", "flags.2?long"],
    ];
  }

  constructor(params?: { photos?: true; videos?: true; video_max_size?: bigint }) {
    super();
    this.photos = params?.photos;
    this.videos = params?.videos;
    this.video_max_size = params?.video_max_size;
  }
}

/** Peer-specific media autosave settings */
export class AutoSaveException_ extends _AutoSaveException_ {
  /** The peer */
  peer: enums.Peer;
  /** Media autosave settings */
  settings: enums.AutoSaveSettings;

  protected get [id](): number {
    return 0x81602D47;
  }

  static get [name](): string {
    return "autoSaveException"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["settings", _AutoSaveSettings_, "AutoSaveSettings"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.settings, _AutoSaveSettings_, "AutoSaveSettings"],
    ];
  }

  constructor(params: { peer: enums.Peer; settings: enums.AutoSaveSettings }) {
    super();
    this.peer = params.peer;
    this.settings = params.settings;
  }
}

/** Contains media autosave settings */
export class account_AutoSaveSettings_ extends _account_AutoSaveSettings_ {
  /** Default media autosave settings for private chats */
  users_settings: enums.AutoSaveSettings;
  /** Default media autosave settings for [groups and supergroups](https://core.telegram.org/api/channel) */
  chats_settings: enums.AutoSaveSettings;
  /** Default media autosave settings for [channels](https://core.telegram.org/api/channel) */
  broadcasts_settings: enums.AutoSaveSettings;
  /** Peer-specific granular autosave settings */
  exceptions: Array<enums.AutoSaveException>;
  /** Chats mentioned in the peer-specific granular autosave settings */
  chats: Array<enums.Chat>;
  /** Users mentioned in the peer-specific granular autosave settings */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x4C3E069D;
  }

  static get [name](): string {
    return "account.autoSaveSettings"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["users_settings", _AutoSaveSettings_, "AutoSaveSettings"],
      ["chats_settings", _AutoSaveSettings_, "AutoSaveSettings"],
      ["broadcasts_settings", _AutoSaveSettings_, "AutoSaveSettings"],
      ["exceptions", [_AutoSaveException_], "Vector<AutoSaveException>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.users_settings, _AutoSaveSettings_, "AutoSaveSettings"],
      [this.chats_settings, _AutoSaveSettings_, "AutoSaveSettings"],
      [this.broadcasts_settings, _AutoSaveSettings_, "AutoSaveSettings"],
      [this.exceptions, [_AutoSaveException_], "Vector<AutoSaveException>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { users_settings: enums.AutoSaveSettings; chats_settings: enums.AutoSaveSettings; broadcasts_settings: enums.AutoSaveSettings; exceptions: Array<enums.AutoSaveException>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.users_settings = params.users_settings;
    this.chats_settings = params.chats_settings;
    this.broadcasts_settings = params.broadcasts_settings;
    this.exceptions = params.exceptions;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** The client configuration parameters haven't changed */
export class help_AppConfigNotModified_ extends _help_AppConfig_ {
  protected get [id](): number {
    return 0x7CDE641D;
  }

  static get [name](): string {
    return "help.appConfigNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Contains various [client configuration parameters](https://core.telegram.org/api/config#client-configuration) */
export class help_AppConfig_ extends _help_AppConfig_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;
  /** [Client configuration parameters](https://core.telegram.org/api/config#client-configuration) */
  config: enums.JSONValue;

  protected get [id](): number {
    return 0xDD18782E;
  }

  static get [name](): string {
    return "help.appConfig"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "number", "int"],
      ["config", _JSONValue_, "JSONValue"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "number", "int"],
      [this.config, _JSONValue_, "JSONValue"],
    ];
  }

  constructor(params: { hash: number; config: enums.JSONValue }) {
    super();
    this.hash = params.hash;
    this.config = params.config;
  }
}

/** Used to fetch information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) by its ID */
export class InputBotAppID_ extends _InputBotApp_ {
  /** [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) ID. */
  id: bigint;
  /** Access hash, obtained from the [botApp](https://core.telegram.org/constructor/botApp) constructor. */
  access_hash: bigint;

  protected get [id](): number {
    return 0xA920BD7A;
  }

  static get [name](): string {
    return "inputBotAppID"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
  }
}

/** Used to fetch information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) by its short name */
export class InputBotAppShortName_ extends _InputBotApp_ {
  /** ID of the bot that owns the bot mini app */
  bot_id: enums.InputUser;
  /** Short name, obtained from a [Direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links) */
  short_name: string;

  protected get [id](): number {
    return 0x908C0407;
  }

  static get [name](): string {
    return "inputBotAppShortName"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["bot_id", _InputUser_, "InputUser"],
      ["short_name", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.bot_id, _InputUser_, "InputUser"],
      [this.short_name, "string", "string"],
    ];
  }

  constructor(params: { bot_id: enums.InputUser; short_name: string }) {
    super();
    this.bot_id = params.bot_id;
    this.short_name = params.short_name;
  }
}

/** Bot app info hasn't changed. */
export class BotAppNotModified_ extends _BotApp_ {
  protected get [id](): number {
    return 0x5DA674B7;
  }

  static get [name](): string {
    return "botAppNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Contains information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps). */
export class BotApp_ extends _BotApp_ {
  /** bot mini app ID */
  id: bigint;
  /** bot mini app access hash */
  access_hash: bigint;
  /** bot mini app short name, used to generate [Direct Mini App deep links](https://core.telegram.org/api/links#direct-mini-app-links). */
  short_name: string;
  /** bot mini app title. */
  title: string;
  /** bot mini app description. */
  description: string;
  /** bot mini app photo. */
  photo: enums.Photo;
  /** bot mini app animation. */
  document?: enums.Document;
  /** Hash to pass to [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp), to avoid refetching bot app info if it hasn't changed. */
  hash: bigint;

  protected get [id](): number {
    return 0x95FCD1D6;
  }

  static get [name](): string {
    return "botApp"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["id", "bigint", "long"],
      ["access_hash", "bigint", "long"],
      ["short_name", "string", "string"],
      ["title", "string", "string"],
      ["description", "string", "string"],
      ["photo", _Photo_, "Photo"],
      ["document", _Document_, "flags.0?Document"],
      ["hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.id, "bigint", "long"],
      [this.access_hash, "bigint", "long"],
      [this.short_name, "string", "string"],
      [this.title, "string", "string"],
      [this.description, "string", "string"],
      [this.photo, _Photo_, "Photo"],
      [this.document ?? null, _Document_, "flags.0?Document"],
      [this.hash, "bigint", "long"],
    ];
  }

  constructor(params: { id: bigint; access_hash: bigint; short_name: string; title: string; description: string; photo: enums.Photo; document?: enums.Document; hash: bigint }) {
    super();
    this.id = params.id;
    this.access_hash = params.access_hash;
    this.short_name = params.short_name;
    this.title = params.title;
    this.description = params.description;
    this.photo = params.photo;
    this.document = params.document;
    this.hash = params.hash;
  }
}

/** Contains information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) */
export class messages_BotApp_ extends _messages_BotApp_ {
  /** Whether the web app was never used by the user, and confirmation must be asked from the user before opening it. */
  inactive?: true;
  /** The bot is asking permission to send messages to the user: if the user agrees, set the `write_allowed` flag when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView). */
  request_write_access?: true;
  /** Deprecated flag, can be ignored. */
  has_settings?: true;
  /** Bot app information */
  app: enums.BotApp;

  protected get [id](): number {
    return 0xEB50ADF5;
  }

  static get [name](): string {
    return "messages.botApp"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["inactive", "true", "flags.0?true"],
      ["request_write_access", "true", "flags.1?true"],
      ["has_settings", "true", "flags.2?true"],
      ["app", _BotApp_, "BotApp"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.inactive ?? null, "true", "flags.0?true"],
      [this.request_write_access ?? null, "true", "flags.1?true"],
      [this.has_settings ?? null, "true", "flags.2?true"],
      [this.app, _BotApp_, "BotApp"],
    ];
  }

  constructor(params: { inactive?: true; request_write_access?: true; has_settings?: true; app: enums.BotApp }) {
    super();
    this.inactive = params.inactive;
    this.request_write_access = params.request_write_access;
    this.has_settings = params.has_settings;
    this.app = params.app;
  }
}

/** Contains the link that must be used to open a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps). */
export class AppWebViewResultUrl_ extends _AppWebViewResult_ {
  /** The URL to open */
  url: string;

  protected get [id](): number {
    return 0x3C1B4F0D;
  }

  static get [name](): string {
    return "appWebViewResultUrl"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { url: string }) {
    super();
    this.url = params.url;
  }
}

/** Specifies an [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps) button, shown on top of the inline query results list. */
export class InlineBotWebView_ extends _InlineBotWebView_ {
  /** Text of the button */
  text: string;
  /** Webapp URL */
  url: string;

  protected get [id](): number {
    return 0xB57295D5;
  }

  static get [name](): string {
    return "inlineBotWebView"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["text", "string", "string"],
      ["url", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.text, "string", "string"],
      [this.url, "string", "string"],
    ];
  }

  constructor(params: { text: string; url: string }) {
    super();
    this.text = params.text;
    this.url = params.url;
  }
}

/** Contains info about when a certain participant has read a message */
export class ReadParticipantDate_ extends _ReadParticipantDate_ {
  /** User ID */
  user_id: bigint;
  /** When the user read the message */
  date: number;

  protected get [id](): number {
    return 0x4A4FF172;
  }

  static get [name](): string {
    return "readParticipantDate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["user_id", "bigint", "long"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.user_id, "bigint", "long"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { user_id: bigint; date: number }) {
    super();
    this.user_id = params.user_id;
    this.date = params.date;
  }
}

/** Folder ID */
export class InputChatlistDialogFilter_ extends _InputChatlist_ {
  /** [Folder](https://core.telegram.org/api/folders) ID */
  filter_id: number;

  protected get [id](): number {
    return 0xF3E0DA33;
  }

  static get [name](): string {
    return "inputChatlistDialogFilter"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["filter_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.filter_id, "number", "int"],
    ];
  }

  constructor(params: { filter_id: number }) {
    super();
    this.filter_id = params.filter_id;
  }
}

/** Exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class ExportedChatlistInvite_ extends _ExportedChatlistInvite_ {
  /** Name of the link */
  title: string;
  /** The [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
  url: string;
  /** Peers to import */
  peers: Array<enums.Peer>;

  protected get [id](): number {
    return 0x0C5181AC;
  }

  static get [name](): string {
    return "exportedChatlistInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["title", "string", "string"],
      ["url", "string", "string"],
      ["peers", [_Peer_], "Vector<Peer>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.title, "string", "string"],
      [this.url, "string", "string"],
      [this.peers, [_Peer_], "Vector<Peer>"],
    ];
  }

  constructor(params: { title: string; url: string; peers: Array<enums.Peer> }) {
    super();
    this.title = params.title;
    this.url = params.url;
    this.peers = params.peers;
  }
}

/** Info about an exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ExportedChatlistInvite_ extends _chatlists_ExportedChatlistInvite_ {
  /** Folder ID */
  filter: enums.DialogFilter;
  /** The exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
  invite: enums.ExportedChatlistInvite;

  protected get [id](): number {
    return 0x10E6E3A6;
  }

  static get [name](): string {
    return "chatlists.exportedChatlistInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["filter", _DialogFilter_, "DialogFilter"],
      ["invite", _ExportedChatlistInvite_, "ExportedChatlistInvite"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.filter, _DialogFilter_, "DialogFilter"],
      [this.invite, _ExportedChatlistInvite_, "ExportedChatlistInvite"],
    ];
  }

  constructor(params: { filter: enums.DialogFilter; invite: enums.ExportedChatlistInvite }) {
    super();
    this.filter = params.filter;
    this.invite = params.invite;
  }
}

/** Info about multiple [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ExportedInvites_ extends _chatlists_ExportedInvites_ {
  /** The [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links). */
  invites: Array<enums.ExportedChatlistInvite>;
  /** Related chat information */
  chats: Array<enums.Chat>;
  /** Related user information */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x10AB6DC7;
  }

  static get [name](): string {
    return "chatlists.exportedInvites"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["invites", [_ExportedChatlistInvite_], "Vector<ExportedChatlistInvite>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.invites, [_ExportedChatlistInvite_], "Vector<ExportedChatlistInvite>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { invites: Array<enums.ExportedChatlistInvite>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.invites = params.invites;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Updated info about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links) we already imported. */
export class chatlists_ChatlistInviteAlready_ extends _chatlists_ChatlistInvite_ {
  /** ID of the imported folder */
  filter_id: number;
  /** New peers to be imported */
  missing_peers: Array<enums.Peer>;
  /** Peers that were already imported */
  already_peers: Array<enums.Peer>;
  /** Related chat information */
  chats: Array<enums.Chat>;
  /** Related user information */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xFA87F659;
  }

  static get [name](): string {
    return "chatlists.chatlistInviteAlready"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["filter_id", "number", "int"],
      ["missing_peers", [_Peer_], "Vector<Peer>"],
      ["already_peers", [_Peer_], "Vector<Peer>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.filter_id, "number", "int"],
      [this.missing_peers, [_Peer_], "Vector<Peer>"],
      [this.already_peers, [_Peer_], "Vector<Peer>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { filter_id: number; missing_peers: Array<enums.Peer>; already_peers: Array<enums.Peer>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.filter_id = params.filter_id;
    this.missing_peers = params.missing_peers;
    this.already_peers = params.already_peers;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Info about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ChatlistInvite_ extends _chatlists_ChatlistInvite_ {
  /** Name of the link */
  title: string;
  /** Emoji to use as icon for the folder. */
  emoticon?: string;
  /** Supergroups and channels to join */
  peers: Array<enums.Peer>;
  /** Related chat information */
  chats: Array<enums.Chat>;
  /** Related user information */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x1DCD839D;
  }

  static get [name](): string {
    return "chatlists.chatlistInvite"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["title", "string", "string"],
      ["emoticon", "string", "flags.0?string"],
      ["peers", [_Peer_], "Vector<Peer>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.title, "string", "string"],
      [this.emoticon ?? null, "string", "flags.0?string"],
      [this.peers, [_Peer_], "Vector<Peer>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { title: string; emoticon?: string; peers: Array<enums.Peer>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.title = params.title;
    this.emoticon = params.emoticon;
    this.peers = params.peers;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Updated information about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ChatlistUpdates_ extends _chatlists_ChatlistUpdates_ {
  /** New peers to join */
  missing_peers: Array<enums.Peer>;
  /** Related chat information */
  chats: Array<enums.Chat>;
  /** Related user information */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x93BD878D;
  }

  static get [name](): string {
    return "chatlists.chatlistUpdates"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["missing_peers", [_Peer_], "Vector<Peer>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.missing_peers, [_Peer_], "Vector<Peer>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { missing_peers: Array<enums.Peer>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.missing_peers = params.missing_peers;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Localized information about a bot. */
export class bots_BotInfo_ extends _bots_BotInfo_ {
  /** Bot name */
  name: string;
  /** Bot about text */
  about: string;
  /** Bot description */
  description: string;

  protected get [id](): number {
    return 0xE8A775B0;
  }

  static get [name](): string {
    return "bots.botInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["name", "string", "string"],
      ["about", "string", "string"],
      ["description", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.name, "string", "string"],
      [this.about, "string", "string"],
      [this.description, "string", "string"],
    ];
  }

  constructor(params: { name: string; about: string; description: string }) {
    super();
    this.name = params.name;
    this.about = params.about;
    this.description = params.description;
  }
}

/** How a peer voted in a poll */
export class MessagePeerVote_ extends _MessagePeerVote_ {
  /** Peer ID */
  peer: enums.Peer;
  /** The option chosen by the peer */
  option: Uint8Array;
  /** When did the peer cast the vote */
  date: number;

  protected get [id](): number {
    return 0xB6CC2D5C;
  }

  static get [name](): string {
    return "messagePeerVote"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["option", Uint8Array, "bytes"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.option, Uint8Array, "bytes"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; option: Uint8Array; date: number }) {
    super();
    this.peer = params.peer;
    this.option = params.option;
    this.date = params.date;
  }
}

/** How a peer voted in a poll (reduced constructor, returned if an `option` was provided to [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes)) */
export class MessagePeerVoteInputOption_ extends _MessagePeerVote_ {
  /** The peer that voted for the queried `option` */
  peer: enums.Peer;
  /** When did the peer cast the vote */
  date: number;

  protected get [id](): number {
    return 0x74CDA504;
  }

  static get [name](): string {
    return "messagePeerVoteInputOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; date: number }) {
    super();
    this.peer = params.peer;
    this.date = params.date;
  }
}

/** How a peer voted in a multiple-choice poll */
export class MessagePeerVoteMultiple_ extends _MessagePeerVote_ {
  /** Peer ID */
  peer: enums.Peer;
  /** Options chosen by the peer */
  options: Array<Uint8Array>;
  /** When did the peer cast their votes */
  date: number;

  protected get [id](): number {
    return 0x4628F6E6;
  }

  static get [name](): string {
    return "messagePeerVoteMultiple"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["options", [Uint8Array], "Vector<bytes>"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.options, [Uint8Array], "Vector<bytes>"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.Peer; options: Array<Uint8Array>; date: number }) {
    super();
    this.peer = params.peer;
    this.options = params.options;
    this.date = params.date;
  }
}

/** Represents a sponsored website. */
export class SponsoredWebPage_ extends _SponsoredWebPage_ {
  /** Web page URL. */
  url: string;
  /** Website name. */
  site_name: string;
  /** Optional image preview. */
  photo?: enums.Photo;

  protected get [id](): number {
    return 0x3DB8EC63;
  }

  static get [name](): string {
    return "sponsoredWebPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["url", "string", "string"],
      ["site_name", "string", "string"],
      ["photo", _Photo_, "flags.0?Photo"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.url, "string", "string"],
      [this.site_name, "string", "string"],
      [this.photo ?? null, _Photo_, "flags.0?Photo"],
    ];
  }

  constructor(params: { url: string; site_name: string; photo?: enums.Photo }) {
    super();
    this.url = params.url;
    this.site_name = params.site_name;
    this.photo = params.photo;
  }
}

/** Aggregated view and reaction information of a [story](https://core.telegram.org/api/stories). */
export class StoryViews_ extends _StoryViews_ {
  /** If set, indicates that the viewers list is currently viewable, and was not yet deleted because the story has expired while the user didn't have a [Premium](https://core.telegram.org/api/premium) account. */
  has_viewers?: true;
  /** View counter of the story */
  views_count: number;
  /** Forward counter of the story */
  forwards_count?: number;
  /** All reactions sent to this story */
  reactions?: Array<enums.ReactionCount>;
  /** Number of reactions added to the story */
  reactions_count?: number;
  /** User IDs of some recent viewers of the story */
  recent_viewers?: Array<bigint>;

  protected get [id](): number {
    return 0x8D595CD6;
  }

  static get [name](): string {
    return "storyViews"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_viewers", "true", "flags.1?true"],
      ["views_count", "number", "int"],
      ["forwards_count", "number", "flags.2?int"],
      ["reactions", [_ReactionCount_], "flags.3?Vector<ReactionCount>"],
      ["reactions_count", "number", "flags.4?int"],
      ["recent_viewers", ["bigint"], "flags.0?Vector<long>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_viewers ?? null, "true", "flags.1?true"],
      [this.views_count, "number", "int"],
      [this.forwards_count ?? null, "number", "flags.2?int"],
      [this.reactions ?? null, [_ReactionCount_], "flags.3?Vector<ReactionCount>"],
      [this.reactions_count ?? null, "number", "flags.4?int"],
      [this.recent_viewers ?? null, ["bigint"], "flags.0?Vector<long>"],
    ];
  }

  constructor(params: { has_viewers?: true; views_count: number; forwards_count?: number; reactions?: Array<enums.ReactionCount>; reactions_count?: number; recent_viewers?: Array<bigint> }) {
    super();
    this.has_viewers = params.has_viewers;
    this.views_count = params.views_count;
    this.forwards_count = params.forwards_count;
    this.reactions = params.reactions;
    this.reactions_count = params.reactions_count;
    this.recent_viewers = params.recent_viewers;
  }
}

/** Represents a previously active story, that was deleted */
export class StoryItemDeleted_ extends _StoryItem_ {
  /** Story ID */
  id: number;

  protected get [id](): number {
    return 0x51E6EE4F;
  }

  static get [name](): string {
    return "storyItemDeleted"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "number", "int"],
    ];
  }

  constructor(params: { id: number }) {
    super();
    this.id = params.id;
  }
}

/** Represents an active story, whose full information was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about the skipped story when and if needed. */
export class StoryItemSkipped_ extends _StoryItem_ {
  /** Whether this story can only be viewed by [our close friends, see here »](https://core.telegram.org/api/privacy) for more info */
  close_friends?: true;
  /** Story ID */
  id: number;
  /** When was the story posted. */
  date: number;
  /** When does the story expire. */
  expire_date: number;

  protected get [id](): number {
    return 0xFFADC913;
  }

  static get [name](): string {
    return "storyItemSkipped"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["close_friends", "true", "flags.8?true"],
      ["id", "number", "int"],
      ["date", "number", "int"],
      ["expire_date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.close_friends ?? null, "true", "flags.8?true"],
      [this.id, "number", "int"],
      [this.date, "number", "int"],
      [this.expire_date, "number", "int"],
    ];
  }

  constructor(params: { close_friends?: true; id: number; date: number; expire_date: number }) {
    super();
    this.close_friends = params.close_friends;
    this.id = params.id;
    this.date = params.date;
    this.expire_date = params.expire_date;
  }
}

/** Represents a [story](https://core.telegram.org/api/stories). */
export class StoryItem_ extends _StoryItem_ {
  /** Whether this story is pinned on the user's profile */
  pinned?: true;
  /** Whether this story is public and can be viewed by everyone */
  public?: true;
  /** Whether this story can only be viewed by [our close friends, see here »](https://core.telegram.org/api/privacy) for more info */
  close_friends?: true;
  /** Full information about this story was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about this story when and if needed. */
  min?: true;
  /** Whether this story is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more) and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera). */
  noforwards?: true;
  /** Indicates whether the story was edited. */
  edited?: true;
  /** Whether this story can only be viewed by our contacts */
  contacts?: true;
  /** Whether this story can only be viewed by a select list of our contacts */
  selected_contacts?: true;
  /** indicates whether we sent this story. */
  out?: true;
  /** ID of the story. */
  id: number;
  /** When was the story posted. */
  date: number;
  from_id?: enums.Peer;
  /** For [reposted stories »](https://core.telegram.org/api/stories#reposting-stories), contains info about the original story. */
  fwd_from?: enums.StoryFwdHeader;
  /** When does the story expire. */
  expire_date: number;
  /** Story caption. */
  caption?: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) */
  entities?: Array<enums.MessageEntity>;
  /** Story media. */
  media: enums.MessageMedia;
  /** List of media areas, see [here »](https://core.telegram.org/api/stories#media-areas) for more info on media areas. */
  media_areas?: Array<enums.MediaArea>;
  /** [Privacy rules](https://core.telegram.org/api/privacy) indicating who can and can't view this story */
  privacy?: Array<enums.PrivacyRule>;
  /** View date and reaction information */
  views?: enums.StoryViews;
  /** The reaction we sent. */
  sent_reaction?: enums.Reaction;

  protected get [id](): number {
    return 0x79B26A24;
  }

  static get [name](): string {
    return "storyItem"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.5?true"],
      ["public", "true", "flags.7?true"],
      ["close_friends", "true", "flags.8?true"],
      ["min", "true", "flags.9?true"],
      ["noforwards", "true", "flags.10?true"],
      ["edited", "true", "flags.11?true"],
      ["contacts", "true", "flags.12?true"],
      ["selected_contacts", "true", "flags.13?true"],
      ["out", "true", "flags.16?true"],
      ["id", "number", "int"],
      ["date", "number", "int"],
      ["from_id", _Peer_, "flags.18?Peer"],
      ["fwd_from", _StoryFwdHeader_, "flags.17?StoryFwdHeader"],
      ["expire_date", "number", "int"],
      ["caption", "string", "flags.0?string"],
      ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      ["media", _MessageMedia_, "MessageMedia"],
      ["media_areas", [_MediaArea_], "flags.14?Vector<MediaArea>"],
      ["privacy", [_PrivacyRule_], "flags.2?Vector<PrivacyRule>"],
      ["views", _StoryViews_, "flags.3?StoryViews"],
      ["sent_reaction", _Reaction_, "flags.15?Reaction"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.5?true"],
      [this.public ?? null, "true", "flags.7?true"],
      [this.close_friends ?? null, "true", "flags.8?true"],
      [this.min ?? null, "true", "flags.9?true"],
      [this.noforwards ?? null, "true", "flags.10?true"],
      [this.edited ?? null, "true", "flags.11?true"],
      [this.contacts ?? null, "true", "flags.12?true"],
      [this.selected_contacts ?? null, "true", "flags.13?true"],
      [this.out ?? null, "true", "flags.16?true"],
      [this.id, "number", "int"],
      [this.date, "number", "int"],
      [this.from_id ?? null, _Peer_, "flags.18?Peer"],
      [this.fwd_from ?? null, _StoryFwdHeader_, "flags.17?StoryFwdHeader"],
      [this.expire_date, "number", "int"],
      [this.caption ?? null, "string", "flags.0?string"],
      [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
      [this.media, _MessageMedia_, "MessageMedia"],
      [this.media_areas ?? null, [_MediaArea_], "flags.14?Vector<MediaArea>"],
      [this.privacy ?? null, [_PrivacyRule_], "flags.2?Vector<PrivacyRule>"],
      [this.views ?? null, _StoryViews_, "flags.3?StoryViews"],
      [this.sent_reaction ?? null, _Reaction_, "flags.15?Reaction"],
    ];
  }

  constructor(params: { pinned?: true; public?: true; close_friends?: true; min?: true; noforwards?: true; edited?: true; contacts?: true; selected_contacts?: true; out?: true; id: number; date: number; from_id?: enums.Peer; fwd_from?: enums.StoryFwdHeader; expire_date: number; caption?: string; entities?: Array<enums.MessageEntity>; media: enums.MessageMedia; media_areas?: Array<enums.MediaArea>; privacy?: Array<enums.PrivacyRule>; views?: enums.StoryViews; sent_reaction?: enums.Reaction }) {
    super();
    this.pinned = params.pinned;
    this.public = params.public;
    this.close_friends = params.close_friends;
    this.min = params.min;
    this.noforwards = params.noforwards;
    this.edited = params.edited;
    this.contacts = params.contacts;
    this.selected_contacts = params.selected_contacts;
    this.out = params.out;
    this.id = params.id;
    this.date = params.date;
    this.from_id = params.from_id;
    this.fwd_from = params.fwd_from;
    this.expire_date = params.expire_date;
    this.caption = params.caption;
    this.entities = params.entities;
    this.media = params.media;
    this.media_areas = params.media_areas;
    this.privacy = params.privacy;
    this.views = params.views;
    this.sent_reaction = params.sent_reaction;
  }
}

/** The list of active (or active and hidden) [stories](https://core.telegram.org/api/stories#watching-stories) has not changed. */
export class stories_AllStoriesNotModified_ extends _stories_AllStories_ {
  /** State to use to ask for updates */
  state: string;
  /** Current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) information */
  stealth_mode: enums.StoriesStealthMode;

  protected get [id](): number {
    return 0x1158FE3E;
  }

  static get [name](): string {
    return "stories.allStoriesNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["state", "string", "string"],
      ["stealth_mode", _StoriesStealthMode_, "StoriesStealthMode"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.state, "string", "string"],
      [this.stealth_mode, _StoriesStealthMode_, "StoriesStealthMode"],
    ];
  }

  constructor(params: { state: string; stealth_mode: enums.StoriesStealthMode }) {
    super();
    this.state = params.state;
    this.stealth_mode = params.stealth_mode;
  }
}

/** Full list of active (or active and hidden) [stories](https://core.telegram.org/api/stories#watching-stories). */
export class stories_AllStories_ extends _stories_AllStories_ {
  /** Whether more results can be fetched as [described here »](https://core.telegram.org/api/stories#watching-stories). */
  has_more?: true;
  /** Total number of active (or active and hidden) stories */
  count: number;
  /** State to use for pagination */
  state: string;
  /** Stories */
  peer_stories: Array<enums.PeerStories>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;
  /** Current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) information */
  stealth_mode: enums.StoriesStealthMode;

  protected get [id](): number {
    return 0x6EFC5E81;
  }

  static get [name](): string {
    return "stories.allStories"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["has_more", "true", "flags.0?true"],
      ["count", "number", "int"],
      ["state", "string", "string"],
      ["peer_stories", [_PeerStories_], "Vector<PeerStories>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["stealth_mode", _StoriesStealthMode_, "StoriesStealthMode"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.has_more ?? null, "true", "flags.0?true"],
      [this.count, "number", "int"],
      [this.state, "string", "string"],
      [this.peer_stories, [_PeerStories_], "Vector<PeerStories>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.stealth_mode, _StoriesStealthMode_, "StoriesStealthMode"],
    ];
  }

  constructor(params: { has_more?: true; count: number; state: string; peer_stories: Array<enums.PeerStories>; chats: Array<enums.Chat>; users: Array<enums.User>; stealth_mode: enums.StoriesStealthMode }) {
    super();
    this.has_more = params.has_more;
    this.count = params.count;
    this.state = params.state;
    this.peer_stories = params.peer_stories;
    this.chats = params.chats;
    this.users = params.users;
    this.stealth_mode = params.stealth_mode;
  }
}

/** List of [stories](https://core.telegram.org/api/stories#pinned-or-archived-stories) */
export class stories_Stories_ extends _stories_Stories_ {
  /** Total number of stories that can be fetched */
  count: number;
  /** Stories */
  stories: Array<enums.StoryItem>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x5DD8C3C8;
  }

  static get [name](): string {
    return "stories.stories"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["stories", [_StoryItem_], "Vector<StoryItem>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.stories, [_StoryItem_], "Vector<StoryItem>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; stories: Array<enums.StoryItem>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.stories = params.stories;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** [Story](https://core.telegram.org/api/stories) view date and reaction information */
export class StoryView_ extends _StoryView_ {
  /** Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories. */
  blocked?: true;
  /** Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories. */
  blocked_my_stories_from?: true;
  /** The user that viewed the story */
  user_id: bigint;
  /** When did the user view the story */
  date: number;
  /** If present, contains the reaction that the user left on the story */
  reaction?: enums.Reaction;

  protected get [id](): number {
    return 0xB0BDEAC5;
  }

  static get [name](): string {
    return "storyView"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["blocked", "true", "flags.0?true"],
      ["blocked_my_stories_from", "true", "flags.1?true"],
      ["user_id", "bigint", "long"],
      ["date", "number", "int"],
      ["reaction", _Reaction_, "flags.2?Reaction"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.blocked ?? null, "true", "flags.0?true"],
      [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
      [this.user_id, "bigint", "long"],
      [this.date, "number", "int"],
      [this.reaction ?? null, _Reaction_, "flags.2?Reaction"],
    ];
  }

  constructor(params: { blocked?: true; blocked_my_stories_from?: true; user_id: bigint; date: number; reaction?: enums.Reaction }) {
    super();
    this.blocked = params.blocked;
    this.blocked_my_stories_from = params.blocked_my_stories_from;
    this.user_id = params.user_id;
    this.date = params.date;
    this.reaction = params.reaction;
  }
}

/** A certain peer has forwarded the story as a message to a public chat or channel. */
export class StoryViewPublicForward_ extends _StoryView_ {
  /** Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories. */
  blocked?: true;
  /** Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories. */
  blocked_my_stories_from?: true;
  /** The message with the forwarded story. */
  message: enums.Message;

  protected get [id](): number {
    return 0x9083670B;
  }

  static get [name](): string {
    return "storyViewPublicForward"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["blocked", "true", "flags.0?true"],
      ["blocked_my_stories_from", "true", "flags.1?true"],
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.blocked ?? null, "true", "flags.0?true"],
      [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { blocked?: true; blocked_my_stories_from?: true; message: enums.Message }) {
    super();
    this.blocked = params.blocked;
    this.blocked_my_stories_from = params.blocked_my_stories_from;
    this.message = params.message;
  }
}

/** A certain peer has reposted the story. */
export class StoryViewPublicRepost_ extends _StoryView_ {
  /** Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories. */
  blocked?: true;
  /** Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories. */
  blocked_my_stories_from?: true;
  /** The peer that reposted the story. */
  peer_id: enums.Peer;
  /** The reposted story. */
  story: enums.StoryItem;

  protected get [id](): number {
    return 0xBD74CF49;
  }

  static get [name](): string {
    return "storyViewPublicRepost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["blocked", "true", "flags.0?true"],
      ["blocked_my_stories_from", "true", "flags.1?true"],
      ["peer_id", _Peer_, "Peer"],
      ["story", _StoryItem_, "StoryItem"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.blocked ?? null, "true", "flags.0?true"],
      [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
      [this.peer_id, _Peer_, "Peer"],
      [this.story, _StoryItem_, "StoryItem"],
    ];
  }

  constructor(params: { blocked?: true; blocked_my_stories_from?: true; peer_id: enums.Peer; story: enums.StoryItem }) {
    super();
    this.blocked = params.blocked;
    this.blocked_my_stories_from = params.blocked_my_stories_from;
    this.peer_id = params.peer_id;
    this.story = params.story;
  }
}

/** Reaction and view counters for a [story](https://core.telegram.org/api/stories) */
export class stories_StoryViewsList_ extends _stories_StoryViewsList_ {
  /** Total number of results that can be fetched */
  count: number;
  /** Total number of story views */
  views_count: number;
  /** Total number of story forwards/reposts */
  forwards_count: number;
  /** Number of reactions that were added to the story */
  reactions_count: number;
  /** Story view date and reaction information */
  views: Array<enums.StoryView>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;
  /** Offset for pagination */
  next_offset?: string;

  protected get [id](): number {
    return 0x59D78FC5;
  }

  static get [name](): string {
    return "stories.storyViewsList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["count", "number", "int"],
      ["views_count", "number", "int"],
      ["forwards_count", "number", "int"],
      ["reactions_count", "number", "int"],
      ["views", [_StoryView_], "Vector<StoryView>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["next_offset", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.count, "number", "int"],
      [this.views_count, "number", "int"],
      [this.forwards_count, "number", "int"],
      [this.reactions_count, "number", "int"],
      [this.views, [_StoryView_], "Vector<StoryView>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.next_offset ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { count: number; views_count: number; forwards_count: number; reactions_count: number; views: Array<enums.StoryView>; chats: Array<enums.Chat>; users: Array<enums.User>; next_offset?: string }) {
    super();
    this.count = params.count;
    this.views_count = params.views_count;
    this.forwards_count = params.forwards_count;
    this.reactions_count = params.reactions_count;
    this.views = params.views;
    this.chats = params.chats;
    this.users = params.users;
    this.next_offset = params.next_offset;
  }
}

/** Reaction and view counters for a list of [stories](https://core.telegram.org/api/stories) */
export class stories_StoryViews_ extends _stories_StoryViews_ {
  /** View date and reaction information of multiple stories */
  views: Array<enums.StoryViews>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xDE9EED1D;
  }

  static get [name](): string {
    return "stories.storyViews"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["views", [_StoryViews_], "Vector<StoryViews>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.views, [_StoryViews_], "Vector<StoryViews>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { views: Array<enums.StoryViews>; users: Array<enums.User> }) {
    super();
    this.views = params.views;
    this.users = params.users;
  }
}

/** Reply to a message. */
export class InputReplyToMessage_ extends _InputReplyTo_ {
  /** The message ID to reply to. */
  reply_to_msg_id: number;
  /** This field must contain the topic ID **only** when replying to messages in forum topics different from the "General" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`).  
  If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the "General" topic. */
  top_msg_id?: number;
  /** Used to reply to messages sent to another chat (specified here), can only be used for non-`protected` chats and messages. */
  reply_to_peer_id?: enums.InputPeer;
  /** Used to quote-reply to only a certain section (specified here) of the original message. The maximum UTF-8 length for quotes is specified in the [quote\_length\_max](https://core.telegram.org/api/config#quote-length-max) config key. */
  quote_text?: string;
  /** [Message entities for styled text](https://core.telegram.org/api/entities) from the `quote_text` field. */
  quote_entities?: Array<enums.MessageEntity>;
  /** Offset of the message `quote_text` within the original message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)). */
  quote_offset?: number;

  protected get [id](): number {
    return 0x22C0F6D5;
  }

  static get [name](): string {
    return "inputReplyToMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["reply_to_msg_id", "number", "int"],
      ["top_msg_id", "number", "flags.0?int"],
      ["reply_to_peer_id", _InputPeer_, "flags.1?InputPeer"],
      ["quote_text", "string", "flags.2?string"],
      ["quote_entities", [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
      ["quote_offset", "number", "flags.4?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.reply_to_msg_id, "number", "int"],
      [this.top_msg_id ?? null, "number", "flags.0?int"],
      [this.reply_to_peer_id ?? null, _InputPeer_, "flags.1?InputPeer"],
      [this.quote_text ?? null, "string", "flags.2?string"],
      [this.quote_entities ?? null, [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
      [this.quote_offset ?? null, "number", "flags.4?int"],
    ];
  }

  constructor(params: { reply_to_msg_id: number; top_msg_id?: number; reply_to_peer_id?: enums.InputPeer; quote_text?: string; quote_entities?: Array<enums.MessageEntity>; quote_offset?: number }) {
    super();
    this.reply_to_msg_id = params.reply_to_msg_id;
    this.top_msg_id = params.top_msg_id;
    this.reply_to_peer_id = params.reply_to_peer_id;
    this.quote_text = params.quote_text;
    this.quote_entities = params.quote_entities;
    this.quote_offset = params.quote_offset;
  }
}

/** Reply to a story. */
export class InputReplyToStory_ extends _InputReplyTo_ {
  peer: enums.InputPeer;
  /** ID of the story to reply to. */
  story_id: number;

  protected get [id](): number {
    return 0x5881323A;
  }

  static get [name](): string {
    return "inputReplyToStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _InputPeer_, "InputPeer"],
      ["story_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _InputPeer_, "InputPeer"],
      [this.story_id, "number", "int"],
    ];
  }

  constructor(params: { peer: enums.InputPeer; story_id: number }) {
    super();
    this.peer = params.peer;
    this.story_id = params.story_id;
  }
}

/** Represents a [story deep link](https://core.telegram.org/api/stories#story-links). */
export class ExportedStoryLink_ extends _ExportedStoryLink_ {
  /** The [story deep link](https://core.telegram.org/api/stories#story-links). */
  link: string;

  protected get [id](): number {
    return 0x3FC9053B;
  }

  static get [name](): string {
    return "exportedStoryLink"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["link", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.link, "string", "string"],
    ];
  }

  constructor(params: { link: string }) {
    super();
    this.link = params.link;
  }
}

/** Information about the current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) session. */
export class StoriesStealthMode_ extends _StoriesStealthMode_ {
  /** The date up to which stealth mode will be active. */
  active_until_date?: number;
  /** The date starting from which the user will be allowed to re-enable stealth mode again. */
  cooldown_until_date?: number;

  protected get [id](): number {
    return 0x712E27FD;
  }

  static get [name](): string {
    return "storiesStealthMode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["active_until_date", "number", "flags.0?int"],
      ["cooldown_until_date", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.active_until_date ?? null, "number", "flags.0?int"],
      [this.cooldown_until_date ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params?: { active_until_date?: number; cooldown_until_date?: number }) {
    super();
    this.active_until_date = params?.active_until_date;
    this.cooldown_until_date = params?.cooldown_until_date;
  }
}

/** Coordinates and size of a clicable rectangular area on top of a story. */
export class MediaAreaCoordinates_ extends _MediaAreaCoordinates_ {
  /** The abscissa of the rectangle's center, as a percentage of the media width (0-100). */
  x: number;
  /** The ordinate of the rectangle's center, as a percentage of the media height (0-100). */
  y: number;
  /** The width of the rectangle, as a percentage of the media width (0-100). */
  w: number;
  /** The height of the rectangle, as a percentage of the media height (0-100). */
  h: number;
  /** Clockwise rotation angle of the rectangle, in degrees (0-360). */
  rotation: number;

  protected get [id](): number {
    return 0x03D1EA4E;
  }

  static get [name](): string {
    return "mediaAreaCoordinates"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["x", "number", "double"],
      ["y", "number", "double"],
      ["w", "number", "double"],
      ["h", "number", "double"],
      ["rotation", "number", "double"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.x, "number", "double"],
      [this.y, "number", "double"],
      [this.w, "number", "double"],
      [this.h, "number", "double"],
      [this.rotation, "number", "double"],
    ];
  }

  constructor(params: { x: number; y: number; w: number; h: number; rotation: number }) {
    super();
    this.x = params.x;
    this.y = params.y;
    this.w = params.w;
    this.h = params.h;
    this.rotation = params.rotation;
  }
}

/** Represents a location tag attached to a [story](https://core.telegram.org/api/stories), with additional venue information. */
export class MediaAreaVenue_ extends _MediaArea_ {
  /** The size and location of the media area corresponding to the location sticker on top of the story media. */
  coordinates: enums.MediaAreaCoordinates;
  /** Coordinates of the venue */
  geo: enums.GeoPoint;
  /** Venue name */
  title: string;
  /** Address */
  address: string;
  /** Venue provider: currently only "foursquare" needs to be supported. */
  provider: string;
  /** Venue ID in the provider's database */
  venue_id: string;
  /** Venue type in the provider's database */
  venue_type: string;

  protected get [id](): number {
    return 0xBE82DB9C;
  }

  static get [name](): string {
    return "mediaAreaVenue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      ["geo", _GeoPoint_, "GeoPoint"],
      ["title", "string", "string"],
      ["address", "string", "string"],
      ["provider", "string", "string"],
      ["venue_id", "string", "string"],
      ["venue_type", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      [this.geo, _GeoPoint_, "GeoPoint"],
      [this.title, "string", "string"],
      [this.address, "string", "string"],
      [this.provider, "string", "string"],
      [this.venue_id, "string", "string"],
      [this.venue_type, "string", "string"],
    ];
  }

  constructor(params: { coordinates: enums.MediaAreaCoordinates; geo: enums.GeoPoint; title: string; address: string; provider: string; venue_id: string; venue_type: string }) {
    super();
    this.coordinates = params.coordinates;
    this.geo = params.geo;
    this.title = params.title;
    this.address = params.address;
    this.provider = params.provider;
    this.venue_id = params.venue_id;
    this.venue_type = params.venue_type;
  }
}

/** Represents a [location tag](https://core.telegram.org/api/stories#media-areas) attached to a [story](https://core.telegram.org/api/stories), with additional venue information. */
export class InputMediaAreaVenue_ extends _MediaArea_ {
  /** The size and location of the media area corresponding to the location sticker on top of the story media. */
  coordinates: enums.MediaAreaCoordinates;
  /** The `query_id` from [messages.botResults](https://core.telegram.org/constructor/messages.botResults), see [here »](https://core.telegram.org/api/stories#media-areas) for more info. */
  query_id: bigint;
  /** The `id` of the chosen result, see [here »](https://core.telegram.org/api/stories#media-areas) for more info. */
  result_id: string;

  protected get [id](): number {
    return 0xB282217F;
  }

  static get [name](): string {
    return "inputMediaAreaVenue"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      ["query_id", "bigint", "long"],
      ["result_id", "string", "string"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      [this.query_id, "bigint", "long"],
      [this.result_id, "string", "string"],
    ];
  }

  constructor(params: { coordinates: enums.MediaAreaCoordinates; query_id: bigint; result_id: string }) {
    super();
    this.coordinates = params.coordinates;
    this.query_id = params.query_id;
    this.result_id = params.result_id;
  }
}

/** Represents a geolocation tag attached to a [story](https://core.telegram.org/api/stories). */
export class MediaAreaGeoPoint_ extends _MediaArea_ {
  /** The size and position of the media area corresponding to the location sticker on top of the story media. */
  coordinates: enums.MediaAreaCoordinates;
  /** Coordinates of the geolocation tag. */
  geo: enums.GeoPoint;

  protected get [id](): number {
    return 0xDF8B3B22;
  }

  static get [name](): string {
    return "mediaAreaGeoPoint"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      ["geo", _GeoPoint_, "GeoPoint"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      [this.geo, _GeoPoint_, "GeoPoint"],
    ];
  }

  constructor(params: { coordinates: enums.MediaAreaCoordinates; geo: enums.GeoPoint }) {
    super();
    this.coordinates = params.coordinates;
    this.geo = params.geo;
  }
}

/** Represents a reaction bubble. */
export class MediaAreaSuggestedReaction_ extends _MediaArea_ {
  /** Whether the reaction bubble has a dark background. */
  dark?: true;
  /** Whether the reaction bubble is mirrored (see [here »](https://core.telegram.org/api/stories#reactions) for more info). */
  flipped?: true;
  /** The coordinates of the media area corresponding to the reaction button. */
  coordinates: enums.MediaAreaCoordinates;
  /** The reaction that should be sent when this area is clicked. */
  reaction: enums.Reaction;

  protected get [id](): number {
    return 0x14455871;
  }

  static get [name](): string {
    return "mediaAreaSuggestedReaction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["dark", "true", "flags.0?true"],
      ["flipped", "true", "flags.1?true"],
      ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      ["reaction", _Reaction_, "Reaction"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.dark ?? null, "true", "flags.0?true"],
      [this.flipped ?? null, "true", "flags.1?true"],
      [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      [this.reaction, _Reaction_, "Reaction"],
    ];
  }

  constructor(params: { dark?: true; flipped?: true; coordinates: enums.MediaAreaCoordinates; reaction: enums.Reaction }) {
    super();
    this.dark = params.dark;
    this.flipped = params.flipped;
    this.coordinates = params.coordinates;
    this.reaction = params.reaction;
  }
}

/** Represents a channel post. */
export class MediaAreaChannelPost_ extends _MediaArea_ {
  /** The size and location of the media area corresponding to the location sticker on top of the story media. */
  coordinates: enums.MediaAreaCoordinates;
  /** The channel that posted the message */
  channel_id: bigint;
  /** ID of the channel message */
  msg_id: number;

  protected get [id](): number {
    return 0x770416AF;
  }

  static get [name](): string {
    return "mediaAreaChannelPost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      ["channel_id", "bigint", "long"],
      ["msg_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      [this.channel_id, "bigint", "long"],
      [this.msg_id, "number", "int"],
    ];
  }

  constructor(params: { coordinates: enums.MediaAreaCoordinates; channel_id: bigint; msg_id: number }) {
    super();
    this.coordinates = params.coordinates;
    this.channel_id = params.channel_id;
    this.msg_id = params.msg_id;
  }
}

/** Represents a channel post */
export class InputMediaAreaChannelPost_ extends _MediaArea_ {
  /** The size and location of the media area corresponding to the location sticker on top of the story media. */
  coordinates: enums.MediaAreaCoordinates;
  /** The channel that posted the message */
  channel: enums.InputChannel;
  /** ID of the channel message */
  msg_id: number;

  protected get [id](): number {
    return 0x2271F2BF;
  }

  static get [name](): string {
    return "inputMediaAreaChannelPost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      ["channel", _InputChannel_, "InputChannel"],
      ["msg_id", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
      [this.channel, _InputChannel_, "InputChannel"],
      [this.msg_id, "number", "int"],
    ];
  }

  constructor(params: { coordinates: enums.MediaAreaCoordinates; channel: enums.InputChannel; msg_id: number }) {
    super();
    this.coordinates = params.coordinates;
    this.channel = params.channel;
    this.msg_id = params.msg_id;
  }
}

/** [Stories](https://core.telegram.org/api/stories) associated to a peer */
export class PeerStories_ extends _PeerStories_ {
  /** The peer */
  peer: enums.Peer;
  /** If set, contains the ID of the maximum read story */
  max_read_id?: number;
  /** Stories */
  stories: Array<enums.StoryItem>;

  protected get [id](): number {
    return 0x9A35E999;
  }

  static get [name](): string {
    return "peerStories"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["peer", _Peer_, "Peer"],
      ["max_read_id", "number", "flags.0?int"],
      ["stories", [_StoryItem_], "Vector<StoryItem>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.peer, _Peer_, "Peer"],
      [this.max_read_id ?? null, "number", "flags.0?int"],
      [this.stories, [_StoryItem_], "Vector<StoryItem>"],
    ];
  }

  constructor(params: { peer: enums.Peer; max_read_id?: number; stories: Array<enums.StoryItem> }) {
    super();
    this.peer = params.peer;
    this.max_read_id = params.max_read_id;
    this.stories = params.stories;
  }
}

/** [Active story list](https://core.telegram.org/api/stories#watching-stories) of a specific peer. */
export class stories_PeerStories_ extends _stories_PeerStories_ {
  /** Stories */
  stories: enums.PeerStories;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xCAE68768;
  }

  static get [name](): string {
    return "stories.peerStories"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["stories", _PeerStories_, "PeerStories"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.stories, _PeerStories_, "PeerStories"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { stories: enums.PeerStories; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.stories = params.stories;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Represents an Instant View webpage. */
export class messages_WebPage_ extends _messages_WebPage_ {
  /** The instant view webpage. */
  webpage: enums.WebPage;
  /** Chats mentioned in the webpage. */
  chats: Array<enums.Chat>;
  /** Users mentioned in the webpage. */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xFD5E12BD;
  }

  static get [name](): string {
    return "messages.webPage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["webpage", _WebPage_, "WebPage"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.webpage, _WebPage_, "WebPage"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { webpage: enums.WebPage; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.webpage = params.webpage;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Contains info about a [giveaway/gift](https://core.telegram.org/api/giveaways) option. */
export class PremiumGiftCodeOption_ extends _PremiumGiftCodeOption_ {
  /** Number of users which will be able to activate the gift codes. */
  users: number;
  /** Duration in months of each gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription. */
  months: number;
  /** Identifier of the store product associated with the option, official apps only. */
  store_product?: string;
  /** Number of times the store product must be paid */
  store_quantity?: number;
  /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
  currency: string;
  /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
  amount: bigint;

  protected get [id](): number {
    return 0x257E962B;
  }

  static get [name](): string {
    return "premiumGiftCodeOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["users", "number", "int"],
      ["months", "number", "int"],
      ["store_product", "string", "flags.0?string"],
      ["store_quantity", "number", "flags.1?int"],
      ["currency", "string", "string"],
      ["amount", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.users, "number", "int"],
      [this.months, "number", "int"],
      [this.store_product ?? null, "string", "flags.0?string"],
      [this.store_quantity ?? null, "number", "flags.1?int"],
      [this.currency, "string", "string"],
      [this.amount, "bigint", "long"],
    ];
  }

  constructor(params: { users: number; months: number; store_product?: string; store_quantity?: number; currency: string; amount: bigint }) {
    super();
    this.users = params.users;
    this.months = params.months;
    this.store_product = params.store_product;
    this.store_quantity = params.store_quantity;
    this.currency = params.currency;
    this.amount = params.amount;
  }
}

/** Contains info about a [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links). */
export class payments_CheckedGiftCode_ extends _payments_CheckedGiftCode_ {
  /** Whether this giftcode was created by a [giveaway](https://core.telegram.org/api/giveaways). */
  via_giveaway?: true;
  /** The peer that created the gift code. */
  from_id?: enums.Peer;
  /** Message ID of the giveaway in the channel specified in `from_id`. */
  giveaway_msg_id?: number;
  /** The destination user of the gift. */
  to_id?: bigint;
  /** Creation date of the gift code. */
  date: number;
  /** Duration in months of the gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription. */
  months: number;
  /** When was the giftcode imported, if it was imported. */
  used_date?: number;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x284A1096;
  }

  static get [name](): string {
    return "payments.checkedGiftCode"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["via_giveaway", "true", "flags.2?true"],
      ["from_id", _Peer_, "flags.4?Peer"],
      ["giveaway_msg_id", "number", "flags.3?int"],
      ["to_id", "bigint", "flags.0?long"],
      ["date", "number", "int"],
      ["months", "number", "int"],
      ["used_date", "number", "flags.1?int"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.via_giveaway ?? null, "true", "flags.2?true"],
      [this.from_id ?? null, _Peer_, "flags.4?Peer"],
      [this.giveaway_msg_id ?? null, "number", "flags.3?int"],
      [this.to_id ?? null, "bigint", "flags.0?long"],
      [this.date, "number", "int"],
      [this.months, "number", "int"],
      [this.used_date ?? null, "number", "flags.1?int"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { via_giveaway?: true; from_id?: enums.Peer; giveaway_msg_id?: number; to_id?: bigint; date: number; months: number; used_date?: number; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.via_giveaway = params.via_giveaway;
    this.from_id = params.from_id;
    this.giveaway_msg_id = params.giveaway_msg_id;
    this.to_id = params.to_id;
    this.date = params.date;
    this.months = params.months;
    this.used_date = params.used_date;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Contains info about an ongoing [giveaway](https://core.telegram.org/api/giveaways). */
export class payments_GiveawayInfo_ extends _payments_GiveawayInfo_ {
  /** The current user is participating in the giveaway. */
  participating?: true;
  /** If set, the giveaway has ended and the results are being prepared. */
  preparing_results?: true;
  /** When was the giveaway started */
  start_date: number;
  /** The current user can't participate in the giveaway, because they were already a member of the channel when the giveaway started, and the `only_new_subscribers` was set when starting the giveaway. */
  joined_too_early_date?: number;
  /** If set, the current user can't participate in the giveaway, because they are an administrator in one of the channels (ID specified in this flag) that created the giveaway. */
  admin_disallowed_chat_id?: bigint;
  /** If set, the current user can't participate in this giveaway, because their phone number is from the specified disallowed country (specified as a two-letter ISO 3166-1 alpha-2 country code). */
  disallowed_country?: string;

  protected get [id](): number {
    return 0x4367DAA0;
  }

  static get [name](): string {
    return "payments.giveawayInfo"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["participating", "true", "flags.0?true"],
      ["preparing_results", "true", "flags.3?true"],
      ["start_date", "number", "int"],
      ["joined_too_early_date", "number", "flags.1?int"],
      ["admin_disallowed_chat_id", "bigint", "flags.2?long"],
      ["disallowed_country", "string", "flags.4?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.participating ?? null, "true", "flags.0?true"],
      [this.preparing_results ?? null, "true", "flags.3?true"],
      [this.start_date, "number", "int"],
      [this.joined_too_early_date ?? null, "number", "flags.1?int"],
      [this.admin_disallowed_chat_id ?? null, "bigint", "flags.2?long"],
      [this.disallowed_country ?? null, "string", "flags.4?string"],
    ];
  }

  constructor(params: { participating?: true; preparing_results?: true; start_date: number; joined_too_early_date?: number; admin_disallowed_chat_id?: bigint; disallowed_country?: string }) {
    super();
    this.participating = params.participating;
    this.preparing_results = params.preparing_results;
    this.start_date = params.start_date;
    this.joined_too_early_date = params.joined_too_early_date;
    this.admin_disallowed_chat_id = params.admin_disallowed_chat_id;
    this.disallowed_country = params.disallowed_country;
  }
}

/** A [giveaway](https://core.telegram.org/api/giveaways) has ended. */
export class payments_GiveawayInfoResults_ extends _payments_GiveawayInfo_ {
  /** Whether we're one of the winners of this giveaway. */
  winner?: true;
  /** Whether the giveaway was canceled and was fully refunded. */
  refunded?: true;
  /** Start date of the giveaway */
  start_date: number;
  /** If we're one of the winners of this giveaway, contains the [Premium gift code](https://core.telegram.org/api/links#premium-giftcode-links), see [here »](https://core.telegram.org/api/giveaways) for more info on the full giveaway flow. */
  gift_code_slug?: string;
  /** End date of the giveaway. May be bigger than the end date specified in parameters of the giveaway. */
  finish_date: number;
  /** Number of winners in the giveaway */
  winners_count: number;
  /** Number of winners, which activated their [gift codes](https://core.telegram.org/api/links#premium-giftcode-links). */
  activated_count: number;

  protected get [id](): number {
    return 0x00CD5570;
  }

  static get [name](): string {
    return "payments.giveawayInfoResults"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["winner", "true", "flags.0?true"],
      ["refunded", "true", "flags.1?true"],
      ["start_date", "number", "int"],
      ["gift_code_slug", "string", "flags.0?string"],
      ["finish_date", "number", "int"],
      ["winners_count", "number", "int"],
      ["activated_count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.winner ?? null, "true", "flags.0?true"],
      [this.refunded ?? null, "true", "flags.1?true"],
      [this.start_date, "number", "int"],
      [this.gift_code_slug ?? null, "string", "flags.0?string"],
      [this.finish_date, "number", "int"],
      [this.winners_count, "number", "int"],
      [this.activated_count, "number", "int"],
    ];
  }

  constructor(params: { winner?: true; refunded?: true; start_date: number; gift_code_slug?: string; finish_date: number; winners_count: number; activated_count: number }) {
    super();
    this.winner = params.winner;
    this.refunded = params.refunded;
    this.start_date = params.start_date;
    this.gift_code_slug = params.gift_code_slug;
    this.finish_date = params.finish_date;
    this.winners_count = params.winners_count;
    this.activated_count = params.activated_count;
  }
}

/** Contains info about a [prepaid giveaway »](https://core.telegram.org/api/giveaways). */
export class PrepaidGiveaway_ extends _PrepaidGiveaway_ {
  /** Prepaid giveaway ID. */
  id: bigint;
  /** Duration in months of each gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription. */
  months: number;
  /** Number of given away [Telegram Premium](https://core.telegram.org/api/premium) subscriptions. */
  quantity: number;
  /** Payment date. */
  date: number;

  protected get [id](): number {
    return 0xB2539D54;
  }

  static get [name](): string {
    return "prepaidGiveaway"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["id", "bigint", "long"],
      ["months", "number", "int"],
      ["quantity", "number", "int"],
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.id, "bigint", "long"],
      [this.months, "number", "int"],
      [this.quantity, "number", "int"],
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { id: bigint; months: number; quantity: number; date: number }) {
    super();
    this.id = params.id;
    this.months = params.months;
    this.quantity = params.quantity;
    this.date = params.date;
  }
}

/** Info about one or more [boosts](https://core.telegram.org/api/boost) applied by a specific user. */
export class Boost_ extends _Boost_ {
  /** Whether this boost was applied because the channel [directly gifted a subscription to the user](https://core.telegram.org/api/giveaways). */
  gift?: true;
  /** Whether this boost was applied because the user was chosen in a [giveaway started by the channel](https://core.telegram.org/api/giveaways). */
  giveaway?: true;
  /** If set, the user hasn't yet invoked [payments.applyGiftCode](https://core.telegram.org/method/payments.applyGiftCode) to claim a subscription gifted [directly or in a giveaway by the channel](https://core.telegram.org/api/giveaways). */
  unclaimed?: true;
  /** Unique ID for this set of boosts. */
  id: string;
  /** ID of the user that applied the boost. */
  user_id?: bigint;
  /** The message ID of the [giveaway](https://core.telegram.org/api/giveaways) */
  giveaway_msg_id?: number;
  /** When was the boost applied */
  date: number;
  /** When does the boost expire */
  expires: number;
  /** The created Telegram Premium gift code, only set if either `gift` or `giveaway` are set AND it is either a gift code for the currently logged in user or if it was already claimed. */
  used_gift_slug?: string;
  /** If set, this boost counts as `multiplier` boosts, otherwise it counts as a single boost. */
  multiplier?: number;

  protected get [id](): number {
    return 0x2A1C8C71;
  }

  static get [name](): string {
    return "boost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["gift", "true", "flags.1?true"],
      ["giveaway", "true", "flags.2?true"],
      ["unclaimed", "true", "flags.3?true"],
      ["id", "string", "string"],
      ["user_id", "bigint", "flags.0?long"],
      ["giveaway_msg_id", "number", "flags.2?int"],
      ["date", "number", "int"],
      ["expires", "number", "int"],
      ["used_gift_slug", "string", "flags.4?string"],
      ["multiplier", "number", "flags.5?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.gift ?? null, "true", "flags.1?true"],
      [this.giveaway ?? null, "true", "flags.2?true"],
      [this.unclaimed ?? null, "true", "flags.3?true"],
      [this.id, "string", "string"],
      [this.user_id ?? null, "bigint", "flags.0?long"],
      [this.giveaway_msg_id ?? null, "number", "flags.2?int"],
      [this.date, "number", "int"],
      [this.expires, "number", "int"],
      [this.used_gift_slug ?? null, "string", "flags.4?string"],
      [this.multiplier ?? null, "number", "flags.5?int"],
    ];
  }

  constructor(params: { gift?: true; giveaway?: true; unclaimed?: true; id: string; user_id?: bigint; giveaway_msg_id?: number; date: number; expires: number; used_gift_slug?: string; multiplier?: number }) {
    super();
    this.gift = params.gift;
    this.giveaway = params.giveaway;
    this.unclaimed = params.unclaimed;
    this.id = params.id;
    this.user_id = params.user_id;
    this.giveaway_msg_id = params.giveaway_msg_id;
    this.date = params.date;
    this.expires = params.expires;
    this.used_gift_slug = params.used_gift_slug;
    this.multiplier = params.multiplier;
  }
}

/** List of [boosts](https://core.telegram.org/api/boost) that were applied to a peer by multiple users. */
export class premium_BoostsList_ extends _premium_BoostsList_ {
  /** Total number of results */
  count: number;
  /** [Boosts](https://core.telegram.org/api/boost) */
  boosts: Array<enums.Boost>;
  /** Offset that can be used for [pagination](https://core.telegram.org/api/offsets). */
  next_offset?: string;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x86F8613C;
  }

  static get [name](): string {
    return "premium.boostsList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["count", "number", "int"],
      ["boosts", [_Boost_], "Vector<Boost>"],
      ["next_offset", "string", "flags.0?string"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.count, "number", "int"],
      [this.boosts, [_Boost_], "Vector<Boost>"],
      [this.next_offset ?? null, "string", "flags.0?string"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; boosts: Array<enums.Boost>; next_offset?: string; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.boosts = params.boosts;
    this.next_offset = params.next_offset;
    this.users = params.users;
  }
}

/** Contains information about a single [boost slot »](https://core.telegram.org/api/boost). */
export class MyBoost_ extends _MyBoost_ {
  /** [Boost slot ID »](https://core.telegram.org/api/boost) */
  slot: number;
  /** If set, indicates this slot is currently occupied, i.e. we are [boosting](https://core.telegram.org/api/boost) this peer.  
  Note that we can assign multiple boost slots to the same peer. */
  peer?: enums.Peer;
  /** When (unixtime) we started boosting the `peer`, `0` otherwise. */
  date: number;
  /** Indicates the (unixtime) expiration date of the boost in `peer` (`0` if `peer` is not set). */
  expires: number;
  /** If `peer` is set, indicates the (unixtime) date after which this boost can be reassigned to another channel. */
  cooldown_until_date?: number;

  protected get [id](): number {
    return 0xC448415C;
  }

  static get [name](): string {
    return "myBoost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["slot", "number", "int"],
      ["peer", _Peer_, "flags.0?Peer"],
      ["date", "number", "int"],
      ["expires", "number", "int"],
      ["cooldown_until_date", "number", "flags.1?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.slot, "number", "int"],
      [this.peer ?? null, _Peer_, "flags.0?Peer"],
      [this.date, "number", "int"],
      [this.expires, "number", "int"],
      [this.cooldown_until_date ?? null, "number", "flags.1?int"],
    ];
  }

  constructor(params: { slot: number; peer?: enums.Peer; date: number; expires: number; cooldown_until_date?: number }) {
    super();
    this.slot = params.slot;
    this.peer = params.peer;
    this.date = params.date;
    this.expires = params.expires;
    this.cooldown_until_date = params.cooldown_until_date;
  }
}

/** A list of peers we are currently [boosting](https://core.telegram.org/api/boost), and how many [boost slots](https://core.telegram.org/api/boost) we have left. */
export class premium_MyBoosts_ extends _premium_MyBoosts_ {
  /** Info about boosted peers and remaining boost slots. */
  my_boosts: Array<enums.MyBoost>;
  /** Referenced chats */
  chats: Array<enums.Chat>;
  /** Referenced users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x9AE228E2;
  }

  static get [name](): string {
    return "premium.myBoosts"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["my_boosts", [_MyBoost_], "Vector<MyBoost>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.my_boosts, [_MyBoost_], "Vector<MyBoost>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { my_boosts: Array<enums.MyBoost>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.my_boosts = params.my_boosts;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Contains info about the current [boost status](https://core.telegram.org/api/boost) of a peer. */
export class premium_BoostsStatus_ extends _premium_BoostsStatus_ {
  /** Whether we're currently boosting this channel, `my_boost_slots` will also be set. */
  my_boost?: true;
  /** The current boost level of the channel. */
  level: number;
  /** The number of boosts acquired so far in the current level. */
  current_level_boosts: number;
  /** Total number of boosts acquired so far. */
  boosts: number;
  /** The number of boosts acquired from created Telegram Premium [gift codes](https://core.telegram.org/api/giveaways) and [giveaways](https://core.telegram.org/api/giveaways); only returned to channel admins. */
  gift_boosts?: number;
  /** Total number of boosts needed to reach the next level; if absent, the next level isn't available. */
  next_level_boosts?: number;
  /** Only returned to channel admins: contains the approximated number of Premium users subscribed to the channel, related to the total number of subscribers. */
  premium_audience?: enums.StatsPercentValue;
  /** [Boost deep link »](https://core.telegram.org/api/links#boost-links) that can be used to boost the chat. */
  boost_url: string;
  /** A list of prepaid [giveaways](https://core.telegram.org/api/giveaways) available for the chat; only returned to channel admins. */
  prepaid_giveaways?: Array<enums.PrepaidGiveaway>;
  /** Indicates which of our [boost slots](https://core.telegram.org/api/boost) we've assigned to this peer (populated if `my_boost` is set). */
  my_boost_slots?: Array<number>;

  protected get [id](): number {
    return 0x4959427A;
  }

  static get [name](): string {
    return "premium.boostsStatus"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["my_boost", "true", "flags.2?true"],
      ["level", "number", "int"],
      ["current_level_boosts", "number", "int"],
      ["boosts", "number", "int"],
      ["gift_boosts", "number", "flags.4?int"],
      ["next_level_boosts", "number", "flags.0?int"],
      ["premium_audience", _StatsPercentValue_, "flags.1?StatsPercentValue"],
      ["boost_url", "string", "string"],
      ["prepaid_giveaways", [_PrepaidGiveaway_], "flags.3?Vector<PrepaidGiveaway>"],
      ["my_boost_slots", ["number"], "flags.2?Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.my_boost ?? null, "true", "flags.2?true"],
      [this.level, "number", "int"],
      [this.current_level_boosts, "number", "int"],
      [this.boosts, "number", "int"],
      [this.gift_boosts ?? null, "number", "flags.4?int"],
      [this.next_level_boosts ?? null, "number", "flags.0?int"],
      [this.premium_audience ?? null, _StatsPercentValue_, "flags.1?StatsPercentValue"],
      [this.boost_url, "string", "string"],
      [this.prepaid_giveaways ?? null, [_PrepaidGiveaway_], "flags.3?Vector<PrepaidGiveaway>"],
      [this.my_boost_slots ?? null, ["number"], "flags.2?Vector<int>"],
    ];
  }

  constructor(params: { my_boost?: true; level: number; current_level_boosts: number; boosts: number; gift_boosts?: number; next_level_boosts?: number; premium_audience?: enums.StatsPercentValue; boost_url: string; prepaid_giveaways?: Array<enums.PrepaidGiveaway>; my_boost_slots?: Array<number> }) {
    super();
    this.my_boost = params.my_boost;
    this.level = params.level;
    this.current_level_boosts = params.current_level_boosts;
    this.boosts = params.boosts;
    this.gift_boosts = params.gift_boosts;
    this.next_level_boosts = params.next_level_boosts;
    this.premium_audience = params.premium_audience;
    this.boost_url = params.boost_url;
    this.prepaid_giveaways = params.prepaid_giveaways;
    this.my_boost_slots = params.my_boost_slots;
  }
}

/** Contains info about the original poster of a reposted story. */
export class StoryFwdHeader_ extends _StoryFwdHeader_ {
  /** Whether the story media was modified before reposting it (for example by overlaying a round video with a reaction). */
  modified?: true;
  /** Peer that originally posted the story; will be empty for stories forwarded from a user with forwards privacy enabled, in which case `from_name` will be set, instead. */
  from?: enums.Peer;
  /** Will be set for stories forwarded from a user with forwards privacy enabled, in which case `from` will also be empty. */
  from_name?: string;
  /** , contains the story ID */
  story_id?: number;

  protected get [id](): number {
    return 0xB826E150;
  }

  static get [name](): string {
    return "storyFwdHeader"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["modified", "true", "flags.3?true"],
      ["from", _Peer_, "flags.0?Peer"],
      ["from_name", "string", "flags.1?string"],
      ["story_id", "number", "flags.2?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.modified ?? null, "true", "flags.3?true"],
      [this.from ?? null, _Peer_, "flags.0?Peer"],
      [this.from_name ?? null, "string", "flags.1?string"],
      [this.story_id ?? null, "number", "flags.2?int"],
    ];
  }

  constructor(params?: { modified?: true; from?: enums.Peer; from_name?: string; story_id?: number }) {
    super();
    this.modified = params?.modified;
    this.from = params?.from;
    this.from_name = params?.from_name;
    this.story_id = params?.story_id;
  }
}

/** Interaction counters for a message. */
export class PostInteractionCountersMessage_ extends _PostInteractionCounters_ {
  /** Message ID */
  msg_id: number;
  /** Number of views */
  views: number;
  /** Number of forwards to public channels */
  forwards: number;
  /** Number of reactions */
  reactions: number;

  protected get [id](): number {
    return 0xE7058E7F;
  }

  static get [name](): string {
    return "postInteractionCountersMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["msg_id", "number", "int"],
      ["views", "number", "int"],
      ["forwards", "number", "int"],
      ["reactions", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.msg_id, "number", "int"],
      [this.views, "number", "int"],
      [this.forwards, "number", "int"],
      [this.reactions, "number", "int"],
    ];
  }

  constructor(params: { msg_id: number; views: number; forwards: number; reactions: number }) {
    super();
    this.msg_id = params.msg_id;
    this.views = params.views;
    this.forwards = params.forwards;
    this.reactions = params.reactions;
  }
}

/** Interaction counters for a story. */
export class PostInteractionCountersStory_ extends _PostInteractionCounters_ {
  /** Story ID */
  story_id: number;
  /** Number of views */
  views: number;
  /** Number of forwards and reposts to public chats and channels */
  forwards: number;
  /** Number of reactions */
  reactions: number;

  protected get [id](): number {
    return 0x8A480E27;
  }

  static get [name](): string {
    return "postInteractionCountersStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["story_id", "number", "int"],
      ["views", "number", "int"],
      ["forwards", "number", "int"],
      ["reactions", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.story_id, "number", "int"],
      [this.views, "number", "int"],
      [this.forwards, "number", "int"],
      [this.reactions, "number", "int"],
    ];
  }

  constructor(params: { story_id: number; views: number; forwards: number; reactions: number }) {
    super();
    this.story_id = params.story_id;
    this.views = params.views;
    this.forwards = params.forwards;
    this.reactions = params.reactions;
  }
}

/** Contains [statistics](https://core.telegram.org/api/stats) about a [story](https://core.telegram.org/api/stories). */
export class stats_StoryStats_ extends _stats_StoryStats_ {
  /** A graph containing the number of story views and shares */
  views_graph: enums.StatsGraph;
  /** A bar graph containing the number of story reactions categorized by "emotion" (i.e. Positive, Negative, Other, etc...) */
  reactions_by_emotion_graph: enums.StatsGraph;

  protected get [id](): number {
    return 0x50CD067C;
  }

  static get [name](): string {
    return "stats.storyStats"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["views_graph", _StatsGraph_, "StatsGraph"],
      ["reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.views_graph, _StatsGraph_, "StatsGraph"],
      [this.reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
    ];
  }

  constructor(params: { views_graph: enums.StatsGraph; reactions_by_emotion_graph: enums.StatsGraph }) {
    super();
    this.views_graph = params.views_graph;
    this.reactions_by_emotion_graph = params.reactions_by_emotion_graph;
  }
}

/** Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a message. */
export class PublicForwardMessage_ extends _PublicForward_ {
  /** Info about the message with the reposted story. */
  message: enums.Message;

  protected get [id](): number {
    return 0x01F2BF4A;
  }

  static get [name](): string {
    return "publicForwardMessage"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a repost by a public channel. */
export class PublicForwardStory_ extends _PublicForward_ {
  /** The channel that reposted the story. */
  peer: enums.Peer;
  /** The reposted story (may be different from the original story). */
  story: enums.StoryItem;

  protected get [id](): number {
    return 0xEDF3ADD0;
  }

  static get [name](): string {
    return "publicForwardStory"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer", _Peer_, "Peer"],
      ["story", _StoryItem_, "StoryItem"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer, _Peer_, "Peer"],
      [this.story, _StoryItem_, "StoryItem"],
    ];
  }

  constructor(params: { peer: enums.Peer; story: enums.StoryItem }) {
    super();
    this.peer = params.peer;
    this.story = params.story;
  }
}

/** Contains info about the forwards of a [story](https://core.telegram.org/api/stories) as a message to public chats and reposts by public channels. */
export class stats_PublicForwards_ extends _stats_PublicForwards_ {
  /** Total number of results */
  count: number;
  /** Info about the forwards of a story. */
  forwards: Array<enums.PublicForward>;
  /** Offset used for [pagination](https://core.telegram.org/api/offsets). */
  next_offset?: string;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x93037E20;
  }

  static get [name](): string {
    return "stats.publicForwards"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["count", "number", "int"],
      ["forwards", [_PublicForward_], "Vector<PublicForward>"],
      ["next_offset", "string", "flags.0?string"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.count, "number", "int"],
      [this.forwards, [_PublicForward_], "Vector<PublicForward>"],
      [this.next_offset ?? null, "string", "flags.0?string"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; forwards: Array<enums.PublicForward>; next_offset?: string; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.forwards = params.forwards;
    this.next_offset = params.next_offset;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Represents a [color palette »](https://core.telegram.org/api/colors). */
export class PeerColor_ extends _PeerColor_ {
  /** [Color palette ID, see here »](https://core.telegram.org/api/colors) for more info; if not set, the default palette should be used. */
  color?: number;
  /** Optional [custom emoji ID](https://core.telegram.org/api/custom-emoji) used to generate the pattern. */
  background_emoji_id?: bigint;

  protected get [id](): number {
    return 0xB54B5ACF;
  }

  static get [name](): string {
    return "peerColor"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["color", "number", "flags.0?int"],
      ["background_emoji_id", "bigint", "flags.1?long"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.color ?? null, "number", "flags.0?int"],
      [this.background_emoji_id ?? null, "bigint", "flags.1?long"],
    ];
  }

  constructor(params?: { color?: number; background_emoji_id?: bigint }) {
    super();
    this.color = params?.color;
    this.background_emoji_id = params?.background_emoji_id;
  }
}

/** Represents a [color palette that can be used in message accents »](https://core.telegram.org/api/colors). */
export class help_PeerColorSet_ extends _help_PeerColorSet_ {
  /** A list of 1-3 colors in RGB format, describing the accent color. */
  colors: Array<number>;

  protected get [id](): number {
    return 0x26219A58;
  }

  static get [name](): string {
    return "help.peerColorSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["colors", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.colors, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { colors: Array<number> }) {
    super();
    this.colors = params.colors;
  }
}

/** Represents a [color palette that can be used in profile pages »](https://core.telegram.org/api/colors). */
export class help_PeerColorProfileSet_ extends _help_PeerColorSet_ {
  /** A list of 1-2 colors in RGB format, shown in the color palette settings to describe the current palette. */
  palette_colors: Array<number>;
  /** A list of 1-2 colors in RGB format describing the colors used to generate the actual background used in the profile page. */
  bg_colors: Array<number>;
  /** A list of 2 colors in RGB format describing the colors of the gradient used for the unread active story indicator around the profile photo. */
  story_colors: Array<number>;

  protected get [id](): number {
    return 0x767D61EB;
  }

  static get [name](): string {
    return "help.peerColorProfileSet"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["palette_colors", ["number"], "Vector<int>"],
      ["bg_colors", ["number"], "Vector<int>"],
      ["story_colors", ["number"], "Vector<int>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.palette_colors, ["number"], "Vector<int>"],
      [this.bg_colors, ["number"], "Vector<int>"],
      [this.story_colors, ["number"], "Vector<int>"],
    ];
  }

  constructor(params: { palette_colors: Array<number>; bg_colors: Array<number>; story_colors: Array<number> }) {
    super();
    this.palette_colors = params.palette_colors;
    this.bg_colors = params.bg_colors;
    this.story_colors = params.story_colors;
  }
}

/** Contains info about a [color palette »](https://core.telegram.org/api/colors). */
export class help_PeerColorOption_ extends _help_PeerColorOption_ {
  /** Whether this palette should not be displayed as an option to the user when choosing a palette to apply to profile pages or message accents. */
  hidden?: true;
  /** Palette ID. */
  color_id: number;
  /** Light mode palette.  
  Will be empty for IDs `0` to `6` inclusive, in which case a palette containing a single color from the following colors should be used: red, orange, violet, green, cyan, blue, pink for indexes 0 to 6. */
  colors?: enums.help.PeerColorSet;
  /** Dark mode palette. Optional, defaults to the palette in `colors` (or the autogenerated palette for IDs `0` to `6`) if absent. */
  dark_colors?: enums.help.PeerColorSet;
  /** Channels can use this palette only after reaching at least the [boost level](https://core.telegram.org/api/boost) specified in this field. */
  channel_min_level?: number;
  group_min_level?: number;

  protected get [id](): number {
    return 0xADEC6EBE;
  }

  static get [name](): string {
    return "help.peerColorOption"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["hidden", "true", "flags.0?true"],
      ["color_id", "number", "int"],
      ["colors", _help_PeerColorSet_, "flags.1?help.PeerColorSet"],
      ["dark_colors", _help_PeerColorSet_, "flags.2?help.PeerColorSet"],
      ["channel_min_level", "number", "flags.3?int"],
      ["group_min_level", "number", "flags.4?int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.hidden ?? null, "true", "flags.0?true"],
      [this.color_id, "number", "int"],
      [this.colors ?? null, _help_PeerColorSet_, "flags.1?help.PeerColorSet"],
      [this.dark_colors ?? null, _help_PeerColorSet_, "flags.2?help.PeerColorSet"],
      [this.channel_min_level ?? null, "number", "flags.3?int"],
      [this.group_min_level ?? null, "number", "flags.4?int"],
    ];
  }

  constructor(params: { hidden?: true; color_id: number; colors?: enums.help.PeerColorSet; dark_colors?: enums.help.PeerColorSet; channel_min_level?: number; group_min_level?: number }) {
    super();
    this.hidden = params.hidden;
    this.color_id = params.color_id;
    this.colors = params.colors;
    this.dark_colors = params.dark_colors;
    this.channel_min_level = params.channel_min_level;
    this.group_min_level = params.group_min_level;
  }
}

/** The list of color palettes has not changed. */
export class help_PeerColorsNotModified_ extends _help_PeerColors_ {
  protected get [id](): number {
    return 0x2BA1F5CE;
  }

  static get [name](): string {
    return "help.peerColorsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

/** Contains info about multiple [color palettes »](https://core.telegram.org/api/colors). */
export class help_PeerColors_ extends _help_PeerColors_ {
  /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
  hash: number;
  /** Usable [color palettes](https://core.telegram.org/api/colors). */
  colors: Array<enums.help.PeerColorOption>;

  protected get [id](): number {
    return 0x00F8ED08;
  }

  static get [name](): string {
    return "help.peerColors"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["hash", "number", "int"],
      ["colors", [_help_PeerColorOption_], "Vector<help.PeerColorOption>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.hash, "number", "int"],
      [this.colors, [_help_PeerColorOption_], "Vector<help.PeerColorOption>"],
    ];
  }

  constructor(params: { hash: number; colors: Array<enums.help.PeerColorOption> }) {
    super();
    this.hash = params.hash;
    this.colors = params.colors;
  }
}

/** How a certain peer reacted to a story */
export class StoryReaction_ extends _StoryReaction_ {
  /** The peer */
  peer_id: enums.Peer;
  /** Reaction date */
  date: number;
  /** The reaction */
  reaction: enums.Reaction;

  protected get [id](): number {
    return 0x6090D6D5;
  }

  static get [name](): string {
    return "storyReaction"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer_id", _Peer_, "Peer"],
      ["date", "number", "int"],
      ["reaction", _Reaction_, "Reaction"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer_id, _Peer_, "Peer"],
      [this.date, "number", "int"],
      [this.reaction, _Reaction_, "Reaction"],
    ];
  }

  constructor(params: { peer_id: enums.Peer; date: number; reaction: enums.Reaction }) {
    super();
    this.peer_id = params.peer_id;
    this.date = params.date;
    this.reaction = params.reaction;
  }
}

/** A certain peer has forwarded the story as a message to a public chat or channel. */
export class StoryReactionPublicForward_ extends _StoryReaction_ {
  /** The message with the forwarded story. */
  message: enums.Message;

  protected get [id](): number {
    return 0xBBAB2643;
  }

  static get [name](): string {
    return "storyReactionPublicForward"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["message", _Message_, "Message"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.message, _Message_, "Message"],
    ];
  }

  constructor(params: { message: enums.Message }) {
    super();
    this.message = params.message;
  }
}

/** A certain peer has reposted the story. */
export class StoryReactionPublicRepost_ extends _StoryReaction_ {
  /** The peer that reposted the story. */
  peer_id: enums.Peer;
  /** The reposted story. */
  story: enums.StoryItem;

  protected get [id](): number {
    return 0xCFCD0F13;
  }

  static get [name](): string {
    return "storyReactionPublicRepost"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["peer_id", _Peer_, "Peer"],
      ["story", _StoryItem_, "StoryItem"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.peer_id, _Peer_, "Peer"],
      [this.story, _StoryItem_, "StoryItem"],
    ];
  }

  constructor(params: { peer_id: enums.Peer; story: enums.StoryItem }) {
    super();
    this.peer_id = params.peer_id;
    this.story = params.story;
  }
}

/** List of peers that reacted to or intercated with a specific [story](https://core.telegram.org/api/stories) */
export class stories_StoryReactionsList_ extends _stories_StoryReactionsList_ {
  /** Total number of reactions matching query */
  count: number;
  /** List of peers that reacted to or interacted with a specific story */
  reactions: Array<enums.StoryReaction>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;
  /** If set, indicates the next offset to use to load more results by invoking [stories.getStoryReactionsList](https://core.telegram.org/method/stories.getStoryReactionsList). */
  next_offset?: string;

  protected get [id](): number {
    return 0xAA5F789C;
  }

  static get [name](): string {
    return "stories.storyReactionsList"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["count", "number", "int"],
      ["reactions", [_StoryReaction_], "Vector<StoryReaction>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
      ["next_offset", "string", "flags.0?string"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.count, "number", "int"],
      [this.reactions, [_StoryReaction_], "Vector<StoryReaction>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
      [this.next_offset ?? null, "string", "flags.0?string"],
    ];
  }

  constructor(params: { count: number; reactions: Array<enums.StoryReaction>; chats: Array<enums.Chat>; users: Array<enums.User>; next_offset?: string }) {
    super();
    this.count = params.count;
    this.reactions = params.reactions;
    this.chats = params.chats;
    this.users = params.users;
    this.next_offset = params.next_offset;
  }
}

/** Represents a [saved dialog »](https://core.telegram.org/api/saved-messages). */
export class SavedDialog_ extends _SavedDialog_ {
  /** Is the dialog pinned */
  pinned?: true;
  /** The dialog */
  peer: enums.Peer;
  /** The latest message ID */
  top_message: number;

  protected get [id](): number {
    return 0xBD87CB6C;
  }

  static get [name](): string {
    return "savedDialog"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["pinned", "true", "flags.2?true"],
      ["peer", _Peer_, "Peer"],
      ["top_message", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.pinned ?? null, "true", "flags.2?true"],
      [this.peer, _Peer_, "Peer"],
      [this.top_message, "number", "int"],
    ];
  }

  constructor(params: { pinned?: true; peer: enums.Peer; top_message: number }) {
    super();
    this.pinned = params.pinned;
    this.peer = params.peer;
    this.top_message = params.top_message;
  }
}

/** Represents some [saved message dialogs »](https://core.telegram.org/api/saved-messages). */
export class messages_SavedDialogs_ extends _messages_SavedDialogs_ {
  /** [Saved message dialogs »](https://core.telegram.org/api/saved-messages). */
  dialogs: Array<enums.SavedDialog>;
  /** List of last messages from each saved dialog */
  messages: Array<enums.Message>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0xF83AE221;
  }

  static get [name](): string {
    return "messages.savedDialogs"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["dialogs", [_SavedDialog_], "Vector<SavedDialog>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.dialogs, [_SavedDialog_], "Vector<SavedDialog>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { dialogs: Array<enums.SavedDialog>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.dialogs = params.dialogs;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** Incomplete list of [saved message dialogs »](https://core.telegram.org/api/saved-messages) with messages and auxiliary data. */
export class messages_SavedDialogsSlice_ extends _messages_SavedDialogs_ {
  /** Total number of saved message dialogs */
  count: number;
  /** List of saved message dialogs */
  dialogs: Array<enums.SavedDialog>;
  /** List of last messages from dialogs */
  messages: Array<enums.Message>;
  /** Mentioned chats */
  chats: Array<enums.Chat>;
  /** Mentioned users */
  users: Array<enums.User>;

  protected get [id](): number {
    return 0x44BA9DD9;
  }

  static get [name](): string {
    return "messages.savedDialogsSlice"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
      ["dialogs", [_SavedDialog_], "Vector<SavedDialog>"],
      ["messages", [_Message_], "Vector<Message>"],
      ["chats", [_Chat_], "Vector<Chat>"],
      ["users", [_User_], "Vector<User>"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
      [this.dialogs, [_SavedDialog_], "Vector<SavedDialog>"],
      [this.messages, [_Message_], "Vector<Message>"],
      [this.chats, [_Chat_], "Vector<Chat>"],
      [this.users, [_User_], "Vector<User>"],
    ];
  }

  constructor(params: { count: number; dialogs: Array<enums.SavedDialog>; messages: Array<enums.Message>; chats: Array<enums.Chat>; users: Array<enums.User> }) {
    super();
    this.count = params.count;
    this.dialogs = params.dialogs;
    this.messages = params.messages;
    this.chats = params.chats;
    this.users = params.users;
  }
}

/** The saved dialogs haven't changed */
export class messages_SavedDialogsNotModified_ extends _messages_SavedDialogs_ {
  /** Number of [saved dialogs](https://core.telegram.org/api/saved-messages) found server-side by the query */
  count: number;

  protected get [id](): number {
    return 0xC01F6FE8;
  }

  static get [name](): string {
    return "messages.savedDialogsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { count: number }) {
    super();
    this.count = params.count;
  }
}

export class SavedReactionTag_ extends _SavedReactionTag_ {
  reaction: enums.Reaction;
  title?: string;
  count: number;

  protected get [id](): number {
    return 0xCB6FF828;
  }

  static get [name](): string {
    return "savedReactionTag"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["flags", flags, "#"],
      ["reaction", _Reaction_, "Reaction"],
      ["title", "string", "flags.0?string"],
      ["count", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      ["flags", flags, "#"],
      [this.reaction, _Reaction_, "Reaction"],
      [this.title ?? null, "string", "flags.0?string"],
      [this.count, "number", "int"],
    ];
  }

  constructor(params: { reaction: enums.Reaction; title?: string; count: number }) {
    super();
    this.reaction = params.reaction;
    this.title = params.title;
    this.count = params.count;
  }
}

export class messages_SavedReactionTagsNotModified_ extends _messages_SavedReactionTags_ {
  protected get [id](): number {
    return 0x889B59EF;
  }

  static get [name](): string {
    return "messages.savedReactionTagsNotModified"
  }

  static get [paramDesc](): ParamDesc {
    return [];
  }

  protected get [params](): Params {
    return [];
  }

  constructor() {
    super();
  }
}

export class messages_SavedReactionTags_ extends _messages_SavedReactionTags_ {
  tags: Array<enums.SavedReactionTag>;
  hash: bigint;

  protected get [id](): number {
    return 0x3259950A;
  }

  static get [name](): string {
    return "messages.savedReactionTags"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["tags", [_SavedReactionTag_], "Vector<SavedReactionTag>"],
      ["hash", "bigint", "long"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.tags, [_SavedReactionTag_], "Vector<SavedReactionTag>"],
      [this.hash, "bigint", "long"],
    ];
  }

  constructor(params: { tags: Array<enums.SavedReactionTag>; hash: bigint }) {
    super();
    this.tags = params.tags;
    this.hash = params.hash;
  }
}

export class OutboxReadDate_ extends _OutboxReadDate_ {
  date: number;

  protected get [id](): number {
    return 0x3BB842AC;
  }

  static get [name](): string {
    return "outboxReadDate"
  }

  static get [paramDesc](): ParamDesc {
    return [
      ["date", "number", "int"],
    ];
  }

  protected get [params](): Params {
    return [
      [this.date, "number", "int"],
    ];
  }

  constructor(params: { date: number }) {
    super();
    this.date = params.date;
  }
}

export const types = {
  Type: Type_,
  TypeX: TypeX_,
  _ResPQ: _ResPQ_,
  _P_Q_inner_data: _P_Q_inner_data_,
  _Server_DH_Params: _Server_DH_Params_,
  _Server_DH_inner_data: _Server_DH_inner_data_,
  _Client_DH_Inner_Data: _Client_DH_Inner_Data_,
  _Set_client_DH_params_answer: _Set_client_DH_params_answer_,
  _BindAuthKeyInner: _BindAuthKeyInner_,
  _RpcError: _RpcError_,
  _RpcDropAnswer: _RpcDropAnswer_,
  _FutureSalt: _FutureSalt_,
  _FutureSalts: _FutureSalts_,
  _Pong: _Pong_,
  _DestroySessionRes: _DestroySessionRes_,
  _NewSession: _NewSession_,
  _Object: _Object_,
  _MsgsAck: _MsgsAck_,
  _BadMsgNotification: _BadMsgNotification_,
  _MsgResendReq: _MsgResendReq_,
  _MsgsStateReq: _MsgsStateReq_,
  _MsgsStateInfo: _MsgsStateInfo_,
  _MsgsAllInfo: _MsgsAllInfo_,
  _MsgDetailedInfo: _MsgDetailedInfo_,
  _DestroyAuthKeyRes: _DestroyAuthKeyRes_,
  _HttpWait: _HttpWait_,
  _True: _True_,
  _Error: _Error_,
  _Null: _Null_,
  _InputPeer: _InputPeer_,
  _InputUser: _InputUser_,
  _InputContact: _InputContact_,
  _InputFile: _InputFile_,
  _InputMedia: _InputMedia_,
  _InputChatPhoto: _InputChatPhoto_,
  _InputGeoPoint: _InputGeoPoint_,
  _InputPhoto: _InputPhoto_,
  _InputFileLocation: _InputFileLocation_,
  _Peer: _Peer_,
  _storage_FileType: _storage_FileType_,
  _User: _User_,
  _UserProfilePhoto: _UserProfilePhoto_,
  _UserStatus: _UserStatus_,
  _Chat: _Chat_,
  _ChatFull: _ChatFull_,
  _ChatParticipant: _ChatParticipant_,
  _ChatParticipants: _ChatParticipants_,
  _ChatPhoto: _ChatPhoto_,
  _Message: _Message_,
  _MessageMedia: _MessageMedia_,
  _MessageAction: _MessageAction_,
  _Dialog: _Dialog_,
  _Photo: _Photo_,
  _PhotoSize: _PhotoSize_,
  _GeoPoint: _GeoPoint_,
  _auth_SentCode: _auth_SentCode_,
  _auth_Authorization: _auth_Authorization_,
  _auth_ExportedAuthorization: _auth_ExportedAuthorization_,
  _InputNotifyPeer: _InputNotifyPeer_,
  _InputPeerNotifySettings: _InputPeerNotifySettings_,
  _PeerNotifySettings: _PeerNotifySettings_,
  _PeerSettings: _PeerSettings_,
  _WallPaper: _WallPaper_,
  _ReportReason: _ReportReason_,
  _UserFull: _UserFull_,
  _Contact: _Contact_,
  _ImportedContact: _ImportedContact_,
  _ContactStatus: _ContactStatus_,
  _contacts_Contacts: _contacts_Contacts_,
  _contacts_ImportedContacts: _contacts_ImportedContacts_,
  _contacts_Blocked: _contacts_Blocked_,
  _messages_Dialogs: _messages_Dialogs_,
  _messages_Messages: _messages_Messages_,
  _messages_Chats: _messages_Chats_,
  _messages_ChatFull: _messages_ChatFull_,
  _messages_AffectedHistory: _messages_AffectedHistory_,
  _MessagesFilter: _MessagesFilter_,
  _Update: _Update_,
  _updates_State: _updates_State_,
  _updates_Difference: _updates_Difference_,
  _Updates: _Updates_,
  _photos_Photos: _photos_Photos_,
  _photos_Photo: _photos_Photo_,
  _upload_File: _upload_File_,
  _DcOption: _DcOption_,
  _Config: _Config_,
  _NearestDc: _NearestDc_,
  _help_AppUpdate: _help_AppUpdate_,
  _help_InviteText: _help_InviteText_,
  _EncryptedChat: _EncryptedChat_,
  _InputEncryptedChat: _InputEncryptedChat_,
  _EncryptedFile: _EncryptedFile_,
  _InputEncryptedFile: _InputEncryptedFile_,
  _EncryptedMessage: _EncryptedMessage_,
  _messages_DhConfig: _messages_DhConfig_,
  _messages_SentEncryptedMessage: _messages_SentEncryptedMessage_,
  _InputDocument: _InputDocument_,
  _Document: _Document_,
  _help_Support: _help_Support_,
  _NotifyPeer: _NotifyPeer_,
  _SendMessageAction: _SendMessageAction_,
  _contacts_Found: _contacts_Found_,
  _InputPrivacyKey: _InputPrivacyKey_,
  _PrivacyKey: _PrivacyKey_,
  _InputPrivacyRule: _InputPrivacyRule_,
  _PrivacyRule: _PrivacyRule_,
  _account_PrivacyRules: _account_PrivacyRules_,
  _AccountDaysTTL: _AccountDaysTTL_,
  _DocumentAttribute: _DocumentAttribute_,
  _messages_Stickers: _messages_Stickers_,
  _StickerPack: _StickerPack_,
  _messages_AllStickers: _messages_AllStickers_,
  _messages_AffectedMessages: _messages_AffectedMessages_,
  _WebPage: _WebPage_,
  _Authorization: _Authorization_,
  _account_Authorizations: _account_Authorizations_,
  _account_Password: _account_Password_,
  _account_PasswordSettings: _account_PasswordSettings_,
  _account_PasswordInputSettings: _account_PasswordInputSettings_,
  _auth_PasswordRecovery: _auth_PasswordRecovery_,
  _ReceivedNotifyMessage: _ReceivedNotifyMessage_,
  _ExportedChatInvite: _ExportedChatInvite_,
  _ChatInvite: _ChatInvite_,
  _InputStickerSet: _InputStickerSet_,
  _StickerSet: _StickerSet_,
  _messages_StickerSet: _messages_StickerSet_,
  _BotCommand: _BotCommand_,
  _BotInfo: _BotInfo_,
  _KeyboardButton: _KeyboardButton_,
  _KeyboardButtonRow: _KeyboardButtonRow_,
  _ReplyMarkup: _ReplyMarkup_,
  _MessageEntity: _MessageEntity_,
  _InputChannel: _InputChannel_,
  _contacts_ResolvedPeer: _contacts_ResolvedPeer_,
  _MessageRange: _MessageRange_,
  _updates_ChannelDifference: _updates_ChannelDifference_,
  _ChannelMessagesFilter: _ChannelMessagesFilter_,
  _ChannelParticipant: _ChannelParticipant_,
  _ChannelParticipantsFilter: _ChannelParticipantsFilter_,
  _channels_ChannelParticipants: _channels_ChannelParticipants_,
  _channels_ChannelParticipant: _channels_ChannelParticipant_,
  _help_TermsOfService: _help_TermsOfService_,
  _messages_SavedGifs: _messages_SavedGifs_,
  _InputBotInlineMessage: _InputBotInlineMessage_,
  _InputBotInlineResult: _InputBotInlineResult_,
  _BotInlineMessage: _BotInlineMessage_,
  _BotInlineResult: _BotInlineResult_,
  _messages_BotResults: _messages_BotResults_,
  _ExportedMessageLink: _ExportedMessageLink_,
  _MessageFwdHeader: _MessageFwdHeader_,
  _auth_CodeType: _auth_CodeType_,
  _auth_SentCodeType: _auth_SentCodeType_,
  _messages_BotCallbackAnswer: _messages_BotCallbackAnswer_,
  _messages_MessageEditData: _messages_MessageEditData_,
  _InputBotInlineMessageID: _InputBotInlineMessageID_,
  _InlineBotSwitchPM: _InlineBotSwitchPM_,
  _messages_PeerDialogs: _messages_PeerDialogs_,
  _TopPeer: _TopPeer_,
  _TopPeerCategory: _TopPeerCategory_,
  _TopPeerCategoryPeers: _TopPeerCategoryPeers_,
  _contacts_TopPeers: _contacts_TopPeers_,
  _DraftMessage: _DraftMessage_,
  _messages_FeaturedStickers: _messages_FeaturedStickers_,
  _messages_RecentStickers: _messages_RecentStickers_,
  _messages_ArchivedStickers: _messages_ArchivedStickers_,
  _messages_StickerSetInstallResult: _messages_StickerSetInstallResult_,
  _StickerSetCovered: _StickerSetCovered_,
  _MaskCoords: _MaskCoords_,
  _InputStickeredMedia: _InputStickeredMedia_,
  _Game: _Game_,
  _InputGame: _InputGame_,
  _HighScore: _HighScore_,
  _messages_HighScores: _messages_HighScores_,
  _RichText: _RichText_,
  _PageBlock: _PageBlock_,
  _PhoneCallDiscardReason: _PhoneCallDiscardReason_,
  _DataJSON: _DataJSON_,
  _LabeledPrice: _LabeledPrice_,
  _Invoice: _Invoice_,
  _PaymentCharge: _PaymentCharge_,
  _PostAddress: _PostAddress_,
  _PaymentRequestedInfo: _PaymentRequestedInfo_,
  _PaymentSavedCredentials: _PaymentSavedCredentials_,
  _WebDocument: _WebDocument_,
  _InputWebDocument: _InputWebDocument_,
  _InputWebFileLocation: _InputWebFileLocation_,
  _upload_WebFile: _upload_WebFile_,
  _payments_PaymentForm: _payments_PaymentForm_,
  _payments_ValidatedRequestedInfo: _payments_ValidatedRequestedInfo_,
  _payments_PaymentResult: _payments_PaymentResult_,
  _payments_PaymentReceipt: _payments_PaymentReceipt_,
  _payments_SavedInfo: _payments_SavedInfo_,
  _InputPaymentCredentials: _InputPaymentCredentials_,
  _account_TmpPassword: _account_TmpPassword_,
  _ShippingOption: _ShippingOption_,
  _InputStickerSetItem: _InputStickerSetItem_,
  _InputPhoneCall: _InputPhoneCall_,
  _PhoneCall: _PhoneCall_,
  _PhoneConnection: _PhoneConnection_,
  _PhoneCallProtocol: _PhoneCallProtocol_,
  _phone_PhoneCall: _phone_PhoneCall_,
  _upload_CdnFile: _upload_CdnFile_,
  _CdnPublicKey: _CdnPublicKey_,
  _CdnConfig: _CdnConfig_,
  _LangPackString: _LangPackString_,
  _LangPackDifference: _LangPackDifference_,
  _LangPackLanguage: _LangPackLanguage_,
  _ChannelAdminLogEventAction: _ChannelAdminLogEventAction_,
  _ChannelAdminLogEvent: _ChannelAdminLogEvent_,
  _channels_AdminLogResults: _channels_AdminLogResults_,
  _ChannelAdminLogEventsFilter: _ChannelAdminLogEventsFilter_,
  _PopularContact: _PopularContact_,
  _messages_FavedStickers: _messages_FavedStickers_,
  _RecentMeUrl: _RecentMeUrl_,
  _help_RecentMeUrls: _help_RecentMeUrls_,
  _InputSingleMedia: _InputSingleMedia_,
  _WebAuthorization: _WebAuthorization_,
  _account_WebAuthorizations: _account_WebAuthorizations_,
  _InputMessage: _InputMessage_,
  _InputDialogPeer: _InputDialogPeer_,
  _DialogPeer: _DialogPeer_,
  _messages_FoundStickerSets: _messages_FoundStickerSets_,
  _FileHash: _FileHash_,
  _InputClientProxy: _InputClientProxy_,
  _help_TermsOfServiceUpdate: _help_TermsOfServiceUpdate_,
  _InputSecureFile: _InputSecureFile_,
  _SecureFile: _SecureFile_,
  _SecureData: _SecureData_,
  _SecurePlainData: _SecurePlainData_,
  _SecureValueType: _SecureValueType_,
  _SecureValue: _SecureValue_,
  _InputSecureValue: _InputSecureValue_,
  _SecureValueHash: _SecureValueHash_,
  _SecureValueError: _SecureValueError_,
  _SecureCredentialsEncrypted: _SecureCredentialsEncrypted_,
  _account_AuthorizationForm: _account_AuthorizationForm_,
  _account_SentEmailCode: _account_SentEmailCode_,
  _help_DeepLinkInfo: _help_DeepLinkInfo_,
  _SavedContact: _SavedContact_,
  _account_Takeout: _account_Takeout_,
  _PasswordKdfAlgo: _PasswordKdfAlgo_,
  _SecurePasswordKdfAlgo: _SecurePasswordKdfAlgo_,
  _SecureSecretSettings: _SecureSecretSettings_,
  _InputCheckPasswordSRP: _InputCheckPasswordSRP_,
  _SecureRequiredType: _SecureRequiredType_,
  _help_PassportConfig: _help_PassportConfig_,
  _InputAppEvent: _InputAppEvent_,
  _JSONObjectValue: _JSONObjectValue_,
  _JSONValue: _JSONValue_,
  _PageTableCell: _PageTableCell_,
  _PageTableRow: _PageTableRow_,
  _PageCaption: _PageCaption_,
  _PageListItem: _PageListItem_,
  _PageListOrderedItem: _PageListOrderedItem_,
  _PageRelatedArticle: _PageRelatedArticle_,
  _Page: _Page_,
  _help_SupportName: _help_SupportName_,
  _help_UserInfo: _help_UserInfo_,
  _PollAnswer: _PollAnswer_,
  _Poll: _Poll_,
  _PollAnswerVoters: _PollAnswerVoters_,
  _PollResults: _PollResults_,
  _ChatOnlines: _ChatOnlines_,
  _StatsURL: _StatsURL_,
  _ChatAdminRights: _ChatAdminRights_,
  _ChatBannedRights: _ChatBannedRights_,
  _InputWallPaper: _InputWallPaper_,
  _account_WallPapers: _account_WallPapers_,
  _CodeSettings: _CodeSettings_,
  _WallPaperSettings: _WallPaperSettings_,
  _AutoDownloadSettings: _AutoDownloadSettings_,
  _account_AutoDownloadSettings: _account_AutoDownloadSettings_,
  _EmojiKeyword: _EmojiKeyword_,
  _EmojiKeywordsDifference: _EmojiKeywordsDifference_,
  _EmojiURL: _EmojiURL_,
  _EmojiLanguage: _EmojiLanguage_,
  _Folder: _Folder_,
  _InputFolderPeer: _InputFolderPeer_,
  _FolderPeer: _FolderPeer_,
  _messages_SearchCounter: _messages_SearchCounter_,
  _UrlAuthResult: _UrlAuthResult_,
  _ChannelLocation: _ChannelLocation_,
  _PeerLocated: _PeerLocated_,
  _RestrictionReason: _RestrictionReason_,
  _InputTheme: _InputTheme_,
  _Theme: _Theme_,
  _account_Themes: _account_Themes_,
  _auth_LoginToken: _auth_LoginToken_,
  _account_ContentSettings: _account_ContentSettings_,
  _messages_InactiveChats: _messages_InactiveChats_,
  _BaseTheme: _BaseTheme_,
  _InputThemeSettings: _InputThemeSettings_,
  _ThemeSettings: _ThemeSettings_,
  _WebPageAttribute: _WebPageAttribute_,
  _messages_VotesList: _messages_VotesList_,
  _BankCardOpenUrl: _BankCardOpenUrl_,
  _payments_BankCardData: _payments_BankCardData_,
  _DialogFilter: _DialogFilter_,
  _DialogFilterSuggested: _DialogFilterSuggested_,
  _StatsDateRangeDays: _StatsDateRangeDays_,
  _StatsAbsValueAndPrev: _StatsAbsValueAndPrev_,
  _StatsPercentValue: _StatsPercentValue_,
  _StatsGraph: _StatsGraph_,
  _stats_BroadcastStats: _stats_BroadcastStats_,
  _help_PromoData: _help_PromoData_,
  _VideoSize: _VideoSize_,
  _StatsGroupTopPoster: _StatsGroupTopPoster_,
  _StatsGroupTopAdmin: _StatsGroupTopAdmin_,
  _StatsGroupTopInviter: _StatsGroupTopInviter_,
  _stats_MegagroupStats: _stats_MegagroupStats_,
  _GlobalPrivacySettings: _GlobalPrivacySettings_,
  _help_CountryCode: _help_CountryCode_,
  _help_Country: _help_Country_,
  _help_CountriesList: _help_CountriesList_,
  _MessageViews: _MessageViews_,
  _messages_MessageViews: _messages_MessageViews_,
  _messages_DiscussionMessage: _messages_DiscussionMessage_,
  _MessageReplyHeader: _MessageReplyHeader_,
  _MessageReplies: _MessageReplies_,
  _PeerBlocked: _PeerBlocked_,
  _stats_MessageStats: _stats_MessageStats_,
  _GroupCall: _GroupCall_,
  _InputGroupCall: _InputGroupCall_,
  _GroupCallParticipant: _GroupCallParticipant_,
  _phone_GroupCall: _phone_GroupCall_,
  _phone_GroupParticipants: _phone_GroupParticipants_,
  _InlineQueryPeerType: _InlineQueryPeerType_,
  _messages_HistoryImport: _messages_HistoryImport_,
  _messages_HistoryImportParsed: _messages_HistoryImportParsed_,
  _messages_AffectedFoundMessages: _messages_AffectedFoundMessages_,
  _ChatInviteImporter: _ChatInviteImporter_,
  _messages_ExportedChatInvites: _messages_ExportedChatInvites_,
  _messages_ExportedChatInvite: _messages_ExportedChatInvite_,
  _messages_ChatInviteImporters: _messages_ChatInviteImporters_,
  _ChatAdminWithInvites: _ChatAdminWithInvites_,
  _messages_ChatAdminsWithInvites: _messages_ChatAdminsWithInvites_,
  _messages_CheckedHistoryImportPeer: _messages_CheckedHistoryImportPeer_,
  _phone_JoinAsPeers: _phone_JoinAsPeers_,
  _phone_ExportedGroupCallInvite: _phone_ExportedGroupCallInvite_,
  _GroupCallParticipantVideoSourceGroup: _GroupCallParticipantVideoSourceGroup_,
  _GroupCallParticipantVideo: _GroupCallParticipantVideo_,
  _stickers_SuggestedShortName: _stickers_SuggestedShortName_,
  _BotCommandScope: _BotCommandScope_,
  _account_ResetPasswordResult: _account_ResetPasswordResult_,
  _SponsoredMessage: _SponsoredMessage_,
  _messages_SponsoredMessages: _messages_SponsoredMessages_,
  _SearchResultsCalendarPeriod: _SearchResultsCalendarPeriod_,
  _messages_SearchResultsCalendar: _messages_SearchResultsCalendar_,
  _SearchResultsPosition: _SearchResultsPosition_,
  _messages_SearchResultsPositions: _messages_SearchResultsPositions_,
  _channels_SendAsPeers: _channels_SendAsPeers_,
  _users_UserFull: _users_UserFull_,
  _messages_PeerSettings: _messages_PeerSettings_,
  _auth_LoggedOut: _auth_LoggedOut_,
  _ReactionCount: _ReactionCount_,
  _MessageReactions: _MessageReactions_,
  _messages_MessageReactionsList: _messages_MessageReactionsList_,
  _AvailableReaction: _AvailableReaction_,
  _messages_AvailableReactions: _messages_AvailableReactions_,
  _MessagePeerReaction: _MessagePeerReaction_,
  _GroupCallStreamChannel: _GroupCallStreamChannel_,
  _phone_GroupCallStreamChannels: _phone_GroupCallStreamChannels_,
  _phone_GroupCallStreamRtmpUrl: _phone_GroupCallStreamRtmpUrl_,
  _AttachMenuBotIconColor: _AttachMenuBotIconColor_,
  _AttachMenuBotIcon: _AttachMenuBotIcon_,
  _AttachMenuBot: _AttachMenuBot_,
  _AttachMenuBots: _AttachMenuBots_,
  _AttachMenuBotsBot: _AttachMenuBotsBot_,
  _WebViewResult: _WebViewResult_,
  _SimpleWebViewResult: _SimpleWebViewResult_,
  _WebViewMessageSent: _WebViewMessageSent_,
  _BotMenuButton: _BotMenuButton_,
  _account_SavedRingtones: _account_SavedRingtones_,
  _NotificationSound: _NotificationSound_,
  _account_SavedRingtone: _account_SavedRingtone_,
  _AttachMenuPeerType: _AttachMenuPeerType_,
  _InputInvoice: _InputInvoice_,
  _payments_ExportedInvoice: _payments_ExportedInvoice_,
  _messages_TranscribedAudio: _messages_TranscribedAudio_,
  _help_PremiumPromo: _help_PremiumPromo_,
  _InputStorePaymentPurpose: _InputStorePaymentPurpose_,
  _PremiumGiftOption: _PremiumGiftOption_,
  _PaymentFormMethod: _PaymentFormMethod_,
  _EmojiStatus: _EmojiStatus_,
  _account_EmojiStatuses: _account_EmojiStatuses_,
  _Reaction: _Reaction_,
  _ChatReactions: _ChatReactions_,
  _messages_Reactions: _messages_Reactions_,
  _EmailVerifyPurpose: _EmailVerifyPurpose_,
  _EmailVerification: _EmailVerification_,
  _account_EmailVerified: _account_EmailVerified_,
  _PremiumSubscriptionOption: _PremiumSubscriptionOption_,
  _SendAsPeer: _SendAsPeer_,
  _MessageExtendedMedia: _MessageExtendedMedia_,
  _StickerKeyword: _StickerKeyword_,
  _Username: _Username_,
  _ForumTopic: _ForumTopic_,
  _messages_ForumTopics: _messages_ForumTopics_,
  _DefaultHistoryTTL: _DefaultHistoryTTL_,
  _ExportedContactToken: _ExportedContactToken_,
  _RequestPeerType: _RequestPeerType_,
  _EmojiList: _EmojiList_,
  _EmojiGroup: _EmojiGroup_,
  _messages_EmojiGroups: _messages_EmojiGroups_,
  _TextWithEntities: _TextWithEntities_,
  _messages_TranslatedText: _messages_TranslatedText_,
  _AutoSaveSettings: _AutoSaveSettings_,
  _AutoSaveException: _AutoSaveException_,
  _account_AutoSaveSettings: _account_AutoSaveSettings_,
  _help_AppConfig: _help_AppConfig_,
  _InputBotApp: _InputBotApp_,
  _BotApp: _BotApp_,
  _messages_BotApp: _messages_BotApp_,
  _AppWebViewResult: _AppWebViewResult_,
  _InlineBotWebView: _InlineBotWebView_,
  _ReadParticipantDate: _ReadParticipantDate_,
  _InputChatlist: _InputChatlist_,
  _ExportedChatlistInvite: _ExportedChatlistInvite_,
  _chatlists_ExportedChatlistInvite: _chatlists_ExportedChatlistInvite_,
  _chatlists_ExportedInvites: _chatlists_ExportedInvites_,
  _chatlists_ChatlistInvite: _chatlists_ChatlistInvite_,
  _chatlists_ChatlistUpdates: _chatlists_ChatlistUpdates_,
  _bots_BotInfo: _bots_BotInfo_,
  _MessagePeerVote: _MessagePeerVote_,
  _SponsoredWebPage: _SponsoredWebPage_,
  _StoryViews: _StoryViews_,
  _StoryItem: _StoryItem_,
  _stories_AllStories: _stories_AllStories_,
  _stories_Stories: _stories_Stories_,
  _StoryView: _StoryView_,
  _stories_StoryViewsList: _stories_StoryViewsList_,
  _stories_StoryViews: _stories_StoryViews_,
  _InputReplyTo: _InputReplyTo_,
  _ExportedStoryLink: _ExportedStoryLink_,
  _StoriesStealthMode: _StoriesStealthMode_,
  _MediaAreaCoordinates: _MediaAreaCoordinates_,
  _MediaArea: _MediaArea_,
  _PeerStories: _PeerStories_,
  _stories_PeerStories: _stories_PeerStories_,
  _messages_WebPage: _messages_WebPage_,
  _PremiumGiftCodeOption: _PremiumGiftCodeOption_,
  _payments_CheckedGiftCode: _payments_CheckedGiftCode_,
  _payments_GiveawayInfo: _payments_GiveawayInfo_,
  _PrepaidGiveaway: _PrepaidGiveaway_,
  _Boost: _Boost_,
  _premium_BoostsList: _premium_BoostsList_,
  _MyBoost: _MyBoost_,
  _premium_MyBoosts: _premium_MyBoosts_,
  _premium_BoostsStatus: _premium_BoostsStatus_,
  _StoryFwdHeader: _StoryFwdHeader_,
  _PostInteractionCounters: _PostInteractionCounters_,
  _stats_StoryStats: _stats_StoryStats_,
  _PublicForward: _PublicForward_,
  _stats_PublicForwards: _stats_PublicForwards_,
  _PeerColor: _PeerColor_,
  _help_PeerColorSet: _help_PeerColorSet_,
  _help_PeerColorOption: _help_PeerColorOption_,
  _help_PeerColors: _help_PeerColors_,
  _StoryReaction: _StoryReaction_,
  _stories_StoryReactionsList: _stories_StoryReactionsList_,
  _SavedDialog: _SavedDialog_,
  _messages_SavedDialogs: _messages_SavedDialogs_,
  _SavedReactionTag: _SavedReactionTag_,
  _messages_SavedReactionTags: _messages_SavedReactionTags_,
  _OutboxReadDate: _OutboxReadDate_,
  ResPQ: ResPQ_,
  P_q_inner_data_dc: P_q_inner_data_dc_,
  P_q_inner_data_temp_dc: P_q_inner_data_temp_dc_,
  Server_DH_params_ok: Server_DH_params_ok_,
  Server_DH_inner_data: Server_DH_inner_data_,
  Client_DH_inner_data: Client_DH_inner_data_,
  Dh_gen_ok: Dh_gen_ok_,
  Dh_gen_retry: Dh_gen_retry_,
  Dh_gen_fail: Dh_gen_fail_,
  Bind_auth_key_inner: Bind_auth_key_inner_,
  Rpc_error: Rpc_error_,
  Rpc_answer_unknown: Rpc_answer_unknown_,
  Rpc_answer_dropped_running: Rpc_answer_dropped_running_,
  Rpc_answer_dropped: Rpc_answer_dropped_,
  Future_salt: Future_salt_,
  Future_salts: Future_salts_,
  Pong: Pong_,
  Destroy_session_ok: Destroy_session_ok_,
  Destroy_session_none: Destroy_session_none_,
  New_session_created: New_session_created_,
  Gzip_packed: Gzip_packed_,
  Msgs_ack: Msgs_ack_,
  Bad_msg_notification: Bad_msg_notification_,
  Bad_server_salt: Bad_server_salt_,
  Msg_resend_req: Msg_resend_req_,
  Msgs_state_req: Msgs_state_req_,
  Msgs_state_info: Msgs_state_info_,
  Msgs_all_info: Msgs_all_info_,
  Msg_detailed_info: Msg_detailed_info_,
  Msg_new_detailed_info: Msg_new_detailed_info_,
  Destroy_auth_key_ok: Destroy_auth_key_ok_,
  Destroy_auth_key_none: Destroy_auth_key_none_,
  Destroy_auth_key_fail: Destroy_auth_key_fail_,
  Http_wait: Http_wait_,
  True: True_,
  Error: Error_,
  Null: Null_,
  InputPeerEmpty: InputPeerEmpty_,
  InputPeerSelf: InputPeerSelf_,
  InputPeerChat: InputPeerChat_,
  InputPeerUser: InputPeerUser_,
  InputPeerChannel: InputPeerChannel_,
  InputPeerUserFromMessage: InputPeerUserFromMessage_,
  InputPeerChannelFromMessage: InputPeerChannelFromMessage_,
  InputUserEmpty: InputUserEmpty_,
  InputUserSelf: InputUserSelf_,
  InputUser: InputUser_,
  InputUserFromMessage: InputUserFromMessage_,
  InputPhoneContact: InputPhoneContact_,
  InputFile: InputFile_,
  InputFileBig: InputFileBig_,
  InputMediaEmpty: InputMediaEmpty_,
  InputMediaUploadedPhoto: InputMediaUploadedPhoto_,
  InputMediaPhoto: InputMediaPhoto_,
  InputMediaGeoPoint: InputMediaGeoPoint_,
  InputMediaContact: InputMediaContact_,
  InputMediaUploadedDocument: InputMediaUploadedDocument_,
  InputMediaDocument: InputMediaDocument_,
  InputMediaVenue: InputMediaVenue_,
  InputMediaPhotoExternal: InputMediaPhotoExternal_,
  InputMediaDocumentExternal: InputMediaDocumentExternal_,
  InputMediaGame: InputMediaGame_,
  InputMediaInvoice: InputMediaInvoice_,
  InputMediaGeoLive: InputMediaGeoLive_,
  InputMediaPoll: InputMediaPoll_,
  InputMediaDice: InputMediaDice_,
  InputMediaStory: InputMediaStory_,
  InputMediaWebPage: InputMediaWebPage_,
  InputChatPhotoEmpty: InputChatPhotoEmpty_,
  InputChatUploadedPhoto: InputChatUploadedPhoto_,
  InputChatPhoto: InputChatPhoto_,
  InputGeoPointEmpty: InputGeoPointEmpty_,
  InputGeoPoint: InputGeoPoint_,
  InputPhotoEmpty: InputPhotoEmpty_,
  InputPhoto: InputPhoto_,
  InputFileLocation: InputFileLocation_,
  InputEncryptedFileLocation: InputEncryptedFileLocation_,
  InputDocumentFileLocation: InputDocumentFileLocation_,
  InputSecureFileLocation: InputSecureFileLocation_,
  InputTakeoutFileLocation: InputTakeoutFileLocation_,
  InputPhotoFileLocation: InputPhotoFileLocation_,
  InputPhotoLegacyFileLocation: InputPhotoLegacyFileLocation_,
  InputPeerPhotoFileLocation: InputPeerPhotoFileLocation_,
  InputStickerSetThumb: InputStickerSetThumb_,
  InputGroupCallStream: InputGroupCallStream_,
  PeerUser: PeerUser_,
  PeerChat: PeerChat_,
  PeerChannel: PeerChannel_,
  UserEmpty: UserEmpty_,
  User: User_,
  UserProfilePhotoEmpty: UserProfilePhotoEmpty_,
  UserProfilePhoto: UserProfilePhoto_,
  UserStatusEmpty: UserStatusEmpty_,
  UserStatusOnline: UserStatusOnline_,
  UserStatusOffline: UserStatusOffline_,
  UserStatusRecently: UserStatusRecently_,
  UserStatusLastWeek: UserStatusLastWeek_,
  UserStatusLastMonth: UserStatusLastMonth_,
  ChatEmpty: ChatEmpty_,
  Chat: Chat_,
  ChatForbidden: ChatForbidden_,
  Channel: Channel_,
  ChannelForbidden: ChannelForbidden_,
  ChatFull: ChatFull_,
  ChannelFull: ChannelFull_,
  ChatParticipant: ChatParticipant_,
  ChatParticipantCreator: ChatParticipantCreator_,
  ChatParticipantAdmin: ChatParticipantAdmin_,
  ChatParticipantsForbidden: ChatParticipantsForbidden_,
  ChatParticipants: ChatParticipants_,
  ChatPhotoEmpty: ChatPhotoEmpty_,
  ChatPhoto: ChatPhoto_,
  MessageEmpty: MessageEmpty_,
  Message: Message_,
  MessageService: MessageService_,
  MessageMediaEmpty: MessageMediaEmpty_,
  MessageMediaPhoto: MessageMediaPhoto_,
  MessageMediaGeo: MessageMediaGeo_,
  MessageMediaContact: MessageMediaContact_,
  MessageMediaUnsupported: MessageMediaUnsupported_,
  MessageMediaDocument: MessageMediaDocument_,
  MessageMediaWebPage: MessageMediaWebPage_,
  MessageMediaVenue: MessageMediaVenue_,
  MessageMediaGame: MessageMediaGame_,
  MessageMediaInvoice: MessageMediaInvoice_,
  MessageMediaGeoLive: MessageMediaGeoLive_,
  MessageMediaPoll: MessageMediaPoll_,
  MessageMediaDice: MessageMediaDice_,
  MessageMediaStory: MessageMediaStory_,
  MessageMediaGiveaway: MessageMediaGiveaway_,
  MessageMediaGiveawayResults: MessageMediaGiveawayResults_,
  MessageActionEmpty: MessageActionEmpty_,
  MessageActionChatCreate: MessageActionChatCreate_,
  MessageActionChatEditTitle: MessageActionChatEditTitle_,
  MessageActionChatEditPhoto: MessageActionChatEditPhoto_,
  MessageActionChatDeletePhoto: MessageActionChatDeletePhoto_,
  MessageActionChatAddUser: MessageActionChatAddUser_,
  MessageActionChatDeleteUser: MessageActionChatDeleteUser_,
  MessageActionChatJoinedByLink: MessageActionChatJoinedByLink_,
  MessageActionChannelCreate: MessageActionChannelCreate_,
  MessageActionChatMigrateTo: MessageActionChatMigrateTo_,
  MessageActionChannelMigrateFrom: MessageActionChannelMigrateFrom_,
  MessageActionPinMessage: MessageActionPinMessage_,
  MessageActionHistoryClear: MessageActionHistoryClear_,
  MessageActionGameScore: MessageActionGameScore_,
  MessageActionPaymentSentMe: MessageActionPaymentSentMe_,
  MessageActionPaymentSent: MessageActionPaymentSent_,
  MessageActionPhoneCall: MessageActionPhoneCall_,
  MessageActionScreenshotTaken: MessageActionScreenshotTaken_,
  MessageActionCustomAction: MessageActionCustomAction_,
  MessageActionBotAllowed: MessageActionBotAllowed_,
  MessageActionSecureValuesSentMe: MessageActionSecureValuesSentMe_,
  MessageActionSecureValuesSent: MessageActionSecureValuesSent_,
  MessageActionContactSignUp: MessageActionContactSignUp_,
  MessageActionGeoProximityReached: MessageActionGeoProximityReached_,
  MessageActionGroupCall: MessageActionGroupCall_,
  MessageActionInviteToGroupCall: MessageActionInviteToGroupCall_,
  MessageActionSetMessagesTTL: MessageActionSetMessagesTTL_,
  MessageActionGroupCallScheduled: MessageActionGroupCallScheduled_,
  MessageActionSetChatTheme: MessageActionSetChatTheme_,
  MessageActionChatJoinedByRequest: MessageActionChatJoinedByRequest_,
  MessageActionWebViewDataSentMe: MessageActionWebViewDataSentMe_,
  MessageActionWebViewDataSent: MessageActionWebViewDataSent_,
  MessageActionGiftPremium: MessageActionGiftPremium_,
  MessageActionTopicCreate: MessageActionTopicCreate_,
  MessageActionTopicEdit: MessageActionTopicEdit_,
  MessageActionSuggestProfilePhoto: MessageActionSuggestProfilePhoto_,
  MessageActionRequestedPeer: MessageActionRequestedPeer_,
  MessageActionSetChatWallPaper: MessageActionSetChatWallPaper_,
  MessageActionGiftCode: MessageActionGiftCode_,
  MessageActionGiveawayLaunch: MessageActionGiveawayLaunch_,
  MessageActionGiveawayResults: MessageActionGiveawayResults_,
  MessageActionBoostApply: MessageActionBoostApply_,
  Dialog: Dialog_,
  DialogFolder: DialogFolder_,
  PhotoEmpty: PhotoEmpty_,
  Photo: Photo_,
  PhotoSizeEmpty: PhotoSizeEmpty_,
  PhotoSize: PhotoSize_,
  PhotoCachedSize: PhotoCachedSize_,
  PhotoStrippedSize: PhotoStrippedSize_,
  PhotoSizeProgressive: PhotoSizeProgressive_,
  PhotoPathSize: PhotoPathSize_,
  GeoPointEmpty: GeoPointEmpty_,
  GeoPoint: GeoPoint_,
  InputNotifyPeer: InputNotifyPeer_,
  InputNotifyUsers: InputNotifyUsers_,
  InputNotifyChats: InputNotifyChats_,
  InputNotifyBroadcasts: InputNotifyBroadcasts_,
  InputNotifyForumTopic: InputNotifyForumTopic_,
  InputPeerNotifySettings: InputPeerNotifySettings_,
  PeerNotifySettings: PeerNotifySettings_,
  PeerSettings: PeerSettings_,
  WallPaper: WallPaper_,
  WallPaperNoFile: WallPaperNoFile_,
  InputReportReasonSpam: InputReportReasonSpam_,
  InputReportReasonViolence: InputReportReasonViolence_,
  InputReportReasonPornography: InputReportReasonPornography_,
  InputReportReasonChildAbuse: InputReportReasonChildAbuse_,
  InputReportReasonOther: InputReportReasonOther_,
  InputReportReasonCopyright: InputReportReasonCopyright_,
  InputReportReasonGeoIrrelevant: InputReportReasonGeoIrrelevant_,
  InputReportReasonFake: InputReportReasonFake_,
  InputReportReasonIllegalDrugs: InputReportReasonIllegalDrugs_,
  InputReportReasonPersonalDetails: InputReportReasonPersonalDetails_,
  UserFull: UserFull_,
  Contact: Contact_,
  ImportedContact: ImportedContact_,
  ContactStatus: ContactStatus_,
  InputMessagesFilterEmpty: InputMessagesFilterEmpty_,
  InputMessagesFilterPhotos: InputMessagesFilterPhotos_,
  InputMessagesFilterVideo: InputMessagesFilterVideo_,
  InputMessagesFilterPhotoVideo: InputMessagesFilterPhotoVideo_,
  InputMessagesFilterDocument: InputMessagesFilterDocument_,
  InputMessagesFilterUrl: InputMessagesFilterUrl_,
  InputMessagesFilterGif: InputMessagesFilterGif_,
  InputMessagesFilterVoice: InputMessagesFilterVoice_,
  InputMessagesFilterMusic: InputMessagesFilterMusic_,
  InputMessagesFilterChatPhotos: InputMessagesFilterChatPhotos_,
  InputMessagesFilterPhoneCalls: InputMessagesFilterPhoneCalls_,
  InputMessagesFilterRoundVoice: InputMessagesFilterRoundVoice_,
  InputMessagesFilterRoundVideo: InputMessagesFilterRoundVideo_,
  InputMessagesFilterMyMentions: InputMessagesFilterMyMentions_,
  InputMessagesFilterGeo: InputMessagesFilterGeo_,
  InputMessagesFilterContacts: InputMessagesFilterContacts_,
  InputMessagesFilterPinned: InputMessagesFilterPinned_,
  UpdateNewMessage: UpdateNewMessage_,
  UpdateMessageID: UpdateMessageID_,
  UpdateDeleteMessages: UpdateDeleteMessages_,
  UpdateUserTyping: UpdateUserTyping_,
  UpdateChatUserTyping: UpdateChatUserTyping_,
  UpdateChatParticipants: UpdateChatParticipants_,
  UpdateUserStatus: UpdateUserStatus_,
  UpdateUserName: UpdateUserName_,
  UpdateNewAuthorization: UpdateNewAuthorization_,
  UpdateNewEncryptedMessage: UpdateNewEncryptedMessage_,
  UpdateEncryptedChatTyping: UpdateEncryptedChatTyping_,
  UpdateEncryption: UpdateEncryption_,
  UpdateEncryptedMessagesRead: UpdateEncryptedMessagesRead_,
  UpdateChatParticipantAdd: UpdateChatParticipantAdd_,
  UpdateChatParticipantDelete: UpdateChatParticipantDelete_,
  UpdateDcOptions: UpdateDcOptions_,
  UpdateNotifySettings: UpdateNotifySettings_,
  UpdateServiceNotification: UpdateServiceNotification_,
  UpdatePrivacy: UpdatePrivacy_,
  UpdateUserPhone: UpdateUserPhone_,
  UpdateReadHistoryInbox: UpdateReadHistoryInbox_,
  UpdateReadHistoryOutbox: UpdateReadHistoryOutbox_,
  UpdateWebPage: UpdateWebPage_,
  UpdateReadMessagesContents: UpdateReadMessagesContents_,
  UpdateChannelTooLong: UpdateChannelTooLong_,
  UpdateChannel: UpdateChannel_,
  UpdateNewChannelMessage: UpdateNewChannelMessage_,
  UpdateReadChannelInbox: UpdateReadChannelInbox_,
  UpdateDeleteChannelMessages: UpdateDeleteChannelMessages_,
  UpdateChannelMessageViews: UpdateChannelMessageViews_,
  UpdateChatParticipantAdmin: UpdateChatParticipantAdmin_,
  UpdateNewStickerSet: UpdateNewStickerSet_,
  UpdateStickerSetsOrder: UpdateStickerSetsOrder_,
  UpdateStickerSets: UpdateStickerSets_,
  UpdateSavedGifs: UpdateSavedGifs_,
  UpdateBotInlineQuery: UpdateBotInlineQuery_,
  UpdateBotInlineSend: UpdateBotInlineSend_,
  UpdateEditChannelMessage: UpdateEditChannelMessage_,
  UpdateBotCallbackQuery: UpdateBotCallbackQuery_,
  UpdateEditMessage: UpdateEditMessage_,
  UpdateInlineBotCallbackQuery: UpdateInlineBotCallbackQuery_,
  UpdateReadChannelOutbox: UpdateReadChannelOutbox_,
  UpdateDraftMessage: UpdateDraftMessage_,
  UpdateReadFeaturedStickers: UpdateReadFeaturedStickers_,
  UpdateRecentStickers: UpdateRecentStickers_,
  UpdateConfig: UpdateConfig_,
  UpdatePtsChanged: UpdatePtsChanged_,
  UpdateChannelWebPage: UpdateChannelWebPage_,
  UpdateDialogPinned: UpdateDialogPinned_,
  UpdatePinnedDialogs: UpdatePinnedDialogs_,
  UpdateBotWebhookJSON: UpdateBotWebhookJSON_,
  UpdateBotWebhookJSONQuery: UpdateBotWebhookJSONQuery_,
  UpdateBotShippingQuery: UpdateBotShippingQuery_,
  UpdateBotPrecheckoutQuery: UpdateBotPrecheckoutQuery_,
  UpdatePhoneCall: UpdatePhoneCall_,
  UpdateLangPackTooLong: UpdateLangPackTooLong_,
  UpdateLangPack: UpdateLangPack_,
  UpdateFavedStickers: UpdateFavedStickers_,
  UpdateChannelReadMessagesContents: UpdateChannelReadMessagesContents_,
  UpdateContactsReset: UpdateContactsReset_,
  UpdateChannelAvailableMessages: UpdateChannelAvailableMessages_,
  UpdateDialogUnreadMark: UpdateDialogUnreadMark_,
  UpdateMessagePoll: UpdateMessagePoll_,
  UpdateChatDefaultBannedRights: UpdateChatDefaultBannedRights_,
  UpdateFolderPeers: UpdateFolderPeers_,
  UpdatePeerSettings: UpdatePeerSettings_,
  UpdatePeerLocated: UpdatePeerLocated_,
  UpdateNewScheduledMessage: UpdateNewScheduledMessage_,
  UpdateDeleteScheduledMessages: UpdateDeleteScheduledMessages_,
  UpdateTheme: UpdateTheme_,
  UpdateGeoLiveViewed: UpdateGeoLiveViewed_,
  UpdateLoginToken: UpdateLoginToken_,
  UpdateMessagePollVote: UpdateMessagePollVote_,
  UpdateDialogFilter: UpdateDialogFilter_,
  UpdateDialogFilterOrder: UpdateDialogFilterOrder_,
  UpdateDialogFilters: UpdateDialogFilters_,
  UpdatePhoneCallSignalingData: UpdatePhoneCallSignalingData_,
  UpdateChannelMessageForwards: UpdateChannelMessageForwards_,
  UpdateReadChannelDiscussionInbox: UpdateReadChannelDiscussionInbox_,
  UpdateReadChannelDiscussionOutbox: UpdateReadChannelDiscussionOutbox_,
  UpdatePeerBlocked: UpdatePeerBlocked_,
  UpdateChannelUserTyping: UpdateChannelUserTyping_,
  UpdatePinnedMessages: UpdatePinnedMessages_,
  UpdatePinnedChannelMessages: UpdatePinnedChannelMessages_,
  UpdateChat: UpdateChat_,
  UpdateGroupCallParticipants: UpdateGroupCallParticipants_,
  UpdateGroupCall: UpdateGroupCall_,
  UpdatePeerHistoryTTL: UpdatePeerHistoryTTL_,
  UpdateChatParticipant: UpdateChatParticipant_,
  UpdateChannelParticipant: UpdateChannelParticipant_,
  UpdateBotStopped: UpdateBotStopped_,
  UpdateGroupCallConnection: UpdateGroupCallConnection_,
  UpdateBotCommands: UpdateBotCommands_,
  UpdatePendingJoinRequests: UpdatePendingJoinRequests_,
  UpdateBotChatInviteRequester: UpdateBotChatInviteRequester_,
  UpdateMessageReactions: UpdateMessageReactions_,
  UpdateAttachMenuBots: UpdateAttachMenuBots_,
  UpdateWebViewResultSent: UpdateWebViewResultSent_,
  UpdateBotMenuButton: UpdateBotMenuButton_,
  UpdateSavedRingtones: UpdateSavedRingtones_,
  UpdateTranscribedAudio: UpdateTranscribedAudio_,
  UpdateReadFeaturedEmojiStickers: UpdateReadFeaturedEmojiStickers_,
  UpdateUserEmojiStatus: UpdateUserEmojiStatus_,
  UpdateRecentEmojiStatuses: UpdateRecentEmojiStatuses_,
  UpdateRecentReactions: UpdateRecentReactions_,
  UpdateMoveStickerSetToTop: UpdateMoveStickerSetToTop_,
  UpdateMessageExtendedMedia: UpdateMessageExtendedMedia_,
  UpdateChannelPinnedTopic: UpdateChannelPinnedTopic_,
  UpdateChannelPinnedTopics: UpdateChannelPinnedTopics_,
  UpdateUser: UpdateUser_,
  UpdateAutoSaveSettings: UpdateAutoSaveSettings_,
  UpdateGroupInvitePrivacyForbidden: UpdateGroupInvitePrivacyForbidden_,
  UpdateStory: UpdateStory_,
  UpdateReadStories: UpdateReadStories_,
  UpdateStoryID: UpdateStoryID_,
  UpdateStoriesStealthMode: UpdateStoriesStealthMode_,
  UpdateSentStoryReaction: UpdateSentStoryReaction_,
  UpdateBotChatBoost: UpdateBotChatBoost_,
  UpdateChannelViewForumAsMessages: UpdateChannelViewForumAsMessages_,
  UpdatePeerWallpaper: UpdatePeerWallpaper_,
  UpdateBotMessageReaction: UpdateBotMessageReaction_,
  UpdateBotMessageReactions: UpdateBotMessageReactions_,
  UpdateSavedDialogPinned: UpdateSavedDialogPinned_,
  UpdatePinnedSavedDialogs: UpdatePinnedSavedDialogs_,
  UpdateSavedReactionTags: UpdateSavedReactionTags_,
  UpdatesTooLong: UpdatesTooLong_,
  UpdateShortMessage: UpdateShortMessage_,
  UpdateShortChatMessage: UpdateShortChatMessage_,
  UpdateShort: UpdateShort_,
  UpdatesCombined: UpdatesCombined_,
  Updates: Updates_,
  UpdateShortSentMessage: UpdateShortSentMessage_,
  DcOption: DcOption_,
  Config: Config_,
  NearestDc: NearestDc_,
  EncryptedChatEmpty: EncryptedChatEmpty_,
  EncryptedChatWaiting: EncryptedChatWaiting_,
  EncryptedChatRequested: EncryptedChatRequested_,
  EncryptedChat: EncryptedChat_,
  EncryptedChatDiscarded: EncryptedChatDiscarded_,
  InputEncryptedChat: InputEncryptedChat_,
  EncryptedFileEmpty: EncryptedFileEmpty_,
  EncryptedFile: EncryptedFile_,
  InputEncryptedFileEmpty: InputEncryptedFileEmpty_,
  InputEncryptedFileUploaded: InputEncryptedFileUploaded_,
  InputEncryptedFile: InputEncryptedFile_,
  InputEncryptedFileBigUploaded: InputEncryptedFileBigUploaded_,
  EncryptedMessage: EncryptedMessage_,
  EncryptedMessageService: EncryptedMessageService_,
  InputDocumentEmpty: InputDocumentEmpty_,
  InputDocument: InputDocument_,
  DocumentEmpty: DocumentEmpty_,
  Document: Document_,
  NotifyPeer: NotifyPeer_,
  NotifyUsers: NotifyUsers_,
  NotifyChats: NotifyChats_,
  NotifyBroadcasts: NotifyBroadcasts_,
  NotifyForumTopic: NotifyForumTopic_,
  SendMessageTypingAction: SendMessageTypingAction_,
  SendMessageCancelAction: SendMessageCancelAction_,
  SendMessageRecordVideoAction: SendMessageRecordVideoAction_,
  SendMessageUploadVideoAction: SendMessageUploadVideoAction_,
  SendMessageRecordAudioAction: SendMessageRecordAudioAction_,
  SendMessageUploadAudioAction: SendMessageUploadAudioAction_,
  SendMessageUploadPhotoAction: SendMessageUploadPhotoAction_,
  SendMessageUploadDocumentAction: SendMessageUploadDocumentAction_,
  SendMessageGeoLocationAction: SendMessageGeoLocationAction_,
  SendMessageChooseContactAction: SendMessageChooseContactAction_,
  SendMessageGamePlayAction: SendMessageGamePlayAction_,
  SendMessageRecordRoundAction: SendMessageRecordRoundAction_,
  SendMessageUploadRoundAction: SendMessageUploadRoundAction_,
  SpeakingInGroupCallAction: SpeakingInGroupCallAction_,
  SendMessageHistoryImportAction: SendMessageHistoryImportAction_,
  SendMessageChooseStickerAction: SendMessageChooseStickerAction_,
  SendMessageEmojiInteraction: SendMessageEmojiInteraction_,
  SendMessageEmojiInteractionSeen: SendMessageEmojiInteractionSeen_,
  InputPrivacyKeyStatusTimestamp: InputPrivacyKeyStatusTimestamp_,
  InputPrivacyKeyChatInvite: InputPrivacyKeyChatInvite_,
  InputPrivacyKeyPhoneCall: InputPrivacyKeyPhoneCall_,
  InputPrivacyKeyPhoneP2P: InputPrivacyKeyPhoneP2P_,
  InputPrivacyKeyForwards: InputPrivacyKeyForwards_,
  InputPrivacyKeyProfilePhoto: InputPrivacyKeyProfilePhoto_,
  InputPrivacyKeyPhoneNumber: InputPrivacyKeyPhoneNumber_,
  InputPrivacyKeyAddedByPhone: InputPrivacyKeyAddedByPhone_,
  InputPrivacyKeyVoiceMessages: InputPrivacyKeyVoiceMessages_,
  InputPrivacyKeyAbout: InputPrivacyKeyAbout_,
  PrivacyKeyStatusTimestamp: PrivacyKeyStatusTimestamp_,
  PrivacyKeyChatInvite: PrivacyKeyChatInvite_,
  PrivacyKeyPhoneCall: PrivacyKeyPhoneCall_,
  PrivacyKeyPhoneP2P: PrivacyKeyPhoneP2P_,
  PrivacyKeyForwards: PrivacyKeyForwards_,
  PrivacyKeyProfilePhoto: PrivacyKeyProfilePhoto_,
  PrivacyKeyPhoneNumber: PrivacyKeyPhoneNumber_,
  PrivacyKeyAddedByPhone: PrivacyKeyAddedByPhone_,
  PrivacyKeyVoiceMessages: PrivacyKeyVoiceMessages_,
  PrivacyKeyAbout: PrivacyKeyAbout_,
  InputPrivacyValueAllowContacts: InputPrivacyValueAllowContacts_,
  InputPrivacyValueAllowAll: InputPrivacyValueAllowAll_,
  InputPrivacyValueAllowUsers: InputPrivacyValueAllowUsers_,
  InputPrivacyValueDisallowContacts: InputPrivacyValueDisallowContacts_,
  InputPrivacyValueDisallowAll: InputPrivacyValueDisallowAll_,
  InputPrivacyValueDisallowUsers: InputPrivacyValueDisallowUsers_,
  InputPrivacyValueAllowChatParticipants: InputPrivacyValueAllowChatParticipants_,
  InputPrivacyValueDisallowChatParticipants: InputPrivacyValueDisallowChatParticipants_,
  InputPrivacyValueAllowCloseFriends: InputPrivacyValueAllowCloseFriends_,
  PrivacyValueAllowContacts: PrivacyValueAllowContacts_,
  PrivacyValueAllowAll: PrivacyValueAllowAll_,
  PrivacyValueAllowUsers: PrivacyValueAllowUsers_,
  PrivacyValueDisallowContacts: PrivacyValueDisallowContacts_,
  PrivacyValueDisallowAll: PrivacyValueDisallowAll_,
  PrivacyValueDisallowUsers: PrivacyValueDisallowUsers_,
  PrivacyValueAllowChatParticipants: PrivacyValueAllowChatParticipants_,
  PrivacyValueDisallowChatParticipants: PrivacyValueDisallowChatParticipants_,
  PrivacyValueAllowCloseFriends: PrivacyValueAllowCloseFriends_,
  AccountDaysTTL: AccountDaysTTL_,
  DocumentAttributeImageSize: DocumentAttributeImageSize_,
  DocumentAttributeAnimated: DocumentAttributeAnimated_,
  DocumentAttributeSticker: DocumentAttributeSticker_,
  DocumentAttributeVideo: DocumentAttributeVideo_,
  DocumentAttributeAudio: DocumentAttributeAudio_,
  DocumentAttributeFilename: DocumentAttributeFilename_,
  DocumentAttributeHasStickers: DocumentAttributeHasStickers_,
  DocumentAttributeCustomEmoji: DocumentAttributeCustomEmoji_,
  StickerPack: StickerPack_,
  WebPageEmpty: WebPageEmpty_,
  WebPagePending: WebPagePending_,
  WebPage: WebPage_,
  WebPageNotModified: WebPageNotModified_,
  Authorization: Authorization_,
  ReceivedNotifyMessage: ReceivedNotifyMessage_,
  ChatInviteExported: ChatInviteExported_,
  ChatInvitePublicJoinRequests: ChatInvitePublicJoinRequests_,
  ChatInviteAlready: ChatInviteAlready_,
  ChatInvite: ChatInvite_,
  ChatInvitePeek: ChatInvitePeek_,
  InputStickerSetEmpty: InputStickerSetEmpty_,
  InputStickerSetID: InputStickerSetID_,
  InputStickerSetShortName: InputStickerSetShortName_,
  InputStickerSetAnimatedEmoji: InputStickerSetAnimatedEmoji_,
  InputStickerSetDice: InputStickerSetDice_,
  InputStickerSetAnimatedEmojiAnimations: InputStickerSetAnimatedEmojiAnimations_,
  InputStickerSetPremiumGifts: InputStickerSetPremiumGifts_,
  InputStickerSetEmojiGenericAnimations: InputStickerSetEmojiGenericAnimations_,
  InputStickerSetEmojiDefaultStatuses: InputStickerSetEmojiDefaultStatuses_,
  InputStickerSetEmojiDefaultTopicIcons: InputStickerSetEmojiDefaultTopicIcons_,
  InputStickerSetEmojiChannelDefaultStatuses: InputStickerSetEmojiChannelDefaultStatuses_,
  StickerSet: StickerSet_,
  BotCommand: BotCommand_,
  BotInfo: BotInfo_,
  KeyboardButton: KeyboardButton_,
  KeyboardButtonUrl: KeyboardButtonUrl_,
  KeyboardButtonCallback: KeyboardButtonCallback_,
  KeyboardButtonRequestPhone: KeyboardButtonRequestPhone_,
  KeyboardButtonRequestGeoLocation: KeyboardButtonRequestGeoLocation_,
  KeyboardButtonSwitchInline: KeyboardButtonSwitchInline_,
  KeyboardButtonGame: KeyboardButtonGame_,
  KeyboardButtonBuy: KeyboardButtonBuy_,
  KeyboardButtonUrlAuth: KeyboardButtonUrlAuth_,
  InputKeyboardButtonUrlAuth: InputKeyboardButtonUrlAuth_,
  KeyboardButtonRequestPoll: KeyboardButtonRequestPoll_,
  InputKeyboardButtonUserProfile: InputKeyboardButtonUserProfile_,
  KeyboardButtonUserProfile: KeyboardButtonUserProfile_,
  KeyboardButtonWebView: KeyboardButtonWebView_,
  KeyboardButtonSimpleWebView: KeyboardButtonSimpleWebView_,
  KeyboardButtonRequestPeer: KeyboardButtonRequestPeer_,
  KeyboardButtonRow: KeyboardButtonRow_,
  ReplyKeyboardHide: ReplyKeyboardHide_,
  ReplyKeyboardForceReply: ReplyKeyboardForceReply_,
  ReplyKeyboardMarkup: ReplyKeyboardMarkup_,
  ReplyInlineMarkup: ReplyInlineMarkup_,
  MessageEntityUnknown: MessageEntityUnknown_,
  MessageEntityMention: MessageEntityMention_,
  MessageEntityHashtag: MessageEntityHashtag_,
  MessageEntityBotCommand: MessageEntityBotCommand_,
  MessageEntityUrl: MessageEntityUrl_,
  MessageEntityEmail: MessageEntityEmail_,
  MessageEntityBold: MessageEntityBold_,
  MessageEntityItalic: MessageEntityItalic_,
  MessageEntityCode: MessageEntityCode_,
  MessageEntityPre: MessageEntityPre_,
  MessageEntityTextUrl: MessageEntityTextUrl_,
  MessageEntityMentionName: MessageEntityMentionName_,
  InputMessageEntityMentionName: InputMessageEntityMentionName_,
  MessageEntityPhone: MessageEntityPhone_,
  MessageEntityCashtag: MessageEntityCashtag_,
  MessageEntityUnderline: MessageEntityUnderline_,
  MessageEntityStrike: MessageEntityStrike_,
  MessageEntityBankCard: MessageEntityBankCard_,
  MessageEntitySpoiler: MessageEntitySpoiler_,
  MessageEntityCustomEmoji: MessageEntityCustomEmoji_,
  MessageEntityBlockquote: MessageEntityBlockquote_,
  InputChannelEmpty: InputChannelEmpty_,
  InputChannel: InputChannel_,
  InputChannelFromMessage: InputChannelFromMessage_,
  MessageRange: MessageRange_,
  ChannelMessagesFilterEmpty: ChannelMessagesFilterEmpty_,
  ChannelMessagesFilter: ChannelMessagesFilter_,
  ChannelParticipant: ChannelParticipant_,
  ChannelParticipantSelf: ChannelParticipantSelf_,
  ChannelParticipantCreator: ChannelParticipantCreator_,
  ChannelParticipantAdmin: ChannelParticipantAdmin_,
  ChannelParticipantBanned: ChannelParticipantBanned_,
  ChannelParticipantLeft: ChannelParticipantLeft_,
  ChannelParticipantsRecent: ChannelParticipantsRecent_,
  ChannelParticipantsAdmins: ChannelParticipantsAdmins_,
  ChannelParticipantsKicked: ChannelParticipantsKicked_,
  ChannelParticipantsBots: ChannelParticipantsBots_,
  ChannelParticipantsBanned: ChannelParticipantsBanned_,
  ChannelParticipantsSearch: ChannelParticipantsSearch_,
  ChannelParticipantsContacts: ChannelParticipantsContacts_,
  ChannelParticipantsMentions: ChannelParticipantsMentions_,
  InputBotInlineMessageMediaAuto: InputBotInlineMessageMediaAuto_,
  InputBotInlineMessageText: InputBotInlineMessageText_,
  InputBotInlineMessageMediaGeo: InputBotInlineMessageMediaGeo_,
  InputBotInlineMessageMediaVenue: InputBotInlineMessageMediaVenue_,
  InputBotInlineMessageMediaContact: InputBotInlineMessageMediaContact_,
  InputBotInlineMessageGame: InputBotInlineMessageGame_,
  InputBotInlineMessageMediaInvoice: InputBotInlineMessageMediaInvoice_,
  InputBotInlineMessageMediaWebPage: InputBotInlineMessageMediaWebPage_,
  InputBotInlineResult: InputBotInlineResult_,
  InputBotInlineResultPhoto: InputBotInlineResultPhoto_,
  InputBotInlineResultDocument: InputBotInlineResultDocument_,
  InputBotInlineResultGame: InputBotInlineResultGame_,
  BotInlineMessageMediaAuto: BotInlineMessageMediaAuto_,
  BotInlineMessageText: BotInlineMessageText_,
  BotInlineMessageMediaGeo: BotInlineMessageMediaGeo_,
  BotInlineMessageMediaVenue: BotInlineMessageMediaVenue_,
  BotInlineMessageMediaContact: BotInlineMessageMediaContact_,
  BotInlineMessageMediaInvoice: BotInlineMessageMediaInvoice_,
  BotInlineMessageMediaWebPage: BotInlineMessageMediaWebPage_,
  BotInlineResult: BotInlineResult_,
  BotInlineMediaResult: BotInlineMediaResult_,
  ExportedMessageLink: ExportedMessageLink_,
  MessageFwdHeader: MessageFwdHeader_,
  InputBotInlineMessageID: InputBotInlineMessageID_,
  InputBotInlineMessageID64: InputBotInlineMessageID64_,
  InlineBotSwitchPM: InlineBotSwitchPM_,
  TopPeer: TopPeer_,
  TopPeerCategoryBotsPM: TopPeerCategoryBotsPM_,
  TopPeerCategoryBotsInline: TopPeerCategoryBotsInline_,
  TopPeerCategoryCorrespondents: TopPeerCategoryCorrespondents_,
  TopPeerCategoryGroups: TopPeerCategoryGroups_,
  TopPeerCategoryChannels: TopPeerCategoryChannels_,
  TopPeerCategoryPhoneCalls: TopPeerCategoryPhoneCalls_,
  TopPeerCategoryForwardUsers: TopPeerCategoryForwardUsers_,
  TopPeerCategoryForwardChats: TopPeerCategoryForwardChats_,
  TopPeerCategoryPeers: TopPeerCategoryPeers_,
  DraftMessageEmpty: DraftMessageEmpty_,
  DraftMessage: DraftMessage_,
  StickerSetCovered: StickerSetCovered_,
  StickerSetMultiCovered: StickerSetMultiCovered_,
  StickerSetFullCovered: StickerSetFullCovered_,
  StickerSetNoCovered: StickerSetNoCovered_,
  MaskCoords: MaskCoords_,
  InputStickeredMediaPhoto: InputStickeredMediaPhoto_,
  InputStickeredMediaDocument: InputStickeredMediaDocument_,
  Game: Game_,
  InputGameID: InputGameID_,
  InputGameShortName: InputGameShortName_,
  HighScore: HighScore_,
  TextEmpty: TextEmpty_,
  TextPlain: TextPlain_,
  TextBold: TextBold_,
  TextItalic: TextItalic_,
  TextUnderline: TextUnderline_,
  TextStrike: TextStrike_,
  TextFixed: TextFixed_,
  TextUrl: TextUrl_,
  TextEmail: TextEmail_,
  TextConcat: TextConcat_,
  TextSubscript: TextSubscript_,
  TextSuperscript: TextSuperscript_,
  TextMarked: TextMarked_,
  TextPhone: TextPhone_,
  TextImage: TextImage_,
  TextAnchor: TextAnchor_,
  PageBlockUnsupported: PageBlockUnsupported_,
  PageBlockTitle: PageBlockTitle_,
  PageBlockSubtitle: PageBlockSubtitle_,
  PageBlockAuthorDate: PageBlockAuthorDate_,
  PageBlockHeader: PageBlockHeader_,
  PageBlockSubheader: PageBlockSubheader_,
  PageBlockParagraph: PageBlockParagraph_,
  PageBlockPreformatted: PageBlockPreformatted_,
  PageBlockFooter: PageBlockFooter_,
  PageBlockDivider: PageBlockDivider_,
  PageBlockAnchor: PageBlockAnchor_,
  PageBlockList: PageBlockList_,
  PageBlockBlockquote: PageBlockBlockquote_,
  PageBlockPullquote: PageBlockPullquote_,
  PageBlockPhoto: PageBlockPhoto_,
  PageBlockVideo: PageBlockVideo_,
  PageBlockCover: PageBlockCover_,
  PageBlockEmbed: PageBlockEmbed_,
  PageBlockEmbedPost: PageBlockEmbedPost_,
  PageBlockCollage: PageBlockCollage_,
  PageBlockSlideshow: PageBlockSlideshow_,
  PageBlockChannel: PageBlockChannel_,
  PageBlockAudio: PageBlockAudio_,
  PageBlockKicker: PageBlockKicker_,
  PageBlockTable: PageBlockTable_,
  PageBlockOrderedList: PageBlockOrderedList_,
  PageBlockDetails: PageBlockDetails_,
  PageBlockRelatedArticles: PageBlockRelatedArticles_,
  PageBlockMap: PageBlockMap_,
  PhoneCallDiscardReasonMissed: PhoneCallDiscardReasonMissed_,
  PhoneCallDiscardReasonDisconnect: PhoneCallDiscardReasonDisconnect_,
  PhoneCallDiscardReasonHangup: PhoneCallDiscardReasonHangup_,
  PhoneCallDiscardReasonBusy: PhoneCallDiscardReasonBusy_,
  DataJSON: DataJSON_,
  LabeledPrice: LabeledPrice_,
  Invoice: Invoice_,
  PaymentCharge: PaymentCharge_,
  PostAddress: PostAddress_,
  PaymentRequestedInfo: PaymentRequestedInfo_,
  PaymentSavedCredentialsCard: PaymentSavedCredentialsCard_,
  WebDocument: WebDocument_,
  WebDocumentNoProxy: WebDocumentNoProxy_,
  InputWebDocument: InputWebDocument_,
  InputWebFileLocation: InputWebFileLocation_,
  InputWebFileGeoPointLocation: InputWebFileGeoPointLocation_,
  InputWebFileAudioAlbumThumbLocation: InputWebFileAudioAlbumThumbLocation_,
  InputPaymentCredentialsSaved: InputPaymentCredentialsSaved_,
  InputPaymentCredentials: InputPaymentCredentials_,
  InputPaymentCredentialsApplePay: InputPaymentCredentialsApplePay_,
  InputPaymentCredentialsGooglePay: InputPaymentCredentialsGooglePay_,
  ShippingOption: ShippingOption_,
  InputStickerSetItem: InputStickerSetItem_,
  InputPhoneCall: InputPhoneCall_,
  PhoneCallEmpty: PhoneCallEmpty_,
  PhoneCallWaiting: PhoneCallWaiting_,
  PhoneCallRequested: PhoneCallRequested_,
  PhoneCallAccepted: PhoneCallAccepted_,
  PhoneCall: PhoneCall_,
  PhoneCallDiscarded: PhoneCallDiscarded_,
  PhoneConnection: PhoneConnection_,
  PhoneConnectionWebrtc: PhoneConnectionWebrtc_,
  PhoneCallProtocol: PhoneCallProtocol_,
  CdnPublicKey: CdnPublicKey_,
  CdnConfig: CdnConfig_,
  LangPackString: LangPackString_,
  LangPackStringPluralized: LangPackStringPluralized_,
  LangPackStringDeleted: LangPackStringDeleted_,
  LangPackDifference: LangPackDifference_,
  LangPackLanguage: LangPackLanguage_,
  ChannelAdminLogEventActionChangeTitle: ChannelAdminLogEventActionChangeTitle_,
  ChannelAdminLogEventActionChangeAbout: ChannelAdminLogEventActionChangeAbout_,
  ChannelAdminLogEventActionChangeUsername: ChannelAdminLogEventActionChangeUsername_,
  ChannelAdminLogEventActionChangePhoto: ChannelAdminLogEventActionChangePhoto_,
  ChannelAdminLogEventActionToggleInvites: ChannelAdminLogEventActionToggleInvites_,
  ChannelAdminLogEventActionToggleSignatures: ChannelAdminLogEventActionToggleSignatures_,
  ChannelAdminLogEventActionUpdatePinned: ChannelAdminLogEventActionUpdatePinned_,
  ChannelAdminLogEventActionEditMessage: ChannelAdminLogEventActionEditMessage_,
  ChannelAdminLogEventActionDeleteMessage: ChannelAdminLogEventActionDeleteMessage_,
  ChannelAdminLogEventActionParticipantJoin: ChannelAdminLogEventActionParticipantJoin_,
  ChannelAdminLogEventActionParticipantLeave: ChannelAdminLogEventActionParticipantLeave_,
  ChannelAdminLogEventActionParticipantInvite: ChannelAdminLogEventActionParticipantInvite_,
  ChannelAdminLogEventActionParticipantToggleBan: ChannelAdminLogEventActionParticipantToggleBan_,
  ChannelAdminLogEventActionParticipantToggleAdmin: ChannelAdminLogEventActionParticipantToggleAdmin_,
  ChannelAdminLogEventActionChangeStickerSet: ChannelAdminLogEventActionChangeStickerSet_,
  ChannelAdminLogEventActionTogglePreHistoryHidden: ChannelAdminLogEventActionTogglePreHistoryHidden_,
  ChannelAdminLogEventActionDefaultBannedRights: ChannelAdminLogEventActionDefaultBannedRights_,
  ChannelAdminLogEventActionStopPoll: ChannelAdminLogEventActionStopPoll_,
  ChannelAdminLogEventActionChangeLinkedChat: ChannelAdminLogEventActionChangeLinkedChat_,
  ChannelAdminLogEventActionChangeLocation: ChannelAdminLogEventActionChangeLocation_,
  ChannelAdminLogEventActionToggleSlowMode: ChannelAdminLogEventActionToggleSlowMode_,
  ChannelAdminLogEventActionStartGroupCall: ChannelAdminLogEventActionStartGroupCall_,
  ChannelAdminLogEventActionDiscardGroupCall: ChannelAdminLogEventActionDiscardGroupCall_,
  ChannelAdminLogEventActionParticipantMute: ChannelAdminLogEventActionParticipantMute_,
  ChannelAdminLogEventActionParticipantUnmute: ChannelAdminLogEventActionParticipantUnmute_,
  ChannelAdminLogEventActionToggleGroupCallSetting: ChannelAdminLogEventActionToggleGroupCallSetting_,
  ChannelAdminLogEventActionParticipantJoinByInvite: ChannelAdminLogEventActionParticipantJoinByInvite_,
  ChannelAdminLogEventActionExportedInviteDelete: ChannelAdminLogEventActionExportedInviteDelete_,
  ChannelAdminLogEventActionExportedInviteRevoke: ChannelAdminLogEventActionExportedInviteRevoke_,
  ChannelAdminLogEventActionExportedInviteEdit: ChannelAdminLogEventActionExportedInviteEdit_,
  ChannelAdminLogEventActionParticipantVolume: ChannelAdminLogEventActionParticipantVolume_,
  ChannelAdminLogEventActionChangeHistoryTTL: ChannelAdminLogEventActionChangeHistoryTTL_,
  ChannelAdminLogEventActionParticipantJoinByRequest: ChannelAdminLogEventActionParticipantJoinByRequest_,
  ChannelAdminLogEventActionToggleNoForwards: ChannelAdminLogEventActionToggleNoForwards_,
  ChannelAdminLogEventActionSendMessage: ChannelAdminLogEventActionSendMessage_,
  ChannelAdminLogEventActionChangeAvailableReactions: ChannelAdminLogEventActionChangeAvailableReactions_,
  ChannelAdminLogEventActionChangeUsernames: ChannelAdminLogEventActionChangeUsernames_,
  ChannelAdminLogEventActionToggleForum: ChannelAdminLogEventActionToggleForum_,
  ChannelAdminLogEventActionCreateTopic: ChannelAdminLogEventActionCreateTopic_,
  ChannelAdminLogEventActionEditTopic: ChannelAdminLogEventActionEditTopic_,
  ChannelAdminLogEventActionDeleteTopic: ChannelAdminLogEventActionDeleteTopic_,
  ChannelAdminLogEventActionPinTopic: ChannelAdminLogEventActionPinTopic_,
  ChannelAdminLogEventActionToggleAntiSpam: ChannelAdminLogEventActionToggleAntiSpam_,
  ChannelAdminLogEventActionChangePeerColor: ChannelAdminLogEventActionChangePeerColor_,
  ChannelAdminLogEventActionChangeProfilePeerColor: ChannelAdminLogEventActionChangeProfilePeerColor_,
  ChannelAdminLogEventActionChangeWallpaper: ChannelAdminLogEventActionChangeWallpaper_,
  ChannelAdminLogEventActionChangeEmojiStatus: ChannelAdminLogEventActionChangeEmojiStatus_,
  ChannelAdminLogEventActionChangeEmojiStickerSet: ChannelAdminLogEventActionChangeEmojiStickerSet_,
  ChannelAdminLogEvent: ChannelAdminLogEvent_,
  ChannelAdminLogEventsFilter: ChannelAdminLogEventsFilter_,
  PopularContact: PopularContact_,
  RecentMeUrlUnknown: RecentMeUrlUnknown_,
  RecentMeUrlUser: RecentMeUrlUser_,
  RecentMeUrlChat: RecentMeUrlChat_,
  RecentMeUrlChatInvite: RecentMeUrlChatInvite_,
  RecentMeUrlStickerSet: RecentMeUrlStickerSet_,
  InputSingleMedia: InputSingleMedia_,
  WebAuthorization: WebAuthorization_,
  InputMessageID: InputMessageID_,
  InputMessageReplyTo: InputMessageReplyTo_,
  InputMessagePinned: InputMessagePinned_,
  InputMessageCallbackQuery: InputMessageCallbackQuery_,
  InputDialogPeer: InputDialogPeer_,
  InputDialogPeerFolder: InputDialogPeerFolder_,
  DialogPeer: DialogPeer_,
  DialogPeerFolder: DialogPeerFolder_,
  FileHash: FileHash_,
  InputClientProxy: InputClientProxy_,
  InputSecureFileUploaded: InputSecureFileUploaded_,
  InputSecureFile: InputSecureFile_,
  SecureFileEmpty: SecureFileEmpty_,
  SecureFile: SecureFile_,
  SecureData: SecureData_,
  SecurePlainPhone: SecurePlainPhone_,
  SecurePlainEmail: SecurePlainEmail_,
  SecureValueTypePersonalDetails: SecureValueTypePersonalDetails_,
  SecureValueTypePassport: SecureValueTypePassport_,
  SecureValueTypeDriverLicense: SecureValueTypeDriverLicense_,
  SecureValueTypeIdentityCard: SecureValueTypeIdentityCard_,
  SecureValueTypeInternalPassport: SecureValueTypeInternalPassport_,
  SecureValueTypeAddress: SecureValueTypeAddress_,
  SecureValueTypeUtilityBill: SecureValueTypeUtilityBill_,
  SecureValueTypeBankStatement: SecureValueTypeBankStatement_,
  SecureValueTypeRentalAgreement: SecureValueTypeRentalAgreement_,
  SecureValueTypePassportRegistration: SecureValueTypePassportRegistration_,
  SecureValueTypeTemporaryRegistration: SecureValueTypeTemporaryRegistration_,
  SecureValueTypePhone: SecureValueTypePhone_,
  SecureValueTypeEmail: SecureValueTypeEmail_,
  SecureValue: SecureValue_,
  InputSecureValue: InputSecureValue_,
  SecureValueHash: SecureValueHash_,
  SecureValueErrorData: SecureValueErrorData_,
  SecureValueErrorFrontSide: SecureValueErrorFrontSide_,
  SecureValueErrorReverseSide: SecureValueErrorReverseSide_,
  SecureValueErrorSelfie: SecureValueErrorSelfie_,
  SecureValueErrorFile: SecureValueErrorFile_,
  SecureValueErrorFiles: SecureValueErrorFiles_,
  SecureValueError: SecureValueError_,
  SecureValueErrorTranslationFile: SecureValueErrorTranslationFile_,
  SecureValueErrorTranslationFiles: SecureValueErrorTranslationFiles_,
  SecureCredentialsEncrypted: SecureCredentialsEncrypted_,
  SavedPhoneContact: SavedPhoneContact_,
  PasswordKdfAlgoUnknown: PasswordKdfAlgoUnknown_,
  PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow: PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_,
  SecurePasswordKdfAlgoUnknown: SecurePasswordKdfAlgoUnknown_,
  SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000: SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_,
  SecurePasswordKdfAlgoSHA512: SecurePasswordKdfAlgoSHA512_,
  SecureSecretSettings: SecureSecretSettings_,
  InputCheckPasswordEmpty: InputCheckPasswordEmpty_,
  InputCheckPasswordSRP: InputCheckPasswordSRP_,
  SecureRequiredType: SecureRequiredType_,
  SecureRequiredTypeOneOf: SecureRequiredTypeOneOf_,
  InputAppEvent: InputAppEvent_,
  JsonObjectValue: JsonObjectValue_,
  JsonNull: JsonNull_,
  JsonBool: JsonBool_,
  JsonNumber: JsonNumber_,
  JsonString: JsonString_,
  JsonArray: JsonArray_,
  JsonObject: JsonObject_,
  PageTableCell: PageTableCell_,
  PageTableRow: PageTableRow_,
  PageCaption: PageCaption_,
  PageListItemText: PageListItemText_,
  PageListItemBlocks: PageListItemBlocks_,
  PageListOrderedItemText: PageListOrderedItemText_,
  PageListOrderedItemBlocks: PageListOrderedItemBlocks_,
  PageRelatedArticle: PageRelatedArticle_,
  Page: Page_,
  PollAnswer: PollAnswer_,
  Poll: Poll_,
  PollAnswerVoters: PollAnswerVoters_,
  PollResults: PollResults_,
  ChatOnlines: ChatOnlines_,
  StatsURL: StatsURL_,
  ChatAdminRights: ChatAdminRights_,
  ChatBannedRights: ChatBannedRights_,
  InputWallPaper: InputWallPaper_,
  InputWallPaperSlug: InputWallPaperSlug_,
  InputWallPaperNoFile: InputWallPaperNoFile_,
  CodeSettings: CodeSettings_,
  WallPaperSettings: WallPaperSettings_,
  AutoDownloadSettings: AutoDownloadSettings_,
  EmojiKeyword: EmojiKeyword_,
  EmojiKeywordDeleted: EmojiKeywordDeleted_,
  EmojiKeywordsDifference: EmojiKeywordsDifference_,
  EmojiURL: EmojiURL_,
  EmojiLanguage: EmojiLanguage_,
  Folder: Folder_,
  InputFolderPeer: InputFolderPeer_,
  FolderPeer: FolderPeer_,
  UrlAuthResultRequest: UrlAuthResultRequest_,
  UrlAuthResultAccepted: UrlAuthResultAccepted_,
  UrlAuthResultDefault: UrlAuthResultDefault_,
  ChannelLocationEmpty: ChannelLocationEmpty_,
  ChannelLocation: ChannelLocation_,
  PeerLocated: PeerLocated_,
  PeerSelfLocated: PeerSelfLocated_,
  RestrictionReason: RestrictionReason_,
  InputTheme: InputTheme_,
  InputThemeSlug: InputThemeSlug_,
  Theme: Theme_,
  BaseThemeClassic: BaseThemeClassic_,
  BaseThemeDay: BaseThemeDay_,
  BaseThemeNight: BaseThemeNight_,
  BaseThemeTinted: BaseThemeTinted_,
  BaseThemeArctic: BaseThemeArctic_,
  InputThemeSettings: InputThemeSettings_,
  ThemeSettings: ThemeSettings_,
  WebPageAttributeTheme: WebPageAttributeTheme_,
  WebPageAttributeStory: WebPageAttributeStory_,
  BankCardOpenUrl: BankCardOpenUrl_,
  DialogFilter: DialogFilter_,
  DialogFilterDefault: DialogFilterDefault_,
  DialogFilterChatlist: DialogFilterChatlist_,
  DialogFilterSuggested: DialogFilterSuggested_,
  StatsDateRangeDays: StatsDateRangeDays_,
  StatsAbsValueAndPrev: StatsAbsValueAndPrev_,
  StatsPercentValue: StatsPercentValue_,
  StatsGraphAsync: StatsGraphAsync_,
  StatsGraphError: StatsGraphError_,
  StatsGraph: StatsGraph_,
  VideoSize: VideoSize_,
  VideoSizeEmojiMarkup: VideoSizeEmojiMarkup_,
  VideoSizeStickerMarkup: VideoSizeStickerMarkup_,
  StatsGroupTopPoster: StatsGroupTopPoster_,
  StatsGroupTopAdmin: StatsGroupTopAdmin_,
  StatsGroupTopInviter: StatsGroupTopInviter_,
  GlobalPrivacySettings: GlobalPrivacySettings_,
  MessageViews: MessageViews_,
  MessageReplyHeader: MessageReplyHeader_,
  MessageReplyStoryHeader: MessageReplyStoryHeader_,
  MessageReplies: MessageReplies_,
  PeerBlocked: PeerBlocked_,
  GroupCallDiscarded: GroupCallDiscarded_,
  GroupCall: GroupCall_,
  InputGroupCall: InputGroupCall_,
  GroupCallParticipant: GroupCallParticipant_,
  InlineQueryPeerTypeSameBotPM: InlineQueryPeerTypeSameBotPM_,
  InlineQueryPeerTypePM: InlineQueryPeerTypePM_,
  InlineQueryPeerTypeChat: InlineQueryPeerTypeChat_,
  InlineQueryPeerTypeMegagroup: InlineQueryPeerTypeMegagroup_,
  InlineQueryPeerTypeBroadcast: InlineQueryPeerTypeBroadcast_,
  InlineQueryPeerTypeBotPM: InlineQueryPeerTypeBotPM_,
  ChatInviteImporter: ChatInviteImporter_,
  ChatAdminWithInvites: ChatAdminWithInvites_,
  GroupCallParticipantVideoSourceGroup: GroupCallParticipantVideoSourceGroup_,
  GroupCallParticipantVideo: GroupCallParticipantVideo_,
  BotCommandScopeDefault: BotCommandScopeDefault_,
  BotCommandScopeUsers: BotCommandScopeUsers_,
  BotCommandScopeChats: BotCommandScopeChats_,
  BotCommandScopeChatAdmins: BotCommandScopeChatAdmins_,
  BotCommandScopePeer: BotCommandScopePeer_,
  BotCommandScopePeerAdmins: BotCommandScopePeerAdmins_,
  BotCommandScopePeerUser: BotCommandScopePeerUser_,
  SponsoredMessage: SponsoredMessage_,
  SearchResultsCalendarPeriod: SearchResultsCalendarPeriod_,
  SearchResultPosition: SearchResultPosition_,
  ReactionCount: ReactionCount_,
  MessageReactions: MessageReactions_,
  AvailableReaction: AvailableReaction_,
  MessagePeerReaction: MessagePeerReaction_,
  GroupCallStreamChannel: GroupCallStreamChannel_,
  AttachMenuBotIconColor: AttachMenuBotIconColor_,
  AttachMenuBotIcon: AttachMenuBotIcon_,
  AttachMenuBot: AttachMenuBot_,
  AttachMenuBotsNotModified: AttachMenuBotsNotModified_,
  AttachMenuBots: AttachMenuBots_,
  AttachMenuBotsBot: AttachMenuBotsBot_,
  WebViewResultUrl: WebViewResultUrl_,
  SimpleWebViewResultUrl: SimpleWebViewResultUrl_,
  WebViewMessageSent: WebViewMessageSent_,
  BotMenuButtonDefault: BotMenuButtonDefault_,
  BotMenuButtonCommands: BotMenuButtonCommands_,
  BotMenuButton: BotMenuButton_,
  NotificationSoundDefault: NotificationSoundDefault_,
  NotificationSoundNone: NotificationSoundNone_,
  NotificationSoundLocal: NotificationSoundLocal_,
  NotificationSoundRingtone: NotificationSoundRingtone_,
  AttachMenuPeerTypeSameBotPM: AttachMenuPeerTypeSameBotPM_,
  AttachMenuPeerTypeBotPM: AttachMenuPeerTypeBotPM_,
  AttachMenuPeerTypePM: AttachMenuPeerTypePM_,
  AttachMenuPeerTypeChat: AttachMenuPeerTypeChat_,
  AttachMenuPeerTypeBroadcast: AttachMenuPeerTypeBroadcast_,
  InputInvoiceMessage: InputInvoiceMessage_,
  InputInvoiceSlug: InputInvoiceSlug_,
  InputInvoicePremiumGiftCode: InputInvoicePremiumGiftCode_,
  InputStorePaymentPremiumSubscription: InputStorePaymentPremiumSubscription_,
  InputStorePaymentGiftPremium: InputStorePaymentGiftPremium_,
  InputStorePaymentPremiumGiftCode: InputStorePaymentPremiumGiftCode_,
  InputStorePaymentPremiumGiveaway: InputStorePaymentPremiumGiveaway_,
  PremiumGiftOption: PremiumGiftOption_,
  PaymentFormMethod: PaymentFormMethod_,
  EmojiStatusEmpty: EmojiStatusEmpty_,
  EmojiStatus: EmojiStatus_,
  EmojiStatusUntil: EmojiStatusUntil_,
  ReactionEmpty: ReactionEmpty_,
  ReactionEmoji: ReactionEmoji_,
  ReactionCustomEmoji: ReactionCustomEmoji_,
  ChatReactionsNone: ChatReactionsNone_,
  ChatReactionsAll: ChatReactionsAll_,
  ChatReactionsSome: ChatReactionsSome_,
  EmailVerifyPurposeLoginSetup: EmailVerifyPurposeLoginSetup_,
  EmailVerifyPurposeLoginChange: EmailVerifyPurposeLoginChange_,
  EmailVerifyPurposePassport: EmailVerifyPurposePassport_,
  EmailVerificationCode: EmailVerificationCode_,
  EmailVerificationGoogle: EmailVerificationGoogle_,
  EmailVerificationApple: EmailVerificationApple_,
  PremiumSubscriptionOption: PremiumSubscriptionOption_,
  SendAsPeer: SendAsPeer_,
  MessageExtendedMediaPreview: MessageExtendedMediaPreview_,
  MessageExtendedMedia: MessageExtendedMedia_,
  StickerKeyword: StickerKeyword_,
  Username: Username_,
  ForumTopicDeleted: ForumTopicDeleted_,
  ForumTopic: ForumTopic_,
  DefaultHistoryTTL: DefaultHistoryTTL_,
  ExportedContactToken: ExportedContactToken_,
  RequestPeerTypeUser: RequestPeerTypeUser_,
  RequestPeerTypeChat: RequestPeerTypeChat_,
  RequestPeerTypeBroadcast: RequestPeerTypeBroadcast_,
  EmojiListNotModified: EmojiListNotModified_,
  EmojiList: EmojiList_,
  EmojiGroup: EmojiGroup_,
  TextWithEntities: TextWithEntities_,
  AutoSaveSettings: AutoSaveSettings_,
  AutoSaveException: AutoSaveException_,
  InputBotAppID: InputBotAppID_,
  InputBotAppShortName: InputBotAppShortName_,
  BotAppNotModified: BotAppNotModified_,
  BotApp: BotApp_,
  AppWebViewResultUrl: AppWebViewResultUrl_,
  InlineBotWebView: InlineBotWebView_,
  ReadParticipantDate: ReadParticipantDate_,
  InputChatlistDialogFilter: InputChatlistDialogFilter_,
  ExportedChatlistInvite: ExportedChatlistInvite_,
  MessagePeerVote: MessagePeerVote_,
  MessagePeerVoteInputOption: MessagePeerVoteInputOption_,
  MessagePeerVoteMultiple: MessagePeerVoteMultiple_,
  SponsoredWebPage: SponsoredWebPage_,
  StoryViews: StoryViews_,
  StoryItemDeleted: StoryItemDeleted_,
  StoryItemSkipped: StoryItemSkipped_,
  StoryItem: StoryItem_,
  StoryView: StoryView_,
  StoryViewPublicForward: StoryViewPublicForward_,
  StoryViewPublicRepost: StoryViewPublicRepost_,
  InputReplyToMessage: InputReplyToMessage_,
  InputReplyToStory: InputReplyToStory_,
  ExportedStoryLink: ExportedStoryLink_,
  StoriesStealthMode: StoriesStealthMode_,
  MediaAreaCoordinates: MediaAreaCoordinates_,
  MediaAreaVenue: MediaAreaVenue_,
  InputMediaAreaVenue: InputMediaAreaVenue_,
  MediaAreaGeoPoint: MediaAreaGeoPoint_,
  MediaAreaSuggestedReaction: MediaAreaSuggestedReaction_,
  MediaAreaChannelPost: MediaAreaChannelPost_,
  InputMediaAreaChannelPost: InputMediaAreaChannelPost_,
  PeerStories: PeerStories_,
  PremiumGiftCodeOption: PremiumGiftCodeOption_,
  PrepaidGiveaway: PrepaidGiveaway_,
  Boost: Boost_,
  MyBoost: MyBoost_,
  StoryFwdHeader: StoryFwdHeader_,
  PostInteractionCountersMessage: PostInteractionCountersMessage_,
  PostInteractionCountersStory: PostInteractionCountersStory_,
  PublicForwardMessage: PublicForwardMessage_,
  PublicForwardStory: PublicForwardStory_,
  PeerColor: PeerColor_,
  StoryReaction: StoryReaction_,
  StoryReactionPublicForward: StoryReactionPublicForward_,
  StoryReactionPublicRepost: StoryReactionPublicRepost_,
  SavedDialog: SavedDialog_,
  SavedReactionTag: SavedReactionTag_,
  OutboxReadDate: OutboxReadDate_,
  storage: {
    FileUnknown: storage_FileUnknown_,
    FilePartial: storage_FilePartial_,
    FileJpeg: storage_FileJpeg_,
    FileGif: storage_FileGif_,
    FilePng: storage_FilePng_,
    FilePdf: storage_FilePdf_,
    FileMp3: storage_FileMp3_,
    FileMov: storage_FileMov_,
    FileMp4: storage_FileMp4_,
    FileWebp: storage_FileWebp_,
  },
  auth: {
    SentCode: auth_SentCode_,
    SentCodeSuccess: auth_SentCodeSuccess_,
    Authorization: auth_Authorization_,
    AuthorizationSignUpRequired: auth_AuthorizationSignUpRequired_,
    ExportedAuthorization: auth_ExportedAuthorization_,
    PasswordRecovery: auth_PasswordRecovery_,
    CodeTypeSms: auth_CodeTypeSms_,
    CodeTypeCall: auth_CodeTypeCall_,
    CodeTypeFlashCall: auth_CodeTypeFlashCall_,
    CodeTypeMissedCall: auth_CodeTypeMissedCall_,
    CodeTypeFragmentSms: auth_CodeTypeFragmentSms_,
    SentCodeTypeApp: auth_SentCodeTypeApp_,
    SentCodeTypeSms: auth_SentCodeTypeSms_,
    SentCodeTypeCall: auth_SentCodeTypeCall_,
    SentCodeTypeFlashCall: auth_SentCodeTypeFlashCall_,
    SentCodeTypeMissedCall: auth_SentCodeTypeMissedCall_,
    SentCodeTypeEmailCode: auth_SentCodeTypeEmailCode_,
    SentCodeTypeSetUpEmailRequired: auth_SentCodeTypeSetUpEmailRequired_,
    SentCodeTypeFragmentSms: auth_SentCodeTypeFragmentSms_,
    SentCodeTypeFirebaseSms: auth_SentCodeTypeFirebaseSms_,
    LoginToken: auth_LoginToken_,
    LoginTokenMigrateTo: auth_LoginTokenMigrateTo_,
    LoginTokenSuccess: auth_LoginTokenSuccess_,
    LoggedOut: auth_LoggedOut_,
  },
  contacts: {
    ContactsNotModified: contacts_ContactsNotModified_,
    Contacts: contacts_Contacts_,
    ImportedContacts: contacts_ImportedContacts_,
    Blocked: contacts_Blocked_,
    BlockedSlice: contacts_BlockedSlice_,
    Found: contacts_Found_,
    ResolvedPeer: contacts_ResolvedPeer_,
    TopPeersNotModified: contacts_TopPeersNotModified_,
    TopPeers: contacts_TopPeers_,
    TopPeersDisabled: contacts_TopPeersDisabled_,
  },
  messages: {
    Dialogs: messages_Dialogs_,
    DialogsSlice: messages_DialogsSlice_,
    DialogsNotModified: messages_DialogsNotModified_,
    Messages: messages_Messages_,
    MessagesSlice: messages_MessagesSlice_,
    ChannelMessages: messages_ChannelMessages_,
    MessagesNotModified: messages_MessagesNotModified_,
    Chats: messages_Chats_,
    ChatsSlice: messages_ChatsSlice_,
    ChatFull: messages_ChatFull_,
    AffectedHistory: messages_AffectedHistory_,
    DhConfigNotModified: messages_DhConfigNotModified_,
    DhConfig: messages_DhConfig_,
    SentEncryptedMessage: messages_SentEncryptedMessage_,
    SentEncryptedFile: messages_SentEncryptedFile_,
    StickersNotModified: messages_StickersNotModified_,
    Stickers: messages_Stickers_,
    AllStickersNotModified: messages_AllStickersNotModified_,
    AllStickers: messages_AllStickers_,
    AffectedMessages: messages_AffectedMessages_,
    StickerSet: messages_StickerSet_,
    StickerSetNotModified: messages_StickerSetNotModified_,
    SavedGifsNotModified: messages_SavedGifsNotModified_,
    SavedGifs: messages_SavedGifs_,
    BotResults: messages_BotResults_,
    BotCallbackAnswer: messages_BotCallbackAnswer_,
    MessageEditData: messages_MessageEditData_,
    PeerDialogs: messages_PeerDialogs_,
    FeaturedStickersNotModified: messages_FeaturedStickersNotModified_,
    FeaturedStickers: messages_FeaturedStickers_,
    RecentStickersNotModified: messages_RecentStickersNotModified_,
    RecentStickers: messages_RecentStickers_,
    ArchivedStickers: messages_ArchivedStickers_,
    StickerSetInstallResultSuccess: messages_StickerSetInstallResultSuccess_,
    StickerSetInstallResultArchive: messages_StickerSetInstallResultArchive_,
    HighScores: messages_HighScores_,
    FavedStickersNotModified: messages_FavedStickersNotModified_,
    FavedStickers: messages_FavedStickers_,
    FoundStickerSetsNotModified: messages_FoundStickerSetsNotModified_,
    FoundStickerSets: messages_FoundStickerSets_,
    SearchCounter: messages_SearchCounter_,
    InactiveChats: messages_InactiveChats_,
    VotesList: messages_VotesList_,
    MessageViews: messages_MessageViews_,
    DiscussionMessage: messages_DiscussionMessage_,
    HistoryImport: messages_HistoryImport_,
    HistoryImportParsed: messages_HistoryImportParsed_,
    AffectedFoundMessages: messages_AffectedFoundMessages_,
    ExportedChatInvites: messages_ExportedChatInvites_,
    ExportedChatInvite: messages_ExportedChatInvite_,
    ExportedChatInviteReplaced: messages_ExportedChatInviteReplaced_,
    ChatInviteImporters: messages_ChatInviteImporters_,
    ChatAdminsWithInvites: messages_ChatAdminsWithInvites_,
    CheckedHistoryImportPeer: messages_CheckedHistoryImportPeer_,
    SponsoredMessages: messages_SponsoredMessages_,
    SponsoredMessagesEmpty: messages_SponsoredMessagesEmpty_,
    SearchResultsCalendar: messages_SearchResultsCalendar_,
    SearchResultsPositions: messages_SearchResultsPositions_,
    PeerSettings: messages_PeerSettings_,
    MessageReactionsList: messages_MessageReactionsList_,
    AvailableReactionsNotModified: messages_AvailableReactionsNotModified_,
    AvailableReactions: messages_AvailableReactions_,
    TranscribedAudio: messages_TranscribedAudio_,
    ReactionsNotModified: messages_ReactionsNotModified_,
    Reactions: messages_Reactions_,
    ForumTopics: messages_ForumTopics_,
    EmojiGroupsNotModified: messages_EmojiGroupsNotModified_,
    EmojiGroups: messages_EmojiGroups_,
    TranslateResult: messages_TranslateResult_,
    BotApp: messages_BotApp_,
    WebPage: messages_WebPage_,
    SavedDialogs: messages_SavedDialogs_,
    SavedDialogsSlice: messages_SavedDialogsSlice_,
    SavedDialogsNotModified: messages_SavedDialogsNotModified_,
    SavedReactionTagsNotModified: messages_SavedReactionTagsNotModified_,
    SavedReactionTags: messages_SavedReactionTags_,
  },
  updates: {
    State: updates_State_,
    DifferenceEmpty: updates_DifferenceEmpty_,
    Difference: updates_Difference_,
    DifferenceSlice: updates_DifferenceSlice_,
    DifferenceTooLong: updates_DifferenceTooLong_,
    ChannelDifferenceEmpty: updates_ChannelDifferenceEmpty_,
    ChannelDifferenceTooLong: updates_ChannelDifferenceTooLong_,
    ChannelDifference: updates_ChannelDifference_,
  },
  photos: {
    Photos: photos_Photos_,
    PhotosSlice: photos_PhotosSlice_,
    Photo: photos_Photo_,
  },
  upload: {
    File: upload_File_,
    FileCdnRedirect: upload_FileCdnRedirect_,
    WebFile: upload_WebFile_,
    CdnFileReuploadNeeded: upload_CdnFileReuploadNeeded_,
    CdnFile: upload_CdnFile_,
  },
  help: {
    AppUpdate: help_AppUpdate_,
    NoAppUpdate: help_NoAppUpdate_,
    InviteText: help_InviteText_,
    Support: help_Support_,
    TermsOfService: help_TermsOfService_,
    RecentMeUrls: help_RecentMeUrls_,
    TermsOfServiceUpdateEmpty: help_TermsOfServiceUpdateEmpty_,
    TermsOfServiceUpdate: help_TermsOfServiceUpdate_,
    DeepLinkInfoEmpty: help_DeepLinkInfoEmpty_,
    DeepLinkInfo: help_DeepLinkInfo_,
    PassportConfigNotModified: help_PassportConfigNotModified_,
    PassportConfig: help_PassportConfig_,
    SupportName: help_SupportName_,
    UserInfoEmpty: help_UserInfoEmpty_,
    UserInfo: help_UserInfo_,
    PromoDataEmpty: help_PromoDataEmpty_,
    PromoData: help_PromoData_,
    CountryCode: help_CountryCode_,
    Country: help_Country_,
    CountriesListNotModified: help_CountriesListNotModified_,
    CountriesList: help_CountriesList_,
    PremiumPromo: help_PremiumPromo_,
    AppConfigNotModified: help_AppConfigNotModified_,
    AppConfig: help_AppConfig_,
    PeerColorSet: help_PeerColorSet_,
    PeerColorProfileSet: help_PeerColorProfileSet_,
    PeerColorOption: help_PeerColorOption_,
    PeerColorsNotModified: help_PeerColorsNotModified_,
    PeerColors: help_PeerColors_,
  },
  account: {
    PrivacyRules: account_PrivacyRules_,
    Authorizations: account_Authorizations_,
    Password: account_Password_,
    PasswordSettings: account_PasswordSettings_,
    PasswordInputSettings: account_PasswordInputSettings_,
    TmpPassword: account_TmpPassword_,
    WebAuthorizations: account_WebAuthorizations_,
    AuthorizationForm: account_AuthorizationForm_,
    SentEmailCode: account_SentEmailCode_,
    Takeout: account_Takeout_,
    WallPapersNotModified: account_WallPapersNotModified_,
    WallPapers: account_WallPapers_,
    AutoDownloadSettings: account_AutoDownloadSettings_,
    ThemesNotModified: account_ThemesNotModified_,
    Themes: account_Themes_,
    ContentSettings: account_ContentSettings_,
    ResetPasswordFailedWait: account_ResetPasswordFailedWait_,
    ResetPasswordRequestedWait: account_ResetPasswordRequestedWait_,
    ResetPasswordOk: account_ResetPasswordOk_,
    SavedRingtonesNotModified: account_SavedRingtonesNotModified_,
    SavedRingtones: account_SavedRingtones_,
    SavedRingtone: account_SavedRingtone_,
    SavedRingtoneConverted: account_SavedRingtoneConverted_,
    EmojiStatusesNotModified: account_EmojiStatusesNotModified_,
    EmojiStatuses: account_EmojiStatuses_,
    EmailVerified: account_EmailVerified_,
    EmailVerifiedLogin: account_EmailVerifiedLogin_,
    AutoSaveSettings: account_AutoSaveSettings_,
  },
  channels: {
    ChannelParticipants: channels_ChannelParticipants_,
    ChannelParticipantsNotModified: channels_ChannelParticipantsNotModified_,
    ChannelParticipant: channels_ChannelParticipant_,
    AdminLogResults: channels_AdminLogResults_,
    SendAsPeers: channels_SendAsPeers_,
  },
  payments: {
    PaymentForm: payments_PaymentForm_,
    ValidatedRequestedInfo: payments_ValidatedRequestedInfo_,
    PaymentResult: payments_PaymentResult_,
    PaymentVerificationNeeded: payments_PaymentVerificationNeeded_,
    PaymentReceipt: payments_PaymentReceipt_,
    SavedInfo: payments_SavedInfo_,
    BankCardData: payments_BankCardData_,
    ExportedInvoice: payments_ExportedInvoice_,
    CheckedGiftCode: payments_CheckedGiftCode_,
    GiveawayInfo: payments_GiveawayInfo_,
    GiveawayInfoResults: payments_GiveawayInfoResults_,
  },
  phone: {
    PhoneCall: phone_PhoneCall_,
    GroupCall: phone_GroupCall_,
    GroupParticipants: phone_GroupParticipants_,
    JoinAsPeers: phone_JoinAsPeers_,
    ExportedGroupCallInvite: phone_ExportedGroupCallInvite_,
    GroupCallStreamChannels: phone_GroupCallStreamChannels_,
    GroupCallStreamRtmpUrl: phone_GroupCallStreamRtmpUrl_,
  },
  stats: {
    BroadcastStats: stats_BroadcastStats_,
    MegagroupStats: stats_MegagroupStats_,
    MessageStats: stats_MessageStats_,
    StoryStats: stats_StoryStats_,
    PublicForwards: stats_PublicForwards_,
  },
  stickers: {
    SuggestedShortName: stickers_SuggestedShortName_,
  },
  users: {
    UserFull: users_UserFull_,
  },
  chatlists: {
    ExportedChatlistInvite: chatlists_ExportedChatlistInvite_,
    ExportedInvites: chatlists_ExportedInvites_,
    ChatlistInviteAlready: chatlists_ChatlistInviteAlready_,
    ChatlistInvite: chatlists_ChatlistInvite_,
    ChatlistUpdates: chatlists_ChatlistUpdates_,
  },
  bots: {
    BotInfo: bots_BotInfo_,
  },
  stories: {
    AllStoriesNotModified: stories_AllStoriesNotModified_,
    AllStories: stories_AllStories_,
    Stories: stories_Stories_,
    StoryViewsList: stories_StoryViewsList_,
    StoryViews: stories_StoryViews_,
    PeerStories: stories_PeerStories_,
    StoryReactionsList: stories_StoryReactionsList_,
  },
  premium: {
    BoostsList: premium_BoostsList_,
    MyBoosts: premium_MyBoosts_,
    BoostsStatus: premium_BoostsStatus_,
  },
};
export declare namespace types {
  type Type = Type_;
  type TypeX = TypeX_;
  type _ResPQ = _ResPQ_;
  type _P_Q_inner_data = _P_Q_inner_data_;
  type _Server_DH_Params = _Server_DH_Params_;
  type _Server_DH_inner_data = _Server_DH_inner_data_;
  type _Client_DH_Inner_Data = _Client_DH_Inner_Data_;
  type _Set_client_DH_params_answer = _Set_client_DH_params_answer_;
  type _BindAuthKeyInner = _BindAuthKeyInner_;
  type _RpcError = _RpcError_;
  type _RpcDropAnswer = _RpcDropAnswer_;
  type _FutureSalt = _FutureSalt_;
  type _FutureSalts = _FutureSalts_;
  type _Pong = _Pong_;
  type _DestroySessionRes = _DestroySessionRes_;
  type _NewSession = _NewSession_;
  type _Object = _Object_;
  type _MsgsAck = _MsgsAck_;
  type _BadMsgNotification = _BadMsgNotification_;
  type _MsgResendReq = _MsgResendReq_;
  type _MsgsStateReq = _MsgsStateReq_;
  type _MsgsStateInfo = _MsgsStateInfo_;
  type _MsgsAllInfo = _MsgsAllInfo_;
  type _MsgDetailedInfo = _MsgDetailedInfo_;
  type _DestroyAuthKeyRes = _DestroyAuthKeyRes_;
  type _HttpWait = _HttpWait_;
  type _True = _True_;
  type _Error = _Error_;
  type _Null = _Null_;
  type _InputPeer = _InputPeer_;
  type _InputUser = _InputUser_;
  type _InputContact = _InputContact_;
  type _InputFile = _InputFile_;
  type _InputMedia = _InputMedia_;
  type _InputChatPhoto = _InputChatPhoto_;
  type _InputGeoPoint = _InputGeoPoint_;
  type _InputPhoto = _InputPhoto_;
  type _InputFileLocation = _InputFileLocation_;
  type _Peer = _Peer_;
  type _storage_FileType = _storage_FileType_;
  type _User = _User_;
  type _UserProfilePhoto = _UserProfilePhoto_;
  type _UserStatus = _UserStatus_;
  type _Chat = _Chat_;
  type _ChatFull = _ChatFull_;
  type _ChatParticipant = _ChatParticipant_;
  type _ChatParticipants = _ChatParticipants_;
  type _ChatPhoto = _ChatPhoto_;
  type _Message = _Message_;
  type _MessageMedia = _MessageMedia_;
  type _MessageAction = _MessageAction_;
  type _Dialog = _Dialog_;
  type _Photo = _Photo_;
  type _PhotoSize = _PhotoSize_;
  type _GeoPoint = _GeoPoint_;
  type _auth_SentCode = _auth_SentCode_;
  type _auth_Authorization = _auth_Authorization_;
  type _auth_ExportedAuthorization = _auth_ExportedAuthorization_;
  type _InputNotifyPeer = _InputNotifyPeer_;
  type _InputPeerNotifySettings = _InputPeerNotifySettings_;
  type _PeerNotifySettings = _PeerNotifySettings_;
  type _PeerSettings = _PeerSettings_;
  type _WallPaper = _WallPaper_;
  type _ReportReason = _ReportReason_;
  type _UserFull = _UserFull_;
  type _Contact = _Contact_;
  type _ImportedContact = _ImportedContact_;
  type _ContactStatus = _ContactStatus_;
  type _contacts_Contacts = _contacts_Contacts_;
  type _contacts_ImportedContacts = _contacts_ImportedContacts_;
  type _contacts_Blocked = _contacts_Blocked_;
  type _messages_Dialogs = _messages_Dialogs_;
  type _messages_Messages = _messages_Messages_;
  type _messages_Chats = _messages_Chats_;
  type _messages_ChatFull = _messages_ChatFull_;
  type _messages_AffectedHistory = _messages_AffectedHistory_;
  type _MessagesFilter = _MessagesFilter_;
  type _Update = _Update_;
  type _updates_State = _updates_State_;
  type _updates_Difference = _updates_Difference_;
  type _Updates = _Updates_;
  type _photos_Photos = _photos_Photos_;
  type _photos_Photo = _photos_Photo_;
  type _upload_File = _upload_File_;
  type _DcOption = _DcOption_;
  type _Config = _Config_;
  type _NearestDc = _NearestDc_;
  type _help_AppUpdate = _help_AppUpdate_;
  type _help_InviteText = _help_InviteText_;
  type _EncryptedChat = _EncryptedChat_;
  type _InputEncryptedChat = _InputEncryptedChat_;
  type _EncryptedFile = _EncryptedFile_;
  type _InputEncryptedFile = _InputEncryptedFile_;
  type _EncryptedMessage = _EncryptedMessage_;
  type _messages_DhConfig = _messages_DhConfig_;
  type _messages_SentEncryptedMessage = _messages_SentEncryptedMessage_;
  type _InputDocument = _InputDocument_;
  type _Document = _Document_;
  type _help_Support = _help_Support_;
  type _NotifyPeer = _NotifyPeer_;
  type _SendMessageAction = _SendMessageAction_;
  type _contacts_Found = _contacts_Found_;
  type _InputPrivacyKey = _InputPrivacyKey_;
  type _PrivacyKey = _PrivacyKey_;
  type _InputPrivacyRule = _InputPrivacyRule_;
  type _PrivacyRule = _PrivacyRule_;
  type _account_PrivacyRules = _account_PrivacyRules_;
  type _AccountDaysTTL = _AccountDaysTTL_;
  type _DocumentAttribute = _DocumentAttribute_;
  type _messages_Stickers = _messages_Stickers_;
  type _StickerPack = _StickerPack_;
  type _messages_AllStickers = _messages_AllStickers_;
  type _messages_AffectedMessages = _messages_AffectedMessages_;
  type _WebPage = _WebPage_;
  type _Authorization = _Authorization_;
  type _account_Authorizations = _account_Authorizations_;
  type _account_Password = _account_Password_;
  type _account_PasswordSettings = _account_PasswordSettings_;
  type _account_PasswordInputSettings = _account_PasswordInputSettings_;
  type _auth_PasswordRecovery = _auth_PasswordRecovery_;
  type _ReceivedNotifyMessage = _ReceivedNotifyMessage_;
  type _ExportedChatInvite = _ExportedChatInvite_;
  type _ChatInvite = _ChatInvite_;
  type _InputStickerSet = _InputStickerSet_;
  type _StickerSet = _StickerSet_;
  type _messages_StickerSet = _messages_StickerSet_;
  type _BotCommand = _BotCommand_;
  type _BotInfo = _BotInfo_;
  type _KeyboardButton = _KeyboardButton_;
  type _KeyboardButtonRow = _KeyboardButtonRow_;
  type _ReplyMarkup = _ReplyMarkup_;
  type _MessageEntity = _MessageEntity_;
  type _InputChannel = _InputChannel_;
  type _contacts_ResolvedPeer = _contacts_ResolvedPeer_;
  type _MessageRange = _MessageRange_;
  type _updates_ChannelDifference = _updates_ChannelDifference_;
  type _ChannelMessagesFilter = _ChannelMessagesFilter_;
  type _ChannelParticipant = _ChannelParticipant_;
  type _ChannelParticipantsFilter = _ChannelParticipantsFilter_;
  type _channels_ChannelParticipants = _channels_ChannelParticipants_;
  type _channels_ChannelParticipant = _channels_ChannelParticipant_;
  type _help_TermsOfService = _help_TermsOfService_;
  type _messages_SavedGifs = _messages_SavedGifs_;
  type _InputBotInlineMessage = _InputBotInlineMessage_;
  type _InputBotInlineResult = _InputBotInlineResult_;
  type _BotInlineMessage = _BotInlineMessage_;
  type _BotInlineResult = _BotInlineResult_;
  type _messages_BotResults = _messages_BotResults_;
  type _ExportedMessageLink = _ExportedMessageLink_;
  type _MessageFwdHeader = _MessageFwdHeader_;
  type _auth_CodeType = _auth_CodeType_;
  type _auth_SentCodeType = _auth_SentCodeType_;
  type _messages_BotCallbackAnswer = _messages_BotCallbackAnswer_;
  type _messages_MessageEditData = _messages_MessageEditData_;
  type _InputBotInlineMessageID = _InputBotInlineMessageID_;
  type _InlineBotSwitchPM = _InlineBotSwitchPM_;
  type _messages_PeerDialogs = _messages_PeerDialogs_;
  type _TopPeer = _TopPeer_;
  type _TopPeerCategory = _TopPeerCategory_;
  type _TopPeerCategoryPeers = _TopPeerCategoryPeers_;
  type _contacts_TopPeers = _contacts_TopPeers_;
  type _DraftMessage = _DraftMessage_;
  type _messages_FeaturedStickers = _messages_FeaturedStickers_;
  type _messages_RecentStickers = _messages_RecentStickers_;
  type _messages_ArchivedStickers = _messages_ArchivedStickers_;
  type _messages_StickerSetInstallResult = _messages_StickerSetInstallResult_;
  type _StickerSetCovered = _StickerSetCovered_;
  type _MaskCoords = _MaskCoords_;
  type _InputStickeredMedia = _InputStickeredMedia_;
  type _Game = _Game_;
  type _InputGame = _InputGame_;
  type _HighScore = _HighScore_;
  type _messages_HighScores = _messages_HighScores_;
  type _RichText = _RichText_;
  type _PageBlock = _PageBlock_;
  type _PhoneCallDiscardReason = _PhoneCallDiscardReason_;
  type _DataJSON = _DataJSON_;
  type _LabeledPrice = _LabeledPrice_;
  type _Invoice = _Invoice_;
  type _PaymentCharge = _PaymentCharge_;
  type _PostAddress = _PostAddress_;
  type _PaymentRequestedInfo = _PaymentRequestedInfo_;
  type _PaymentSavedCredentials = _PaymentSavedCredentials_;
  type _WebDocument = _WebDocument_;
  type _InputWebDocument = _InputWebDocument_;
  type _InputWebFileLocation = _InputWebFileLocation_;
  type _upload_WebFile = _upload_WebFile_;
  type _payments_PaymentForm = _payments_PaymentForm_;
  type _payments_ValidatedRequestedInfo = _payments_ValidatedRequestedInfo_;
  type _payments_PaymentResult = _payments_PaymentResult_;
  type _payments_PaymentReceipt = _payments_PaymentReceipt_;
  type _payments_SavedInfo = _payments_SavedInfo_;
  type _InputPaymentCredentials = _InputPaymentCredentials_;
  type _account_TmpPassword = _account_TmpPassword_;
  type _ShippingOption = _ShippingOption_;
  type _InputStickerSetItem = _InputStickerSetItem_;
  type _InputPhoneCall = _InputPhoneCall_;
  type _PhoneCall = _PhoneCall_;
  type _PhoneConnection = _PhoneConnection_;
  type _PhoneCallProtocol = _PhoneCallProtocol_;
  type _phone_PhoneCall = _phone_PhoneCall_;
  type _upload_CdnFile = _upload_CdnFile_;
  type _CdnPublicKey = _CdnPublicKey_;
  type _CdnConfig = _CdnConfig_;
  type _LangPackString = _LangPackString_;
  type _LangPackDifference = _LangPackDifference_;
  type _LangPackLanguage = _LangPackLanguage_;
  type _ChannelAdminLogEventAction = _ChannelAdminLogEventAction_;
  type _ChannelAdminLogEvent = _ChannelAdminLogEvent_;
  type _channels_AdminLogResults = _channels_AdminLogResults_;
  type _ChannelAdminLogEventsFilter = _ChannelAdminLogEventsFilter_;
  type _PopularContact = _PopularContact_;
  type _messages_FavedStickers = _messages_FavedStickers_;
  type _RecentMeUrl = _RecentMeUrl_;
  type _help_RecentMeUrls = _help_RecentMeUrls_;
  type _InputSingleMedia = _InputSingleMedia_;
  type _WebAuthorization = _WebAuthorization_;
  type _account_WebAuthorizations = _account_WebAuthorizations_;
  type _InputMessage = _InputMessage_;
  type _InputDialogPeer = _InputDialogPeer_;
  type _DialogPeer = _DialogPeer_;
  type _messages_FoundStickerSets = _messages_FoundStickerSets_;
  type _FileHash = _FileHash_;
  type _InputClientProxy = _InputClientProxy_;
  type _help_TermsOfServiceUpdate = _help_TermsOfServiceUpdate_;
  type _InputSecureFile = _InputSecureFile_;
  type _SecureFile = _SecureFile_;
  type _SecureData = _SecureData_;
  type _SecurePlainData = _SecurePlainData_;
  type _SecureValueType = _SecureValueType_;
  type _SecureValue = _SecureValue_;
  type _InputSecureValue = _InputSecureValue_;
  type _SecureValueHash = _SecureValueHash_;
  type _SecureValueError = _SecureValueError_;
  type _SecureCredentialsEncrypted = _SecureCredentialsEncrypted_;
  type _account_AuthorizationForm = _account_AuthorizationForm_;
  type _account_SentEmailCode = _account_SentEmailCode_;
  type _help_DeepLinkInfo = _help_DeepLinkInfo_;
  type _SavedContact = _SavedContact_;
  type _account_Takeout = _account_Takeout_;
  type _PasswordKdfAlgo = _PasswordKdfAlgo_;
  type _SecurePasswordKdfAlgo = _SecurePasswordKdfAlgo_;
  type _SecureSecretSettings = _SecureSecretSettings_;
  type _InputCheckPasswordSRP = _InputCheckPasswordSRP_;
  type _SecureRequiredType = _SecureRequiredType_;
  type _help_PassportConfig = _help_PassportConfig_;
  type _InputAppEvent = _InputAppEvent_;
  type _JSONObjectValue = _JSONObjectValue_;
  type _JSONValue = _JSONValue_;
  type _PageTableCell = _PageTableCell_;
  type _PageTableRow = _PageTableRow_;
  type _PageCaption = _PageCaption_;
  type _PageListItem = _PageListItem_;
  type _PageListOrderedItem = _PageListOrderedItem_;
  type _PageRelatedArticle = _PageRelatedArticle_;
  type _Page = _Page_;
  type _help_SupportName = _help_SupportName_;
  type _help_UserInfo = _help_UserInfo_;
  type _PollAnswer = _PollAnswer_;
  type _Poll = _Poll_;
  type _PollAnswerVoters = _PollAnswerVoters_;
  type _PollResults = _PollResults_;
  type _ChatOnlines = _ChatOnlines_;
  type _StatsURL = _StatsURL_;
  type _ChatAdminRights = _ChatAdminRights_;
  type _ChatBannedRights = _ChatBannedRights_;
  type _InputWallPaper = _InputWallPaper_;
  type _account_WallPapers = _account_WallPapers_;
  type _CodeSettings = _CodeSettings_;
  type _WallPaperSettings = _WallPaperSettings_;
  type _AutoDownloadSettings = _AutoDownloadSettings_;
  type _account_AutoDownloadSettings = _account_AutoDownloadSettings_;
  type _EmojiKeyword = _EmojiKeyword_;
  type _EmojiKeywordsDifference = _EmojiKeywordsDifference_;
  type _EmojiURL = _EmojiURL_;
  type _EmojiLanguage = _EmojiLanguage_;
  type _Folder = _Folder_;
  type _InputFolderPeer = _InputFolderPeer_;
  type _FolderPeer = _FolderPeer_;
  type _messages_SearchCounter = _messages_SearchCounter_;
  type _UrlAuthResult = _UrlAuthResult_;
  type _ChannelLocation = _ChannelLocation_;
  type _PeerLocated = _PeerLocated_;
  type _RestrictionReason = _RestrictionReason_;
  type _InputTheme = _InputTheme_;
  type _Theme = _Theme_;
  type _account_Themes = _account_Themes_;
  type _auth_LoginToken = _auth_LoginToken_;
  type _account_ContentSettings = _account_ContentSettings_;
  type _messages_InactiveChats = _messages_InactiveChats_;
  type _BaseTheme = _BaseTheme_;
  type _InputThemeSettings = _InputThemeSettings_;
  type _ThemeSettings = _ThemeSettings_;
  type _WebPageAttribute = _WebPageAttribute_;
  type _messages_VotesList = _messages_VotesList_;
  type _BankCardOpenUrl = _BankCardOpenUrl_;
  type _payments_BankCardData = _payments_BankCardData_;
  type _DialogFilter = _DialogFilter_;
  type _DialogFilterSuggested = _DialogFilterSuggested_;
  type _StatsDateRangeDays = _StatsDateRangeDays_;
  type _StatsAbsValueAndPrev = _StatsAbsValueAndPrev_;
  type _StatsPercentValue = _StatsPercentValue_;
  type _StatsGraph = _StatsGraph_;
  type _stats_BroadcastStats = _stats_BroadcastStats_;
  type _help_PromoData = _help_PromoData_;
  type _VideoSize = _VideoSize_;
  type _StatsGroupTopPoster = _StatsGroupTopPoster_;
  type _StatsGroupTopAdmin = _StatsGroupTopAdmin_;
  type _StatsGroupTopInviter = _StatsGroupTopInviter_;
  type _stats_MegagroupStats = _stats_MegagroupStats_;
  type _GlobalPrivacySettings = _GlobalPrivacySettings_;
  type _help_CountryCode = _help_CountryCode_;
  type _help_Country = _help_Country_;
  type _help_CountriesList = _help_CountriesList_;
  type _MessageViews = _MessageViews_;
  type _messages_MessageViews = _messages_MessageViews_;
  type _messages_DiscussionMessage = _messages_DiscussionMessage_;
  type _MessageReplyHeader = _MessageReplyHeader_;
  type _MessageReplies = _MessageReplies_;
  type _PeerBlocked = _PeerBlocked_;
  type _stats_MessageStats = _stats_MessageStats_;
  type _GroupCall = _GroupCall_;
  type _InputGroupCall = _InputGroupCall_;
  type _GroupCallParticipant = _GroupCallParticipant_;
  type _phone_GroupCall = _phone_GroupCall_;
  type _phone_GroupParticipants = _phone_GroupParticipants_;
  type _InlineQueryPeerType = _InlineQueryPeerType_;
  type _messages_HistoryImport = _messages_HistoryImport_;
  type _messages_HistoryImportParsed = _messages_HistoryImportParsed_;
  type _messages_AffectedFoundMessages = _messages_AffectedFoundMessages_;
  type _ChatInviteImporter = _ChatInviteImporter_;
  type _messages_ExportedChatInvites = _messages_ExportedChatInvites_;
  type _messages_ExportedChatInvite = _messages_ExportedChatInvite_;
  type _messages_ChatInviteImporters = _messages_ChatInviteImporters_;
  type _ChatAdminWithInvites = _ChatAdminWithInvites_;
  type _messages_ChatAdminsWithInvites = _messages_ChatAdminsWithInvites_;
  type _messages_CheckedHistoryImportPeer = _messages_CheckedHistoryImportPeer_;
  type _phone_JoinAsPeers = _phone_JoinAsPeers_;
  type _phone_ExportedGroupCallInvite = _phone_ExportedGroupCallInvite_;
  type _GroupCallParticipantVideoSourceGroup = _GroupCallParticipantVideoSourceGroup_;
  type _GroupCallParticipantVideo = _GroupCallParticipantVideo_;
  type _stickers_SuggestedShortName = _stickers_SuggestedShortName_;
  type _BotCommandScope = _BotCommandScope_;
  type _account_ResetPasswordResult = _account_ResetPasswordResult_;
  type _SponsoredMessage = _SponsoredMessage_;
  type _messages_SponsoredMessages = _messages_SponsoredMessages_;
  type _SearchResultsCalendarPeriod = _SearchResultsCalendarPeriod_;
  type _messages_SearchResultsCalendar = _messages_SearchResultsCalendar_;
  type _SearchResultsPosition = _SearchResultsPosition_;
  type _messages_SearchResultsPositions = _messages_SearchResultsPositions_;
  type _channels_SendAsPeers = _channels_SendAsPeers_;
  type _users_UserFull = _users_UserFull_;
  type _messages_PeerSettings = _messages_PeerSettings_;
  type _auth_LoggedOut = _auth_LoggedOut_;
  type _ReactionCount = _ReactionCount_;
  type _MessageReactions = _MessageReactions_;
  type _messages_MessageReactionsList = _messages_MessageReactionsList_;
  type _AvailableReaction = _AvailableReaction_;
  type _messages_AvailableReactions = _messages_AvailableReactions_;
  type _MessagePeerReaction = _MessagePeerReaction_;
  type _GroupCallStreamChannel = _GroupCallStreamChannel_;
  type _phone_GroupCallStreamChannels = _phone_GroupCallStreamChannels_;
  type _phone_GroupCallStreamRtmpUrl = _phone_GroupCallStreamRtmpUrl_;
  type _AttachMenuBotIconColor = _AttachMenuBotIconColor_;
  type _AttachMenuBotIcon = _AttachMenuBotIcon_;
  type _AttachMenuBot = _AttachMenuBot_;
  type _AttachMenuBots = _AttachMenuBots_;
  type _AttachMenuBotsBot = _AttachMenuBotsBot_;
  type _WebViewResult = _WebViewResult_;
  type _SimpleWebViewResult = _SimpleWebViewResult_;
  type _WebViewMessageSent = _WebViewMessageSent_;
  type _BotMenuButton = _BotMenuButton_;
  type _account_SavedRingtones = _account_SavedRingtones_;
  type _NotificationSound = _NotificationSound_;
  type _account_SavedRingtone = _account_SavedRingtone_;
  type _AttachMenuPeerType = _AttachMenuPeerType_;
  type _InputInvoice = _InputInvoice_;
  type _payments_ExportedInvoice = _payments_ExportedInvoice_;
  type _messages_TranscribedAudio = _messages_TranscribedAudio_;
  type _help_PremiumPromo = _help_PremiumPromo_;
  type _InputStorePaymentPurpose = _InputStorePaymentPurpose_;
  type _PremiumGiftOption = _PremiumGiftOption_;
  type _PaymentFormMethod = _PaymentFormMethod_;
  type _EmojiStatus = _EmojiStatus_;
  type _account_EmojiStatuses = _account_EmojiStatuses_;
  type _Reaction = _Reaction_;
  type _ChatReactions = _ChatReactions_;
  type _messages_Reactions = _messages_Reactions_;
  type _EmailVerifyPurpose = _EmailVerifyPurpose_;
  type _EmailVerification = _EmailVerification_;
  type _account_EmailVerified = _account_EmailVerified_;
  type _PremiumSubscriptionOption = _PremiumSubscriptionOption_;
  type _SendAsPeer = _SendAsPeer_;
  type _MessageExtendedMedia = _MessageExtendedMedia_;
  type _StickerKeyword = _StickerKeyword_;
  type _Username = _Username_;
  type _ForumTopic = _ForumTopic_;
  type _messages_ForumTopics = _messages_ForumTopics_;
  type _DefaultHistoryTTL = _DefaultHistoryTTL_;
  type _ExportedContactToken = _ExportedContactToken_;
  type _RequestPeerType = _RequestPeerType_;
  type _EmojiList = _EmojiList_;
  type _EmojiGroup = _EmojiGroup_;
  type _messages_EmojiGroups = _messages_EmojiGroups_;
  type _TextWithEntities = _TextWithEntities_;
  type _messages_TranslatedText = _messages_TranslatedText_;
  type _AutoSaveSettings = _AutoSaveSettings_;
  type _AutoSaveException = _AutoSaveException_;
  type _account_AutoSaveSettings = _account_AutoSaveSettings_;
  type _help_AppConfig = _help_AppConfig_;
  type _InputBotApp = _InputBotApp_;
  type _BotApp = _BotApp_;
  type _messages_BotApp = _messages_BotApp_;
  type _AppWebViewResult = _AppWebViewResult_;
  type _InlineBotWebView = _InlineBotWebView_;
  type _ReadParticipantDate = _ReadParticipantDate_;
  type _InputChatlist = _InputChatlist_;
  type _ExportedChatlistInvite = _ExportedChatlistInvite_;
  type _chatlists_ExportedChatlistInvite = _chatlists_ExportedChatlistInvite_;
  type _chatlists_ExportedInvites = _chatlists_ExportedInvites_;
  type _chatlists_ChatlistInvite = _chatlists_ChatlistInvite_;
  type _chatlists_ChatlistUpdates = _chatlists_ChatlistUpdates_;
  type _bots_BotInfo = _bots_BotInfo_;
  type _MessagePeerVote = _MessagePeerVote_;
  type _SponsoredWebPage = _SponsoredWebPage_;
  type _StoryViews = _StoryViews_;
  type _StoryItem = _StoryItem_;
  type _stories_AllStories = _stories_AllStories_;
  type _stories_Stories = _stories_Stories_;
  type _StoryView = _StoryView_;
  type _stories_StoryViewsList = _stories_StoryViewsList_;
  type _stories_StoryViews = _stories_StoryViews_;
  type _InputReplyTo = _InputReplyTo_;
  type _ExportedStoryLink = _ExportedStoryLink_;
  type _StoriesStealthMode = _StoriesStealthMode_;
  type _MediaAreaCoordinates = _MediaAreaCoordinates_;
  type _MediaArea = _MediaArea_;
  type _PeerStories = _PeerStories_;
  type _stories_PeerStories = _stories_PeerStories_;
  type _messages_WebPage = _messages_WebPage_;
  type _PremiumGiftCodeOption = _PremiumGiftCodeOption_;
  type _payments_CheckedGiftCode = _payments_CheckedGiftCode_;
  type _payments_GiveawayInfo = _payments_GiveawayInfo_;
  type _PrepaidGiveaway = _PrepaidGiveaway_;
  type _Boost = _Boost_;
  type _premium_BoostsList = _premium_BoostsList_;
  type _MyBoost = _MyBoost_;
  type _premium_MyBoosts = _premium_MyBoosts_;
  type _premium_BoostsStatus = _premium_BoostsStatus_;
  type _StoryFwdHeader = _StoryFwdHeader_;
  type _PostInteractionCounters = _PostInteractionCounters_;
  type _stats_StoryStats = _stats_StoryStats_;
  type _PublicForward = _PublicForward_;
  type _stats_PublicForwards = _stats_PublicForwards_;
  type _PeerColor = _PeerColor_;
  type _help_PeerColorSet = _help_PeerColorSet_;
  type _help_PeerColorOption = _help_PeerColorOption_;
  type _help_PeerColors = _help_PeerColors_;
  type _StoryReaction = _StoryReaction_;
  type _stories_StoryReactionsList = _stories_StoryReactionsList_;
  type _SavedDialog = _SavedDialog_;
  type _messages_SavedDialogs = _messages_SavedDialogs_;
  type _SavedReactionTag = _SavedReactionTag_;
  type _messages_SavedReactionTags = _messages_SavedReactionTags_;
  type _OutboxReadDate = _OutboxReadDate_;
  type ResPQ = ResPQ_;
  type P_q_inner_data_dc = P_q_inner_data_dc_;
  type P_q_inner_data_temp_dc = P_q_inner_data_temp_dc_;
  type Server_DH_params_ok = Server_DH_params_ok_;
  type Server_DH_inner_data = Server_DH_inner_data_;
  type Client_DH_inner_data = Client_DH_inner_data_;
  type Dh_gen_ok = Dh_gen_ok_;
  type Dh_gen_retry = Dh_gen_retry_;
  type Dh_gen_fail = Dh_gen_fail_;
  type Bind_auth_key_inner = Bind_auth_key_inner_;
  type Rpc_error = Rpc_error_;
  type Rpc_answer_unknown = Rpc_answer_unknown_;
  type Rpc_answer_dropped_running = Rpc_answer_dropped_running_;
  type Rpc_answer_dropped = Rpc_answer_dropped_;
  type Future_salt = Future_salt_;
  type Future_salts = Future_salts_;
  type Pong = Pong_;
  type Destroy_session_ok = Destroy_session_ok_;
  type Destroy_session_none = Destroy_session_none_;
  type New_session_created = New_session_created_;
  type Gzip_packed = Gzip_packed_;
  type Msgs_ack = Msgs_ack_;
  type Bad_msg_notification = Bad_msg_notification_;
  type Bad_server_salt = Bad_server_salt_;
  type Msg_resend_req = Msg_resend_req_;
  type Msgs_state_req = Msgs_state_req_;
  type Msgs_state_info = Msgs_state_info_;
  type Msgs_all_info = Msgs_all_info_;
  type Msg_detailed_info = Msg_detailed_info_;
  type Msg_new_detailed_info = Msg_new_detailed_info_;
  type Destroy_auth_key_ok = Destroy_auth_key_ok_;
  type Destroy_auth_key_none = Destroy_auth_key_none_;
  type Destroy_auth_key_fail = Destroy_auth_key_fail_;
  type Http_wait = Http_wait_;
  type True = True_;
  type Error = Error_;
  type Null = Null_;
  type InputPeerEmpty = InputPeerEmpty_;
  type InputPeerSelf = InputPeerSelf_;
  type InputPeerChat = InputPeerChat_;
  type InputPeerUser = InputPeerUser_;
  type InputPeerChannel = InputPeerChannel_;
  type InputPeerUserFromMessage = InputPeerUserFromMessage_;
  type InputPeerChannelFromMessage = InputPeerChannelFromMessage_;
  type InputUserEmpty = InputUserEmpty_;
  type InputUserSelf = InputUserSelf_;
  type InputUser = InputUser_;
  type InputUserFromMessage = InputUserFromMessage_;
  type InputPhoneContact = InputPhoneContact_;
  type InputFile = InputFile_;
  type InputFileBig = InputFileBig_;
  type InputMediaEmpty = InputMediaEmpty_;
  type InputMediaUploadedPhoto = InputMediaUploadedPhoto_;
  type InputMediaPhoto = InputMediaPhoto_;
  type InputMediaGeoPoint = InputMediaGeoPoint_;
  type InputMediaContact = InputMediaContact_;
  type InputMediaUploadedDocument = InputMediaUploadedDocument_;
  type InputMediaDocument = InputMediaDocument_;
  type InputMediaVenue = InputMediaVenue_;
  type InputMediaPhotoExternal = InputMediaPhotoExternal_;
  type InputMediaDocumentExternal = InputMediaDocumentExternal_;
  type InputMediaGame = InputMediaGame_;
  type InputMediaInvoice = InputMediaInvoice_;
  type InputMediaGeoLive = InputMediaGeoLive_;
  type InputMediaPoll = InputMediaPoll_;
  type InputMediaDice = InputMediaDice_;
  type InputMediaStory = InputMediaStory_;
  type InputMediaWebPage = InputMediaWebPage_;
  type InputChatPhotoEmpty = InputChatPhotoEmpty_;
  type InputChatUploadedPhoto = InputChatUploadedPhoto_;
  type InputChatPhoto = InputChatPhoto_;
  type InputGeoPointEmpty = InputGeoPointEmpty_;
  type InputGeoPoint = InputGeoPoint_;
  type InputPhotoEmpty = InputPhotoEmpty_;
  type InputPhoto = InputPhoto_;
  type InputFileLocation = InputFileLocation_;
  type InputEncryptedFileLocation = InputEncryptedFileLocation_;
  type InputDocumentFileLocation = InputDocumentFileLocation_;
  type InputSecureFileLocation = InputSecureFileLocation_;
  type InputTakeoutFileLocation = InputTakeoutFileLocation_;
  type InputPhotoFileLocation = InputPhotoFileLocation_;
  type InputPhotoLegacyFileLocation = InputPhotoLegacyFileLocation_;
  type InputPeerPhotoFileLocation = InputPeerPhotoFileLocation_;
  type InputStickerSetThumb = InputStickerSetThumb_;
  type InputGroupCallStream = InputGroupCallStream_;
  type PeerUser = PeerUser_;
  type PeerChat = PeerChat_;
  type PeerChannel = PeerChannel_;
  type UserEmpty = UserEmpty_;
  type User = User_;
  type UserProfilePhotoEmpty = UserProfilePhotoEmpty_;
  type UserProfilePhoto = UserProfilePhoto_;
  type UserStatusEmpty = UserStatusEmpty_;
  type UserStatusOnline = UserStatusOnline_;
  type UserStatusOffline = UserStatusOffline_;
  type UserStatusRecently = UserStatusRecently_;
  type UserStatusLastWeek = UserStatusLastWeek_;
  type UserStatusLastMonth = UserStatusLastMonth_;
  type ChatEmpty = ChatEmpty_;
  type Chat = Chat_;
  type ChatForbidden = ChatForbidden_;
  type Channel = Channel_;
  type ChannelForbidden = ChannelForbidden_;
  type ChatFull = ChatFull_;
  type ChannelFull = ChannelFull_;
  type ChatParticipant = ChatParticipant_;
  type ChatParticipantCreator = ChatParticipantCreator_;
  type ChatParticipantAdmin = ChatParticipantAdmin_;
  type ChatParticipantsForbidden = ChatParticipantsForbidden_;
  type ChatParticipants = ChatParticipants_;
  type ChatPhotoEmpty = ChatPhotoEmpty_;
  type ChatPhoto = ChatPhoto_;
  type MessageEmpty = MessageEmpty_;
  type Message = Message_;
  type MessageService = MessageService_;
  type MessageMediaEmpty = MessageMediaEmpty_;
  type MessageMediaPhoto = MessageMediaPhoto_;
  type MessageMediaGeo = MessageMediaGeo_;
  type MessageMediaContact = MessageMediaContact_;
  type MessageMediaUnsupported = MessageMediaUnsupported_;
  type MessageMediaDocument = MessageMediaDocument_;
  type MessageMediaWebPage = MessageMediaWebPage_;
  type MessageMediaVenue = MessageMediaVenue_;
  type MessageMediaGame = MessageMediaGame_;
  type MessageMediaInvoice = MessageMediaInvoice_;
  type MessageMediaGeoLive = MessageMediaGeoLive_;
  type MessageMediaPoll = MessageMediaPoll_;
  type MessageMediaDice = MessageMediaDice_;
  type MessageMediaStory = MessageMediaStory_;
  type MessageMediaGiveaway = MessageMediaGiveaway_;
  type MessageMediaGiveawayResults = MessageMediaGiveawayResults_;
  type MessageActionEmpty = MessageActionEmpty_;
  type MessageActionChatCreate = MessageActionChatCreate_;
  type MessageActionChatEditTitle = MessageActionChatEditTitle_;
  type MessageActionChatEditPhoto = MessageActionChatEditPhoto_;
  type MessageActionChatDeletePhoto = MessageActionChatDeletePhoto_;
  type MessageActionChatAddUser = MessageActionChatAddUser_;
  type MessageActionChatDeleteUser = MessageActionChatDeleteUser_;
  type MessageActionChatJoinedByLink = MessageActionChatJoinedByLink_;
  type MessageActionChannelCreate = MessageActionChannelCreate_;
  type MessageActionChatMigrateTo = MessageActionChatMigrateTo_;
  type MessageActionChannelMigrateFrom = MessageActionChannelMigrateFrom_;
  type MessageActionPinMessage = MessageActionPinMessage_;
  type MessageActionHistoryClear = MessageActionHistoryClear_;
  type MessageActionGameScore = MessageActionGameScore_;
  type MessageActionPaymentSentMe = MessageActionPaymentSentMe_;
  type MessageActionPaymentSent = MessageActionPaymentSent_;
  type MessageActionPhoneCall = MessageActionPhoneCall_;
  type MessageActionScreenshotTaken = MessageActionScreenshotTaken_;
  type MessageActionCustomAction = MessageActionCustomAction_;
  type MessageActionBotAllowed = MessageActionBotAllowed_;
  type MessageActionSecureValuesSentMe = MessageActionSecureValuesSentMe_;
  type MessageActionSecureValuesSent = MessageActionSecureValuesSent_;
  type MessageActionContactSignUp = MessageActionContactSignUp_;
  type MessageActionGeoProximityReached = MessageActionGeoProximityReached_;
  type MessageActionGroupCall = MessageActionGroupCall_;
  type MessageActionInviteToGroupCall = MessageActionInviteToGroupCall_;
  type MessageActionSetMessagesTTL = MessageActionSetMessagesTTL_;
  type MessageActionGroupCallScheduled = MessageActionGroupCallScheduled_;
  type MessageActionSetChatTheme = MessageActionSetChatTheme_;
  type MessageActionChatJoinedByRequest = MessageActionChatJoinedByRequest_;
  type MessageActionWebViewDataSentMe = MessageActionWebViewDataSentMe_;
  type MessageActionWebViewDataSent = MessageActionWebViewDataSent_;
  type MessageActionGiftPremium = MessageActionGiftPremium_;
  type MessageActionTopicCreate = MessageActionTopicCreate_;
  type MessageActionTopicEdit = MessageActionTopicEdit_;
  type MessageActionSuggestProfilePhoto = MessageActionSuggestProfilePhoto_;
  type MessageActionRequestedPeer = MessageActionRequestedPeer_;
  type MessageActionSetChatWallPaper = MessageActionSetChatWallPaper_;
  type MessageActionGiftCode = MessageActionGiftCode_;
  type MessageActionGiveawayLaunch = MessageActionGiveawayLaunch_;
  type MessageActionGiveawayResults = MessageActionGiveawayResults_;
  type MessageActionBoostApply = MessageActionBoostApply_;
  type Dialog = Dialog_;
  type DialogFolder = DialogFolder_;
  type PhotoEmpty = PhotoEmpty_;
  type Photo = Photo_;
  type PhotoSizeEmpty = PhotoSizeEmpty_;
  type PhotoSize = PhotoSize_;
  type PhotoCachedSize = PhotoCachedSize_;
  type PhotoStrippedSize = PhotoStrippedSize_;
  type PhotoSizeProgressive = PhotoSizeProgressive_;
  type PhotoPathSize = PhotoPathSize_;
  type GeoPointEmpty = GeoPointEmpty_;
  type GeoPoint = GeoPoint_;
  type InputNotifyPeer = InputNotifyPeer_;
  type InputNotifyUsers = InputNotifyUsers_;
  type InputNotifyChats = InputNotifyChats_;
  type InputNotifyBroadcasts = InputNotifyBroadcasts_;
  type InputNotifyForumTopic = InputNotifyForumTopic_;
  type InputPeerNotifySettings = InputPeerNotifySettings_;
  type PeerNotifySettings = PeerNotifySettings_;
  type PeerSettings = PeerSettings_;
  type WallPaper = WallPaper_;
  type WallPaperNoFile = WallPaperNoFile_;
  type InputReportReasonSpam = InputReportReasonSpam_;
  type InputReportReasonViolence = InputReportReasonViolence_;
  type InputReportReasonPornography = InputReportReasonPornography_;
  type InputReportReasonChildAbuse = InputReportReasonChildAbuse_;
  type InputReportReasonOther = InputReportReasonOther_;
  type InputReportReasonCopyright = InputReportReasonCopyright_;
  type InputReportReasonGeoIrrelevant = InputReportReasonGeoIrrelevant_;
  type InputReportReasonFake = InputReportReasonFake_;
  type InputReportReasonIllegalDrugs = InputReportReasonIllegalDrugs_;
  type InputReportReasonPersonalDetails = InputReportReasonPersonalDetails_;
  type UserFull = UserFull_;
  type Contact = Contact_;
  type ImportedContact = ImportedContact_;
  type ContactStatus = ContactStatus_;
  type InputMessagesFilterEmpty = InputMessagesFilterEmpty_;
  type InputMessagesFilterPhotos = InputMessagesFilterPhotos_;
  type InputMessagesFilterVideo = InputMessagesFilterVideo_;
  type InputMessagesFilterPhotoVideo = InputMessagesFilterPhotoVideo_;
  type InputMessagesFilterDocument = InputMessagesFilterDocument_;
  type InputMessagesFilterUrl = InputMessagesFilterUrl_;
  type InputMessagesFilterGif = InputMessagesFilterGif_;
  type InputMessagesFilterVoice = InputMessagesFilterVoice_;
  type InputMessagesFilterMusic = InputMessagesFilterMusic_;
  type InputMessagesFilterChatPhotos = InputMessagesFilterChatPhotos_;
  type InputMessagesFilterPhoneCalls = InputMessagesFilterPhoneCalls_;
  type InputMessagesFilterRoundVoice = InputMessagesFilterRoundVoice_;
  type InputMessagesFilterRoundVideo = InputMessagesFilterRoundVideo_;
  type InputMessagesFilterMyMentions = InputMessagesFilterMyMentions_;
  type InputMessagesFilterGeo = InputMessagesFilterGeo_;
  type InputMessagesFilterContacts = InputMessagesFilterContacts_;
  type InputMessagesFilterPinned = InputMessagesFilterPinned_;
  type UpdateNewMessage = UpdateNewMessage_;
  type UpdateMessageID = UpdateMessageID_;
  type UpdateDeleteMessages = UpdateDeleteMessages_;
  type UpdateUserTyping = UpdateUserTyping_;
  type UpdateChatUserTyping = UpdateChatUserTyping_;
  type UpdateChatParticipants = UpdateChatParticipants_;
  type UpdateUserStatus = UpdateUserStatus_;
  type UpdateUserName = UpdateUserName_;
  type UpdateNewAuthorization = UpdateNewAuthorization_;
  type UpdateNewEncryptedMessage = UpdateNewEncryptedMessage_;
  type UpdateEncryptedChatTyping = UpdateEncryptedChatTyping_;
  type UpdateEncryption = UpdateEncryption_;
  type UpdateEncryptedMessagesRead = UpdateEncryptedMessagesRead_;
  type UpdateChatParticipantAdd = UpdateChatParticipantAdd_;
  type UpdateChatParticipantDelete = UpdateChatParticipantDelete_;
  type UpdateDcOptions = UpdateDcOptions_;
  type UpdateNotifySettings = UpdateNotifySettings_;
  type UpdateServiceNotification = UpdateServiceNotification_;
  type UpdatePrivacy = UpdatePrivacy_;
  type UpdateUserPhone = UpdateUserPhone_;
  type UpdateReadHistoryInbox = UpdateReadHistoryInbox_;
  type UpdateReadHistoryOutbox = UpdateReadHistoryOutbox_;
  type UpdateWebPage = UpdateWebPage_;
  type UpdateReadMessagesContents = UpdateReadMessagesContents_;
  type UpdateChannelTooLong = UpdateChannelTooLong_;
  type UpdateChannel = UpdateChannel_;
  type UpdateNewChannelMessage = UpdateNewChannelMessage_;
  type UpdateReadChannelInbox = UpdateReadChannelInbox_;
  type UpdateDeleteChannelMessages = UpdateDeleteChannelMessages_;
  type UpdateChannelMessageViews = UpdateChannelMessageViews_;
  type UpdateChatParticipantAdmin = UpdateChatParticipantAdmin_;
  type UpdateNewStickerSet = UpdateNewStickerSet_;
  type UpdateStickerSetsOrder = UpdateStickerSetsOrder_;
  type UpdateStickerSets = UpdateStickerSets_;
  type UpdateSavedGifs = UpdateSavedGifs_;
  type UpdateBotInlineQuery = UpdateBotInlineQuery_;
  type UpdateBotInlineSend = UpdateBotInlineSend_;
  type UpdateEditChannelMessage = UpdateEditChannelMessage_;
  type UpdateBotCallbackQuery = UpdateBotCallbackQuery_;
  type UpdateEditMessage = UpdateEditMessage_;
  type UpdateInlineBotCallbackQuery = UpdateInlineBotCallbackQuery_;
  type UpdateReadChannelOutbox = UpdateReadChannelOutbox_;
  type UpdateDraftMessage = UpdateDraftMessage_;
  type UpdateReadFeaturedStickers = UpdateReadFeaturedStickers_;
  type UpdateRecentStickers = UpdateRecentStickers_;
  type UpdateConfig = UpdateConfig_;
  type UpdatePtsChanged = UpdatePtsChanged_;
  type UpdateChannelWebPage = UpdateChannelWebPage_;
  type UpdateDialogPinned = UpdateDialogPinned_;
  type UpdatePinnedDialogs = UpdatePinnedDialogs_;
  type UpdateBotWebhookJSON = UpdateBotWebhookJSON_;
  type UpdateBotWebhookJSONQuery = UpdateBotWebhookJSONQuery_;
  type UpdateBotShippingQuery = UpdateBotShippingQuery_;
  type UpdateBotPrecheckoutQuery = UpdateBotPrecheckoutQuery_;
  type UpdatePhoneCall = UpdatePhoneCall_;
  type UpdateLangPackTooLong = UpdateLangPackTooLong_;
  type UpdateLangPack = UpdateLangPack_;
  type UpdateFavedStickers = UpdateFavedStickers_;
  type UpdateChannelReadMessagesContents = UpdateChannelReadMessagesContents_;
  type UpdateContactsReset = UpdateContactsReset_;
  type UpdateChannelAvailableMessages = UpdateChannelAvailableMessages_;
  type UpdateDialogUnreadMark = UpdateDialogUnreadMark_;
  type UpdateMessagePoll = UpdateMessagePoll_;
  type UpdateChatDefaultBannedRights = UpdateChatDefaultBannedRights_;
  type UpdateFolderPeers = UpdateFolderPeers_;
  type UpdatePeerSettings = UpdatePeerSettings_;
  type UpdatePeerLocated = UpdatePeerLocated_;
  type UpdateNewScheduledMessage = UpdateNewScheduledMessage_;
  type UpdateDeleteScheduledMessages = UpdateDeleteScheduledMessages_;
  type UpdateTheme = UpdateTheme_;
  type UpdateGeoLiveViewed = UpdateGeoLiveViewed_;
  type UpdateLoginToken = UpdateLoginToken_;
  type UpdateMessagePollVote = UpdateMessagePollVote_;
  type UpdateDialogFilter = UpdateDialogFilter_;
  type UpdateDialogFilterOrder = UpdateDialogFilterOrder_;
  type UpdateDialogFilters = UpdateDialogFilters_;
  type UpdatePhoneCallSignalingData = UpdatePhoneCallSignalingData_;
  type UpdateChannelMessageForwards = UpdateChannelMessageForwards_;
  type UpdateReadChannelDiscussionInbox = UpdateReadChannelDiscussionInbox_;
  type UpdateReadChannelDiscussionOutbox = UpdateReadChannelDiscussionOutbox_;
  type UpdatePeerBlocked = UpdatePeerBlocked_;
  type UpdateChannelUserTyping = UpdateChannelUserTyping_;
  type UpdatePinnedMessages = UpdatePinnedMessages_;
  type UpdatePinnedChannelMessages = UpdatePinnedChannelMessages_;
  type UpdateChat = UpdateChat_;
  type UpdateGroupCallParticipants = UpdateGroupCallParticipants_;
  type UpdateGroupCall = UpdateGroupCall_;
  type UpdatePeerHistoryTTL = UpdatePeerHistoryTTL_;
  type UpdateChatParticipant = UpdateChatParticipant_;
  type UpdateChannelParticipant = UpdateChannelParticipant_;
  type UpdateBotStopped = UpdateBotStopped_;
  type UpdateGroupCallConnection = UpdateGroupCallConnection_;
  type UpdateBotCommands = UpdateBotCommands_;
  type UpdatePendingJoinRequests = UpdatePendingJoinRequests_;
  type UpdateBotChatInviteRequester = UpdateBotChatInviteRequester_;
  type UpdateMessageReactions = UpdateMessageReactions_;
  type UpdateAttachMenuBots = UpdateAttachMenuBots_;
  type UpdateWebViewResultSent = UpdateWebViewResultSent_;
  type UpdateBotMenuButton = UpdateBotMenuButton_;
  type UpdateSavedRingtones = UpdateSavedRingtones_;
  type UpdateTranscribedAudio = UpdateTranscribedAudio_;
  type UpdateReadFeaturedEmojiStickers = UpdateReadFeaturedEmojiStickers_;
  type UpdateUserEmojiStatus = UpdateUserEmojiStatus_;
  type UpdateRecentEmojiStatuses = UpdateRecentEmojiStatuses_;
  type UpdateRecentReactions = UpdateRecentReactions_;
  type UpdateMoveStickerSetToTop = UpdateMoveStickerSetToTop_;
  type UpdateMessageExtendedMedia = UpdateMessageExtendedMedia_;
  type UpdateChannelPinnedTopic = UpdateChannelPinnedTopic_;
  type UpdateChannelPinnedTopics = UpdateChannelPinnedTopics_;
  type UpdateUser = UpdateUser_;
  type UpdateAutoSaveSettings = UpdateAutoSaveSettings_;
  type UpdateGroupInvitePrivacyForbidden = UpdateGroupInvitePrivacyForbidden_;
  type UpdateStory = UpdateStory_;
  type UpdateReadStories = UpdateReadStories_;
  type UpdateStoryID = UpdateStoryID_;
  type UpdateStoriesStealthMode = UpdateStoriesStealthMode_;
  type UpdateSentStoryReaction = UpdateSentStoryReaction_;
  type UpdateBotChatBoost = UpdateBotChatBoost_;
  type UpdateChannelViewForumAsMessages = UpdateChannelViewForumAsMessages_;
  type UpdatePeerWallpaper = UpdatePeerWallpaper_;
  type UpdateBotMessageReaction = UpdateBotMessageReaction_;
  type UpdateBotMessageReactions = UpdateBotMessageReactions_;
  type UpdateSavedDialogPinned = UpdateSavedDialogPinned_;
  type UpdatePinnedSavedDialogs = UpdatePinnedSavedDialogs_;
  type UpdateSavedReactionTags = UpdateSavedReactionTags_;
  type UpdatesTooLong = UpdatesTooLong_;
  type UpdateShortMessage = UpdateShortMessage_;
  type UpdateShortChatMessage = UpdateShortChatMessage_;
  type UpdateShort = UpdateShort_;
  type UpdatesCombined = UpdatesCombined_;
  type Updates = Updates_;
  type UpdateShortSentMessage = UpdateShortSentMessage_;
  type DcOption = DcOption_;
  type Config = Config_;
  type NearestDc = NearestDc_;
  type EncryptedChatEmpty = EncryptedChatEmpty_;
  type EncryptedChatWaiting = EncryptedChatWaiting_;
  type EncryptedChatRequested = EncryptedChatRequested_;
  type EncryptedChat = EncryptedChat_;
  type EncryptedChatDiscarded = EncryptedChatDiscarded_;
  type InputEncryptedChat = InputEncryptedChat_;
  type EncryptedFileEmpty = EncryptedFileEmpty_;
  type EncryptedFile = EncryptedFile_;
  type InputEncryptedFileEmpty = InputEncryptedFileEmpty_;
  type InputEncryptedFileUploaded = InputEncryptedFileUploaded_;
  type InputEncryptedFile = InputEncryptedFile_;
  type InputEncryptedFileBigUploaded = InputEncryptedFileBigUploaded_;
  type EncryptedMessage = EncryptedMessage_;
  type EncryptedMessageService = EncryptedMessageService_;
  type InputDocumentEmpty = InputDocumentEmpty_;
  type InputDocument = InputDocument_;
  type DocumentEmpty = DocumentEmpty_;
  type Document = Document_;
  type NotifyPeer = NotifyPeer_;
  type NotifyUsers = NotifyUsers_;
  type NotifyChats = NotifyChats_;
  type NotifyBroadcasts = NotifyBroadcasts_;
  type NotifyForumTopic = NotifyForumTopic_;
  type SendMessageTypingAction = SendMessageTypingAction_;
  type SendMessageCancelAction = SendMessageCancelAction_;
  type SendMessageRecordVideoAction = SendMessageRecordVideoAction_;
  type SendMessageUploadVideoAction = SendMessageUploadVideoAction_;
  type SendMessageRecordAudioAction = SendMessageRecordAudioAction_;
  type SendMessageUploadAudioAction = SendMessageUploadAudioAction_;
  type SendMessageUploadPhotoAction = SendMessageUploadPhotoAction_;
  type SendMessageUploadDocumentAction = SendMessageUploadDocumentAction_;
  type SendMessageGeoLocationAction = SendMessageGeoLocationAction_;
  type SendMessageChooseContactAction = SendMessageChooseContactAction_;
  type SendMessageGamePlayAction = SendMessageGamePlayAction_;
  type SendMessageRecordRoundAction = SendMessageRecordRoundAction_;
  type SendMessageUploadRoundAction = SendMessageUploadRoundAction_;
  type SpeakingInGroupCallAction = SpeakingInGroupCallAction_;
  type SendMessageHistoryImportAction = SendMessageHistoryImportAction_;
  type SendMessageChooseStickerAction = SendMessageChooseStickerAction_;
  type SendMessageEmojiInteraction = SendMessageEmojiInteraction_;
  type SendMessageEmojiInteractionSeen = SendMessageEmojiInteractionSeen_;
  type InputPrivacyKeyStatusTimestamp = InputPrivacyKeyStatusTimestamp_;
  type InputPrivacyKeyChatInvite = InputPrivacyKeyChatInvite_;
  type InputPrivacyKeyPhoneCall = InputPrivacyKeyPhoneCall_;
  type InputPrivacyKeyPhoneP2P = InputPrivacyKeyPhoneP2P_;
  type InputPrivacyKeyForwards = InputPrivacyKeyForwards_;
  type InputPrivacyKeyProfilePhoto = InputPrivacyKeyProfilePhoto_;
  type InputPrivacyKeyPhoneNumber = InputPrivacyKeyPhoneNumber_;
  type InputPrivacyKeyAddedByPhone = InputPrivacyKeyAddedByPhone_;
  type InputPrivacyKeyVoiceMessages = InputPrivacyKeyVoiceMessages_;
  type InputPrivacyKeyAbout = InputPrivacyKeyAbout_;
  type PrivacyKeyStatusTimestamp = PrivacyKeyStatusTimestamp_;
  type PrivacyKeyChatInvite = PrivacyKeyChatInvite_;
  type PrivacyKeyPhoneCall = PrivacyKeyPhoneCall_;
  type PrivacyKeyPhoneP2P = PrivacyKeyPhoneP2P_;
  type PrivacyKeyForwards = PrivacyKeyForwards_;
  type PrivacyKeyProfilePhoto = PrivacyKeyProfilePhoto_;
  type PrivacyKeyPhoneNumber = PrivacyKeyPhoneNumber_;
  type PrivacyKeyAddedByPhone = PrivacyKeyAddedByPhone_;
  type PrivacyKeyVoiceMessages = PrivacyKeyVoiceMessages_;
  type PrivacyKeyAbout = PrivacyKeyAbout_;
  type InputPrivacyValueAllowContacts = InputPrivacyValueAllowContacts_;
  type InputPrivacyValueAllowAll = InputPrivacyValueAllowAll_;
  type InputPrivacyValueAllowUsers = InputPrivacyValueAllowUsers_;
  type InputPrivacyValueDisallowContacts = InputPrivacyValueDisallowContacts_;
  type InputPrivacyValueDisallowAll = InputPrivacyValueDisallowAll_;
  type InputPrivacyValueDisallowUsers = InputPrivacyValueDisallowUsers_;
  type InputPrivacyValueAllowChatParticipants = InputPrivacyValueAllowChatParticipants_;
  type InputPrivacyValueDisallowChatParticipants = InputPrivacyValueDisallowChatParticipants_;
  type InputPrivacyValueAllowCloseFriends = InputPrivacyValueAllowCloseFriends_;
  type PrivacyValueAllowContacts = PrivacyValueAllowContacts_;
  type PrivacyValueAllowAll = PrivacyValueAllowAll_;
  type PrivacyValueAllowUsers = PrivacyValueAllowUsers_;
  type PrivacyValueDisallowContacts = PrivacyValueDisallowContacts_;
  type PrivacyValueDisallowAll = PrivacyValueDisallowAll_;
  type PrivacyValueDisallowUsers = PrivacyValueDisallowUsers_;
  type PrivacyValueAllowChatParticipants = PrivacyValueAllowChatParticipants_;
  type PrivacyValueDisallowChatParticipants = PrivacyValueDisallowChatParticipants_;
  type PrivacyValueAllowCloseFriends = PrivacyValueAllowCloseFriends_;
  type AccountDaysTTL = AccountDaysTTL_;
  type DocumentAttributeImageSize = DocumentAttributeImageSize_;
  type DocumentAttributeAnimated = DocumentAttributeAnimated_;
  type DocumentAttributeSticker = DocumentAttributeSticker_;
  type DocumentAttributeVideo = DocumentAttributeVideo_;
  type DocumentAttributeAudio = DocumentAttributeAudio_;
  type DocumentAttributeFilename = DocumentAttributeFilename_;
  type DocumentAttributeHasStickers = DocumentAttributeHasStickers_;
  type DocumentAttributeCustomEmoji = DocumentAttributeCustomEmoji_;
  type StickerPack = StickerPack_;
  type WebPageEmpty = WebPageEmpty_;
  type WebPagePending = WebPagePending_;
  type WebPage = WebPage_;
  type WebPageNotModified = WebPageNotModified_;
  type Authorization = Authorization_;
  type ReceivedNotifyMessage = ReceivedNotifyMessage_;
  type ChatInviteExported = ChatInviteExported_;
  type ChatInvitePublicJoinRequests = ChatInvitePublicJoinRequests_;
  type ChatInviteAlready = ChatInviteAlready_;
  type ChatInvite = ChatInvite_;
  type ChatInvitePeek = ChatInvitePeek_;
  type InputStickerSetEmpty = InputStickerSetEmpty_;
  type InputStickerSetID = InputStickerSetID_;
  type InputStickerSetShortName = InputStickerSetShortName_;
  type InputStickerSetAnimatedEmoji = InputStickerSetAnimatedEmoji_;
  type InputStickerSetDice = InputStickerSetDice_;
  type InputStickerSetAnimatedEmojiAnimations = InputStickerSetAnimatedEmojiAnimations_;
  type InputStickerSetPremiumGifts = InputStickerSetPremiumGifts_;
  type InputStickerSetEmojiGenericAnimations = InputStickerSetEmojiGenericAnimations_;
  type InputStickerSetEmojiDefaultStatuses = InputStickerSetEmojiDefaultStatuses_;
  type InputStickerSetEmojiDefaultTopicIcons = InputStickerSetEmojiDefaultTopicIcons_;
  type InputStickerSetEmojiChannelDefaultStatuses = InputStickerSetEmojiChannelDefaultStatuses_;
  type StickerSet = StickerSet_;
  type BotCommand = BotCommand_;
  type BotInfo = BotInfo_;
  type KeyboardButton = KeyboardButton_;
  type KeyboardButtonUrl = KeyboardButtonUrl_;
  type KeyboardButtonCallback = KeyboardButtonCallback_;
  type KeyboardButtonRequestPhone = KeyboardButtonRequestPhone_;
  type KeyboardButtonRequestGeoLocation = KeyboardButtonRequestGeoLocation_;
  type KeyboardButtonSwitchInline = KeyboardButtonSwitchInline_;
  type KeyboardButtonGame = KeyboardButtonGame_;
  type KeyboardButtonBuy = KeyboardButtonBuy_;
  type KeyboardButtonUrlAuth = KeyboardButtonUrlAuth_;
  type InputKeyboardButtonUrlAuth = InputKeyboardButtonUrlAuth_;
  type KeyboardButtonRequestPoll = KeyboardButtonRequestPoll_;
  type InputKeyboardButtonUserProfile = InputKeyboardButtonUserProfile_;
  type KeyboardButtonUserProfile = KeyboardButtonUserProfile_;
  type KeyboardButtonWebView = KeyboardButtonWebView_;
  type KeyboardButtonSimpleWebView = KeyboardButtonSimpleWebView_;
  type KeyboardButtonRequestPeer = KeyboardButtonRequestPeer_;
  type KeyboardButtonRow = KeyboardButtonRow_;
  type ReplyKeyboardHide = ReplyKeyboardHide_;
  type ReplyKeyboardForceReply = ReplyKeyboardForceReply_;
  type ReplyKeyboardMarkup = ReplyKeyboardMarkup_;
  type ReplyInlineMarkup = ReplyInlineMarkup_;
  type MessageEntityUnknown = MessageEntityUnknown_;
  type MessageEntityMention = MessageEntityMention_;
  type MessageEntityHashtag = MessageEntityHashtag_;
  type MessageEntityBotCommand = MessageEntityBotCommand_;
  type MessageEntityUrl = MessageEntityUrl_;
  type MessageEntityEmail = MessageEntityEmail_;
  type MessageEntityBold = MessageEntityBold_;
  type MessageEntityItalic = MessageEntityItalic_;
  type MessageEntityCode = MessageEntityCode_;
  type MessageEntityPre = MessageEntityPre_;
  type MessageEntityTextUrl = MessageEntityTextUrl_;
  type MessageEntityMentionName = MessageEntityMentionName_;
  type InputMessageEntityMentionName = InputMessageEntityMentionName_;
  type MessageEntityPhone = MessageEntityPhone_;
  type MessageEntityCashtag = MessageEntityCashtag_;
  type MessageEntityUnderline = MessageEntityUnderline_;
  type MessageEntityStrike = MessageEntityStrike_;
  type MessageEntityBankCard = MessageEntityBankCard_;
  type MessageEntitySpoiler = MessageEntitySpoiler_;
  type MessageEntityCustomEmoji = MessageEntityCustomEmoji_;
  type MessageEntityBlockquote = MessageEntityBlockquote_;
  type InputChannelEmpty = InputChannelEmpty_;
  type InputChannel = InputChannel_;
  type InputChannelFromMessage = InputChannelFromMessage_;
  type MessageRange = MessageRange_;
  type ChannelMessagesFilterEmpty = ChannelMessagesFilterEmpty_;
  type ChannelMessagesFilter = ChannelMessagesFilter_;
  type ChannelParticipant = ChannelParticipant_;
  type ChannelParticipantSelf = ChannelParticipantSelf_;
  type ChannelParticipantCreator = ChannelParticipantCreator_;
  type ChannelParticipantAdmin = ChannelParticipantAdmin_;
  type ChannelParticipantBanned = ChannelParticipantBanned_;
  type ChannelParticipantLeft = ChannelParticipantLeft_;
  type ChannelParticipantsRecent = ChannelParticipantsRecent_;
  type ChannelParticipantsAdmins = ChannelParticipantsAdmins_;
  type ChannelParticipantsKicked = ChannelParticipantsKicked_;
  type ChannelParticipantsBots = ChannelParticipantsBots_;
  type ChannelParticipantsBanned = ChannelParticipantsBanned_;
  type ChannelParticipantsSearch = ChannelParticipantsSearch_;
  type ChannelParticipantsContacts = ChannelParticipantsContacts_;
  type ChannelParticipantsMentions = ChannelParticipantsMentions_;
  type InputBotInlineMessageMediaAuto = InputBotInlineMessageMediaAuto_;
  type InputBotInlineMessageText = InputBotInlineMessageText_;
  type InputBotInlineMessageMediaGeo = InputBotInlineMessageMediaGeo_;
  type InputBotInlineMessageMediaVenue = InputBotInlineMessageMediaVenue_;
  type InputBotInlineMessageMediaContact = InputBotInlineMessageMediaContact_;
  type InputBotInlineMessageGame = InputBotInlineMessageGame_;
  type InputBotInlineMessageMediaInvoice = InputBotInlineMessageMediaInvoice_;
  type InputBotInlineMessageMediaWebPage = InputBotInlineMessageMediaWebPage_;
  type InputBotInlineResult = InputBotInlineResult_;
  type InputBotInlineResultPhoto = InputBotInlineResultPhoto_;
  type InputBotInlineResultDocument = InputBotInlineResultDocument_;
  type InputBotInlineResultGame = InputBotInlineResultGame_;
  type BotInlineMessageMediaAuto = BotInlineMessageMediaAuto_;
  type BotInlineMessageText = BotInlineMessageText_;
  type BotInlineMessageMediaGeo = BotInlineMessageMediaGeo_;
  type BotInlineMessageMediaVenue = BotInlineMessageMediaVenue_;
  type BotInlineMessageMediaContact = BotInlineMessageMediaContact_;
  type BotInlineMessageMediaInvoice = BotInlineMessageMediaInvoice_;
  type BotInlineMessageMediaWebPage = BotInlineMessageMediaWebPage_;
  type BotInlineResult = BotInlineResult_;
  type BotInlineMediaResult = BotInlineMediaResult_;
  type ExportedMessageLink = ExportedMessageLink_;
  type MessageFwdHeader = MessageFwdHeader_;
  type InputBotInlineMessageID = InputBotInlineMessageID_;
  type InputBotInlineMessageID64 = InputBotInlineMessageID64_;
  type InlineBotSwitchPM = InlineBotSwitchPM_;
  type TopPeer = TopPeer_;
  type TopPeerCategoryBotsPM = TopPeerCategoryBotsPM_;
  type TopPeerCategoryBotsInline = TopPeerCategoryBotsInline_;
  type TopPeerCategoryCorrespondents = TopPeerCategoryCorrespondents_;
  type TopPeerCategoryGroups = TopPeerCategoryGroups_;
  type TopPeerCategoryChannels = TopPeerCategoryChannels_;
  type TopPeerCategoryPhoneCalls = TopPeerCategoryPhoneCalls_;
  type TopPeerCategoryForwardUsers = TopPeerCategoryForwardUsers_;
  type TopPeerCategoryForwardChats = TopPeerCategoryForwardChats_;
  type TopPeerCategoryPeers = TopPeerCategoryPeers_;
  type DraftMessageEmpty = DraftMessageEmpty_;
  type DraftMessage = DraftMessage_;
  type StickerSetCovered = StickerSetCovered_;
  type StickerSetMultiCovered = StickerSetMultiCovered_;
  type StickerSetFullCovered = StickerSetFullCovered_;
  type StickerSetNoCovered = StickerSetNoCovered_;
  type MaskCoords = MaskCoords_;
  type InputStickeredMediaPhoto = InputStickeredMediaPhoto_;
  type InputStickeredMediaDocument = InputStickeredMediaDocument_;
  type Game = Game_;
  type InputGameID = InputGameID_;
  type InputGameShortName = InputGameShortName_;
  type HighScore = HighScore_;
  type TextEmpty = TextEmpty_;
  type TextPlain = TextPlain_;
  type TextBold = TextBold_;
  type TextItalic = TextItalic_;
  type TextUnderline = TextUnderline_;
  type TextStrike = TextStrike_;
  type TextFixed = TextFixed_;
  type TextUrl = TextUrl_;
  type TextEmail = TextEmail_;
  type TextConcat = TextConcat_;
  type TextSubscript = TextSubscript_;
  type TextSuperscript = TextSuperscript_;
  type TextMarked = TextMarked_;
  type TextPhone = TextPhone_;
  type TextImage = TextImage_;
  type TextAnchor = TextAnchor_;
  type PageBlockUnsupported = PageBlockUnsupported_;
  type PageBlockTitle = PageBlockTitle_;
  type PageBlockSubtitle = PageBlockSubtitle_;
  type PageBlockAuthorDate = PageBlockAuthorDate_;
  type PageBlockHeader = PageBlockHeader_;
  type PageBlockSubheader = PageBlockSubheader_;
  type PageBlockParagraph = PageBlockParagraph_;
  type PageBlockPreformatted = PageBlockPreformatted_;
  type PageBlockFooter = PageBlockFooter_;
  type PageBlockDivider = PageBlockDivider_;
  type PageBlockAnchor = PageBlockAnchor_;
  type PageBlockList = PageBlockList_;
  type PageBlockBlockquote = PageBlockBlockquote_;
  type PageBlockPullquote = PageBlockPullquote_;
  type PageBlockPhoto = PageBlockPhoto_;
  type PageBlockVideo = PageBlockVideo_;
  type PageBlockCover = PageBlockCover_;
  type PageBlockEmbed = PageBlockEmbed_;
  type PageBlockEmbedPost = PageBlockEmbedPost_;
  type PageBlockCollage = PageBlockCollage_;
  type PageBlockSlideshow = PageBlockSlideshow_;
  type PageBlockChannel = PageBlockChannel_;
  type PageBlockAudio = PageBlockAudio_;
  type PageBlockKicker = PageBlockKicker_;
  type PageBlockTable = PageBlockTable_;
  type PageBlockOrderedList = PageBlockOrderedList_;
  type PageBlockDetails = PageBlockDetails_;
  type PageBlockRelatedArticles = PageBlockRelatedArticles_;
  type PageBlockMap = PageBlockMap_;
  type PhoneCallDiscardReasonMissed = PhoneCallDiscardReasonMissed_;
  type PhoneCallDiscardReasonDisconnect = PhoneCallDiscardReasonDisconnect_;
  type PhoneCallDiscardReasonHangup = PhoneCallDiscardReasonHangup_;
  type PhoneCallDiscardReasonBusy = PhoneCallDiscardReasonBusy_;
  type DataJSON = DataJSON_;
  type LabeledPrice = LabeledPrice_;
  type Invoice = Invoice_;
  type PaymentCharge = PaymentCharge_;
  type PostAddress = PostAddress_;
  type PaymentRequestedInfo = PaymentRequestedInfo_;
  type PaymentSavedCredentialsCard = PaymentSavedCredentialsCard_;
  type WebDocument = WebDocument_;
  type WebDocumentNoProxy = WebDocumentNoProxy_;
  type InputWebDocument = InputWebDocument_;
  type InputWebFileLocation = InputWebFileLocation_;
  type InputWebFileGeoPointLocation = InputWebFileGeoPointLocation_;
  type InputWebFileAudioAlbumThumbLocation = InputWebFileAudioAlbumThumbLocation_;
  type InputPaymentCredentialsSaved = InputPaymentCredentialsSaved_;
  type InputPaymentCredentials = InputPaymentCredentials_;
  type InputPaymentCredentialsApplePay = InputPaymentCredentialsApplePay_;
  type InputPaymentCredentialsGooglePay = InputPaymentCredentialsGooglePay_;
  type ShippingOption = ShippingOption_;
  type InputStickerSetItem = InputStickerSetItem_;
  type InputPhoneCall = InputPhoneCall_;
  type PhoneCallEmpty = PhoneCallEmpty_;
  type PhoneCallWaiting = PhoneCallWaiting_;
  type PhoneCallRequested = PhoneCallRequested_;
  type PhoneCallAccepted = PhoneCallAccepted_;
  type PhoneCall = PhoneCall_;
  type PhoneCallDiscarded = PhoneCallDiscarded_;
  type PhoneConnection = PhoneConnection_;
  type PhoneConnectionWebrtc = PhoneConnectionWebrtc_;
  type PhoneCallProtocol = PhoneCallProtocol_;
  type CdnPublicKey = CdnPublicKey_;
  type CdnConfig = CdnConfig_;
  type LangPackString = LangPackString_;
  type LangPackStringPluralized = LangPackStringPluralized_;
  type LangPackStringDeleted = LangPackStringDeleted_;
  type LangPackDifference = LangPackDifference_;
  type LangPackLanguage = LangPackLanguage_;
  type ChannelAdminLogEventActionChangeTitle = ChannelAdminLogEventActionChangeTitle_;
  type ChannelAdminLogEventActionChangeAbout = ChannelAdminLogEventActionChangeAbout_;
  type ChannelAdminLogEventActionChangeUsername = ChannelAdminLogEventActionChangeUsername_;
  type ChannelAdminLogEventActionChangePhoto = ChannelAdminLogEventActionChangePhoto_;
  type ChannelAdminLogEventActionToggleInvites = ChannelAdminLogEventActionToggleInvites_;
  type ChannelAdminLogEventActionToggleSignatures = ChannelAdminLogEventActionToggleSignatures_;
  type ChannelAdminLogEventActionUpdatePinned = ChannelAdminLogEventActionUpdatePinned_;
  type ChannelAdminLogEventActionEditMessage = ChannelAdminLogEventActionEditMessage_;
  type ChannelAdminLogEventActionDeleteMessage = ChannelAdminLogEventActionDeleteMessage_;
  type ChannelAdminLogEventActionParticipantJoin = ChannelAdminLogEventActionParticipantJoin_;
  type ChannelAdminLogEventActionParticipantLeave = ChannelAdminLogEventActionParticipantLeave_;
  type ChannelAdminLogEventActionParticipantInvite = ChannelAdminLogEventActionParticipantInvite_;
  type ChannelAdminLogEventActionParticipantToggleBan = ChannelAdminLogEventActionParticipantToggleBan_;
  type ChannelAdminLogEventActionParticipantToggleAdmin = ChannelAdminLogEventActionParticipantToggleAdmin_;
  type ChannelAdminLogEventActionChangeStickerSet = ChannelAdminLogEventActionChangeStickerSet_;
  type ChannelAdminLogEventActionTogglePreHistoryHidden = ChannelAdminLogEventActionTogglePreHistoryHidden_;
  type ChannelAdminLogEventActionDefaultBannedRights = ChannelAdminLogEventActionDefaultBannedRights_;
  type ChannelAdminLogEventActionStopPoll = ChannelAdminLogEventActionStopPoll_;
  type ChannelAdminLogEventActionChangeLinkedChat = ChannelAdminLogEventActionChangeLinkedChat_;
  type ChannelAdminLogEventActionChangeLocation = ChannelAdminLogEventActionChangeLocation_;
  type ChannelAdminLogEventActionToggleSlowMode = ChannelAdminLogEventActionToggleSlowMode_;
  type ChannelAdminLogEventActionStartGroupCall = ChannelAdminLogEventActionStartGroupCall_;
  type ChannelAdminLogEventActionDiscardGroupCall = ChannelAdminLogEventActionDiscardGroupCall_;
  type ChannelAdminLogEventActionParticipantMute = ChannelAdminLogEventActionParticipantMute_;
  type ChannelAdminLogEventActionParticipantUnmute = ChannelAdminLogEventActionParticipantUnmute_;
  type ChannelAdminLogEventActionToggleGroupCallSetting = ChannelAdminLogEventActionToggleGroupCallSetting_;
  type ChannelAdminLogEventActionParticipantJoinByInvite = ChannelAdminLogEventActionParticipantJoinByInvite_;
  type ChannelAdminLogEventActionExportedInviteDelete = ChannelAdminLogEventActionExportedInviteDelete_;
  type ChannelAdminLogEventActionExportedInviteRevoke = ChannelAdminLogEventActionExportedInviteRevoke_;
  type ChannelAdminLogEventActionExportedInviteEdit = ChannelAdminLogEventActionExportedInviteEdit_;
  type ChannelAdminLogEventActionParticipantVolume = ChannelAdminLogEventActionParticipantVolume_;
  type ChannelAdminLogEventActionChangeHistoryTTL = ChannelAdminLogEventActionChangeHistoryTTL_;
  type ChannelAdminLogEventActionParticipantJoinByRequest = ChannelAdminLogEventActionParticipantJoinByRequest_;
  type ChannelAdminLogEventActionToggleNoForwards = ChannelAdminLogEventActionToggleNoForwards_;
  type ChannelAdminLogEventActionSendMessage = ChannelAdminLogEventActionSendMessage_;
  type ChannelAdminLogEventActionChangeAvailableReactions = ChannelAdminLogEventActionChangeAvailableReactions_;
  type ChannelAdminLogEventActionChangeUsernames = ChannelAdminLogEventActionChangeUsernames_;
  type ChannelAdminLogEventActionToggleForum = ChannelAdminLogEventActionToggleForum_;
  type ChannelAdminLogEventActionCreateTopic = ChannelAdminLogEventActionCreateTopic_;
  type ChannelAdminLogEventActionEditTopic = ChannelAdminLogEventActionEditTopic_;
  type ChannelAdminLogEventActionDeleteTopic = ChannelAdminLogEventActionDeleteTopic_;
  type ChannelAdminLogEventActionPinTopic = ChannelAdminLogEventActionPinTopic_;
  type ChannelAdminLogEventActionToggleAntiSpam = ChannelAdminLogEventActionToggleAntiSpam_;
  type ChannelAdminLogEventActionChangePeerColor = ChannelAdminLogEventActionChangePeerColor_;
  type ChannelAdminLogEventActionChangeProfilePeerColor = ChannelAdminLogEventActionChangeProfilePeerColor_;
  type ChannelAdminLogEventActionChangeWallpaper = ChannelAdminLogEventActionChangeWallpaper_;
  type ChannelAdminLogEventActionChangeEmojiStatus = ChannelAdminLogEventActionChangeEmojiStatus_;
  type ChannelAdminLogEventActionChangeEmojiStickerSet = ChannelAdminLogEventActionChangeEmojiStickerSet_;
  type ChannelAdminLogEvent = ChannelAdminLogEvent_;
  type ChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter_;
  type PopularContact = PopularContact_;
  type RecentMeUrlUnknown = RecentMeUrlUnknown_;
  type RecentMeUrlUser = RecentMeUrlUser_;
  type RecentMeUrlChat = RecentMeUrlChat_;
  type RecentMeUrlChatInvite = RecentMeUrlChatInvite_;
  type RecentMeUrlStickerSet = RecentMeUrlStickerSet_;
  type InputSingleMedia = InputSingleMedia_;
  type WebAuthorization = WebAuthorization_;
  type InputMessageID = InputMessageID_;
  type InputMessageReplyTo = InputMessageReplyTo_;
  type InputMessagePinned = InputMessagePinned_;
  type InputMessageCallbackQuery = InputMessageCallbackQuery_;
  type InputDialogPeer = InputDialogPeer_;
  type InputDialogPeerFolder = InputDialogPeerFolder_;
  type DialogPeer = DialogPeer_;
  type DialogPeerFolder = DialogPeerFolder_;
  type FileHash = FileHash_;
  type InputClientProxy = InputClientProxy_;
  type InputSecureFileUploaded = InputSecureFileUploaded_;
  type InputSecureFile = InputSecureFile_;
  type SecureFileEmpty = SecureFileEmpty_;
  type SecureFile = SecureFile_;
  type SecureData = SecureData_;
  type SecurePlainPhone = SecurePlainPhone_;
  type SecurePlainEmail = SecurePlainEmail_;
  type SecureValueTypePersonalDetails = SecureValueTypePersonalDetails_;
  type SecureValueTypePassport = SecureValueTypePassport_;
  type SecureValueTypeDriverLicense = SecureValueTypeDriverLicense_;
  type SecureValueTypeIdentityCard = SecureValueTypeIdentityCard_;
  type SecureValueTypeInternalPassport = SecureValueTypeInternalPassport_;
  type SecureValueTypeAddress = SecureValueTypeAddress_;
  type SecureValueTypeUtilityBill = SecureValueTypeUtilityBill_;
  type SecureValueTypeBankStatement = SecureValueTypeBankStatement_;
  type SecureValueTypeRentalAgreement = SecureValueTypeRentalAgreement_;
  type SecureValueTypePassportRegistration = SecureValueTypePassportRegistration_;
  type SecureValueTypeTemporaryRegistration = SecureValueTypeTemporaryRegistration_;
  type SecureValueTypePhone = SecureValueTypePhone_;
  type SecureValueTypeEmail = SecureValueTypeEmail_;
  type SecureValue = SecureValue_;
  type InputSecureValue = InputSecureValue_;
  type SecureValueHash = SecureValueHash_;
  type SecureValueErrorData = SecureValueErrorData_;
  type SecureValueErrorFrontSide = SecureValueErrorFrontSide_;
  type SecureValueErrorReverseSide = SecureValueErrorReverseSide_;
  type SecureValueErrorSelfie = SecureValueErrorSelfie_;
  type SecureValueErrorFile = SecureValueErrorFile_;
  type SecureValueErrorFiles = SecureValueErrorFiles_;
  type SecureValueError = SecureValueError_;
  type SecureValueErrorTranslationFile = SecureValueErrorTranslationFile_;
  type SecureValueErrorTranslationFiles = SecureValueErrorTranslationFiles_;
  type SecureCredentialsEncrypted = SecureCredentialsEncrypted_;
  type SavedPhoneContact = SavedPhoneContact_;
  type PasswordKdfAlgoUnknown = PasswordKdfAlgoUnknown_;
  type PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_;
  type SecurePasswordKdfAlgoUnknown = SecurePasswordKdfAlgoUnknown_;
  type SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 = SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_;
  type SecurePasswordKdfAlgoSHA512 = SecurePasswordKdfAlgoSHA512_;
  type SecureSecretSettings = SecureSecretSettings_;
  type InputCheckPasswordEmpty = InputCheckPasswordEmpty_;
  type InputCheckPasswordSRP = InputCheckPasswordSRP_;
  type SecureRequiredType = SecureRequiredType_;
  type SecureRequiredTypeOneOf = SecureRequiredTypeOneOf_;
  type InputAppEvent = InputAppEvent_;
  type JsonObjectValue = JsonObjectValue_;
  type JsonNull = JsonNull_;
  type JsonBool = JsonBool_;
  type JsonNumber = JsonNumber_;
  type JsonString = JsonString_;
  type JsonArray = JsonArray_;
  type JsonObject = JsonObject_;
  type PageTableCell = PageTableCell_;
  type PageTableRow = PageTableRow_;
  type PageCaption = PageCaption_;
  type PageListItemText = PageListItemText_;
  type PageListItemBlocks = PageListItemBlocks_;
  type PageListOrderedItemText = PageListOrderedItemText_;
  type PageListOrderedItemBlocks = PageListOrderedItemBlocks_;
  type PageRelatedArticle = PageRelatedArticle_;
  type Page = Page_;
  type PollAnswer = PollAnswer_;
  type Poll = Poll_;
  type PollAnswerVoters = PollAnswerVoters_;
  type PollResults = PollResults_;
  type ChatOnlines = ChatOnlines_;
  type StatsURL = StatsURL_;
  type ChatAdminRights = ChatAdminRights_;
  type ChatBannedRights = ChatBannedRights_;
  type InputWallPaper = InputWallPaper_;
  type InputWallPaperSlug = InputWallPaperSlug_;
  type InputWallPaperNoFile = InputWallPaperNoFile_;
  type CodeSettings = CodeSettings_;
  type WallPaperSettings = WallPaperSettings_;
  type AutoDownloadSettings = AutoDownloadSettings_;
  type EmojiKeyword = EmojiKeyword_;
  type EmojiKeywordDeleted = EmojiKeywordDeleted_;
  type EmojiKeywordsDifference = EmojiKeywordsDifference_;
  type EmojiURL = EmojiURL_;
  type EmojiLanguage = EmojiLanguage_;
  type Folder = Folder_;
  type InputFolderPeer = InputFolderPeer_;
  type FolderPeer = FolderPeer_;
  type UrlAuthResultRequest = UrlAuthResultRequest_;
  type UrlAuthResultAccepted = UrlAuthResultAccepted_;
  type UrlAuthResultDefault = UrlAuthResultDefault_;
  type ChannelLocationEmpty = ChannelLocationEmpty_;
  type ChannelLocation = ChannelLocation_;
  type PeerLocated = PeerLocated_;
  type PeerSelfLocated = PeerSelfLocated_;
  type RestrictionReason = RestrictionReason_;
  type InputTheme = InputTheme_;
  type InputThemeSlug = InputThemeSlug_;
  type Theme = Theme_;
  type BaseThemeClassic = BaseThemeClassic_;
  type BaseThemeDay = BaseThemeDay_;
  type BaseThemeNight = BaseThemeNight_;
  type BaseThemeTinted = BaseThemeTinted_;
  type BaseThemeArctic = BaseThemeArctic_;
  type InputThemeSettings = InputThemeSettings_;
  type ThemeSettings = ThemeSettings_;
  type WebPageAttributeTheme = WebPageAttributeTheme_;
  type WebPageAttributeStory = WebPageAttributeStory_;
  type BankCardOpenUrl = BankCardOpenUrl_;
  type DialogFilter = DialogFilter_;
  type DialogFilterDefault = DialogFilterDefault_;
  type DialogFilterChatlist = DialogFilterChatlist_;
  type DialogFilterSuggested = DialogFilterSuggested_;
  type StatsDateRangeDays = StatsDateRangeDays_;
  type StatsAbsValueAndPrev = StatsAbsValueAndPrev_;
  type StatsPercentValue = StatsPercentValue_;
  type StatsGraphAsync = StatsGraphAsync_;
  type StatsGraphError = StatsGraphError_;
  type StatsGraph = StatsGraph_;
  type VideoSize = VideoSize_;
  type VideoSizeEmojiMarkup = VideoSizeEmojiMarkup_;
  type VideoSizeStickerMarkup = VideoSizeStickerMarkup_;
  type StatsGroupTopPoster = StatsGroupTopPoster_;
  type StatsGroupTopAdmin = StatsGroupTopAdmin_;
  type StatsGroupTopInviter = StatsGroupTopInviter_;
  type GlobalPrivacySettings = GlobalPrivacySettings_;
  type MessageViews = MessageViews_;
  type MessageReplyHeader = MessageReplyHeader_;
  type MessageReplyStoryHeader = MessageReplyStoryHeader_;
  type MessageReplies = MessageReplies_;
  type PeerBlocked = PeerBlocked_;
  type GroupCallDiscarded = GroupCallDiscarded_;
  type GroupCall = GroupCall_;
  type InputGroupCall = InputGroupCall_;
  type GroupCallParticipant = GroupCallParticipant_;
  type InlineQueryPeerTypeSameBotPM = InlineQueryPeerTypeSameBotPM_;
  type InlineQueryPeerTypePM = InlineQueryPeerTypePM_;
  type InlineQueryPeerTypeChat = InlineQueryPeerTypeChat_;
  type InlineQueryPeerTypeMegagroup = InlineQueryPeerTypeMegagroup_;
  type InlineQueryPeerTypeBroadcast = InlineQueryPeerTypeBroadcast_;
  type InlineQueryPeerTypeBotPM = InlineQueryPeerTypeBotPM_;
  type ChatInviteImporter = ChatInviteImporter_;
  type ChatAdminWithInvites = ChatAdminWithInvites_;
  type GroupCallParticipantVideoSourceGroup = GroupCallParticipantVideoSourceGroup_;
  type GroupCallParticipantVideo = GroupCallParticipantVideo_;
  type BotCommandScopeDefault = BotCommandScopeDefault_;
  type BotCommandScopeUsers = BotCommandScopeUsers_;
  type BotCommandScopeChats = BotCommandScopeChats_;
  type BotCommandScopeChatAdmins = BotCommandScopeChatAdmins_;
  type BotCommandScopePeer = BotCommandScopePeer_;
  type BotCommandScopePeerAdmins = BotCommandScopePeerAdmins_;
  type BotCommandScopePeerUser = BotCommandScopePeerUser_;
  type SponsoredMessage = SponsoredMessage_;
  type SearchResultsCalendarPeriod = SearchResultsCalendarPeriod_;
  type SearchResultPosition = SearchResultPosition_;
  type ReactionCount = ReactionCount_;
  type MessageReactions = MessageReactions_;
  type AvailableReaction = AvailableReaction_;
  type MessagePeerReaction = MessagePeerReaction_;
  type GroupCallStreamChannel = GroupCallStreamChannel_;
  type AttachMenuBotIconColor = AttachMenuBotIconColor_;
  type AttachMenuBotIcon = AttachMenuBotIcon_;
  type AttachMenuBot = AttachMenuBot_;
  type AttachMenuBotsNotModified = AttachMenuBotsNotModified_;
  type AttachMenuBots = AttachMenuBots_;
  type AttachMenuBotsBot = AttachMenuBotsBot_;
  type WebViewResultUrl = WebViewResultUrl_;
  type SimpleWebViewResultUrl = SimpleWebViewResultUrl_;
  type WebViewMessageSent = WebViewMessageSent_;
  type BotMenuButtonDefault = BotMenuButtonDefault_;
  type BotMenuButtonCommands = BotMenuButtonCommands_;
  type BotMenuButton = BotMenuButton_;
  type NotificationSoundDefault = NotificationSoundDefault_;
  type NotificationSoundNone = NotificationSoundNone_;
  type NotificationSoundLocal = NotificationSoundLocal_;
  type NotificationSoundRingtone = NotificationSoundRingtone_;
  type AttachMenuPeerTypeSameBotPM = AttachMenuPeerTypeSameBotPM_;
  type AttachMenuPeerTypeBotPM = AttachMenuPeerTypeBotPM_;
  type AttachMenuPeerTypePM = AttachMenuPeerTypePM_;
  type AttachMenuPeerTypeChat = AttachMenuPeerTypeChat_;
  type AttachMenuPeerTypeBroadcast = AttachMenuPeerTypeBroadcast_;
  type InputInvoiceMessage = InputInvoiceMessage_;
  type InputInvoiceSlug = InputInvoiceSlug_;
  type InputInvoicePremiumGiftCode = InputInvoicePremiumGiftCode_;
  type InputStorePaymentPremiumSubscription = InputStorePaymentPremiumSubscription_;
  type InputStorePaymentGiftPremium = InputStorePaymentGiftPremium_;
  type InputStorePaymentPremiumGiftCode = InputStorePaymentPremiumGiftCode_;
  type InputStorePaymentPremiumGiveaway = InputStorePaymentPremiumGiveaway_;
  type PremiumGiftOption = PremiumGiftOption_;
  type PaymentFormMethod = PaymentFormMethod_;
  type EmojiStatusEmpty = EmojiStatusEmpty_;
  type EmojiStatus = EmojiStatus_;
  type EmojiStatusUntil = EmojiStatusUntil_;
  type ReactionEmpty = ReactionEmpty_;
  type ReactionEmoji = ReactionEmoji_;
  type ReactionCustomEmoji = ReactionCustomEmoji_;
  type ChatReactionsNone = ChatReactionsNone_;
  type ChatReactionsAll = ChatReactionsAll_;
  type ChatReactionsSome = ChatReactionsSome_;
  type EmailVerifyPurposeLoginSetup = EmailVerifyPurposeLoginSetup_;
  type EmailVerifyPurposeLoginChange = EmailVerifyPurposeLoginChange_;
  type EmailVerifyPurposePassport = EmailVerifyPurposePassport_;
  type EmailVerificationCode = EmailVerificationCode_;
  type EmailVerificationGoogle = EmailVerificationGoogle_;
  type EmailVerificationApple = EmailVerificationApple_;
  type PremiumSubscriptionOption = PremiumSubscriptionOption_;
  type SendAsPeer = SendAsPeer_;
  type MessageExtendedMediaPreview = MessageExtendedMediaPreview_;
  type MessageExtendedMedia = MessageExtendedMedia_;
  type StickerKeyword = StickerKeyword_;
  type Username = Username_;
  type ForumTopicDeleted = ForumTopicDeleted_;
  type ForumTopic = ForumTopic_;
  type DefaultHistoryTTL = DefaultHistoryTTL_;
  type ExportedContactToken = ExportedContactToken_;
  type RequestPeerTypeUser = RequestPeerTypeUser_;
  type RequestPeerTypeChat = RequestPeerTypeChat_;
  type RequestPeerTypeBroadcast = RequestPeerTypeBroadcast_;
  type EmojiListNotModified = EmojiListNotModified_;
  type EmojiList = EmojiList_;
  type EmojiGroup = EmojiGroup_;
  type TextWithEntities = TextWithEntities_;
  type AutoSaveSettings = AutoSaveSettings_;
  type AutoSaveException = AutoSaveException_;
  type InputBotAppID = InputBotAppID_;
  type InputBotAppShortName = InputBotAppShortName_;
  type BotAppNotModified = BotAppNotModified_;
  type BotApp = BotApp_;
  type AppWebViewResultUrl = AppWebViewResultUrl_;
  type InlineBotWebView = InlineBotWebView_;
  type ReadParticipantDate = ReadParticipantDate_;
  type InputChatlistDialogFilter = InputChatlistDialogFilter_;
  type ExportedChatlistInvite = ExportedChatlistInvite_;
  type MessagePeerVote = MessagePeerVote_;
  type MessagePeerVoteInputOption = MessagePeerVoteInputOption_;
  type MessagePeerVoteMultiple = MessagePeerVoteMultiple_;
  type SponsoredWebPage = SponsoredWebPage_;
  type StoryViews = StoryViews_;
  type StoryItemDeleted = StoryItemDeleted_;
  type StoryItemSkipped = StoryItemSkipped_;
  type StoryItem = StoryItem_;
  type StoryView = StoryView_;
  type StoryViewPublicForward = StoryViewPublicForward_;
  type StoryViewPublicRepost = StoryViewPublicRepost_;
  type InputReplyToMessage = InputReplyToMessage_;
  type InputReplyToStory = InputReplyToStory_;
  type ExportedStoryLink = ExportedStoryLink_;
  type StoriesStealthMode = StoriesStealthMode_;
  type MediaAreaCoordinates = MediaAreaCoordinates_;
  type MediaAreaVenue = MediaAreaVenue_;
  type InputMediaAreaVenue = InputMediaAreaVenue_;
  type MediaAreaGeoPoint = MediaAreaGeoPoint_;
  type MediaAreaSuggestedReaction = MediaAreaSuggestedReaction_;
  type MediaAreaChannelPost = MediaAreaChannelPost_;
  type InputMediaAreaChannelPost = InputMediaAreaChannelPost_;
  type PeerStories = PeerStories_;
  type PremiumGiftCodeOption = PremiumGiftCodeOption_;
  type PrepaidGiveaway = PrepaidGiveaway_;
  type Boost = Boost_;
  type MyBoost = MyBoost_;
  type StoryFwdHeader = StoryFwdHeader_;
  type PostInteractionCountersMessage = PostInteractionCountersMessage_;
  type PostInteractionCountersStory = PostInteractionCountersStory_;
  type PublicForwardMessage = PublicForwardMessage_;
  type PublicForwardStory = PublicForwardStory_;
  type PeerColor = PeerColor_;
  type StoryReaction = StoryReaction_;
  type StoryReactionPublicForward = StoryReactionPublicForward_;
  type StoryReactionPublicRepost = StoryReactionPublicRepost_;
  type SavedDialog = SavedDialog_;
  type SavedReactionTag = SavedReactionTag_;
  type OutboxReadDate = OutboxReadDate_;
  namespace storage {
    type FileUnknown = storage_FileUnknown_;
    type FilePartial = storage_FilePartial_;
    type FileJpeg = storage_FileJpeg_;
    type FileGif = storage_FileGif_;
    type FilePng = storage_FilePng_;
    type FilePdf = storage_FilePdf_;
    type FileMp3 = storage_FileMp3_;
    type FileMov = storage_FileMov_;
    type FileMp4 = storage_FileMp4_;
    type FileWebp = storage_FileWebp_;
  }
  namespace auth {
    type SentCode = auth_SentCode_;
    type SentCodeSuccess = auth_SentCodeSuccess_;
    type Authorization = auth_Authorization_;
    type AuthorizationSignUpRequired = auth_AuthorizationSignUpRequired_;
    type ExportedAuthorization = auth_ExportedAuthorization_;
    type PasswordRecovery = auth_PasswordRecovery_;
    type CodeTypeSms = auth_CodeTypeSms_;
    type CodeTypeCall = auth_CodeTypeCall_;
    type CodeTypeFlashCall = auth_CodeTypeFlashCall_;
    type CodeTypeMissedCall = auth_CodeTypeMissedCall_;
    type CodeTypeFragmentSms = auth_CodeTypeFragmentSms_;
    type SentCodeTypeApp = auth_SentCodeTypeApp_;
    type SentCodeTypeSms = auth_SentCodeTypeSms_;
    type SentCodeTypeCall = auth_SentCodeTypeCall_;
    type SentCodeTypeFlashCall = auth_SentCodeTypeFlashCall_;
    type SentCodeTypeMissedCall = auth_SentCodeTypeMissedCall_;
    type SentCodeTypeEmailCode = auth_SentCodeTypeEmailCode_;
    type SentCodeTypeSetUpEmailRequired = auth_SentCodeTypeSetUpEmailRequired_;
    type SentCodeTypeFragmentSms = auth_SentCodeTypeFragmentSms_;
    type SentCodeTypeFirebaseSms = auth_SentCodeTypeFirebaseSms_;
    type LoginToken = auth_LoginToken_;
    type LoginTokenMigrateTo = auth_LoginTokenMigrateTo_;
    type LoginTokenSuccess = auth_LoginTokenSuccess_;
    type LoggedOut = auth_LoggedOut_;
  }
  namespace contacts {
    type ContactsNotModified = contacts_ContactsNotModified_;
    type Contacts = contacts_Contacts_;
    type ImportedContacts = contacts_ImportedContacts_;
    type Blocked = contacts_Blocked_;
    type BlockedSlice = contacts_BlockedSlice_;
    type Found = contacts_Found_;
    type ResolvedPeer = contacts_ResolvedPeer_;
    type TopPeersNotModified = contacts_TopPeersNotModified_;
    type TopPeers = contacts_TopPeers_;
    type TopPeersDisabled = contacts_TopPeersDisabled_;
  }
  namespace messages {
    type Dialogs = messages_Dialogs_;
    type DialogsSlice = messages_DialogsSlice_;
    type DialogsNotModified = messages_DialogsNotModified_;
    type Messages = messages_Messages_;
    type MessagesSlice = messages_MessagesSlice_;
    type ChannelMessages = messages_ChannelMessages_;
    type MessagesNotModified = messages_MessagesNotModified_;
    type Chats = messages_Chats_;
    type ChatsSlice = messages_ChatsSlice_;
    type ChatFull = messages_ChatFull_;
    type AffectedHistory = messages_AffectedHistory_;
    type DhConfigNotModified = messages_DhConfigNotModified_;
    type DhConfig = messages_DhConfig_;
    type SentEncryptedMessage = messages_SentEncryptedMessage_;
    type SentEncryptedFile = messages_SentEncryptedFile_;
    type StickersNotModified = messages_StickersNotModified_;
    type Stickers = messages_Stickers_;
    type AllStickersNotModified = messages_AllStickersNotModified_;
    type AllStickers = messages_AllStickers_;
    type AffectedMessages = messages_AffectedMessages_;
    type StickerSet = messages_StickerSet_;
    type StickerSetNotModified = messages_StickerSetNotModified_;
    type SavedGifsNotModified = messages_SavedGifsNotModified_;
    type SavedGifs = messages_SavedGifs_;
    type BotResults = messages_BotResults_;
    type BotCallbackAnswer = messages_BotCallbackAnswer_;
    type MessageEditData = messages_MessageEditData_;
    type PeerDialogs = messages_PeerDialogs_;
    type FeaturedStickersNotModified = messages_FeaturedStickersNotModified_;
    type FeaturedStickers = messages_FeaturedStickers_;
    type RecentStickersNotModified = messages_RecentStickersNotModified_;
    type RecentStickers = messages_RecentStickers_;
    type ArchivedStickers = messages_ArchivedStickers_;
    type StickerSetInstallResultSuccess = messages_StickerSetInstallResultSuccess_;
    type StickerSetInstallResultArchive = messages_StickerSetInstallResultArchive_;
    type HighScores = messages_HighScores_;
    type FavedStickersNotModified = messages_FavedStickersNotModified_;
    type FavedStickers = messages_FavedStickers_;
    type FoundStickerSetsNotModified = messages_FoundStickerSetsNotModified_;
    type FoundStickerSets = messages_FoundStickerSets_;
    type SearchCounter = messages_SearchCounter_;
    type InactiveChats = messages_InactiveChats_;
    type VotesList = messages_VotesList_;
    type MessageViews = messages_MessageViews_;
    type DiscussionMessage = messages_DiscussionMessage_;
    type HistoryImport = messages_HistoryImport_;
    type HistoryImportParsed = messages_HistoryImportParsed_;
    type AffectedFoundMessages = messages_AffectedFoundMessages_;
    type ExportedChatInvites = messages_ExportedChatInvites_;
    type ExportedChatInvite = messages_ExportedChatInvite_;
    type ExportedChatInviteReplaced = messages_ExportedChatInviteReplaced_;
    type ChatInviteImporters = messages_ChatInviteImporters_;
    type ChatAdminsWithInvites = messages_ChatAdminsWithInvites_;
    type CheckedHistoryImportPeer = messages_CheckedHistoryImportPeer_;
    type SponsoredMessages = messages_SponsoredMessages_;
    type SponsoredMessagesEmpty = messages_SponsoredMessagesEmpty_;
    type SearchResultsCalendar = messages_SearchResultsCalendar_;
    type SearchResultsPositions = messages_SearchResultsPositions_;
    type PeerSettings = messages_PeerSettings_;
    type MessageReactionsList = messages_MessageReactionsList_;
    type AvailableReactionsNotModified = messages_AvailableReactionsNotModified_;
    type AvailableReactions = messages_AvailableReactions_;
    type TranscribedAudio = messages_TranscribedAudio_;
    type ReactionsNotModified = messages_ReactionsNotModified_;
    type Reactions = messages_Reactions_;
    type ForumTopics = messages_ForumTopics_;
    type EmojiGroupsNotModified = messages_EmojiGroupsNotModified_;
    type EmojiGroups = messages_EmojiGroups_;
    type TranslateResult = messages_TranslateResult_;
    type BotApp = messages_BotApp_;
    type WebPage = messages_WebPage_;
    type SavedDialogs = messages_SavedDialogs_;
    type SavedDialogsSlice = messages_SavedDialogsSlice_;
    type SavedDialogsNotModified = messages_SavedDialogsNotModified_;
    type SavedReactionTagsNotModified = messages_SavedReactionTagsNotModified_;
    type SavedReactionTags = messages_SavedReactionTags_;
  }
  namespace updates {
    type State = updates_State_;
    type DifferenceEmpty = updates_DifferenceEmpty_;
    type Difference = updates_Difference_;
    type DifferenceSlice = updates_DifferenceSlice_;
    type DifferenceTooLong = updates_DifferenceTooLong_;
    type ChannelDifferenceEmpty = updates_ChannelDifferenceEmpty_;
    type ChannelDifferenceTooLong = updates_ChannelDifferenceTooLong_;
    type ChannelDifference = updates_ChannelDifference_;
  }
  namespace photos {
    type Photos = photos_Photos_;
    type PhotosSlice = photos_PhotosSlice_;
    type Photo = photos_Photo_;
  }
  namespace upload {
    type File = upload_File_;
    type FileCdnRedirect = upload_FileCdnRedirect_;
    type WebFile = upload_WebFile_;
    type CdnFileReuploadNeeded = upload_CdnFileReuploadNeeded_;
    type CdnFile = upload_CdnFile_;
  }
  namespace help {
    type AppUpdate = help_AppUpdate_;
    type NoAppUpdate = help_NoAppUpdate_;
    type InviteText = help_InviteText_;
    type Support = help_Support_;
    type TermsOfService = help_TermsOfService_;
    type RecentMeUrls = help_RecentMeUrls_;
    type TermsOfServiceUpdateEmpty = help_TermsOfServiceUpdateEmpty_;
    type TermsOfServiceUpdate = help_TermsOfServiceUpdate_;
    type DeepLinkInfoEmpty = help_DeepLinkInfoEmpty_;
    type DeepLinkInfo = help_DeepLinkInfo_;
    type PassportConfigNotModified = help_PassportConfigNotModified_;
    type PassportConfig = help_PassportConfig_;
    type SupportName = help_SupportName_;
    type UserInfoEmpty = help_UserInfoEmpty_;
    type UserInfo = help_UserInfo_;
    type PromoDataEmpty = help_PromoDataEmpty_;
    type PromoData = help_PromoData_;
    type CountryCode = help_CountryCode_;
    type Country = help_Country_;
    type CountriesListNotModified = help_CountriesListNotModified_;
    type CountriesList = help_CountriesList_;
    type PremiumPromo = help_PremiumPromo_;
    type AppConfigNotModified = help_AppConfigNotModified_;
    type AppConfig = help_AppConfig_;
    type PeerColorSet = help_PeerColorSet_;
    type PeerColorProfileSet = help_PeerColorProfileSet_;
    type PeerColorOption = help_PeerColorOption_;
    type PeerColorsNotModified = help_PeerColorsNotModified_;
    type PeerColors = help_PeerColors_;
  }
  namespace account {
    type PrivacyRules = account_PrivacyRules_;
    type Authorizations = account_Authorizations_;
    type Password = account_Password_;
    type PasswordSettings = account_PasswordSettings_;
    type PasswordInputSettings = account_PasswordInputSettings_;
    type TmpPassword = account_TmpPassword_;
    type WebAuthorizations = account_WebAuthorizations_;
    type AuthorizationForm = account_AuthorizationForm_;
    type SentEmailCode = account_SentEmailCode_;
    type Takeout = account_Takeout_;
    type WallPapersNotModified = account_WallPapersNotModified_;
    type WallPapers = account_WallPapers_;
    type AutoDownloadSettings = account_AutoDownloadSettings_;
    type ThemesNotModified = account_ThemesNotModified_;
    type Themes = account_Themes_;
    type ContentSettings = account_ContentSettings_;
    type ResetPasswordFailedWait = account_ResetPasswordFailedWait_;
    type ResetPasswordRequestedWait = account_ResetPasswordRequestedWait_;
    type ResetPasswordOk = account_ResetPasswordOk_;
    type SavedRingtonesNotModified = account_SavedRingtonesNotModified_;
    type SavedRingtones = account_SavedRingtones_;
    type SavedRingtone = account_SavedRingtone_;
    type SavedRingtoneConverted = account_SavedRingtoneConverted_;
    type EmojiStatusesNotModified = account_EmojiStatusesNotModified_;
    type EmojiStatuses = account_EmojiStatuses_;
    type EmailVerified = account_EmailVerified_;
    type EmailVerifiedLogin = account_EmailVerifiedLogin_;
    type AutoSaveSettings = account_AutoSaveSettings_;
  }
  namespace channels {
    type ChannelParticipants = channels_ChannelParticipants_;
    type ChannelParticipantsNotModified = channels_ChannelParticipantsNotModified_;
    type ChannelParticipant = channels_ChannelParticipant_;
    type AdminLogResults = channels_AdminLogResults_;
    type SendAsPeers = channels_SendAsPeers_;
  }
  namespace payments {
    type PaymentForm = payments_PaymentForm_;
    type ValidatedRequestedInfo = payments_ValidatedRequestedInfo_;
    type PaymentResult = payments_PaymentResult_;
    type PaymentVerificationNeeded = payments_PaymentVerificationNeeded_;
    type PaymentReceipt = payments_PaymentReceipt_;
    type SavedInfo = payments_SavedInfo_;
    type BankCardData = payments_BankCardData_;
    type ExportedInvoice = payments_ExportedInvoice_;
    type CheckedGiftCode = payments_CheckedGiftCode_;
    type GiveawayInfo = payments_GiveawayInfo_;
    type GiveawayInfoResults = payments_GiveawayInfoResults_;
  }
  namespace phone {
    type PhoneCall = phone_PhoneCall_;
    type GroupCall = phone_GroupCall_;
    type GroupParticipants = phone_GroupParticipants_;
    type JoinAsPeers = phone_JoinAsPeers_;
    type ExportedGroupCallInvite = phone_ExportedGroupCallInvite_;
    type GroupCallStreamChannels = phone_GroupCallStreamChannels_;
    type GroupCallStreamRtmpUrl = phone_GroupCallStreamRtmpUrl_;
  }
  namespace stats {
    type BroadcastStats = stats_BroadcastStats_;
    type MegagroupStats = stats_MegagroupStats_;
    type MessageStats = stats_MessageStats_;
    type StoryStats = stats_StoryStats_;
    type PublicForwards = stats_PublicForwards_;
  }
  namespace stickers {
    type SuggestedShortName = stickers_SuggestedShortName_;
  }
  namespace users {
    type UserFull = users_UserFull_;
  }
  namespace chatlists {
    type ExportedChatlistInvite = chatlists_ExportedChatlistInvite_;
    type ExportedInvites = chatlists_ExportedInvites_;
    type ChatlistInviteAlready = chatlists_ChatlistInviteAlready_;
    type ChatlistInvite = chatlists_ChatlistInvite_;
    type ChatlistUpdates = chatlists_ChatlistUpdates_;
  }
  namespace bots {
    type BotInfo = bots_BotInfo_;
  }
  namespace stories {
    type AllStoriesNotModified = stories_AllStoriesNotModified_;
    type AllStories = stories_AllStories_;
    type Stories = stories_Stories_;
    type StoryViewsList = stories_StoryViewsList_;
    type StoryViews = stories_StoryViews_;
    type PeerStories = stories_PeerStories_;
    type StoryReactionsList = stories_StoryReactionsList_;
  }
  namespace premium {
    type BoostsList = premium_BoostsList_;
    type MyBoosts = premium_MyBoosts_;
    type BoostsStatus = premium_BoostsStatus_;
  }
}
export const map = new Map<number, TLObjectConstructor>([
  [0x05162463, ResPQ_],
  [0xA9F55F95, P_q_inner_data_dc_],
  [0x56FDDF88, P_q_inner_data_temp_dc_],
  [0xD0E8075C, Server_DH_params_ok_],
  [0xB5890DBA, Server_DH_inner_data_],
  [0x6643B654, Client_DH_inner_data_],
  [0x3BCBF734, Dh_gen_ok_],
  [0x46DC1FB9, Dh_gen_retry_],
  [0xA69DAE02, Dh_gen_fail_],
  [0x75A3F765, Bind_auth_key_inner_],
  [0x2144CA19, Rpc_error_],
  [0x5E2AD36E, Rpc_answer_unknown_],
  [0xCD78E586, Rpc_answer_dropped_running_],
  [0xA43AD8B7, Rpc_answer_dropped_],
  [0x0949D9DC, Future_salt_],
  [0xAE500895, Future_salts_],
  [0x347773C5, Pong_],
  [0xE22045FC, Destroy_session_ok_],
  [0x62D350C9, Destroy_session_none_],
  [0x9EC20908, New_session_created_],
  [0x3072CFA1, Gzip_packed_],
  [0x62D6B459, Msgs_ack_],
  [0xA7EFF811, Bad_msg_notification_],
  [0xEDAB447B, Bad_server_salt_],
  [0x7D861A08, Msg_resend_req_],
  [0xDA69FB52, Msgs_state_req_],
  [0x04DEB57D, Msgs_state_info_],
  [0x8CC0D131, Msgs_all_info_],
  [0x276D3EC6, Msg_detailed_info_],
  [0x809DB6DF, Msg_new_detailed_info_],
  [0xF660E1D4, Destroy_auth_key_ok_],
  [0x0A9F2259, Destroy_auth_key_none_],
  [0xEA109B13, Destroy_auth_key_fail_],
  [0x9299359F, Http_wait_],
  [0x3FEDD339, True_],
  [0xC4B9F9BB, Error_],
  [0x56730BCC, Null_],
  [0x7F3B18EA, InputPeerEmpty_],
  [0x7DA07EC9, InputPeerSelf_],
  [0x35A95CB9, InputPeerChat_],
  [0xDDE8A54C, InputPeerUser_],
  [0x27BCBBFC, InputPeerChannel_],
  [0xA87B0A1C, InputPeerUserFromMessage_],
  [0xBD2A0840, InputPeerChannelFromMessage_],
  [0xB98886CF, InputUserEmpty_],
  [0xF7C1B13F, InputUserSelf_],
  [0xF21158C6, InputUser_],
  [0x1DA448E2, InputUserFromMessage_],
  [0xF392B7F4, InputPhoneContact_],
  [0xF52FF27F, InputFile_],
  [0xFA4F0BB5, InputFileBig_],
  [0x9664F57F, InputMediaEmpty_],
  [0x1E287D04, InputMediaUploadedPhoto_],
  [0xB3BA0635, InputMediaPhoto_],
  [0xF9C44144, InputMediaGeoPoint_],
  [0xF8AB7DFB, InputMediaContact_],
  [0x5B38C6C1, InputMediaUploadedDocument_],
  [0x33473058, InputMediaDocument_],
  [0xC13D1C11, InputMediaVenue_],
  [0xE5BBFE1A, InputMediaPhotoExternal_],
  [0xFB52DC99, InputMediaDocumentExternal_],
  [0xD33F43F3, InputMediaGame_],
  [0x8EB5A6D5, InputMediaInvoice_],
  [0x971FA843, InputMediaGeoLive_],
  [0x0F94E5F1, InputMediaPoll_],
  [0xE66FBF7B, InputMediaDice_],
  [0x89FDD778, InputMediaStory_],
  [0xC21B8849, InputMediaWebPage_],
  [0x1CA48F57, InputChatPhotoEmpty_],
  [0xBDCDAEC0, InputChatUploadedPhoto_],
  [0x8953AD37, InputChatPhoto_],
  [0xE4C123D6, InputGeoPointEmpty_],
  [0x48222FAF, InputGeoPoint_],
  [0x1CD7BF0D, InputPhotoEmpty_],
  [0x3BB3B94A, InputPhoto_],
  [0xDFDAABE1, InputFileLocation_],
  [0xF5235D55, InputEncryptedFileLocation_],
  [0xBAD07584, InputDocumentFileLocation_],
  [0xCBC7EE28, InputSecureFileLocation_],
  [0x29BE5899, InputTakeoutFileLocation_],
  [0x40181FFE, InputPhotoFileLocation_],
  [0xD83466F3, InputPhotoLegacyFileLocation_],
  [0x37257E99, InputPeerPhotoFileLocation_],
  [0x9D84F3DB, InputStickerSetThumb_],
  [0x0598A92A, InputGroupCallStream_],
  [0x59511722, PeerUser_],
  [0x36C6019A, PeerChat_],
  [0xA2A5371E, PeerChannel_],
  [0xAA963B05, storage_FileUnknown_],
  [0x40BC6F52, storage_FilePartial_],
  [0x007EFE0E, storage_FileJpeg_],
  [0xCAE1AADF, storage_FileGif_],
  [0x0A4F63C0, storage_FilePng_],
  [0xAE1E508D, storage_FilePdf_],
  [0x528A0677, storage_FileMp3_],
  [0x4B09EBBC, storage_FileMov_],
  [0xB3CEA0E4, storage_FileMp4_],
  [0x1081464C, storage_FileWebp_],
  [0xD3BC4B7A, UserEmpty_],
  [0x215C4438, User_],
  [0x4F11BAE1, UserProfilePhotoEmpty_],
  [0x82D1F706, UserProfilePhoto_],
  [0x09D05049, UserStatusEmpty_],
  [0xEDB93949, UserStatusOnline_],
  [0x008C703F, UserStatusOffline_],
  [0x7B197DC8, UserStatusRecently_],
  [0x541A1D1A, UserStatusLastWeek_],
  [0x65899777, UserStatusLastMonth_],
  [0x29562865, ChatEmpty_],
  [0x41CBF256, Chat_],
  [0x6592A1A7, ChatForbidden_],
  [0x0AADFC8F, Channel_],
  [0x17D493D5, ChannelForbidden_],
  [0xC9D31138, ChatFull_],
  [0x44C054A7, ChannelFull_],
  [0xC02D4007, ChatParticipant_],
  [0xE46BCEE4, ChatParticipantCreator_],
  [0xA0933F5B, ChatParticipantAdmin_],
  [0x8763D3E1, ChatParticipantsForbidden_],
  [0x3CBC93F8, ChatParticipants_],
  [0x37C1011C, ChatPhotoEmpty_],
  [0x1C6E1C11, ChatPhoto_],
  [0x90A6CA84, MessageEmpty_],
  [0x1E4C8A69, Message_],
  [0x2B085862, MessageService_],
  [0x3DED6320, MessageMediaEmpty_],
  [0x695150D7, MessageMediaPhoto_],
  [0x56E0D474, MessageMediaGeo_],
  [0x70322949, MessageMediaContact_],
  [0x9F84F49E, MessageMediaUnsupported_],
  [0x4CF4D72D, MessageMediaDocument_],
  [0xDDF10C3B, MessageMediaWebPage_],
  [0x2EC0533F, MessageMediaVenue_],
  [0xFDB19008, MessageMediaGame_],
  [0xF6A548D3, MessageMediaInvoice_],
  [0xB940C666, MessageMediaGeoLive_],
  [0x4BD6E798, MessageMediaPoll_],
  [0x3F7EE58B, MessageMediaDice_],
  [0x68CB6283, MessageMediaStory_],
  [0xDAAD85B0, MessageMediaGiveaway_],
  [0xC6991068, MessageMediaGiveawayResults_],
  [0xB6AEF7B0, MessageActionEmpty_],
  [0xBD47CBAD, MessageActionChatCreate_],
  [0xB5A1CE5A, MessageActionChatEditTitle_],
  [0x7FCB13A8, MessageActionChatEditPhoto_],
  [0x95E3FBEF, MessageActionChatDeletePhoto_],
  [0x15CEFD00, MessageActionChatAddUser_],
  [0xA43F30CC, MessageActionChatDeleteUser_],
  [0x031224C3, MessageActionChatJoinedByLink_],
  [0x95D2AC92, MessageActionChannelCreate_],
  [0xE1037F92, MessageActionChatMigrateTo_],
  [0xEA3948E9, MessageActionChannelMigrateFrom_],
  [0x94BD38ED, MessageActionPinMessage_],
  [0x9FBAB604, MessageActionHistoryClear_],
  [0x92A72876, MessageActionGameScore_],
  [0x8F31B327, MessageActionPaymentSentMe_],
  [0x96163F56, MessageActionPaymentSent_],
  [0x80E11A7F, MessageActionPhoneCall_],
  [0x4792929B, MessageActionScreenshotTaken_],
  [0xFAE69F56, MessageActionCustomAction_],
  [0xC516D679, MessageActionBotAllowed_],
  [0x1B287353, MessageActionSecureValuesSentMe_],
  [0xD95C6154, MessageActionSecureValuesSent_],
  [0xF3F25F76, MessageActionContactSignUp_],
  [0x98E0D697, MessageActionGeoProximityReached_],
  [0x7A0D7F42, MessageActionGroupCall_],
  [0x502F92F7, MessageActionInviteToGroupCall_],
  [0x3C134D7B, MessageActionSetMessagesTTL_],
  [0xB3A07661, MessageActionGroupCallScheduled_],
  [0xAA786345, MessageActionSetChatTheme_],
  [0xEBBCA3CB, MessageActionChatJoinedByRequest_],
  [0x47DD8079, MessageActionWebViewDataSentMe_],
  [0xB4C38CB5, MessageActionWebViewDataSent_],
  [0xC83D6AEC, MessageActionGiftPremium_],
  [0x0D999256, MessageActionTopicCreate_],
  [0xC0944820, MessageActionTopicEdit_],
  [0x57DE635E, MessageActionSuggestProfilePhoto_],
  [0x31518E9B, MessageActionRequestedPeer_],
  [0x5060A3F4, MessageActionSetChatWallPaper_],
  [0x678C2E09, MessageActionGiftCode_],
  [0x332BA9ED, MessageActionGiveawayLaunch_],
  [0x2A9FADC5, MessageActionGiveawayResults_],
  [0xCC02AA6D, MessageActionBoostApply_],
  [0xD58A08C6, Dialog_],
  [0x71BD134C, DialogFolder_],
  [0x2331B22D, PhotoEmpty_],
  [0xFB197A65, Photo_],
  [0x0E17E23C, PhotoSizeEmpty_],
  [0x75C78E60, PhotoSize_],
  [0x021E1AD6, PhotoCachedSize_],
  [0xE0B0BC2E, PhotoStrippedSize_],
  [0xFA3EFB95, PhotoSizeProgressive_],
  [0xD8214D41, PhotoPathSize_],
  [0x1117DD5F, GeoPointEmpty_],
  [0xB2A2F663, GeoPoint_],
  [0x5E002502, auth_SentCode_],
  [0x2390FE44, auth_SentCodeSuccess_],
  [0x2EA2C0D4, auth_Authorization_],
  [0x44747E9A, auth_AuthorizationSignUpRequired_],
  [0xB434E2B8, auth_ExportedAuthorization_],
  [0xB8BC5B0C, InputNotifyPeer_],
  [0x193B4417, InputNotifyUsers_],
  [0x4A95E84E, InputNotifyChats_],
  [0xB1DB7C7E, InputNotifyBroadcasts_],
  [0x5C467992, InputNotifyForumTopic_],
  [0xCACB6AE2, InputPeerNotifySettings_],
  [0x99622C0C, PeerNotifySettings_],
  [0xA518110D, PeerSettings_],
  [0xA437C3ED, WallPaper_],
  [0xE0804116, WallPaperNoFile_],
  [0x58DBCAB8, InputReportReasonSpam_],
  [0x1E22C78D, InputReportReasonViolence_],
  [0x2E59D922, InputReportReasonPornography_],
  [0xADF44EE3, InputReportReasonChildAbuse_],
  [0xC1E4A2B1, InputReportReasonOther_],
  [0x9B89F93A, InputReportReasonCopyright_],
  [0xDBD4FEED, InputReportReasonGeoIrrelevant_],
  [0xF5DDD6E7, InputReportReasonFake_],
  [0x0A8EB2BE, InputReportReasonIllegalDrugs_],
  [0x9EC7863D, InputReportReasonPersonalDetails_],
  [0xB9B12C6C, UserFull_],
  [0x145ADE0B, Contact_],
  [0xC13E3C50, ImportedContact_],
  [0x16D9703B, ContactStatus_],
  [0xB74BA9D2, contacts_ContactsNotModified_],
  [0xEAE87E42, contacts_Contacts_],
  [0x77D01C3B, contacts_ImportedContacts_],
  [0x0ADE1591, contacts_Blocked_],
  [0xE1664194, contacts_BlockedSlice_],
  [0x15BA6C40, messages_Dialogs_],
  [0x71E094F3, messages_DialogsSlice_],
  [0xF0E3E596, messages_DialogsNotModified_],
  [0x8C718E87, messages_Messages_],
  [0x3A54685E, messages_MessagesSlice_],
  [0xC776BA4E, messages_ChannelMessages_],
  [0x74535F21, messages_MessagesNotModified_],
  [0x64FF9FD5, messages_Chats_],
  [0x9CD81144, messages_ChatsSlice_],
  [0xE5D7D19C, messages_ChatFull_],
  [0xB45C69D1, messages_AffectedHistory_],
  [0x57E2F66C, InputMessagesFilterEmpty_],
  [0x9609A51C, InputMessagesFilterPhotos_],
  [0x9FC00E65, InputMessagesFilterVideo_],
  [0x56E9F0E4, InputMessagesFilterPhotoVideo_],
  [0x9EDDF188, InputMessagesFilterDocument_],
  [0x7EF0DD87, InputMessagesFilterUrl_],
  [0xFFC86587, InputMessagesFilterGif_],
  [0x50F5C392, InputMessagesFilterVoice_],
  [0x3751B49E, InputMessagesFilterMusic_],
  [0x3A20ECB8, InputMessagesFilterChatPhotos_],
  [0x80C99768, InputMessagesFilterPhoneCalls_],
  [0x7A7C17A4, InputMessagesFilterRoundVoice_],
  [0xB549DA53, InputMessagesFilterRoundVideo_],
  [0xC1F8E69A, InputMessagesFilterMyMentions_],
  [0xE7026D0D, InputMessagesFilterGeo_],
  [0xE062DB83, InputMessagesFilterContacts_],
  [0x1BB00451, InputMessagesFilterPinned_],
  [0x1F2B0AFD, UpdateNewMessage_],
  [0x4E90BFD6, UpdateMessageID_],
  [0xA20DB0E5, UpdateDeleteMessages_],
  [0xC01E857F, UpdateUserTyping_],
  [0x83487AF0, UpdateChatUserTyping_],
  [0x07761198, UpdateChatParticipants_],
  [0xE5BDF8DE, UpdateUserStatus_],
  [0xA7848924, UpdateUserName_],
  [0x8951ABEF, UpdateNewAuthorization_],
  [0x12BCBD9A, UpdateNewEncryptedMessage_],
  [0x1710F156, UpdateEncryptedChatTyping_],
  [0xB4A2E88D, UpdateEncryption_],
  [0x38FE25B7, UpdateEncryptedMessagesRead_],
  [0x3DDA5451, UpdateChatParticipantAdd_],
  [0xE32F3D77, UpdateChatParticipantDelete_],
  [0x8E5E9873, UpdateDcOptions_],
  [0xBEC268EF, UpdateNotifySettings_],
  [0xEBE46819, UpdateServiceNotification_],
  [0xEE3B272A, UpdatePrivacy_],
  [0x05492A13, UpdateUserPhone_],
  [0x9C974FDF, UpdateReadHistoryInbox_],
  [0x2F2F21BF, UpdateReadHistoryOutbox_],
  [0x7F891213, UpdateWebPage_],
  [0xF8227181, UpdateReadMessagesContents_],
  [0x108D941F, UpdateChannelTooLong_],
  [0x635B4C09, UpdateChannel_],
  [0x62BA04D9, UpdateNewChannelMessage_],
  [0x922E6E10, UpdateReadChannelInbox_],
  [0xC32D5B12, UpdateDeleteChannelMessages_],
  [0xF226AC08, UpdateChannelMessageViews_],
  [0xD7CA61A2, UpdateChatParticipantAdmin_],
  [0x688A30AA, UpdateNewStickerSet_],
  [0x0BB2D201, UpdateStickerSetsOrder_],
  [0x31C24808, UpdateStickerSets_],
  [0x9375341E, UpdateSavedGifs_],
  [0x496F379C, UpdateBotInlineQuery_],
  [0x12F12A07, UpdateBotInlineSend_],
  [0x1B3F4DF7, UpdateEditChannelMessage_],
  [0xB9CFC48D, UpdateBotCallbackQuery_],
  [0xE40370A3, UpdateEditMessage_],
  [0x691E9052, UpdateInlineBotCallbackQuery_],
  [0xB75F99A9, UpdateReadChannelOutbox_],
  [0x1B49EC6D, UpdateDraftMessage_],
  [0x571D2742, UpdateReadFeaturedStickers_],
  [0x9A422C20, UpdateRecentStickers_],
  [0xA229DD06, UpdateConfig_],
  [0x3354678F, UpdatePtsChanged_],
  [0x2F2BA99F, UpdateChannelWebPage_],
  [0x6E6FE51C, UpdateDialogPinned_],
  [0xFA0F3CA2, UpdatePinnedDialogs_],
  [0x8317C0C3, UpdateBotWebhookJSON_],
  [0x9B9240A6, UpdateBotWebhookJSONQuery_],
  [0xB5AEFD7D, UpdateBotShippingQuery_],
  [0x8CAA9A96, UpdateBotPrecheckoutQuery_],
  [0xAB0F6B1E, UpdatePhoneCall_],
  [0x46560264, UpdateLangPackTooLong_],
  [0x56022F4D, UpdateLangPack_],
  [0xE511996D, UpdateFavedStickers_],
  [0xEA29055D, UpdateChannelReadMessagesContents_],
  [0x7084A7BE, UpdateContactsReset_],
  [0xB23FC698, UpdateChannelAvailableMessages_],
  [0xE16459C3, UpdateDialogUnreadMark_],
  [0xACA1657B, UpdateMessagePoll_],
  [0x54C01850, UpdateChatDefaultBannedRights_],
  [0x19360DC0, UpdateFolderPeers_],
  [0x6A7E7366, UpdatePeerSettings_],
  [0xB4AFCFB0, UpdatePeerLocated_],
  [0x39A51DFB, UpdateNewScheduledMessage_],
  [0x90866CEE, UpdateDeleteScheduledMessages_],
  [0x8216FBA3, UpdateTheme_],
  [0x871FB939, UpdateGeoLiveViewed_],
  [0x564FE691, UpdateLoginToken_],
  [0x24F40E77, UpdateMessagePollVote_],
  [0x26FFDE7D, UpdateDialogFilter_],
  [0xA5D72105, UpdateDialogFilterOrder_],
  [0x3504914F, UpdateDialogFilters_],
  [0x2661BF09, UpdatePhoneCallSignalingData_],
  [0xD29A27F4, UpdateChannelMessageForwards_],
  [0xD6B19546, UpdateReadChannelDiscussionInbox_],
  [0x695C9E7C, UpdateReadChannelDiscussionOutbox_],
  [0xEBE07752, UpdatePeerBlocked_],
  [0x8C88C923, UpdateChannelUserTyping_],
  [0xED85EAB5, UpdatePinnedMessages_],
  [0x5BB98608, UpdatePinnedChannelMessages_],
  [0xF89A6A4E, UpdateChat_],
  [0xF2EBDB4E, UpdateGroupCallParticipants_],
  [0x14B24500, UpdateGroupCall_],
  [0xBB9BB9A5, UpdatePeerHistoryTTL_],
  [0xD087663A, UpdateChatParticipant_],
  [0x985D3ABB, UpdateChannelParticipant_],
  [0xC4870A49, UpdateBotStopped_],
  [0x0B783982, UpdateGroupCallConnection_],
  [0x4D712F2E, UpdateBotCommands_],
  [0x7063C3DB, UpdatePendingJoinRequests_],
  [0x11DFA986, UpdateBotChatInviteRequester_],
  [0x5E1B3CB8, UpdateMessageReactions_],
  [0x17B7A20B, UpdateAttachMenuBots_],
  [0x1592B79D, UpdateWebViewResultSent_],
  [0x14B85813, UpdateBotMenuButton_],
  [0x74D8BE99, UpdateSavedRingtones_],
  [0x0084CD5A, UpdateTranscribedAudio_],
  [0xFB4C496C, UpdateReadFeaturedEmojiStickers_],
  [0x28373599, UpdateUserEmojiStatus_],
  [0x30F443DB, UpdateRecentEmojiStatuses_],
  [0x6F7863F4, UpdateRecentReactions_],
  [0x86FCCF85, UpdateMoveStickerSetToTop_],
  [0x5A73A98C, UpdateMessageExtendedMedia_],
  [0x192EFBE3, UpdateChannelPinnedTopic_],
  [0xFE198602, UpdateChannelPinnedTopics_],
  [0x20529438, UpdateUser_],
  [0xEC05B097, UpdateAutoSaveSettings_],
  [0xCCF08AD6, UpdateGroupInvitePrivacyForbidden_],
  [0x75B3B798, UpdateStory_],
  [0xF74E932B, UpdateReadStories_],
  [0x1BF335B9, UpdateStoryID_],
  [0x2C084DC1, UpdateStoriesStealthMode_],
  [0x7D627683, UpdateSentStoryReaction_],
  [0x904DD49C, UpdateBotChatBoost_],
  [0x07B68920, UpdateChannelViewForumAsMessages_],
  [0xAE3F101D, UpdatePeerWallpaper_],
  [0xAC21D3CE, UpdateBotMessageReaction_],
  [0x09CB7759, UpdateBotMessageReactions_],
  [0xAEAF9E74, UpdateSavedDialogPinned_],
  [0x686C85A6, UpdatePinnedSavedDialogs_],
  [0x39C67432, UpdateSavedReactionTags_],
  [0xA56C2A3E, updates_State_],
  [0x5D75A138, updates_DifferenceEmpty_],
  [0x00F49CA0, updates_Difference_],
  [0xA8FB1981, updates_DifferenceSlice_],
  [0x4AFE8F6D, updates_DifferenceTooLong_],
  [0xE317AF7E, UpdatesTooLong_],
  [0x313BC7F8, UpdateShortMessage_],
  [0x4D6DEEA5, UpdateShortChatMessage_],
  [0x78D4DEC1, UpdateShort_],
  [0x725B04C3, UpdatesCombined_],
  [0x74AE4240, Updates_],
  [0x9015E101, UpdateShortSentMessage_],
  [0x8DCA6AA5, photos_Photos_],
  [0x15051F54, photos_PhotosSlice_],
  [0x20212CA8, photos_Photo_],
  [0x096A18D5, upload_File_],
  [0xF18CDA44, upload_FileCdnRedirect_],
  [0x18B7A10D, DcOption_],
  [0xCC1A241E, Config_],
  [0x8E1A1775, NearestDc_],
  [0xCCBBCE30, help_AppUpdate_],
  [0xC45A6536, help_NoAppUpdate_],
  [0x18CB9F78, help_InviteText_],
  [0xAB7EC0A0, EncryptedChatEmpty_],
  [0x66B25953, EncryptedChatWaiting_],
  [0x48F1D94C, EncryptedChatRequested_],
  [0x61F0D4C7, EncryptedChat_],
  [0x1E1C7C45, EncryptedChatDiscarded_],
  [0xF141B5E1, InputEncryptedChat_],
  [0xC21F497E, EncryptedFileEmpty_],
  [0xA8008CD8, EncryptedFile_],
  [0x1837C364, InputEncryptedFileEmpty_],
  [0x64BD0306, InputEncryptedFileUploaded_],
  [0x5A17B5E5, InputEncryptedFile_],
  [0x2DC173C8, InputEncryptedFileBigUploaded_],
  [0xED18C118, EncryptedMessage_],
  [0x23734B06, EncryptedMessageService_],
  [0xC0E24635, messages_DhConfigNotModified_],
  [0x2C221EDD, messages_DhConfig_],
  [0x560F8935, messages_SentEncryptedMessage_],
  [0x9493FF32, messages_SentEncryptedFile_],
  [0x72F0EAAE, InputDocumentEmpty_],
  [0x1ABFB575, InputDocument_],
  [0x36F8C871, DocumentEmpty_],
  [0x8FD4C4D8, Document_],
  [0x17C6B5F6, help_Support_],
  [0x9FD40BD8, NotifyPeer_],
  [0xB4C83B4C, NotifyUsers_],
  [0xC007CEC3, NotifyChats_],
  [0xD612E8EF, NotifyBroadcasts_],
  [0x226E6308, NotifyForumTopic_],
  [0x16BF744E, SendMessageTypingAction_],
  [0xFD5EC8F5, SendMessageCancelAction_],
  [0xA187D66F, SendMessageRecordVideoAction_],
  [0xE9763AEC, SendMessageUploadVideoAction_],
  [0xD52F73F7, SendMessageRecordAudioAction_],
  [0xF351D7AB, SendMessageUploadAudioAction_],
  [0xD1D34A26, SendMessageUploadPhotoAction_],
  [0xAA0CD9E4, SendMessageUploadDocumentAction_],
  [0x176F8BA1, SendMessageGeoLocationAction_],
  [0x628CBC6F, SendMessageChooseContactAction_],
  [0xDD6A8F48, SendMessageGamePlayAction_],
  [0x88F27FBC, SendMessageRecordRoundAction_],
  [0x243E1C66, SendMessageUploadRoundAction_],
  [0xD92C2285, SpeakingInGroupCallAction_],
  [0xDBDA9246, SendMessageHistoryImportAction_],
  [0xB05AC6B1, SendMessageChooseStickerAction_],
  [0x25972BCB, SendMessageEmojiInteraction_],
  [0xB665902E, SendMessageEmojiInteractionSeen_],
  [0xB3134D9D, contacts_Found_],
  [0x4F96CB18, InputPrivacyKeyStatusTimestamp_],
  [0xBDFB0426, InputPrivacyKeyChatInvite_],
  [0xFABADC5F, InputPrivacyKeyPhoneCall_],
  [0xDB9E70D2, InputPrivacyKeyPhoneP2P_],
  [0xA4DD4C08, InputPrivacyKeyForwards_],
  [0x5719BACC, InputPrivacyKeyProfilePhoto_],
  [0x0352DAFA, InputPrivacyKeyPhoneNumber_],
  [0xD1219BDD, InputPrivacyKeyAddedByPhone_],
  [0xAEE69D68, InputPrivacyKeyVoiceMessages_],
  [0x3823CC40, InputPrivacyKeyAbout_],
  [0xBC2EAB30, PrivacyKeyStatusTimestamp_],
  [0x500E6DFA, PrivacyKeyChatInvite_],
  [0x3D662B7B, PrivacyKeyPhoneCall_],
  [0x39491CC8, PrivacyKeyPhoneP2P_],
  [0x69EC56A3, PrivacyKeyForwards_],
  [0x96151FED, PrivacyKeyProfilePhoto_],
  [0xD19AE46D, PrivacyKeyPhoneNumber_],
  [0x42FFD42B, PrivacyKeyAddedByPhone_],
  [0x0697F414, PrivacyKeyVoiceMessages_],
  [0xA486B761, PrivacyKeyAbout_],
  [0x0D09E07B, InputPrivacyValueAllowContacts_],
  [0x184B35CE, InputPrivacyValueAllowAll_],
  [0x131CC67F, InputPrivacyValueAllowUsers_],
  [0x0BA52007, InputPrivacyValueDisallowContacts_],
  [0xD66B66C9, InputPrivacyValueDisallowAll_],
  [0x90110467, InputPrivacyValueDisallowUsers_],
  [0x840649CF, InputPrivacyValueAllowChatParticipants_],
  [0xE94F0F86, InputPrivacyValueDisallowChatParticipants_],
  [0x2F453E49, InputPrivacyValueAllowCloseFriends_],
  [0xFFFE1BAC, PrivacyValueAllowContacts_],
  [0x65427B82, PrivacyValueAllowAll_],
  [0xB8905FB2, PrivacyValueAllowUsers_],
  [0xF888FA1A, PrivacyValueDisallowContacts_],
  [0x8B73E763, PrivacyValueDisallowAll_],
  [0xE4621141, PrivacyValueDisallowUsers_],
  [0x6B134E8E, PrivacyValueAllowChatParticipants_],
  [0x41C87565, PrivacyValueDisallowChatParticipants_],
  [0xF7E8D89B, PrivacyValueAllowCloseFriends_],
  [0x50A04E45, account_PrivacyRules_],
  [0xB8D0AFDF, AccountDaysTTL_],
  [0x6C37C15C, DocumentAttributeImageSize_],
  [0x11B58939, DocumentAttributeAnimated_],
  [0x6319D612, DocumentAttributeSticker_],
  [0xD38FF1C2, DocumentAttributeVideo_],
  [0x9852F9C6, DocumentAttributeAudio_],
  [0x15590068, DocumentAttributeFilename_],
  [0x9801D2F7, DocumentAttributeHasStickers_],
  [0xFD149899, DocumentAttributeCustomEmoji_],
  [0xF1749A22, messages_StickersNotModified_],
  [0x30A6EC7E, messages_Stickers_],
  [0x12B299D4, StickerPack_],
  [0xE86602C3, messages_AllStickersNotModified_],
  [0xCDBBCEBB, messages_AllStickers_],
  [0x84D19185, messages_AffectedMessages_],
  [0x211A1788, WebPageEmpty_],
  [0xB0D13E47, WebPagePending_],
  [0xE89C45B2, WebPage_],
  [0x7311CA11, WebPageNotModified_],
  [0xAD01D61D, Authorization_],
  [0x4BFF8EA0, account_Authorizations_],
  [0x957B50FB, account_Password_],
  [0x9A5C33E5, account_PasswordSettings_],
  [0xC23727C9, account_PasswordInputSettings_],
  [0x137948A5, auth_PasswordRecovery_],
  [0xA384B779, ReceivedNotifyMessage_],
  [0x0AB4A819, ChatInviteExported_],
  [0xED107AB7, ChatInvitePublicJoinRequests_],
  [0x5A686D7C, ChatInviteAlready_],
  [0xCDE0EC40, ChatInvite_],
  [0x61695CB0, ChatInvitePeek_],
  [0xFFB62B95, InputStickerSetEmpty_],
  [0x9DE7A269, InputStickerSetID_],
  [0x861CC8A0, InputStickerSetShortName_],
  [0x028703C8, InputStickerSetAnimatedEmoji_],
  [0xE67F520E, InputStickerSetDice_],
  [0x0CDE3739, InputStickerSetAnimatedEmojiAnimations_],
  [0xC88B3B02, InputStickerSetPremiumGifts_],
  [0x04C4D4CE, InputStickerSetEmojiGenericAnimations_],
  [0x29D0F5EE, InputStickerSetEmojiDefaultStatuses_],
  [0x44C1F8E9, InputStickerSetEmojiDefaultTopicIcons_],
  [0x49748553, InputStickerSetEmojiChannelDefaultStatuses_],
  [0x2DD14EDC, StickerSet_],
  [0x6E153F16, messages_StickerSet_],
  [0xD3F924EB, messages_StickerSetNotModified_],
  [0xC27AC8C7, BotCommand_],
  [0x8F300B57, BotInfo_],
  [0xA2FA4880, KeyboardButton_],
  [0x258AFF05, KeyboardButtonUrl_],
  [0x35BBDB6B, KeyboardButtonCallback_],
  [0xB16A6C29, KeyboardButtonRequestPhone_],
  [0xFC796B3F, KeyboardButtonRequestGeoLocation_],
  [0x93B9FBB5, KeyboardButtonSwitchInline_],
  [0x50F41CCF, KeyboardButtonGame_],
  [0xAFD93FBB, KeyboardButtonBuy_],
  [0x10B78D29, KeyboardButtonUrlAuth_],
  [0xD02E7FD4, InputKeyboardButtonUrlAuth_],
  [0xBBC7515D, KeyboardButtonRequestPoll_],
  [0xE988037B, InputKeyboardButtonUserProfile_],
  [0x308660C1, KeyboardButtonUserProfile_],
  [0x13767230, KeyboardButtonWebView_],
  [0xA0C0505C, KeyboardButtonSimpleWebView_],
  [0x53D7BFD8, KeyboardButtonRequestPeer_],
  [0x77608B83, KeyboardButtonRow_],
  [0xA03E5B85, ReplyKeyboardHide_],
  [0x86B40B08, ReplyKeyboardForceReply_],
  [0x85DD99D1, ReplyKeyboardMarkup_],
  [0x48A30254, ReplyInlineMarkup_],
  [0xBB92BA95, MessageEntityUnknown_],
  [0xFA04579D, MessageEntityMention_],
  [0x6F635B0D, MessageEntityHashtag_],
  [0x6CEF8AC7, MessageEntityBotCommand_],
  [0x6ED02538, MessageEntityUrl_],
  [0x64E475C2, MessageEntityEmail_],
  [0xBD610BC9, MessageEntityBold_],
  [0x826F8B60, MessageEntityItalic_],
  [0x28A20571, MessageEntityCode_],
  [0x73924BE0, MessageEntityPre_],
  [0x76A6D327, MessageEntityTextUrl_],
  [0xDC7B1140, MessageEntityMentionName_],
  [0x208E68C9, InputMessageEntityMentionName_],
  [0x9B69E34B, MessageEntityPhone_],
  [0x4C4E743F, MessageEntityCashtag_],
  [0x9C4E7E8B, MessageEntityUnderline_],
  [0xBF0693D4, MessageEntityStrike_],
  [0x761E6AF4, MessageEntityBankCard_],
  [0x32CA960F, MessageEntitySpoiler_],
  [0xC8CF05F8, MessageEntityCustomEmoji_],
  [0x020DF5D0, MessageEntityBlockquote_],
  [0xEE8C1E86, InputChannelEmpty_],
  [0xF35AEC28, InputChannel_],
  [0x5B934F9D, InputChannelFromMessage_],
  [0x7F077AD9, contacts_ResolvedPeer_],
  [0x0AE30253, MessageRange_],
  [0x3E11AFFB, updates_ChannelDifferenceEmpty_],
  [0xA4BCC6FE, updates_ChannelDifferenceTooLong_],
  [0x2064674E, updates_ChannelDifference_],
  [0x94D42EE7, ChannelMessagesFilterEmpty_],
  [0xCD77D957, ChannelMessagesFilter_],
  [0xC00C07C0, ChannelParticipant_],
  [0x35A8BFA7, ChannelParticipantSelf_],
  [0x2FE601D3, ChannelParticipantCreator_],
  [0x34C3BB53, ChannelParticipantAdmin_],
  [0x6DF8014E, ChannelParticipantBanned_],
  [0x1B03F006, ChannelParticipantLeft_],
  [0xDE3F3C79, ChannelParticipantsRecent_],
  [0xB4608969, ChannelParticipantsAdmins_],
  [0xA3B54985, ChannelParticipantsKicked_],
  [0xB0D1865B, ChannelParticipantsBots_],
  [0x1427A5E1, ChannelParticipantsBanned_],
  [0x0656AC4B, ChannelParticipantsSearch_],
  [0xBB6AE88D, ChannelParticipantsContacts_],
  [0xE04B5CEB, ChannelParticipantsMentions_],
  [0x9AB0FEAF, channels_ChannelParticipants_],
  [0xF0173FE9, channels_ChannelParticipantsNotModified_],
  [0xDFB80317, channels_ChannelParticipant_],
  [0x780A0310, help_TermsOfService_],
  [0xE8025CA2, messages_SavedGifsNotModified_],
  [0x84A02A0D, messages_SavedGifs_],
  [0x3380C786, InputBotInlineMessageMediaAuto_],
  [0x3DCD7A87, InputBotInlineMessageText_],
  [0x96929A85, InputBotInlineMessageMediaGeo_],
  [0x417BBF11, InputBotInlineMessageMediaVenue_],
  [0xA6EDBFFD, InputBotInlineMessageMediaContact_],
  [0x4B425864, InputBotInlineMessageGame_],
  [0xD7E78225, InputBotInlineMessageMediaInvoice_],
  [0xBDDCC510, InputBotInlineMessageMediaWebPage_],
  [0x88BF9319, InputBotInlineResult_],
  [0xA8D864A7, InputBotInlineResultPhoto_],
  [0xFFF8FDC4, InputBotInlineResultDocument_],
  [0x4FA417F2, InputBotInlineResultGame_],
  [0x764CF810, BotInlineMessageMediaAuto_],
  [0x8C7F65E2, BotInlineMessageText_],
  [0x051846FD, BotInlineMessageMediaGeo_],
  [0x8A86659C, BotInlineMessageMediaVenue_],
  [0x18D1CDC2, BotInlineMessageMediaContact_],
  [0x354A9B09, BotInlineMessageMediaInvoice_],
  [0x809AD9A6, BotInlineMessageMediaWebPage_],
  [0x11965F3A, BotInlineResult_],
  [0x17DB940B, BotInlineMediaResult_],
  [0xE021F2F6, messages_BotResults_],
  [0x5DAB1AF4, ExportedMessageLink_],
  [0x4E4DF4BB, MessageFwdHeader_],
  [0x72A3158C, auth_CodeTypeSms_],
  [0x741CD3E3, auth_CodeTypeCall_],
  [0x226CCEFB, auth_CodeTypeFlashCall_],
  [0xD61AD6EE, auth_CodeTypeMissedCall_],
  [0x06ED998C, auth_CodeTypeFragmentSms_],
  [0x3DBB5986, auth_SentCodeTypeApp_],
  [0xC000BBA2, auth_SentCodeTypeSms_],
  [0x5353E5A7, auth_SentCodeTypeCall_],
  [0xAB03C6D9, auth_SentCodeTypeFlashCall_],
  [0x82006484, auth_SentCodeTypeMissedCall_],
  [0xF450F59B, auth_SentCodeTypeEmailCode_],
  [0xA5491DEA, auth_SentCodeTypeSetUpEmailRequired_],
  [0xD9565C39, auth_SentCodeTypeFragmentSms_],
  [0xE57B1432, auth_SentCodeTypeFirebaseSms_],
  [0x36585EA4, messages_BotCallbackAnswer_],
  [0x26B5DDE6, messages_MessageEditData_],
  [0x890C3D89, InputBotInlineMessageID_],
  [0xB6D915D7, InputBotInlineMessageID64_],
  [0x3C20629F, InlineBotSwitchPM_],
  [0x3371C354, messages_PeerDialogs_],
  [0xEDCDC05B, TopPeer_],
  [0xAB661B5B, TopPeerCategoryBotsPM_],
  [0x148677E2, TopPeerCategoryBotsInline_],
  [0x0637B7ED, TopPeerCategoryCorrespondents_],
  [0xBD17A14A, TopPeerCategoryGroups_],
  [0x161D9628, TopPeerCategoryChannels_],
  [0x1E76A78C, TopPeerCategoryPhoneCalls_],
  [0xA8406CA9, TopPeerCategoryForwardUsers_],
  [0xFBEEC0F0, TopPeerCategoryForwardChats_],
  [0xFB834291, TopPeerCategoryPeers_],
  [0xDE266EF5, contacts_TopPeersNotModified_],
  [0x70B772A8, contacts_TopPeers_],
  [0xB52C939D, contacts_TopPeersDisabled_],
  [0x1B0C841A, DraftMessageEmpty_],
  [0x3FCCF7EF, DraftMessage_],
  [0xC6DC0C66, messages_FeaturedStickersNotModified_],
  [0xBE382906, messages_FeaturedStickers_],
  [0x0B17F890, messages_RecentStickersNotModified_],
  [0x88D37C56, messages_RecentStickers_],
  [0x4FCBA9C8, messages_ArchivedStickers_],
  [0x38641628, messages_StickerSetInstallResultSuccess_],
  [0x35E410A8, messages_StickerSetInstallResultArchive_],
  [0x6410A5D2, StickerSetCovered_],
  [0x3407E51B, StickerSetMultiCovered_],
  [0x40D13C0E, StickerSetFullCovered_],
  [0x77B15D1C, StickerSetNoCovered_],
  [0xAED6DBB2, MaskCoords_],
  [0x4A992157, InputStickeredMediaPhoto_],
  [0x0438865B, InputStickeredMediaDocument_],
  [0xBDF9653B, Game_],
  [0x032C3E77, InputGameID_],
  [0xC331E80A, InputGameShortName_],
  [0x73A379EB, HighScore_],
  [0x9A3BFD99, messages_HighScores_],
  [0xDC3D824F, TextEmpty_],
  [0x744694E0, TextPlain_],
  [0x6724ABC4, TextBold_],
  [0xD912A59C, TextItalic_],
  [0xC12622C4, TextUnderline_],
  [0x9BF8BB95, TextStrike_],
  [0x6C3F19B9, TextFixed_],
  [0x3C2884C1, TextUrl_],
  [0xDE5A0DD6, TextEmail_],
  [0x7E6260D7, TextConcat_],
  [0xED6A8504, TextSubscript_],
  [0xC7FB5E01, TextSuperscript_],
  [0x034B8621, TextMarked_],
  [0x1CCB966A, TextPhone_],
  [0x081CCF4F, TextImage_],
  [0x35553762, TextAnchor_],
  [0x13567E8A, PageBlockUnsupported_],
  [0x70ABC3FD, PageBlockTitle_],
  [0x8FFA9A1F, PageBlockSubtitle_],
  [0xBAAFE5E0, PageBlockAuthorDate_],
  [0xBFD064EC, PageBlockHeader_],
  [0xF12BB6E1, PageBlockSubheader_],
  [0x467A0766, PageBlockParagraph_],
  [0xC070D93E, PageBlockPreformatted_],
  [0x48870999, PageBlockFooter_],
  [0xDB20B188, PageBlockDivider_],
  [0xCE0D37B0, PageBlockAnchor_],
  [0xE4E88011, PageBlockList_],
  [0x263D7C26, PageBlockBlockquote_],
  [0x4F4456D3, PageBlockPullquote_],
  [0x1759C560, PageBlockPhoto_],
  [0x7C8FE7B6, PageBlockVideo_],
  [0x39F23300, PageBlockCover_],
  [0xA8718DC5, PageBlockEmbed_],
  [0xF259A80B, PageBlockEmbedPost_],
  [0x65A0FA4D, PageBlockCollage_],
  [0x031F9590, PageBlockSlideshow_],
  [0xEF1751B5, PageBlockChannel_],
  [0x804361EA, PageBlockAudio_],
  [0x1E148390, PageBlockKicker_],
  [0xBF4DEA82, PageBlockTable_],
  [0x9A8AE1E1, PageBlockOrderedList_],
  [0x76768BED, PageBlockDetails_],
  [0x16115A96, PageBlockRelatedArticles_],
  [0xA44F3EF6, PageBlockMap_],
  [0x85E42301, PhoneCallDiscardReasonMissed_],
  [0xE095C1A0, PhoneCallDiscardReasonDisconnect_],
  [0x57ADC690, PhoneCallDiscardReasonHangup_],
  [0xFAF7E8C9, PhoneCallDiscardReasonBusy_],
  [0x7D748D04, DataJSON_],
  [0xCB296BF8, LabeledPrice_],
  [0x5DB95A15, Invoice_],
  [0xEA02C27E, PaymentCharge_],
  [0x1E8CAAEB, PostAddress_],
  [0x909C3F94, PaymentRequestedInfo_],
  [0xCDC27A1F, PaymentSavedCredentialsCard_],
  [0x1C570ED1, WebDocument_],
  [0xF9C8BCC6, WebDocumentNoProxy_],
  [0x9BED434D, InputWebDocument_],
  [0xC239D686, InputWebFileLocation_],
  [0x9F2221C9, InputWebFileGeoPointLocation_],
  [0xF46FE924, InputWebFileAudioAlbumThumbLocation_],
  [0x21E753BC, upload_WebFile_],
  [0xA0058751, payments_PaymentForm_],
  [0xD1451883, payments_ValidatedRequestedInfo_],
  [0x4E5F810D, payments_PaymentResult_],
  [0xD8411139, payments_PaymentVerificationNeeded_],
  [0x70C4FE03, payments_PaymentReceipt_],
  [0xFB8FE43C, payments_SavedInfo_],
  [0xC10EB2CF, InputPaymentCredentialsSaved_],
  [0x3417D728, InputPaymentCredentials_],
  [0x0AA1C39F, InputPaymentCredentialsApplePay_],
  [0x8AC32801, InputPaymentCredentialsGooglePay_],
  [0xDB64FD34, account_TmpPassword_],
  [0xB6213CDF, ShippingOption_],
  [0x32DA9E9C, InputStickerSetItem_],
  [0x1E36FDED, InputPhoneCall_],
  [0x5366C915, PhoneCallEmpty_],
  [0xC5226F17, PhoneCallWaiting_],
  [0x14B0ED0C, PhoneCallRequested_],
  [0x3660C311, PhoneCallAccepted_],
  [0x967F7C67, PhoneCall_],
  [0x50CA4DE1, PhoneCallDiscarded_],
  [0x9CC123C7, PhoneConnection_],
  [0x635FE375, PhoneConnectionWebrtc_],
  [0xFC878FC8, PhoneCallProtocol_],
  [0xEC82E140, phone_PhoneCall_],
  [0xEEA8E46E, upload_CdnFileReuploadNeeded_],
  [0xA99FCA4F, upload_CdnFile_],
  [0xC982EABA, CdnPublicKey_],
  [0x5725E40A, CdnConfig_],
  [0xCAD181F6, LangPackString_],
  [0x6C47AC9F, LangPackStringPluralized_],
  [0x2979EEB2, LangPackStringDeleted_],
  [0xF385C1F6, LangPackDifference_],
  [0xEECA5CE3, LangPackLanguage_],
  [0xE6DFB825, ChannelAdminLogEventActionChangeTitle_],
  [0x55188A2E, ChannelAdminLogEventActionChangeAbout_],
  [0x6A4AFC38, ChannelAdminLogEventActionChangeUsername_],
  [0x434BD2AF, ChannelAdminLogEventActionChangePhoto_],
  [0x1B7907AE, ChannelAdminLogEventActionToggleInvites_],
  [0x26AE0971, ChannelAdminLogEventActionToggleSignatures_],
  [0xE9E82C18, ChannelAdminLogEventActionUpdatePinned_],
  [0x709B2405, ChannelAdminLogEventActionEditMessage_],
  [0x42E047BB, ChannelAdminLogEventActionDeleteMessage_],
  [0x183040D3, ChannelAdminLogEventActionParticipantJoin_],
  [0xF89777F2, ChannelAdminLogEventActionParticipantLeave_],
  [0xE31C34D8, ChannelAdminLogEventActionParticipantInvite_],
  [0xE6D83D7E, ChannelAdminLogEventActionParticipantToggleBan_],
  [0xD5676710, ChannelAdminLogEventActionParticipantToggleAdmin_],
  [0xB1C3CAA7, ChannelAdminLogEventActionChangeStickerSet_],
  [0x5F5C95F1, ChannelAdminLogEventActionTogglePreHistoryHidden_],
  [0x2DF5FC0A, ChannelAdminLogEventActionDefaultBannedRights_],
  [0x8F079643, ChannelAdminLogEventActionStopPoll_],
  [0x050C7AC8, ChannelAdminLogEventActionChangeLinkedChat_],
  [0x0E6B76AE, ChannelAdminLogEventActionChangeLocation_],
  [0x53909779, ChannelAdminLogEventActionToggleSlowMode_],
  [0x23209745, ChannelAdminLogEventActionStartGroupCall_],
  [0xDB9F9140, ChannelAdminLogEventActionDiscardGroupCall_],
  [0xF92424D2, ChannelAdminLogEventActionParticipantMute_],
  [0xE64429C0, ChannelAdminLogEventActionParticipantUnmute_],
  [0x56D6A247, ChannelAdminLogEventActionToggleGroupCallSetting_],
  [0xFE9FC158, ChannelAdminLogEventActionParticipantJoinByInvite_],
  [0x5A50FCA4, ChannelAdminLogEventActionExportedInviteDelete_],
  [0x410A134E, ChannelAdminLogEventActionExportedInviteRevoke_],
  [0xE90EBB59, ChannelAdminLogEventActionExportedInviteEdit_],
  [0x3E7F6847, ChannelAdminLogEventActionParticipantVolume_],
  [0x6E941A38, ChannelAdminLogEventActionChangeHistoryTTL_],
  [0xAFB6144A, ChannelAdminLogEventActionParticipantJoinByRequest_],
  [0xCB2AC766, ChannelAdminLogEventActionToggleNoForwards_],
  [0x278F2868, ChannelAdminLogEventActionSendMessage_],
  [0xBE4E0EF8, ChannelAdminLogEventActionChangeAvailableReactions_],
  [0xF04FB3A9, ChannelAdminLogEventActionChangeUsernames_],
  [0x02CC6383, ChannelAdminLogEventActionToggleForum_],
  [0x58707D28, ChannelAdminLogEventActionCreateTopic_],
  [0xF06FE208, ChannelAdminLogEventActionEditTopic_],
  [0xAE168909, ChannelAdminLogEventActionDeleteTopic_],
  [0x5D8D353B, ChannelAdminLogEventActionPinTopic_],
  [0x64F36DFC, ChannelAdminLogEventActionToggleAntiSpam_],
  [0x5796E780, ChannelAdminLogEventActionChangePeerColor_],
  [0x5E477B25, ChannelAdminLogEventActionChangeProfilePeerColor_],
  [0x31BB5D52, ChannelAdminLogEventActionChangeWallpaper_],
  [0x3EA9FEB1, ChannelAdminLogEventActionChangeEmojiStatus_],
  [0x46D840AB, ChannelAdminLogEventActionChangeEmojiStickerSet_],
  [0x1FAD68CD, ChannelAdminLogEvent_],
  [0xED8AF74D, channels_AdminLogResults_],
  [0xEA107AE4, ChannelAdminLogEventsFilter_],
  [0x5CE14175, PopularContact_],
  [0x9E8FA6D3, messages_FavedStickersNotModified_],
  [0x2CB51097, messages_FavedStickers_],
  [0x46E1D13D, RecentMeUrlUnknown_],
  [0xB92C09E2, RecentMeUrlUser_],
  [0xB2DA71D2, RecentMeUrlChat_],
  [0xEB49081D, RecentMeUrlChatInvite_],
  [0xBC0A57DC, RecentMeUrlStickerSet_],
  [0x0E0310D7, help_RecentMeUrls_],
  [0x1CC6E91F, InputSingleMedia_],
  [0xA6F8F452, WebAuthorization_],
  [0xED56C9FC, account_WebAuthorizations_],
  [0xA676A322, InputMessageID_],
  [0xBAD88395, InputMessageReplyTo_],
  [0x86872538, InputMessagePinned_],
  [0xACFA1A7E, InputMessageCallbackQuery_],
  [0xFCAAFEB7, InputDialogPeer_],
  [0x64600527, InputDialogPeerFolder_],
  [0xE56DBF05, DialogPeer_],
  [0x514519E2, DialogPeerFolder_],
  [0x0D54B65D, messages_FoundStickerSetsNotModified_],
  [0x8AF09DD2, messages_FoundStickerSets_],
  [0xF39B035C, FileHash_],
  [0x75588B3F, InputClientProxy_],
  [0xE3309F7F, help_TermsOfServiceUpdateEmpty_],
  [0x28ECF961, help_TermsOfServiceUpdate_],
  [0x3334B0F0, InputSecureFileUploaded_],
  [0x5367E5BE, InputSecureFile_],
  [0x64199744, SecureFileEmpty_],
  [0x7D09C27E, SecureFile_],
  [0x8AEABEC3, SecureData_],
  [0x7D6099DD, SecurePlainPhone_],
  [0x21EC5A5F, SecurePlainEmail_],
  [0x9D2A81E3, SecureValueTypePersonalDetails_],
  [0x3DAC6A00, SecureValueTypePassport_],
  [0x06E425C4, SecureValueTypeDriverLicense_],
  [0xA0D0744B, SecureValueTypeIdentityCard_],
  [0x99A48F23, SecureValueTypeInternalPassport_],
  [0xCBE31E26, SecureValueTypeAddress_],
  [0xFC36954E, SecureValueTypeUtilityBill_],
  [0x89137C0D, SecureValueTypeBankStatement_],
  [0x8B883488, SecureValueTypeRentalAgreement_],
  [0x99E3806A, SecureValueTypePassportRegistration_],
  [0xEA02EC33, SecureValueTypeTemporaryRegistration_],
  [0xB320AADB, SecureValueTypePhone_],
  [0x8E3CA7EE, SecureValueTypeEmail_],
  [0x187FA0CA, SecureValue_],
  [0xDB21D0A7, InputSecureValue_],
  [0xED1ECDB0, SecureValueHash_],
  [0xE8A40BD9, SecureValueErrorData_],
  [0x00BE3DFA, SecureValueErrorFrontSide_],
  [0x868A2AA5, SecureValueErrorReverseSide_],
  [0xE537CED6, SecureValueErrorSelfie_],
  [0x7A700873, SecureValueErrorFile_],
  [0x666220E9, SecureValueErrorFiles_],
  [0x869D758F, SecureValueError_],
  [0xA1144770, SecureValueErrorTranslationFile_],
  [0x34636DD8, SecureValueErrorTranslationFiles_],
  [0x33F0EA47, SecureCredentialsEncrypted_],
  [0xAD2E1CD8, account_AuthorizationForm_],
  [0x811F854F, account_SentEmailCode_],
  [0x66AFA166, help_DeepLinkInfoEmpty_],
  [0x6A4EE832, help_DeepLinkInfo_],
  [0x1142BD56, SavedPhoneContact_],
  [0x4DBA4501, account_Takeout_],
  [0xD45AB096, PasswordKdfAlgoUnknown_],
  [0x3A912D4A, PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_],
  [0x004A8537, SecurePasswordKdfAlgoUnknown_],
  [0xBBF2DDA0, SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_],
  [0x86471D92, SecurePasswordKdfAlgoSHA512_],
  [0x1527BCAC, SecureSecretSettings_],
  [0x9880F658, InputCheckPasswordEmpty_],
  [0xD27FF082, InputCheckPasswordSRP_],
  [0x829D99DA, SecureRequiredType_],
  [0x027477B4, SecureRequiredTypeOneOf_],
  [0xBFB9F457, help_PassportConfigNotModified_],
  [0xA098D6AF, help_PassportConfig_],
  [0x1D1B1245, InputAppEvent_],
  [0xC0DE1BD9, JsonObjectValue_],
  [0x3F6D7B68, JsonNull_],
  [0xC7345E6A, JsonBool_],
  [0x2BE0DFA4, JsonNumber_],
  [0xB71E767A, JsonString_],
  [0xF7444763, JsonArray_],
  [0x99C1D49D, JsonObject_],
  [0x34566B6A, PageTableCell_],
  [0xE0C0C5E5, PageTableRow_],
  [0x6F747657, PageCaption_],
  [0xB92FB6CD, PageListItemText_],
  [0x25E073FC, PageListItemBlocks_],
  [0x5E068047, PageListOrderedItemText_],
  [0x98DD8936, PageListOrderedItemBlocks_],
  [0xB390DC08, PageRelatedArticle_],
  [0x98657F0D, Page_],
  [0x8C05F1C9, help_SupportName_],
  [0xF3AE2EED, help_UserInfoEmpty_],
  [0x01EB3758, help_UserInfo_],
  [0x6CA9C2E9, PollAnswer_],
  [0x86E18161, Poll_],
  [0x3B6DDAD2, PollAnswerVoters_],
  [0x7ADF2420, PollResults_],
  [0xF041E250, ChatOnlines_],
  [0x47A971E0, StatsURL_],
  [0x5FB224D5, ChatAdminRights_],
  [0x9F120418, ChatBannedRights_],
  [0xE630B979, InputWallPaper_],
  [0x72091C80, InputWallPaperSlug_],
  [0x967A462E, InputWallPaperNoFile_],
  [0x1C199183, account_WallPapersNotModified_],
  [0xCDC3858C, account_WallPapers_],
  [0xAD253D78, CodeSettings_],
  [0x372EFCD0, WallPaperSettings_],
  [0xBAA57628, AutoDownloadSettings_],
  [0x63CACF26, account_AutoDownloadSettings_],
  [0xD5B3B9F9, EmojiKeyword_],
  [0x236DF622, EmojiKeywordDeleted_],
  [0x5CC761BD, EmojiKeywordsDifference_],
  [0xA575739D, EmojiURL_],
  [0xB3FB5361, EmojiLanguage_],
  [0xFF544E65, Folder_],
  [0xFBD2C296, InputFolderPeer_],
  [0xE9BAA668, FolderPeer_],
  [0xE844EBFF, messages_SearchCounter_],
  [0x92D33A0E, UrlAuthResultRequest_],
  [0x8F8C0E4E, UrlAuthResultAccepted_],
  [0xA9D6DB1F, UrlAuthResultDefault_],
  [0xBFB5AD8B, ChannelLocationEmpty_],
  [0x209B82DB, ChannelLocation_],
  [0xCA461B5D, PeerLocated_],
  [0xF8EC284B, PeerSelfLocated_],
  [0xD072ACB4, RestrictionReason_],
  [0x3C5693E9, InputTheme_],
  [0xF5890DF1, InputThemeSlug_],
  [0xA00E67D6, Theme_],
  [0xF41EB622, account_ThemesNotModified_],
  [0x9A3D8C6D, account_Themes_],
  [0x629F1980, auth_LoginToken_],
  [0x068E9916, auth_LoginTokenMigrateTo_],
  [0x390D5C5E, auth_LoginTokenSuccess_],
  [0x57E28221, account_ContentSettings_],
  [0xA927FEC5, messages_InactiveChats_],
  [0xC3A12462, BaseThemeClassic_],
  [0xFBD81688, BaseThemeDay_],
  [0xB7B31EA8, BaseThemeNight_],
  [0x6D5F77EE, BaseThemeTinted_],
  [0x5B11125A, BaseThemeArctic_],
  [0x8FDE504F, InputThemeSettings_],
  [0xFA58B6D4, ThemeSettings_],
  [0x54B56617, WebPageAttributeTheme_],
  [0x2E94C3E7, WebPageAttributeStory_],
  [0x4899484E, messages_VotesList_],
  [0xF568028A, BankCardOpenUrl_],
  [0x3E24E573, payments_BankCardData_],
  [0x7438F7E8, DialogFilter_],
  [0x363293AE, DialogFilterDefault_],
  [0xD64A04A8, DialogFilterChatlist_],
  [0x77744D4A, DialogFilterSuggested_],
  [0xB637EDAF, StatsDateRangeDays_],
  [0xCB43ACDE, StatsAbsValueAndPrev_],
  [0xCBCE2FE0, StatsPercentValue_],
  [0x4A27EB2D, StatsGraphAsync_],
  [0xBEDC9822, StatsGraphError_],
  [0x8EA464B6, StatsGraph_],
  [0x396CA5FC, stats_BroadcastStats_],
  [0x98F6AC75, help_PromoDataEmpty_],
  [0x8C39793F, help_PromoData_],
  [0xDE33B094, VideoSize_],
  [0xF85C413C, VideoSizeEmojiMarkup_],
  [0x0DA082FE, VideoSizeStickerMarkup_],
  [0x9D04AF9B, StatsGroupTopPoster_],
  [0xD7584C87, StatsGroupTopAdmin_],
  [0x535F779D, StatsGroupTopInviter_],
  [0xEF7FF916, stats_MegagroupStats_],
  [0x734C4CCB, GlobalPrivacySettings_],
  [0x4203C5EF, help_CountryCode_],
  [0xC3878E23, help_Country_],
  [0x93CC1F32, help_CountriesListNotModified_],
  [0x87D0759E, help_CountriesList_],
  [0x455B853D, MessageViews_],
  [0xB6C4F543, messages_MessageViews_],
  [0xA6341782, messages_DiscussionMessage_],
  [0xAFBC09DB, MessageReplyHeader_],
  [0x0E5AF939, MessageReplyStoryHeader_],
  [0x83D60FC2, MessageReplies_],
  [0xE8FD8014, PeerBlocked_],
  [0x7FE91C14, stats_MessageStats_],
  [0x7780BCB4, GroupCallDiscarded_],
  [0xD597650C, GroupCall_],
  [0xD8AA840F, InputGroupCall_],
  [0xEBA636FE, GroupCallParticipant_],
  [0x9E727AAD, phone_GroupCall_],
  [0xF47751B6, phone_GroupParticipants_],
  [0x3081ED9D, InlineQueryPeerTypeSameBotPM_],
  [0x833C0FAC, InlineQueryPeerTypePM_],
  [0xD766C50A, InlineQueryPeerTypeChat_],
  [0x5EC4BE43, InlineQueryPeerTypeMegagroup_],
  [0x6334EE9A, InlineQueryPeerTypeBroadcast_],
  [0x0E3B2D0C, InlineQueryPeerTypeBotPM_],
  [0x1662AF0B, messages_HistoryImport_],
  [0x5E0FB7B9, messages_HistoryImportParsed_],
  [0xEF8D3E6C, messages_AffectedFoundMessages_],
  [0x8C5ADFD9, ChatInviteImporter_],
  [0xBDC62DCC, messages_ExportedChatInvites_],
  [0x1871BE50, messages_ExportedChatInvite_],
  [0x222600EF, messages_ExportedChatInviteReplaced_],
  [0x81B6B00A, messages_ChatInviteImporters_],
  [0xF2ECEF23, ChatAdminWithInvites_],
  [0xB69B72D7, messages_ChatAdminsWithInvites_],
  [0xA24DE717, messages_CheckedHistoryImportPeer_],
  [0xAFE5623F, phone_JoinAsPeers_],
  [0x204BD158, phone_ExportedGroupCallInvite_],
  [0xDCB118B7, GroupCallParticipantVideoSourceGroup_],
  [0x67753AC8, GroupCallParticipantVideo_],
  [0x85FEA03F, stickers_SuggestedShortName_],
  [0x2F6CB2AB, BotCommandScopeDefault_],
  [0x3C4F04D8, BotCommandScopeUsers_],
  [0x6FE1A881, BotCommandScopeChats_],
  [0xB9AA606A, BotCommandScopeChatAdmins_],
  [0xDB9D897D, BotCommandScopePeer_],
  [0x3FD863D1, BotCommandScopePeerAdmins_],
  [0x0A1321F3, BotCommandScopePeerUser_],
  [0xE3779861, account_ResetPasswordFailedWait_],
  [0xE9EFFC7D, account_ResetPasswordRequestedWait_],
  [0xE926D63E, account_ResetPasswordOk_],
  [0xED5383F7, SponsoredMessage_],
  [0xC9EE1D87, messages_SponsoredMessages_],
  [0x1839490F, messages_SponsoredMessagesEmpty_],
  [0xC9B0539F, SearchResultsCalendarPeriod_],
  [0x147EE23C, messages_SearchResultsCalendar_],
  [0x7F648B67, SearchResultPosition_],
  [0x53B22BAF, messages_SearchResultsPositions_],
  [0xF496B0C6, channels_SendAsPeers_],
  [0x3B6D152E, users_UserFull_],
  [0x6880B94D, messages_PeerSettings_],
  [0xC3A2835F, auth_LoggedOut_],
  [0xA3D1CB80, ReactionCount_],
  [0x4F2B9479, MessageReactions_],
  [0x31BD492D, messages_MessageReactionsList_],
  [0xC077EC01, AvailableReaction_],
  [0x9F071957, messages_AvailableReactionsNotModified_],
  [0x768E3AAD, messages_AvailableReactions_],
  [0x8C79B63C, MessagePeerReaction_],
  [0x80EB48AF, GroupCallStreamChannel_],
  [0xD0E482B2, phone_GroupCallStreamChannels_],
  [0x2DBF3432, phone_GroupCallStreamRtmpUrl_],
  [0x4576F3F0, AttachMenuBotIconColor_],
  [0xB2A7386B, AttachMenuBotIcon_],
  [0xD90D8DFE, AttachMenuBot_],
  [0xF1D88A5C, AttachMenuBotsNotModified_],
  [0x3C4301C0, AttachMenuBots_],
  [0x93BF667F, AttachMenuBotsBot_],
  [0x0C14557C, WebViewResultUrl_],
  [0x882F76BB, SimpleWebViewResultUrl_],
  [0x0C94511C, WebViewMessageSent_],
  [0x7533A588, BotMenuButtonDefault_],
  [0x4258C205, BotMenuButtonCommands_],
  [0xC7B57CE6, BotMenuButton_],
  [0xFBF6E8B1, account_SavedRingtonesNotModified_],
  [0xC1E92CC5, account_SavedRingtones_],
  [0x97E8BEBE, NotificationSoundDefault_],
  [0x6F0C34DF, NotificationSoundNone_],
  [0x830B9AE4, NotificationSoundLocal_],
  [0xFF6C8049, NotificationSoundRingtone_],
  [0xB7263F6D, account_SavedRingtone_],
  [0x1F307EB7, account_SavedRingtoneConverted_],
  [0x7D6BE90E, AttachMenuPeerTypeSameBotPM_],
  [0xC32BFA1A, AttachMenuPeerTypeBotPM_],
  [0xF146D31F, AttachMenuPeerTypePM_],
  [0x0509113F, AttachMenuPeerTypeChat_],
  [0x7BFBDEFC, AttachMenuPeerTypeBroadcast_],
  [0xC5B56859, InputInvoiceMessage_],
  [0xC326CAEF, InputInvoiceSlug_],
  [0x98986C0D, InputInvoicePremiumGiftCode_],
  [0xAED0CBD9, payments_ExportedInvoice_],
  [0xCFB9D957, messages_TranscribedAudio_],
  [0x5334759C, help_PremiumPromo_],
  [0xA6751E66, InputStorePaymentPremiumSubscription_],
  [0x616F7FE8, InputStorePaymentGiftPremium_],
  [0xA3805F3F, InputStorePaymentPremiumGiftCode_],
  [0x160544CA, InputStorePaymentPremiumGiveaway_],
  [0x74C34319, PremiumGiftOption_],
  [0x88F8F21B, PaymentFormMethod_],
  [0x2DE11AAE, EmojiStatusEmpty_],
  [0x929B619D, EmojiStatus_],
  [0xFA30A8C7, EmojiStatusUntil_],
  [0xD08CE645, account_EmojiStatusesNotModified_],
  [0x90C467D1, account_EmojiStatuses_],
  [0x79F5D419, ReactionEmpty_],
  [0x1B2286B8, ReactionEmoji_],
  [0x8935FC73, ReactionCustomEmoji_],
  [0xEAFC32BC, ChatReactionsNone_],
  [0x52928BCA, ChatReactionsAll_],
  [0x661D4037, ChatReactionsSome_],
  [0xB06FDBDF, messages_ReactionsNotModified_],
  [0xEAFDF716, messages_Reactions_],
  [0x4345BE73, EmailVerifyPurposeLoginSetup_],
  [0x527D22EB, EmailVerifyPurposeLoginChange_],
  [0xBBF51685, EmailVerifyPurposePassport_],
  [0x922E55A9, EmailVerificationCode_],
  [0xDB909EC2, EmailVerificationGoogle_],
  [0x96D074FD, EmailVerificationApple_],
  [0x2B96CD1B, account_EmailVerified_],
  [0xE1BB0D61, account_EmailVerifiedLogin_],
  [0x5F2D1DF2, PremiumSubscriptionOption_],
  [0xB81C7034, SendAsPeer_],
  [0xAD628CC8, MessageExtendedMediaPreview_],
  [0xEE479C64, MessageExtendedMedia_],
  [0xFCFEB29C, StickerKeyword_],
  [0xB4073647, Username_],
  [0x023F109B, ForumTopicDeleted_],
  [0x71701DA9, ForumTopic_],
  [0x367617D3, messages_ForumTopics_],
  [0x43B46B20, DefaultHistoryTTL_],
  [0x41BF109B, ExportedContactToken_],
  [0x5F3B8A00, RequestPeerTypeUser_],
  [0xC9F06E1B, RequestPeerTypeChat_],
  [0x339BEF6C, RequestPeerTypeBroadcast_],
  [0x481EADFA, EmojiListNotModified_],
  [0x7A1E11D1, EmojiList_],
  [0x7A9ABDA9, EmojiGroup_],
  [0x6FB4AD87, messages_EmojiGroupsNotModified_],
  [0x881FB94B, messages_EmojiGroups_],
  [0x751F3146, TextWithEntities_],
  [0x33DB32F8, messages_TranslateResult_],
  [0xC84834CE, AutoSaveSettings_],
  [0x81602D47, AutoSaveException_],
  [0x4C3E069D, account_AutoSaveSettings_],
  [0x7CDE641D, help_AppConfigNotModified_],
  [0xDD18782E, help_AppConfig_],
  [0xA920BD7A, InputBotAppID_],
  [0x908C0407, InputBotAppShortName_],
  [0x5DA674B7, BotAppNotModified_],
  [0x95FCD1D6, BotApp_],
  [0xEB50ADF5, messages_BotApp_],
  [0x3C1B4F0D, AppWebViewResultUrl_],
  [0xB57295D5, InlineBotWebView_],
  [0x4A4FF172, ReadParticipantDate_],
  [0xF3E0DA33, InputChatlistDialogFilter_],
  [0x0C5181AC, ExportedChatlistInvite_],
  [0x10E6E3A6, chatlists_ExportedChatlistInvite_],
  [0x10AB6DC7, chatlists_ExportedInvites_],
  [0xFA87F659, chatlists_ChatlistInviteAlready_],
  [0x1DCD839D, chatlists_ChatlistInvite_],
  [0x93BD878D, chatlists_ChatlistUpdates_],
  [0xE8A775B0, bots_BotInfo_],
  [0xB6CC2D5C, MessagePeerVote_],
  [0x74CDA504, MessagePeerVoteInputOption_],
  [0x4628F6E6, MessagePeerVoteMultiple_],
  [0x3DB8EC63, SponsoredWebPage_],
  [0x8D595CD6, StoryViews_],
  [0x51E6EE4F, StoryItemDeleted_],
  [0xFFADC913, StoryItemSkipped_],
  [0x79B26A24, StoryItem_],
  [0x1158FE3E, stories_AllStoriesNotModified_],
  [0x6EFC5E81, stories_AllStories_],
  [0x5DD8C3C8, stories_Stories_],
  [0xB0BDEAC5, StoryView_],
  [0x9083670B, StoryViewPublicForward_],
  [0xBD74CF49, StoryViewPublicRepost_],
  [0x59D78FC5, stories_StoryViewsList_],
  [0xDE9EED1D, stories_StoryViews_],
  [0x22C0F6D5, InputReplyToMessage_],
  [0x5881323A, InputReplyToStory_],
  [0x3FC9053B, ExportedStoryLink_],
  [0x712E27FD, StoriesStealthMode_],
  [0x03D1EA4E, MediaAreaCoordinates_],
  [0xBE82DB9C, MediaAreaVenue_],
  [0xB282217F, InputMediaAreaVenue_],
  [0xDF8B3B22, MediaAreaGeoPoint_],
  [0x14455871, MediaAreaSuggestedReaction_],
  [0x770416AF, MediaAreaChannelPost_],
  [0x2271F2BF, InputMediaAreaChannelPost_],
  [0x9A35E999, PeerStories_],
  [0xCAE68768, stories_PeerStories_],
  [0xFD5E12BD, messages_WebPage_],
  [0x257E962B, PremiumGiftCodeOption_],
  [0x284A1096, payments_CheckedGiftCode_],
  [0x4367DAA0, payments_GiveawayInfo_],
  [0x00CD5570, payments_GiveawayInfoResults_],
  [0xB2539D54, PrepaidGiveaway_],
  [0x2A1C8C71, Boost_],
  [0x86F8613C, premium_BoostsList_],
  [0xC448415C, MyBoost_],
  [0x9AE228E2, premium_MyBoosts_],
  [0x4959427A, premium_BoostsStatus_],
  [0xB826E150, StoryFwdHeader_],
  [0xE7058E7F, PostInteractionCountersMessage_],
  [0x8A480E27, PostInteractionCountersStory_],
  [0x50CD067C, stats_StoryStats_],
  [0x01F2BF4A, PublicForwardMessage_],
  [0xEDF3ADD0, PublicForwardStory_],
  [0x93037E20, stats_PublicForwards_],
  [0xB54B5ACF, PeerColor_],
  [0x26219A58, help_PeerColorSet_],
  [0x767D61EB, help_PeerColorProfileSet_],
  [0xADEC6EBE, help_PeerColorOption_],
  [0x2BA1F5CE, help_PeerColorsNotModified_],
  [0x00F8ED08, help_PeerColors_],
  [0x6090D6D5, StoryReaction_],
  [0xBBAB2643, StoryReactionPublicForward_],
  [0xCFCD0F13, StoryReactionPublicRepost_],
  [0xAA5F789C, stories_StoryReactionsList_],
  [0xBD87CB6C, SavedDialog_],
  [0xF83AE221, messages_SavedDialogs_],
  [0x44BA9DD9, messages_SavedDialogsSlice_],
  [0xC01F6FE8, messages_SavedDialogsNotModified_],
  [0xCB6FF828, SavedReactionTag_],
  [0x889B59EF, messages_SavedReactionTagsNotModified_],
  [0x3259950A, messages_SavedReactionTags_],
  [0x3BB842AC, OutboxReadDate_],
// deno-lint-ignore no-explicit-any
] as const as any);
export declare namespace enums {
  type ResPQ = types.ResPQ;
  type P_Q_inner_data = types.P_q_inner_data_dc | types.P_q_inner_data_temp_dc;
  type Server_DH_Params = types.Server_DH_params_ok;
  type Server_DH_inner_data = types.Server_DH_inner_data;
  type Client_DH_Inner_Data = types.Client_DH_inner_data;
  type Set_client_DH_params_answer = types.Dh_gen_ok | types.Dh_gen_retry | types.Dh_gen_fail;
  type BindAuthKeyInner = types.Bind_auth_key_inner;
  type RpcError = types.Rpc_error;
  type RpcDropAnswer = types.Rpc_answer_unknown | types.Rpc_answer_dropped_running | types.Rpc_answer_dropped;
  type FutureSalt = types.Future_salt;
  type FutureSalts = types.Future_salts;
  type Pong = types.Pong;
  type DestroySessionRes = types.Destroy_session_ok | types.Destroy_session_none;
  type NewSession = types.New_session_created;
  type Object = types.Gzip_packed;
  type MsgsAck = types.Msgs_ack;
  type BadMsgNotification = types.Bad_msg_notification | types.Bad_server_salt;
  type MsgResendReq = types.Msg_resend_req;
  type MsgsStateReq = types.Msgs_state_req;
  type MsgsStateInfo = types.Msgs_state_info;
  type MsgsAllInfo = types.Msgs_all_info;
  type MsgDetailedInfo = types.Msg_detailed_info | types.Msg_new_detailed_info;
  type DestroyAuthKeyRes = types.Destroy_auth_key_ok | types.Destroy_auth_key_none | types.Destroy_auth_key_fail;
  type HttpWait = types.Http_wait;
  type True = types.True;
  type Error = types.Error;
  type Null = types.Null;
  type InputPeer = types.InputPeerEmpty | types.InputPeerSelf | types.InputPeerChat | types.InputPeerUser | types.InputPeerChannel | types.InputPeerUserFromMessage | types.InputPeerChannelFromMessage;
  type InputUser = types.InputUserEmpty | types.InputUserSelf | types.InputUser | types.InputUserFromMessage;
  type InputContact = types.InputPhoneContact;
  type InputFile = types.InputFile | types.InputFileBig;
  type InputMedia = types.InputMediaEmpty | types.InputMediaUploadedPhoto | types.InputMediaPhoto | types.InputMediaGeoPoint | types.InputMediaContact | types.InputMediaUploadedDocument | types.InputMediaDocument | types.InputMediaVenue | types.InputMediaPhotoExternal | types.InputMediaDocumentExternal | types.InputMediaGame | types.InputMediaInvoice | types.InputMediaGeoLive | types.InputMediaPoll | types.InputMediaDice | types.InputMediaStory | types.InputMediaWebPage;
  type InputChatPhoto = types.InputChatPhotoEmpty | types.InputChatUploadedPhoto | types.InputChatPhoto;
  type InputGeoPoint = types.InputGeoPointEmpty | types.InputGeoPoint;
  type InputPhoto = types.InputPhotoEmpty | types.InputPhoto;
  type InputFileLocation = types.InputFileLocation | types.InputEncryptedFileLocation | types.InputDocumentFileLocation | types.InputSecureFileLocation | types.InputTakeoutFileLocation | types.InputPhotoFileLocation | types.InputPhotoLegacyFileLocation | types.InputPeerPhotoFileLocation | types.InputStickerSetThumb | types.InputGroupCallStream;
  type Peer = types.PeerUser | types.PeerChat | types.PeerChannel;
  type User = types.UserEmpty | types.User;
  type UserProfilePhoto = types.UserProfilePhotoEmpty | types.UserProfilePhoto;
  type UserStatus = types.UserStatusEmpty | types.UserStatusOnline | types.UserStatusOffline | types.UserStatusRecently | types.UserStatusLastWeek | types.UserStatusLastMonth;
  type Chat = types.ChatEmpty | types.Chat | types.ChatForbidden | types.Channel | types.ChannelForbidden;
  type ChatFull = types.ChatFull | types.ChannelFull;
  type ChatParticipant = types.ChatParticipant | types.ChatParticipantCreator | types.ChatParticipantAdmin;
  type ChatParticipants = types.ChatParticipantsForbidden | types.ChatParticipants;
  type ChatPhoto = types.ChatPhotoEmpty | types.ChatPhoto;
  type Message = types.MessageEmpty | types.Message | types.MessageService;
  type MessageMedia = types.MessageMediaEmpty | types.MessageMediaPhoto | types.MessageMediaGeo | types.MessageMediaContact | types.MessageMediaUnsupported | types.MessageMediaDocument | types.MessageMediaWebPage | types.MessageMediaVenue | types.MessageMediaGame | types.MessageMediaInvoice | types.MessageMediaGeoLive | types.MessageMediaPoll | types.MessageMediaDice | types.MessageMediaStory | types.MessageMediaGiveaway | types.MessageMediaGiveawayResults;
  type MessageAction = types.MessageActionEmpty | types.MessageActionChatCreate | types.MessageActionChatEditTitle | types.MessageActionChatEditPhoto | types.MessageActionChatDeletePhoto | types.MessageActionChatAddUser | types.MessageActionChatDeleteUser | types.MessageActionChatJoinedByLink | types.MessageActionChannelCreate | types.MessageActionChatMigrateTo | types.MessageActionChannelMigrateFrom | types.MessageActionPinMessage | types.MessageActionHistoryClear | types.MessageActionGameScore | types.MessageActionPaymentSentMe | types.MessageActionPaymentSent | types.MessageActionPhoneCall | types.MessageActionScreenshotTaken | types.MessageActionCustomAction | types.MessageActionBotAllowed | types.MessageActionSecureValuesSentMe | types.MessageActionSecureValuesSent | types.MessageActionContactSignUp | types.MessageActionGeoProximityReached | types.MessageActionGroupCall | types.MessageActionInviteToGroupCall | types.MessageActionSetMessagesTTL | types.MessageActionGroupCallScheduled | types.MessageActionSetChatTheme | types.MessageActionChatJoinedByRequest | types.MessageActionWebViewDataSentMe | types.MessageActionWebViewDataSent | types.MessageActionGiftPremium | types.MessageActionTopicCreate | types.MessageActionTopicEdit | types.MessageActionSuggestProfilePhoto | types.MessageActionRequestedPeer | types.MessageActionSetChatWallPaper | types.MessageActionGiftCode | types.MessageActionGiveawayLaunch | types.MessageActionGiveawayResults | types.MessageActionBoostApply;
  type Dialog = types.Dialog | types.DialogFolder;
  type Photo = types.PhotoEmpty | types.Photo;
  type PhotoSize = types.PhotoSizeEmpty | types.PhotoSize | types.PhotoCachedSize | types.PhotoStrippedSize | types.PhotoSizeProgressive | types.PhotoPathSize;
  type GeoPoint = types.GeoPointEmpty | types.GeoPoint;
  type InputNotifyPeer = types.InputNotifyPeer | types.InputNotifyUsers | types.InputNotifyChats | types.InputNotifyBroadcasts | types.InputNotifyForumTopic;
  type InputPeerNotifySettings = types.InputPeerNotifySettings;
  type PeerNotifySettings = types.PeerNotifySettings;
  type PeerSettings = types.PeerSettings;
  type WallPaper = types.WallPaper | types.WallPaperNoFile;
  type ReportReason = types.InputReportReasonSpam | types.InputReportReasonViolence | types.InputReportReasonPornography | types.InputReportReasonChildAbuse | types.InputReportReasonOther | types.InputReportReasonCopyright | types.InputReportReasonGeoIrrelevant | types.InputReportReasonFake | types.InputReportReasonIllegalDrugs | types.InputReportReasonPersonalDetails;
  type UserFull = types.UserFull;
  type Contact = types.Contact;
  type ImportedContact = types.ImportedContact;
  type ContactStatus = types.ContactStatus;
  type MessagesFilter = types.InputMessagesFilterEmpty | types.InputMessagesFilterPhotos | types.InputMessagesFilterVideo | types.InputMessagesFilterPhotoVideo | types.InputMessagesFilterDocument | types.InputMessagesFilterUrl | types.InputMessagesFilterGif | types.InputMessagesFilterVoice | types.InputMessagesFilterMusic | types.InputMessagesFilterChatPhotos | types.InputMessagesFilterPhoneCalls | types.InputMessagesFilterRoundVoice | types.InputMessagesFilterRoundVideo | types.InputMessagesFilterMyMentions | types.InputMessagesFilterGeo | types.InputMessagesFilterContacts | types.InputMessagesFilterPinned;
  type Update = types.UpdateNewMessage | types.UpdateMessageID | types.UpdateDeleteMessages | types.UpdateUserTyping | types.UpdateChatUserTyping | types.UpdateChatParticipants | types.UpdateUserStatus | types.UpdateUserName | types.UpdateNewAuthorization | types.UpdateNewEncryptedMessage | types.UpdateEncryptedChatTyping | types.UpdateEncryption | types.UpdateEncryptedMessagesRead | types.UpdateChatParticipantAdd | types.UpdateChatParticipantDelete | types.UpdateDcOptions | types.UpdateNotifySettings | types.UpdateServiceNotification | types.UpdatePrivacy | types.UpdateUserPhone | types.UpdateReadHistoryInbox | types.UpdateReadHistoryOutbox | types.UpdateWebPage | types.UpdateReadMessagesContents | types.UpdateChannelTooLong | types.UpdateChannel | types.UpdateNewChannelMessage | types.UpdateReadChannelInbox | types.UpdateDeleteChannelMessages | types.UpdateChannelMessageViews | types.UpdateChatParticipantAdmin | types.UpdateNewStickerSet | types.UpdateStickerSetsOrder | types.UpdateStickerSets | types.UpdateSavedGifs | types.UpdateBotInlineQuery | types.UpdateBotInlineSend | types.UpdateEditChannelMessage | types.UpdateBotCallbackQuery | types.UpdateEditMessage | types.UpdateInlineBotCallbackQuery | types.UpdateReadChannelOutbox | types.UpdateDraftMessage | types.UpdateReadFeaturedStickers | types.UpdateRecentStickers | types.UpdateConfig | types.UpdatePtsChanged | types.UpdateChannelWebPage | types.UpdateDialogPinned | types.UpdatePinnedDialogs | types.UpdateBotWebhookJSON | types.UpdateBotWebhookJSONQuery | types.UpdateBotShippingQuery | types.UpdateBotPrecheckoutQuery | types.UpdatePhoneCall | types.UpdateLangPackTooLong | types.UpdateLangPack | types.UpdateFavedStickers | types.UpdateChannelReadMessagesContents | types.UpdateContactsReset | types.UpdateChannelAvailableMessages | types.UpdateDialogUnreadMark | types.UpdateMessagePoll | types.UpdateChatDefaultBannedRights | types.UpdateFolderPeers | types.UpdatePeerSettings | types.UpdatePeerLocated | types.UpdateNewScheduledMessage | types.UpdateDeleteScheduledMessages | types.UpdateTheme | types.UpdateGeoLiveViewed | types.UpdateLoginToken | types.UpdateMessagePollVote | types.UpdateDialogFilter | types.UpdateDialogFilterOrder | types.UpdateDialogFilters | types.UpdatePhoneCallSignalingData | types.UpdateChannelMessageForwards | types.UpdateReadChannelDiscussionInbox | types.UpdateReadChannelDiscussionOutbox | types.UpdatePeerBlocked | types.UpdateChannelUserTyping | types.UpdatePinnedMessages | types.UpdatePinnedChannelMessages | types.UpdateChat | types.UpdateGroupCallParticipants | types.UpdateGroupCall | types.UpdatePeerHistoryTTL | types.UpdateChatParticipant | types.UpdateChannelParticipant | types.UpdateBotStopped | types.UpdateGroupCallConnection | types.UpdateBotCommands | types.UpdatePendingJoinRequests | types.UpdateBotChatInviteRequester | types.UpdateMessageReactions | types.UpdateAttachMenuBots | types.UpdateWebViewResultSent | types.UpdateBotMenuButton | types.UpdateSavedRingtones | types.UpdateTranscribedAudio | types.UpdateReadFeaturedEmojiStickers | types.UpdateUserEmojiStatus | types.UpdateRecentEmojiStatuses | types.UpdateRecentReactions | types.UpdateMoveStickerSetToTop | types.UpdateMessageExtendedMedia | types.UpdateChannelPinnedTopic | types.UpdateChannelPinnedTopics | types.UpdateUser | types.UpdateAutoSaveSettings | types.UpdateGroupInvitePrivacyForbidden | types.UpdateStory | types.UpdateReadStories | types.UpdateStoryID | types.UpdateStoriesStealthMode | types.UpdateSentStoryReaction | types.UpdateBotChatBoost | types.UpdateChannelViewForumAsMessages | types.UpdatePeerWallpaper | types.UpdateBotMessageReaction | types.UpdateBotMessageReactions | types.UpdateSavedDialogPinned | types.UpdatePinnedSavedDialogs | types.UpdateSavedReactionTags;
  type Updates = types.UpdatesTooLong | types.UpdateShortMessage | types.UpdateShortChatMessage | types.UpdateShort | types.UpdatesCombined | types.Updates | types.UpdateShortSentMessage;
  type DcOption = types.DcOption;
  type Config = types.Config;
  type NearestDc = types.NearestDc;
  type EncryptedChat = types.EncryptedChatEmpty | types.EncryptedChatWaiting | types.EncryptedChatRequested | types.EncryptedChat | types.EncryptedChatDiscarded;
  type InputEncryptedChat = types.InputEncryptedChat;
  type EncryptedFile = types.EncryptedFileEmpty | types.EncryptedFile;
  type InputEncryptedFile = types.InputEncryptedFileEmpty | types.InputEncryptedFileUploaded | types.InputEncryptedFile | types.InputEncryptedFileBigUploaded;
  type EncryptedMessage = types.EncryptedMessage | types.EncryptedMessageService;
  type InputDocument = types.InputDocumentEmpty | types.InputDocument;
  type Document = types.DocumentEmpty | types.Document;
  type NotifyPeer = types.NotifyPeer | types.NotifyUsers | types.NotifyChats | types.NotifyBroadcasts | types.NotifyForumTopic;
  type SendMessageAction = types.SendMessageTypingAction | types.SendMessageCancelAction | types.SendMessageRecordVideoAction | types.SendMessageUploadVideoAction | types.SendMessageRecordAudioAction | types.SendMessageUploadAudioAction | types.SendMessageUploadPhotoAction | types.SendMessageUploadDocumentAction | types.SendMessageGeoLocationAction | types.SendMessageChooseContactAction | types.SendMessageGamePlayAction | types.SendMessageRecordRoundAction | types.SendMessageUploadRoundAction | types.SpeakingInGroupCallAction | types.SendMessageHistoryImportAction | types.SendMessageChooseStickerAction | types.SendMessageEmojiInteraction | types.SendMessageEmojiInteractionSeen;
  type InputPrivacyKey = types.InputPrivacyKeyStatusTimestamp | types.InputPrivacyKeyChatInvite | types.InputPrivacyKeyPhoneCall | types.InputPrivacyKeyPhoneP2P | types.InputPrivacyKeyForwards | types.InputPrivacyKeyProfilePhoto | types.InputPrivacyKeyPhoneNumber | types.InputPrivacyKeyAddedByPhone | types.InputPrivacyKeyVoiceMessages | types.InputPrivacyKeyAbout;
  type PrivacyKey = types.PrivacyKeyStatusTimestamp | types.PrivacyKeyChatInvite | types.PrivacyKeyPhoneCall | types.PrivacyKeyPhoneP2P | types.PrivacyKeyForwards | types.PrivacyKeyProfilePhoto | types.PrivacyKeyPhoneNumber | types.PrivacyKeyAddedByPhone | types.PrivacyKeyVoiceMessages | types.PrivacyKeyAbout;
  type InputPrivacyRule = types.InputPrivacyValueAllowContacts | types.InputPrivacyValueAllowAll | types.InputPrivacyValueAllowUsers | types.InputPrivacyValueDisallowContacts | types.InputPrivacyValueDisallowAll | types.InputPrivacyValueDisallowUsers | types.InputPrivacyValueAllowChatParticipants | types.InputPrivacyValueDisallowChatParticipants | types.InputPrivacyValueAllowCloseFriends;
  type PrivacyRule = types.PrivacyValueAllowContacts | types.PrivacyValueAllowAll | types.PrivacyValueAllowUsers | types.PrivacyValueDisallowContacts | types.PrivacyValueDisallowAll | types.PrivacyValueDisallowUsers | types.PrivacyValueAllowChatParticipants | types.PrivacyValueDisallowChatParticipants | types.PrivacyValueAllowCloseFriends;
  type AccountDaysTTL = types.AccountDaysTTL;
  type DocumentAttribute = types.DocumentAttributeImageSize | types.DocumentAttributeAnimated | types.DocumentAttributeSticker | types.DocumentAttributeVideo | types.DocumentAttributeAudio | types.DocumentAttributeFilename | types.DocumentAttributeHasStickers | types.DocumentAttributeCustomEmoji;
  type StickerPack = types.StickerPack;
  type WebPage = types.WebPageEmpty | types.WebPagePending | types.WebPage | types.WebPageNotModified;
  type Authorization = types.Authorization;
  type ReceivedNotifyMessage = types.ReceivedNotifyMessage;
  type ExportedChatInvite = types.ChatInviteExported | types.ChatInvitePublicJoinRequests;
  type ChatInvite = types.ChatInviteAlready | types.ChatInvite | types.ChatInvitePeek;
  type InputStickerSet = types.InputStickerSetEmpty | types.InputStickerSetID | types.InputStickerSetShortName | types.InputStickerSetAnimatedEmoji | types.InputStickerSetDice | types.InputStickerSetAnimatedEmojiAnimations | types.InputStickerSetPremiumGifts | types.InputStickerSetEmojiGenericAnimations | types.InputStickerSetEmojiDefaultStatuses | types.InputStickerSetEmojiDefaultTopicIcons | types.InputStickerSetEmojiChannelDefaultStatuses;
  type StickerSet = types.StickerSet;
  type BotCommand = types.BotCommand;
  type BotInfo = types.BotInfo;
  type KeyboardButton = types.KeyboardButton | types.KeyboardButtonUrl | types.KeyboardButtonCallback | types.KeyboardButtonRequestPhone | types.KeyboardButtonRequestGeoLocation | types.KeyboardButtonSwitchInline | types.KeyboardButtonGame | types.KeyboardButtonBuy | types.KeyboardButtonUrlAuth | types.InputKeyboardButtonUrlAuth | types.KeyboardButtonRequestPoll | types.InputKeyboardButtonUserProfile | types.KeyboardButtonUserProfile | types.KeyboardButtonWebView | types.KeyboardButtonSimpleWebView | types.KeyboardButtonRequestPeer;
  type KeyboardButtonRow = types.KeyboardButtonRow;
  type ReplyMarkup = types.ReplyKeyboardHide | types.ReplyKeyboardForceReply | types.ReplyKeyboardMarkup | types.ReplyInlineMarkup;
  type MessageEntity = types.MessageEntityUnknown | types.MessageEntityMention | types.MessageEntityHashtag | types.MessageEntityBotCommand | types.MessageEntityUrl | types.MessageEntityEmail | types.MessageEntityBold | types.MessageEntityItalic | types.MessageEntityCode | types.MessageEntityPre | types.MessageEntityTextUrl | types.MessageEntityMentionName | types.InputMessageEntityMentionName | types.MessageEntityPhone | types.MessageEntityCashtag | types.MessageEntityUnderline | types.MessageEntityStrike | types.MessageEntityBankCard | types.MessageEntitySpoiler | types.MessageEntityCustomEmoji | types.MessageEntityBlockquote;
  type InputChannel = types.InputChannelEmpty | types.InputChannel | types.InputChannelFromMessage;
  type MessageRange = types.MessageRange;
  type ChannelMessagesFilter = types.ChannelMessagesFilterEmpty | types.ChannelMessagesFilter;
  type ChannelParticipant = types.ChannelParticipant | types.ChannelParticipantSelf | types.ChannelParticipantCreator | types.ChannelParticipantAdmin | types.ChannelParticipantBanned | types.ChannelParticipantLeft;
  type ChannelParticipantsFilter = types.ChannelParticipantsRecent | types.ChannelParticipantsAdmins | types.ChannelParticipantsKicked | types.ChannelParticipantsBots | types.ChannelParticipantsBanned | types.ChannelParticipantsSearch | types.ChannelParticipantsContacts | types.ChannelParticipantsMentions;
  type InputBotInlineMessage = types.InputBotInlineMessageMediaAuto | types.InputBotInlineMessageText | types.InputBotInlineMessageMediaGeo | types.InputBotInlineMessageMediaVenue | types.InputBotInlineMessageMediaContact | types.InputBotInlineMessageGame | types.InputBotInlineMessageMediaInvoice | types.InputBotInlineMessageMediaWebPage;
  type InputBotInlineResult = types.InputBotInlineResult | types.InputBotInlineResultPhoto | types.InputBotInlineResultDocument | types.InputBotInlineResultGame;
  type BotInlineMessage = types.BotInlineMessageMediaAuto | types.BotInlineMessageText | types.BotInlineMessageMediaGeo | types.BotInlineMessageMediaVenue | types.BotInlineMessageMediaContact | types.BotInlineMessageMediaInvoice | types.BotInlineMessageMediaWebPage;
  type BotInlineResult = types.BotInlineResult | types.BotInlineMediaResult;
  type ExportedMessageLink = types.ExportedMessageLink;
  type MessageFwdHeader = types.MessageFwdHeader;
  type InputBotInlineMessageID = types.InputBotInlineMessageID | types.InputBotInlineMessageID64;
  type InlineBotSwitchPM = types.InlineBotSwitchPM;
  type TopPeer = types.TopPeer;
  type TopPeerCategory = types.TopPeerCategoryBotsPM | types.TopPeerCategoryBotsInline | types.TopPeerCategoryCorrespondents | types.TopPeerCategoryGroups | types.TopPeerCategoryChannels | types.TopPeerCategoryPhoneCalls | types.TopPeerCategoryForwardUsers | types.TopPeerCategoryForwardChats;
  type TopPeerCategoryPeers = types.TopPeerCategoryPeers;
  type DraftMessage = types.DraftMessageEmpty | types.DraftMessage;
  type StickerSetCovered = types.StickerSetCovered | types.StickerSetMultiCovered | types.StickerSetFullCovered | types.StickerSetNoCovered;
  type MaskCoords = types.MaskCoords;
  type InputStickeredMedia = types.InputStickeredMediaPhoto | types.InputStickeredMediaDocument;
  type Game = types.Game;
  type InputGame = types.InputGameID | types.InputGameShortName;
  type HighScore = types.HighScore;
  type RichText = types.TextEmpty | types.TextPlain | types.TextBold | types.TextItalic | types.TextUnderline | types.TextStrike | types.TextFixed | types.TextUrl | types.TextEmail | types.TextConcat | types.TextSubscript | types.TextSuperscript | types.TextMarked | types.TextPhone | types.TextImage | types.TextAnchor;
  type PageBlock = types.PageBlockUnsupported | types.PageBlockTitle | types.PageBlockSubtitle | types.PageBlockAuthorDate | types.PageBlockHeader | types.PageBlockSubheader | types.PageBlockParagraph | types.PageBlockPreformatted | types.PageBlockFooter | types.PageBlockDivider | types.PageBlockAnchor | types.PageBlockList | types.PageBlockBlockquote | types.PageBlockPullquote | types.PageBlockPhoto | types.PageBlockVideo | types.PageBlockCover | types.PageBlockEmbed | types.PageBlockEmbedPost | types.PageBlockCollage | types.PageBlockSlideshow | types.PageBlockChannel | types.PageBlockAudio | types.PageBlockKicker | types.PageBlockTable | types.PageBlockOrderedList | types.PageBlockDetails | types.PageBlockRelatedArticles | types.PageBlockMap;
  type PhoneCallDiscardReason = types.PhoneCallDiscardReasonMissed | types.PhoneCallDiscardReasonDisconnect | types.PhoneCallDiscardReasonHangup | types.PhoneCallDiscardReasonBusy;
  type DataJSON = types.DataJSON;
  type LabeledPrice = types.LabeledPrice;
  type Invoice = types.Invoice;
  type PaymentCharge = types.PaymentCharge;
  type PostAddress = types.PostAddress;
  type PaymentRequestedInfo = types.PaymentRequestedInfo;
  type PaymentSavedCredentials = types.PaymentSavedCredentialsCard;
  type WebDocument = types.WebDocument | types.WebDocumentNoProxy;
  type InputWebDocument = types.InputWebDocument;
  type InputWebFileLocation = types.InputWebFileLocation | types.InputWebFileGeoPointLocation | types.InputWebFileAudioAlbumThumbLocation;
  type InputPaymentCredentials = types.InputPaymentCredentialsSaved | types.InputPaymentCredentials | types.InputPaymentCredentialsApplePay | types.InputPaymentCredentialsGooglePay;
  type ShippingOption = types.ShippingOption;
  type InputStickerSetItem = types.InputStickerSetItem;
  type InputPhoneCall = types.InputPhoneCall;
  type PhoneCall = types.PhoneCallEmpty | types.PhoneCallWaiting | types.PhoneCallRequested | types.PhoneCallAccepted | types.PhoneCall | types.PhoneCallDiscarded;
  type PhoneConnection = types.PhoneConnection | types.PhoneConnectionWebrtc;
  type PhoneCallProtocol = types.PhoneCallProtocol;
  type CdnPublicKey = types.CdnPublicKey;
  type CdnConfig = types.CdnConfig;
  type LangPackString = types.LangPackString | types.LangPackStringPluralized | types.LangPackStringDeleted;
  type LangPackDifference = types.LangPackDifference;
  type LangPackLanguage = types.LangPackLanguage;
  type ChannelAdminLogEventAction = types.ChannelAdminLogEventActionChangeTitle | types.ChannelAdminLogEventActionChangeAbout | types.ChannelAdminLogEventActionChangeUsername | types.ChannelAdminLogEventActionChangePhoto | types.ChannelAdminLogEventActionToggleInvites | types.ChannelAdminLogEventActionToggleSignatures | types.ChannelAdminLogEventActionUpdatePinned | types.ChannelAdminLogEventActionEditMessage | types.ChannelAdminLogEventActionDeleteMessage | types.ChannelAdminLogEventActionParticipantJoin | types.ChannelAdminLogEventActionParticipantLeave | types.ChannelAdminLogEventActionParticipantInvite | types.ChannelAdminLogEventActionParticipantToggleBan | types.ChannelAdminLogEventActionParticipantToggleAdmin | types.ChannelAdminLogEventActionChangeStickerSet | types.ChannelAdminLogEventActionTogglePreHistoryHidden | types.ChannelAdminLogEventActionDefaultBannedRights | types.ChannelAdminLogEventActionStopPoll | types.ChannelAdminLogEventActionChangeLinkedChat | types.ChannelAdminLogEventActionChangeLocation | types.ChannelAdminLogEventActionToggleSlowMode | types.ChannelAdminLogEventActionStartGroupCall | types.ChannelAdminLogEventActionDiscardGroupCall | types.ChannelAdminLogEventActionParticipantMute | types.ChannelAdminLogEventActionParticipantUnmute | types.ChannelAdminLogEventActionToggleGroupCallSetting | types.ChannelAdminLogEventActionParticipantJoinByInvite | types.ChannelAdminLogEventActionExportedInviteDelete | types.ChannelAdminLogEventActionExportedInviteRevoke | types.ChannelAdminLogEventActionExportedInviteEdit | types.ChannelAdminLogEventActionParticipantVolume | types.ChannelAdminLogEventActionChangeHistoryTTL | types.ChannelAdminLogEventActionParticipantJoinByRequest | types.ChannelAdminLogEventActionToggleNoForwards | types.ChannelAdminLogEventActionSendMessage | types.ChannelAdminLogEventActionChangeAvailableReactions | types.ChannelAdminLogEventActionChangeUsernames | types.ChannelAdminLogEventActionToggleForum | types.ChannelAdminLogEventActionCreateTopic | types.ChannelAdminLogEventActionEditTopic | types.ChannelAdminLogEventActionDeleteTopic | types.ChannelAdminLogEventActionPinTopic | types.ChannelAdminLogEventActionToggleAntiSpam | types.ChannelAdminLogEventActionChangePeerColor | types.ChannelAdminLogEventActionChangeProfilePeerColor | types.ChannelAdminLogEventActionChangeWallpaper | types.ChannelAdminLogEventActionChangeEmojiStatus | types.ChannelAdminLogEventActionChangeEmojiStickerSet;
  type ChannelAdminLogEvent = types.ChannelAdminLogEvent;
  type ChannelAdminLogEventsFilter = types.ChannelAdminLogEventsFilter;
  type PopularContact = types.PopularContact;
  type RecentMeUrl = types.RecentMeUrlUnknown | types.RecentMeUrlUser | types.RecentMeUrlChat | types.RecentMeUrlChatInvite | types.RecentMeUrlStickerSet;
  type InputSingleMedia = types.InputSingleMedia;
  type WebAuthorization = types.WebAuthorization;
  type InputMessage = types.InputMessageID | types.InputMessageReplyTo | types.InputMessagePinned | types.InputMessageCallbackQuery;
  type InputDialogPeer = types.InputDialogPeer | types.InputDialogPeerFolder;
  type DialogPeer = types.DialogPeer | types.DialogPeerFolder;
  type FileHash = types.FileHash;
  type InputClientProxy = types.InputClientProxy;
  type InputSecureFile = types.InputSecureFileUploaded | types.InputSecureFile;
  type SecureFile = types.SecureFileEmpty | types.SecureFile;
  type SecureData = types.SecureData;
  type SecurePlainData = types.SecurePlainPhone | types.SecurePlainEmail;
  type SecureValueType = types.SecureValueTypePersonalDetails | types.SecureValueTypePassport | types.SecureValueTypeDriverLicense | types.SecureValueTypeIdentityCard | types.SecureValueTypeInternalPassport | types.SecureValueTypeAddress | types.SecureValueTypeUtilityBill | types.SecureValueTypeBankStatement | types.SecureValueTypeRentalAgreement | types.SecureValueTypePassportRegistration | types.SecureValueTypeTemporaryRegistration | types.SecureValueTypePhone | types.SecureValueTypeEmail;
  type SecureValue = types.SecureValue;
  type InputSecureValue = types.InputSecureValue;
  type SecureValueHash = types.SecureValueHash;
  type SecureValueError = types.SecureValueErrorData | types.SecureValueErrorFrontSide | types.SecureValueErrorReverseSide | types.SecureValueErrorSelfie | types.SecureValueErrorFile | types.SecureValueErrorFiles | types.SecureValueError | types.SecureValueErrorTranslationFile | types.SecureValueErrorTranslationFiles;
  type SecureCredentialsEncrypted = types.SecureCredentialsEncrypted;
  type SavedContact = types.SavedPhoneContact;
  type PasswordKdfAlgo = types.PasswordKdfAlgoUnknown | types.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
  type SecurePasswordKdfAlgo = types.SecurePasswordKdfAlgoUnknown | types.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | types.SecurePasswordKdfAlgoSHA512;
  type SecureSecretSettings = types.SecureSecretSettings;
  type InputCheckPasswordSRP = types.InputCheckPasswordEmpty | types.InputCheckPasswordSRP;
  type SecureRequiredType = types.SecureRequiredType | types.SecureRequiredTypeOneOf;
  type InputAppEvent = types.InputAppEvent;
  type JSONObjectValue = types.JsonObjectValue;
  type JSONValue = types.JsonNull | types.JsonBool | types.JsonNumber | types.JsonString | types.JsonArray | types.JsonObject;
  type PageTableCell = types.PageTableCell;
  type PageTableRow = types.PageTableRow;
  type PageCaption = types.PageCaption;
  type PageListItem = types.PageListItemText | types.PageListItemBlocks;
  type PageListOrderedItem = types.PageListOrderedItemText | types.PageListOrderedItemBlocks;
  type PageRelatedArticle = types.PageRelatedArticle;
  type Page = types.Page;
  type PollAnswer = types.PollAnswer;
  type Poll = types.Poll;
  type PollAnswerVoters = types.PollAnswerVoters;
  type PollResults = types.PollResults;
  type ChatOnlines = types.ChatOnlines;
  type StatsURL = types.StatsURL;
  type ChatAdminRights = types.ChatAdminRights;
  type ChatBannedRights = types.ChatBannedRights;
  type InputWallPaper = types.InputWallPaper | types.InputWallPaperSlug | types.InputWallPaperNoFile;
  type CodeSettings = types.CodeSettings;
  type WallPaperSettings = types.WallPaperSettings;
  type AutoDownloadSettings = types.AutoDownloadSettings;
  type EmojiKeyword = types.EmojiKeyword | types.EmojiKeywordDeleted;
  type EmojiKeywordsDifference = types.EmojiKeywordsDifference;
  type EmojiURL = types.EmojiURL;
  type EmojiLanguage = types.EmojiLanguage;
  type Folder = types.Folder;
  type InputFolderPeer = types.InputFolderPeer;
  type FolderPeer = types.FolderPeer;
  type UrlAuthResult = types.UrlAuthResultRequest | types.UrlAuthResultAccepted | types.UrlAuthResultDefault;
  type ChannelLocation = types.ChannelLocationEmpty | types.ChannelLocation;
  type PeerLocated = types.PeerLocated | types.PeerSelfLocated;
  type RestrictionReason = types.RestrictionReason;
  type InputTheme = types.InputTheme | types.InputThemeSlug;
  type Theme = types.Theme;
  type BaseTheme = types.BaseThemeClassic | types.BaseThemeDay | types.BaseThemeNight | types.BaseThemeTinted | types.BaseThemeArctic;
  type InputThemeSettings = types.InputThemeSettings;
  type ThemeSettings = types.ThemeSettings;
  type WebPageAttribute = types.WebPageAttributeTheme | types.WebPageAttributeStory;
  type BankCardOpenUrl = types.BankCardOpenUrl;
  type DialogFilter = types.DialogFilter | types.DialogFilterDefault | types.DialogFilterChatlist;
  type DialogFilterSuggested = types.DialogFilterSuggested;
  type StatsDateRangeDays = types.StatsDateRangeDays;
  type StatsAbsValueAndPrev = types.StatsAbsValueAndPrev;
  type StatsPercentValue = types.StatsPercentValue;
  type StatsGraph = types.StatsGraphAsync | types.StatsGraphError | types.StatsGraph;
  type VideoSize = types.VideoSize | types.VideoSizeEmojiMarkup | types.VideoSizeStickerMarkup;
  type StatsGroupTopPoster = types.StatsGroupTopPoster;
  type StatsGroupTopAdmin = types.StatsGroupTopAdmin;
  type StatsGroupTopInviter = types.StatsGroupTopInviter;
  type GlobalPrivacySettings = types.GlobalPrivacySettings;
  type MessageViews = types.MessageViews;
  type MessageReplyHeader = types.MessageReplyHeader | types.MessageReplyStoryHeader;
  type MessageReplies = types.MessageReplies;
  type PeerBlocked = types.PeerBlocked;
  type GroupCall = types.GroupCallDiscarded | types.GroupCall;
  type InputGroupCall = types.InputGroupCall;
  type GroupCallParticipant = types.GroupCallParticipant;
  type InlineQueryPeerType = types.InlineQueryPeerTypeSameBotPM | types.InlineQueryPeerTypePM | types.InlineQueryPeerTypeChat | types.InlineQueryPeerTypeMegagroup | types.InlineQueryPeerTypeBroadcast | types.InlineQueryPeerTypeBotPM;
  type ChatInviteImporter = types.ChatInviteImporter;
  type ChatAdminWithInvites = types.ChatAdminWithInvites;
  type GroupCallParticipantVideoSourceGroup = types.GroupCallParticipantVideoSourceGroup;
  type GroupCallParticipantVideo = types.GroupCallParticipantVideo;
  type BotCommandScope = types.BotCommandScopeDefault | types.BotCommandScopeUsers | types.BotCommandScopeChats | types.BotCommandScopeChatAdmins | types.BotCommandScopePeer | types.BotCommandScopePeerAdmins | types.BotCommandScopePeerUser;
  type SponsoredMessage = types.SponsoredMessage;
  type SearchResultsCalendarPeriod = types.SearchResultsCalendarPeriod;
  type SearchResultsPosition = types.SearchResultPosition;
  type ReactionCount = types.ReactionCount;
  type MessageReactions = types.MessageReactions;
  type AvailableReaction = types.AvailableReaction;
  type MessagePeerReaction = types.MessagePeerReaction;
  type GroupCallStreamChannel = types.GroupCallStreamChannel;
  type AttachMenuBotIconColor = types.AttachMenuBotIconColor;
  type AttachMenuBotIcon = types.AttachMenuBotIcon;
  type AttachMenuBot = types.AttachMenuBot;
  type AttachMenuBots = types.AttachMenuBotsNotModified | types.AttachMenuBots;
  type AttachMenuBotsBot = types.AttachMenuBotsBot;
  type WebViewResult = types.WebViewResultUrl;
  type SimpleWebViewResult = types.SimpleWebViewResultUrl;
  type WebViewMessageSent = types.WebViewMessageSent;
  type BotMenuButton = types.BotMenuButtonDefault | types.BotMenuButtonCommands | types.BotMenuButton;
  type NotificationSound = types.NotificationSoundDefault | types.NotificationSoundNone | types.NotificationSoundLocal | types.NotificationSoundRingtone;
  type AttachMenuPeerType = types.AttachMenuPeerTypeSameBotPM | types.AttachMenuPeerTypeBotPM | types.AttachMenuPeerTypePM | types.AttachMenuPeerTypeChat | types.AttachMenuPeerTypeBroadcast;
  type InputInvoice = types.InputInvoiceMessage | types.InputInvoiceSlug | types.InputInvoicePremiumGiftCode;
  type InputStorePaymentPurpose = types.InputStorePaymentPremiumSubscription | types.InputStorePaymentGiftPremium | types.InputStorePaymentPremiumGiftCode | types.InputStorePaymentPremiumGiveaway;
  type PremiumGiftOption = types.PremiumGiftOption;
  type PaymentFormMethod = types.PaymentFormMethod;
  type EmojiStatus = types.EmojiStatusEmpty | types.EmojiStatus | types.EmojiStatusUntil;
  type Reaction = types.ReactionEmpty | types.ReactionEmoji | types.ReactionCustomEmoji;
  type ChatReactions = types.ChatReactionsNone | types.ChatReactionsAll | types.ChatReactionsSome;
  type EmailVerifyPurpose = types.EmailVerifyPurposeLoginSetup | types.EmailVerifyPurposeLoginChange | types.EmailVerifyPurposePassport;
  type EmailVerification = types.EmailVerificationCode | types.EmailVerificationGoogle | types.EmailVerificationApple;
  type PremiumSubscriptionOption = types.PremiumSubscriptionOption;
  type SendAsPeer = types.SendAsPeer;
  type MessageExtendedMedia = types.MessageExtendedMediaPreview | types.MessageExtendedMedia;
  type StickerKeyword = types.StickerKeyword;
  type Username = types.Username;
  type ForumTopic = types.ForumTopicDeleted | types.ForumTopic;
  type DefaultHistoryTTL = types.DefaultHistoryTTL;
  type ExportedContactToken = types.ExportedContactToken;
  type RequestPeerType = types.RequestPeerTypeUser | types.RequestPeerTypeChat | types.RequestPeerTypeBroadcast;
  type EmojiList = types.EmojiListNotModified | types.EmojiList;
  type EmojiGroup = types.EmojiGroup;
  type TextWithEntities = types.TextWithEntities;
  type AutoSaveSettings = types.AutoSaveSettings;
  type AutoSaveException = types.AutoSaveException;
  type InputBotApp = types.InputBotAppID | types.InputBotAppShortName;
  type BotApp = types.BotAppNotModified | types.BotApp;
  type AppWebViewResult = types.AppWebViewResultUrl;
  type InlineBotWebView = types.InlineBotWebView;
  type ReadParticipantDate = types.ReadParticipantDate;
  type InputChatlist = types.InputChatlistDialogFilter;
  type ExportedChatlistInvite = types.ExportedChatlistInvite;
  type MessagePeerVote = types.MessagePeerVote | types.MessagePeerVoteInputOption | types.MessagePeerVoteMultiple;
  type SponsoredWebPage = types.SponsoredWebPage;
  type StoryViews = types.StoryViews;
  type StoryItem = types.StoryItemDeleted | types.StoryItemSkipped | types.StoryItem;
  type StoryView = types.StoryView | types.StoryViewPublicForward | types.StoryViewPublicRepost;
  type InputReplyTo = types.InputReplyToMessage | types.InputReplyToStory;
  type ExportedStoryLink = types.ExportedStoryLink;
  type StoriesStealthMode = types.StoriesStealthMode;
  type MediaAreaCoordinates = types.MediaAreaCoordinates;
  type MediaArea = types.MediaAreaVenue | types.InputMediaAreaVenue | types.MediaAreaGeoPoint | types.MediaAreaSuggestedReaction | types.MediaAreaChannelPost | types.InputMediaAreaChannelPost;
  type PeerStories = types.PeerStories;
  type PremiumGiftCodeOption = types.PremiumGiftCodeOption;
  type PrepaidGiveaway = types.PrepaidGiveaway;
  type Boost = types.Boost;
  type MyBoost = types.MyBoost;
  type StoryFwdHeader = types.StoryFwdHeader;
  type PostInteractionCounters = types.PostInteractionCountersMessage | types.PostInteractionCountersStory;
  type PublicForward = types.PublicForwardMessage | types.PublicForwardStory;
  type PeerColor = types.PeerColor;
  type StoryReaction = types.StoryReaction | types.StoryReactionPublicForward | types.StoryReactionPublicRepost;
  type SavedDialog = types.SavedDialog;
  type SavedReactionTag = types.SavedReactionTag;
  type OutboxReadDate = types.OutboxReadDate;
  namespace storage {
    type FileType = types.storage.FileUnknown | types.storage.FilePartial | types.storage.FileJpeg | types.storage.FileGif | types.storage.FilePng | types.storage.FilePdf | types.storage.FileMp3 | types.storage.FileMov | types.storage.FileMp4 | types.storage.FileWebp;
  }
  namespace auth {
    type SentCode = types.auth.SentCode | types.auth.SentCodeSuccess;
    type Authorization = types.auth.Authorization | types.auth.AuthorizationSignUpRequired;
    type ExportedAuthorization = types.auth.ExportedAuthorization;
    type PasswordRecovery = types.auth.PasswordRecovery;
    type CodeType = types.auth.CodeTypeSms | types.auth.CodeTypeCall | types.auth.CodeTypeFlashCall | types.auth.CodeTypeMissedCall | types.auth.CodeTypeFragmentSms;
    type SentCodeType = types.auth.SentCodeTypeApp | types.auth.SentCodeTypeSms | types.auth.SentCodeTypeCall | types.auth.SentCodeTypeFlashCall | types.auth.SentCodeTypeMissedCall | types.auth.SentCodeTypeEmailCode | types.auth.SentCodeTypeSetUpEmailRequired | types.auth.SentCodeTypeFragmentSms | types.auth.SentCodeTypeFirebaseSms;
    type LoginToken = types.auth.LoginToken | types.auth.LoginTokenMigrateTo | types.auth.LoginTokenSuccess;
    type LoggedOut = types.auth.LoggedOut;
  }
  namespace contacts {
    type Contacts = types.contacts.ContactsNotModified | types.contacts.Contacts;
    type ImportedContacts = types.contacts.ImportedContacts;
    type Blocked = types.contacts.Blocked | types.contacts.BlockedSlice;
    type Found = types.contacts.Found;
    type ResolvedPeer = types.contacts.ResolvedPeer;
    type TopPeers = types.contacts.TopPeersNotModified | types.contacts.TopPeers | types.contacts.TopPeersDisabled;
  }
  namespace messages {
    type Dialogs = types.messages.Dialogs | types.messages.DialogsSlice | types.messages.DialogsNotModified;
    type Messages = types.messages.Messages | types.messages.MessagesSlice | types.messages.ChannelMessages | types.messages.MessagesNotModified;
    type Chats = types.messages.Chats | types.messages.ChatsSlice;
    type ChatFull = types.messages.ChatFull;
    type AffectedHistory = types.messages.AffectedHistory;
    type DhConfig = types.messages.DhConfigNotModified | types.messages.DhConfig;
    type SentEncryptedMessage = types.messages.SentEncryptedMessage | types.messages.SentEncryptedFile;
    type Stickers = types.messages.StickersNotModified | types.messages.Stickers;
    type AllStickers = types.messages.AllStickersNotModified | types.messages.AllStickers;
    type AffectedMessages = types.messages.AffectedMessages;
    type StickerSet = types.messages.StickerSet | types.messages.StickerSetNotModified;
    type SavedGifs = types.messages.SavedGifsNotModified | types.messages.SavedGifs;
    type BotResults = types.messages.BotResults;
    type BotCallbackAnswer = types.messages.BotCallbackAnswer;
    type MessageEditData = types.messages.MessageEditData;
    type PeerDialogs = types.messages.PeerDialogs;
    type FeaturedStickers = types.messages.FeaturedStickersNotModified | types.messages.FeaturedStickers;
    type RecentStickers = types.messages.RecentStickersNotModified | types.messages.RecentStickers;
    type ArchivedStickers = types.messages.ArchivedStickers;
    type StickerSetInstallResult = types.messages.StickerSetInstallResultSuccess | types.messages.StickerSetInstallResultArchive;
    type HighScores = types.messages.HighScores;
    type FavedStickers = types.messages.FavedStickersNotModified | types.messages.FavedStickers;
    type FoundStickerSets = types.messages.FoundStickerSetsNotModified | types.messages.FoundStickerSets;
    type SearchCounter = types.messages.SearchCounter;
    type InactiveChats = types.messages.InactiveChats;
    type VotesList = types.messages.VotesList;
    type MessageViews = types.messages.MessageViews;
    type DiscussionMessage = types.messages.DiscussionMessage;
    type HistoryImport = types.messages.HistoryImport;
    type HistoryImportParsed = types.messages.HistoryImportParsed;
    type AffectedFoundMessages = types.messages.AffectedFoundMessages;
    type ExportedChatInvites = types.messages.ExportedChatInvites;
    type ExportedChatInvite = types.messages.ExportedChatInvite | types.messages.ExportedChatInviteReplaced;
    type ChatInviteImporters = types.messages.ChatInviteImporters;
    type ChatAdminsWithInvites = types.messages.ChatAdminsWithInvites;
    type CheckedHistoryImportPeer = types.messages.CheckedHistoryImportPeer;
    type SponsoredMessages = types.messages.SponsoredMessages | types.messages.SponsoredMessagesEmpty;
    type SearchResultsCalendar = types.messages.SearchResultsCalendar;
    type SearchResultsPositions = types.messages.SearchResultsPositions;
    type PeerSettings = types.messages.PeerSettings;
    type MessageReactionsList = types.messages.MessageReactionsList;
    type AvailableReactions = types.messages.AvailableReactionsNotModified | types.messages.AvailableReactions;
    type TranscribedAudio = types.messages.TranscribedAudio;
    type Reactions = types.messages.ReactionsNotModified | types.messages.Reactions;
    type ForumTopics = types.messages.ForumTopics;
    type EmojiGroups = types.messages.EmojiGroupsNotModified | types.messages.EmojiGroups;
    type TranslatedText = types.messages.TranslateResult;
    type BotApp = types.messages.BotApp;
    type WebPage = types.messages.WebPage;
    type SavedDialogs = types.messages.SavedDialogs | types.messages.SavedDialogsSlice | types.messages.SavedDialogsNotModified;
    type SavedReactionTags = types.messages.SavedReactionTagsNotModified | types.messages.SavedReactionTags;
  }
  namespace updates {
    type State = types.updates.State;
    type Difference = types.updates.DifferenceEmpty | types.updates.Difference | types.updates.DifferenceSlice | types.updates.DifferenceTooLong;
    type ChannelDifference = types.updates.ChannelDifferenceEmpty | types.updates.ChannelDifferenceTooLong | types.updates.ChannelDifference;
  }
  namespace photos {
    type Photos = types.photos.Photos | types.photos.PhotosSlice;
    type Photo = types.photos.Photo;
  }
  namespace upload {
    type File = types.upload.File | types.upload.FileCdnRedirect;
    type WebFile = types.upload.WebFile;
    type CdnFile = types.upload.CdnFileReuploadNeeded | types.upload.CdnFile;
  }
  namespace help {
    type AppUpdate = types.help.AppUpdate | types.help.NoAppUpdate;
    type InviteText = types.help.InviteText;
    type Support = types.help.Support;
    type TermsOfService = types.help.TermsOfService;
    type RecentMeUrls = types.help.RecentMeUrls;
    type TermsOfServiceUpdate = types.help.TermsOfServiceUpdateEmpty | types.help.TermsOfServiceUpdate;
    type DeepLinkInfo = types.help.DeepLinkInfoEmpty | types.help.DeepLinkInfo;
    type PassportConfig = types.help.PassportConfigNotModified | types.help.PassportConfig;
    type SupportName = types.help.SupportName;
    type UserInfo = types.help.UserInfoEmpty | types.help.UserInfo;
    type PromoData = types.help.PromoDataEmpty | types.help.PromoData;
    type CountryCode = types.help.CountryCode;
    type Country = types.help.Country;
    type CountriesList = types.help.CountriesListNotModified | types.help.CountriesList;
    type PremiumPromo = types.help.PremiumPromo;
    type AppConfig = types.help.AppConfigNotModified | types.help.AppConfig;
    type PeerColorSet = types.help.PeerColorSet | types.help.PeerColorProfileSet;
    type PeerColorOption = types.help.PeerColorOption;
    type PeerColors = types.help.PeerColorsNotModified | types.help.PeerColors;
  }
  namespace account {
    type PrivacyRules = types.account.PrivacyRules;
    type Authorizations = types.account.Authorizations;
    type Password = types.account.Password;
    type PasswordSettings = types.account.PasswordSettings;
    type PasswordInputSettings = types.account.PasswordInputSettings;
    type TmpPassword = types.account.TmpPassword;
    type WebAuthorizations = types.account.WebAuthorizations;
    type AuthorizationForm = types.account.AuthorizationForm;
    type SentEmailCode = types.account.SentEmailCode;
    type Takeout = types.account.Takeout;
    type WallPapers = types.account.WallPapersNotModified | types.account.WallPapers;
    type AutoDownloadSettings = types.account.AutoDownloadSettings;
    type Themes = types.account.ThemesNotModified | types.account.Themes;
    type ContentSettings = types.account.ContentSettings;
    type ResetPasswordResult = types.account.ResetPasswordFailedWait | types.account.ResetPasswordRequestedWait | types.account.ResetPasswordOk;
    type SavedRingtones = types.account.SavedRingtonesNotModified | types.account.SavedRingtones;
    type SavedRingtone = types.account.SavedRingtone | types.account.SavedRingtoneConverted;
    type EmojiStatuses = types.account.EmojiStatusesNotModified | types.account.EmojiStatuses;
    type EmailVerified = types.account.EmailVerified | types.account.EmailVerifiedLogin;
    type AutoSaveSettings = types.account.AutoSaveSettings;
  }
  namespace channels {
    type ChannelParticipants = types.channels.ChannelParticipants | types.channels.ChannelParticipantsNotModified;
    type ChannelParticipant = types.channels.ChannelParticipant;
    type AdminLogResults = types.channels.AdminLogResults;
    type SendAsPeers = types.channels.SendAsPeers;
  }
  namespace payments {
    type PaymentForm = types.payments.PaymentForm;
    type ValidatedRequestedInfo = types.payments.ValidatedRequestedInfo;
    type PaymentResult = types.payments.PaymentResult | types.payments.PaymentVerificationNeeded;
    type PaymentReceipt = types.payments.PaymentReceipt;
    type SavedInfo = types.payments.SavedInfo;
    type BankCardData = types.payments.BankCardData;
    type ExportedInvoice = types.payments.ExportedInvoice;
    type CheckedGiftCode = types.payments.CheckedGiftCode;
    type GiveawayInfo = types.payments.GiveawayInfo | types.payments.GiveawayInfoResults;
  }
  namespace phone {
    type PhoneCall = types.phone.PhoneCall;
    type GroupCall = types.phone.GroupCall;
    type GroupParticipants = types.phone.GroupParticipants;
    type JoinAsPeers = types.phone.JoinAsPeers;
    type ExportedGroupCallInvite = types.phone.ExportedGroupCallInvite;
    type GroupCallStreamChannels = types.phone.GroupCallStreamChannels;
    type GroupCallStreamRtmpUrl = types.phone.GroupCallStreamRtmpUrl;
  }
  namespace stats {
    type BroadcastStats = types.stats.BroadcastStats;
    type MegagroupStats = types.stats.MegagroupStats;
    type MessageStats = types.stats.MessageStats;
    type StoryStats = types.stats.StoryStats;
    type PublicForwards = types.stats.PublicForwards;
  }
  namespace stickers {
    type SuggestedShortName = types.stickers.SuggestedShortName;
  }
  namespace users {
    type UserFull = types.users.UserFull;
  }
  namespace chatlists {
    type ExportedChatlistInvite = types.chatlists.ExportedChatlistInvite;
    type ExportedInvites = types.chatlists.ExportedInvites;
    type ChatlistInvite = types.chatlists.ChatlistInviteAlready | types.chatlists.ChatlistInvite;
    type ChatlistUpdates = types.chatlists.ChatlistUpdates;
  }
  namespace bots {
    type BotInfo = types.bots.BotInfo;
  }
  namespace stories {
    type AllStories = types.stories.AllStoriesNotModified | types.stories.AllStories;
    type Stories = types.stories.Stories;
    type StoryViewsList = types.stories.StoryViewsList;
    type StoryViews = types.stories.StoryViews;
    type PeerStories = types.stories.PeerStories;
    type StoryReactionsList = types.stories.StoryReactionsList;
  }
  namespace premium {
    type BoostsList = types.premium.BoostsList;
    type MyBoosts = types.premium.MyBoosts;
    type BoostsStatus = types.premium.BoostsStatus;
  }
}
