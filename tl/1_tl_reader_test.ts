/**
 * MTKruto - Cross-runtime JavaScript library for building Telegram clients
 * Copyright (C) 2023-2025 Roj <https://roj.im/>
 *
 * This file is part of MTKruto.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import { assertEquals } from "../0_deps.ts";
import { TLReader } from "./1_tl_reader.ts";
import { TLWriter } from "./1_tl_writer.ts";
import { Schema } from "./0_types.ts";
import { BOOL_FALSE, BOOL_TRUE, VECTOR } from "./0_utilities.ts";

Deno.test("TLReader", async (t) => {
  // deno-fmt-ignore
  const buffer = new Uint8Array([
    0x00, // read 1
    //
    0xFF, 0xFF, 0xFF, // uint24
    //
    0x01, 0x00, 0x80, // int24
    //
    0xCC, 0xEE, 0xFF, 0xFF, // uint32
    //
    0xFF, 0xFF, 0xFE, 0xFF, // int32
    //
    0x68, 0xFF, 0x98, 0x88, 0xDD, 0xCC, 0xFF, 0xEE, // uint64
    //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, // int64
    //
    0xAA, 0xF1, 0xD2, 0x4D, 0x62, 0x10, 0x26, 0xC0, // double
    //
    0x8D, 0x03, 0xBD, 0x3C, 0x55, 0x22, 0xA5, 0x05,
    0xD6, 0xDC, 0xC4, 0x66, 0xF5, 0x3E, 0x00, 0xD0, // uint128
    //
    0x17, 0xB3, 0x50, 0x37, 0x1C, 0xAD, 0x8A, 0xDF,
    0xE5, 0x02, 0x96, 0x48, 0x24, 0xC6, 0x6E, 0x07, // int128
    //
    0x5D, 0xA9, 0x9E, 0xC6, 0xB0, 0xD6, 0x82, 0x3F,
    0xE8, 0x43, 0x78, 0x19, 0xFD, 0x3D, 0x25, 0xAB,
    0x13, 0xEB, 0x8A, 0x60, 0x4F, 0xA7, 0xB1, 0x3B,
    0x17, 0x9C, 0x70, 0x2B, 0xCA, 0xDD, 0x1D, 0xEC, // uint256
    //
    0xFC, 0x99, 0xB0, 0x57, 0xDA, 0x4B, 0x6E, 0xFD,
    0x35, 0x34, 0x69, 0xEC, 0x59, 0x24, 0x40, 0x60,
    0x41, 0x98, 0x0D, 0x97, 0xA6, 0xA2, 0x96, 0x1E,
    0x95, 0xCE, 0xC6, 0xEF, 0x78, 0x95, 0xB9, 0x5F, // int256
    //
    0x01, 0xFF, 0x00, 0x00, // less than 254 bytes
    //
    0xFE, 0xFF, 0x00, 0x00, 0xFB, 0x42, 0xF5, 0xF7,
    0xE7, 0xBC, 0xE5, 0x8F, 0x55, 0x71, 0x59, 0x87,
    0x11, 0xD4, 0xDE, 0x7E, 0x7B, 0xD4, 0x9A, 0x9C,
    0x12, 0x89, 0xEF, 0xB9, 0x91, 0x2A, 0x74, 0x7D,
    0x2C, 0x34, 0xE5, 0x7D, 0x1F, 0x5B, 0x48, 0x6F,
    0xF0, 0xFA, 0x6D, 0x3E, 0x87, 0xDC, 0xB1, 0x5C,
    0x5F, 0x9D, 0x65, 0xD3, 0x1B, 0x8A, 0x63, 0xE3,
    0xD8, 0x94, 0x08, 0xDE, 0xC3, 0x4C, 0x2D, 0x1C,
    0xCF, 0x78, 0x3D, 0x6E, 0x2E, 0x65, 0xAB, 0x10,
    0x36, 0x9B, 0x22, 0x20, 0xC4, 0x1E, 0x96, 0x73,
    0x67, 0x32, 0x54, 0xFB, 0x4D, 0x7A, 0xA0, 0xDB,
    0x81, 0xEA, 0x9D, 0x5D, 0x8D, 0x6A, 0xBD, 0xAD,
    0x92, 0xB1, 0x82, 0x46, 0x93, 0x65, 0x55, 0xC5,
    0x05, 0x9F, 0x90, 0x65, 0x7A, 0xBB, 0xF3, 0x38,
    0x4D, 0x2E, 0xAB, 0xCD, 0xC4, 0xF9, 0xF7, 0x5B,
    0xF7, 0x68, 0x84, 0x5E, 0x27, 0xB2, 0x33, 0x1F,
    0x33, 0x1C, 0xEE, 0x52, 0xA3, 0xDF, 0x27, 0x86,
    0xA6, 0xB5, 0xD8, 0x56, 0x72, 0x44, 0x2D, 0x21,
    0x7A, 0x0F, 0x0D, 0x47, 0xA4, 0x7D, 0x2D, 0x01,
    0x23, 0x03, 0x0F, 0x15, 0x5D, 0xF7, 0x1D, 0xCF,
    0x4C, 0xF8, 0xFF, 0x39, 0xBA, 0xDB, 0xBB, 0x67,
    0x06, 0x55, 0x82, 0xE9, 0x5F, 0x10, 0xA1, 0xEB,
    0x7A, 0xEC, 0x9F, 0x9B, 0x18, 0x7D, 0x90, 0x23,
    0xB5, 0x31, 0xD6, 0x41, 0x1A, 0xD0, 0x2F, 0xD8,
    0x86, 0xBB, 0xF6, 0x93, 0x34, 0x54, 0x3F, 0xEB,
    0xF4, 0x19, 0x5A, 0x19, 0x49, 0xBF, 0x84, 0xCF,
    0xAE, 0xA8, 0xF4, 0xF6, 0xAE, 0xBD, 0xB5, 0x28,
    0xA9, 0xCA, 0x87, 0x6D, 0xB5, 0x54, 0x2F, 0x37,
    0x79, 0xD6, 0xDB, 0x87, 0xEB, 0x20, 0xE1, 0x7C,
    0x75, 0x71, 0x49, 0xE2, 0xA0, 0xAD, 0xF2, 0x2F,
    0xFF, 0xC1, 0x19, 0x8B, 0xF0, 0x84, 0xDC, 0xF3,
    0xC5, 0x12, 0xAB, 0xA5, 0x5A, 0xD5, 0xFD, 0x89,
    0x5E, 0x02, 0xD3, 0x00, // more than 254 bytes
    //
    0x01, 0x52, 0x00, 0x00, // string with less than 254 bytes
    //
    0xFE, 0x03, 0x01, 0x00, 0x4D, 0x54, 0x4B, 0x72,
    0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75,
    0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74,
    0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F,
    0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D,
    0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54,
    0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B,
    0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72,
    0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75,
    0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74,
    0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F,
    0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D,
    0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54,
    0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B,
    0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72,
    0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75,
    0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74,
    0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F,
    0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D,
    0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54,
    0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B,
    0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72,
    0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75,
    0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74,
    0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F,
    0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D,
    0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54,
    0x4B, 0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B,
    0x72, 0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72,
    0x75, 0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75,
    0x74, 0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74,
    0x6F, 0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F,
    0x4D, 0x54, 0x4B, 0x72, 0x75, 0x74, 0x6F, 0x00 // string with more than 254 bytes
  ]);
  const bufferLength = buffer.length;
  const reader = new TLReader(buffer);
  let read = 0;

  await t.step("read", async (t) => {
    assertEquals(reader.read(1), new Uint8Array([0]));

    await t.step("buffer", () => {
      read++;
      assertEquals(reader.buffer.length, bufferLength - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("unread", () => {
    const previousLength = reader.buffer.length;
    reader.unread(1);
    assertEquals(reader.buffer.length, previousLength + 1);
    reader.read(1);
  });

  await t.step("readInt24", async (t) => {
    assertEquals(reader.readInt24(false), 0xFFFFFF);
    assertEquals(reader.readInt24(), -8388607);

    await t.step("buffer", () => {
      read += 3 * 2;
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readInt32", async (t) => {
    assertEquals(reader.readInt32(false), 0xFFFFEECC);
    assertEquals(reader.readInt32(), -0x010001);

    await t.step("buffer", () => {
      read += 4 * 2;
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("unreadInt32", () => {
    const previousLength = reader.buffer.length;
    reader.unreadInt32();
    assertEquals(reader.buffer.length, previousLength + 4);
    assertEquals(reader.buffer.slice(0, 4), new Uint8Array([0xFF, 0xFF, 0xFE, 0xFF]));
    reader.read(4);
  });

  await t.step("readInt64", async (t) => {
    assertEquals(reader.readInt64(false), 17221708751939633000n);
    assertEquals(reader.readInt64(), -9223372036854775807n);

    await t.step("buffer", () => {
      read += 8 * 2;
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readDouble", async (t) => {
    assertEquals(reader.readDouble(), -11.032);

    await t.step("buffer", () => {
      read += 8;
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readInt128", async (t) => {
    assertEquals(reader.readInt128(false), 276480700075363207293378760200953856909n);
    assertEquals(reader.readInt128(), 9879767416712888958949374238624101143n);

    await t.step("buffer", () => {
      read += 16 * 2;
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readInt256", async (t) => {
    assertEquals(
      reader.readInt256(false),
      106798601566956061778213567770381794524206942780088236271152238178577682442589n,
    );
    assertEquals(
      reader.readInt256(),
      43297618943045001998167677499050563319748616773287013753630609307270848223740n,
    );

    await t.step("buffer", () => {
      read += 32 * 2;
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readBytes", async (t) => {
    assertEquals(reader.readBytes(), new Uint8Array([0xFF]));
    // deno-fmt-ignore
    assertEquals(
      reader.readBytes(),
      new Uint8Array([
        0xFB, 0x42, 0xF5, 0xF7, 0xE7, 0xBC, 0xE5, 0x8F,
        0x55, 0x71, 0x59, 0x87, 0x11, 0xD4, 0xDE, 0x7E,
        0x7B, 0xD4, 0x9A, 0x9C, 0x12, 0x89, 0xEF, 0xB9,
        0x91, 0x2A, 0x74, 0x7D, 0x2C, 0x34, 0xE5, 0x7D,
        0x1F, 0x5B, 0x48, 0x6F, 0xF0, 0xFA, 0x6D, 0x3E,
        0x87, 0xDC, 0xB1, 0x5C, 0x5F, 0x9D, 0x65, 0xD3,
        0x1B, 0x8A, 0x63, 0xE3, 0xD8, 0x94, 0x08, 0xDE,
        0xC3, 0x4C, 0x2D, 0x1C, 0xCF, 0x78, 0x3D, 0x6E,
        0x2E, 0x65, 0xAB, 0x10, 0x36, 0x9B, 0x22, 0x20,
        0xC4, 0x1E, 0x96, 0x73, 0x67, 0x32, 0x54, 0xFB,
        0x4D, 0x7A, 0xA0, 0xDB, 0x81, 0xEA, 0x9D, 0x5D,
        0x8D, 0x6A, 0xBD, 0xAD, 0x92, 0xB1, 0x82, 0x46,
        0x93, 0x65, 0x55, 0xC5, 0x05, 0x9F, 0x90, 0x65,
        0x7A, 0xBB, 0xF3, 0x38, 0x4D, 0x2E, 0xAB, 0xCD,
        0xC4, 0xF9, 0xF7, 0x5B, 0xF7, 0x68, 0x84, 0x5E,
        0x27, 0xB2, 0x33, 0x1F, 0x33, 0x1C, 0xEE, 0x52,
        0xA3, 0xDF, 0x27, 0x86, 0xA6, 0xB5, 0xD8, 0x56,
        0x72, 0x44, 0x2D, 0x21, 0x7A, 0x0F, 0x0D, 0x47,
        0xA4, 0x7D, 0x2D, 0x01, 0x23, 0x03, 0x0F, 0x15,
        0x5D, 0xF7, 0x1D, 0xCF, 0x4C, 0xF8, 0xFF, 0x39,
        0xBA, 0xDB, 0xBB, 0x67, 0x06, 0x55, 0x82, 0xE9,
        0x5F, 0x10, 0xA1, 0xEB, 0x7A, 0xEC, 0x9F, 0x9B,
        0x18, 0x7D, 0x90, 0x23, 0xB5, 0x31, 0xD6, 0x41,
        0x1A, 0xD0, 0x2F, 0xD8, 0x86, 0xBB, 0xF6, 0x93,
        0x34, 0x54, 0x3F, 0xEB, 0xF4, 0x19, 0x5A, 0x19,
        0x49, 0xBF, 0x84, 0xCF, 0xAE, 0xA8, 0xF4, 0xF6,
        0xAE, 0xBD, 0xB5, 0x28, 0xA9, 0xCA, 0x87, 0x6D,
        0xB5, 0x54, 0x2F, 0x37, 0x79, 0xD6, 0xDB, 0x87,
        0xEB, 0x20, 0xE1, 0x7C, 0x75, 0x71, 0x49, 0xE2,
        0xA0, 0xAD, 0xF2, 0x2F, 0xFF, 0xC1, 0x19, 0x8B,
        0xF0, 0x84, 0xDC, 0xF3, 0xC5, 0x12, 0xAB, 0xA5,
        0x5A, 0xD5, 0xFD, 0x89, 0x5E, 0x02, 0xD3
      ])
    );

    await t.step("buffer", () => {
      read += 4 + (1 + 3 + 255 + 1);
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readString", async (t) => {
    assertEquals(reader.readString(), "R");
    assertEquals(reader.readString(), "MTKruto".repeat(37));

    await t.step("buffer", () => {
      read += 4 + (1 + 3 + 259 + 1);
      assertEquals(reader.buffer.length, buffer.length - read);
      assertEquals(reader.buffer, buffer.subarray(read));
    });
  });

  await t.step("readObject", async (t) => {
    const schema = createSchemaFromTlContent(`dcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true this_port_only:flags.5?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;
config#cc1a241e flags:# default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true force_try_ipv6:flags.14?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int channels_read_media_period:int tmp_sessions:flags.0?int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int reactions_default:flags.15?Reaction autologin_token:flags.16?string = Config;
`);
    // deno-fmt-ignore
    const buffer = new Uint8Array([
        0x1E, 0x24, 0x1A, 0xCC, 0x48, 0x0E, 0x00, 0x00, 0xE7, 0x5F,
        0x6B, 0x64, 0x9F, 0x6C, 0x6B, 0x64, 0xB5, 0x75, 0x72, 0x99,
        0x02, 0x00, 0x00, 0x00, 0x15, 0xC4, 0xB5, 0x1C, 0x09, 0x00,
        0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18, 0x04, 0x04, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x0E, 0x32, 0x30, 0x37, 0x2E, 0x31,
        0x35, 0x34, 0x2E, 0x32, 0x34, 0x31, 0x2E, 0x37, 0x33, 0x00,
        0xCF, 0x38, 0x00, 0x00, 0x11, 0xDD, 0xFD, 0xDA, 0x25, 0x4C,
        0x78, 0xD9, 0xFA, 0x20, 0x2A, 0xC5, 0x36, 0x07, 0x9E, 0x88,
        0xB8, 0x08, 0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18, 0x10, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0E, 0x31, 0x34, 0x39,
        0x2E, 0x31, 0x35, 0x34, 0x2E, 0x31, 0x37, 0x35, 0x2E, 0x31,
        0x30, 0x00, 0x50, 0x00, 0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x27, 0x32,
        0x30, 0x30, 0x31, 0x3A, 0x30, 0x62, 0x32, 0x38, 0x3A, 0x66,
        0x32, 0x33, 0x64, 0x3A, 0x66, 0x30, 0x30, 0x31, 0x3A, 0x30,
        0x30, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x3A, 0x30,
        0x30, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x30, 0x65, 0xBB, 0x01,
        0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18, 0x10, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x0E, 0x31, 0x34, 0x39, 0x2E, 0x31,
        0x35, 0x34, 0x2E, 0x31, 0x36, 0x37, 0x2E, 0x34, 0x30, 0x00,
        0xBB, 0x01, 0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18, 0x04, 0x04,
        0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0E, 0x32, 0x30, 0x37,
        0x2E, 0x31, 0x35, 0x34, 0x2E, 0x32, 0x34, 0x31, 0x2E, 0x37,
        0x33, 0x00, 0xCF, 0x38, 0x00, 0x00, 0x11, 0xDD, 0xFD, 0xDA,
        0x25, 0x4C, 0x78, 0xD9, 0xFA, 0x20, 0x2A, 0xC5, 0x36, 0x07,
        0x9E, 0x88, 0xB8, 0x08, 0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18,
        0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x27, 0x32,
        0x30, 0x30, 0x31, 0x3A, 0x30, 0x36, 0x37, 0x63, 0x3A, 0x30,
        0x34, 0x65, 0x38, 0x3A, 0x66, 0x30, 0x30, 0x32, 0x3A, 0x30,
        0x30, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x3A, 0x30,
        0x30, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x30, 0x65, 0xBB, 0x01,
        0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18, 0x10, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x0F, 0x31, 0x34, 0x39, 0x2E, 0x31,
        0x35, 0x34, 0x2E, 0x31, 0x37, 0x35, 0x2E, 0x31, 0x31, 0x37,
        0xBB, 0x01, 0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18, 0x04, 0x04,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0E, 0x32, 0x30, 0x37,
        0x2E, 0x31, 0x35, 0x34, 0x2E, 0x32, 0x34, 0x31, 0x2E, 0x37,
        0x33, 0x00, 0xCF, 0x38, 0x00, 0x00, 0x11, 0xDD, 0xFD, 0xDA,
        0x25, 0x4C, 0x78, 0xD9, 0xFA, 0x20, 0x2A, 0xC5, 0x36, 0x07,
        0x9E, 0x88, 0xB8, 0x08, 0x00, 0x00, 0x0D, 0xA1, 0xB7, 0x18,
        0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x27, 0x32,
        0x30, 0x30, 0x31, 0x3A, 0x30, 0x62, 0x32, 0x38, 0x3A, 0x66,
        0x32, 0x33, 0x64, 0x3A, 0x66, 0x30, 0x30, 0x33, 0x3A, 0x30,
        0x30, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x3A, 0x30,
        0x30, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x30, 0x65, 0xBB, 0x01,
        0x00, 0x00, 0x0E, 0x74, 0x61, 0x70, 0x76, 0x33, 0x2E, 0x73,
        0x74, 0x65, 0x6C, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x32, 0x00,
        0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
        0x50, 0x34, 0x03, 0x00, 0x88, 0x13, 0x00, 0x00, 0x30, 0x75,
        0x00, 0x00, 0xE0, 0x93, 0x04, 0x00, 0x30, 0x75, 0x00, 0x00,
        0xDC, 0x05, 0x00, 0x00, 0x60, 0xEA, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F,
        0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xEA, 0x24, 0x00, 0xC8, 0x00,
        0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00,
        0x90, 0x5F, 0x01, 0x00, 0x30, 0x75, 0x00, 0x00, 0x10, 0x27,
        0x00, 0x00, 0x0D, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F,
        0x2F, 0x74, 0x2E, 0x6D, 0x65, 0x2F, 0x00, 0x00, 0x0A, 0x63,
        0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x62, 0x6F, 0x74, 0x00,
        0x0D, 0x66, 0x6F, 0x75, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72,
        0x65, 0x62, 0x6F, 0x74, 0x00, 0x00, 0x08, 0x69, 0x6D, 0x61,
        0x67, 0x65, 0x62, 0x6F, 0x74, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
      ]);
    const reader = new TLReader(buffer);
    const config = await reader.readObject("config", schema);

    assertEquals(new TLWriter().writeObject(config, schema).buffer, buffer);
    assertEquals(config._, "config");

    await t.step("X", async () => {
      const reader = new TLReader(buffer);
      const config = await reader.readObject("X", schema);

      assertEquals(new TLWriter().writeObject(config, schema).buffer, buffer);
      assertEquals(config._, "config");
    });
  });
});

Deno.test("optional double", async () => {
  const schema = createSchemaFromTlContent(`videoSize#de33b094 flags:# type:string w:int h:int size:int video_start_ts:flags.0?double = VideoSize;
`);
  // deno-fmt-ignore
  const buffer = new Uint8Array([
    0x94, 0xb0, 0x33, 0xde,
    0x01, 0x00, 0x00, 0x00,
    0x01, 0x75, 0x00, 0x00,
    0x20, 0x03, 0x00, 0x00,
    0x20, 0x03, 0x00, 0x00,
    0x88, 0xfc, 0x03, 0x00,
    0xe5, 0x46, 0x91, 0xb5,
    0x86, 0x72, 0x02, 0x40
  ]);

  const expected = {
    _: "videoSize",
    type: "u",
    w: 800,
    h: 800,
    size: 261256,
    video_start_ts: 2.305921,
    // deno-lint-ignore no-explicit-any
  } as any;

  const reader = new TLReader(buffer);
  const actual = await reader.readObject("videoSize", schema);

  assertEquals(actual, expected);
});

const emptySchema: Schema = { definitions: {}, identifierToName: {} };
Deno.test("primitives", async (t) => {
  const writer = new TLWriter();

  const bytes = new Uint8Array(16);
  writer.writeBytes(bytes);

  const bytes2 = new Uint8Array(1024 * 1024);
  writer.writeBytes(bytes2);

  const int128 = -17014118346046923173168730305728n;
  writer.writeInt128(int128);

  const int256 = 115792089237316195423570985008687907853269984665640564039457584007913129676n;
  writer.writeInt256(int256);

  const double = 1.0205;
  writer.writeDouble(double);

  const long = -92233720368547708n;
  writer.writeInt64(long);

  const int = 777000;
  writer.writeInt32(int);

  const boolTrue = true;
  writer.writeInt32(BOOL_TRUE, false);

  const boolFalse = false;
  writer.writeInt32(BOOL_FALSE, false);

  const string = "MTKruto";
  writer.writeString(string);

  const string2 = string.repeat(256);
  writer.writeString(string2);

  const reader = new TLReader(writer.buffer);

  await t.step("bytes", async () => {
    let deserialized = await reader.readObject("bytes", emptySchema);
    assertEquals(deserialized, bytes);
    deserialized = await reader.readObject("bytes", emptySchema);
    assertEquals(deserialized, bytes2);
  });

  await t.step("int128", async () => {
    const deserialized = await reader.readObject("int128", emptySchema);
    assertEquals(deserialized, int128);
  });

  await t.step("int256", async () => {
    const deserialized = await reader.readObject("int256", emptySchema);
    assertEquals(deserialized, int256);
  });

  await t.step("double", async () => {
    const deserialized = await reader.readObject("double", emptySchema);
    assertEquals(deserialized, double);
  });

  await t.step("long", async () => {
    const deserialized = await reader.readObject("long", emptySchema);
    assertEquals(deserialized, long);
  });

  await t.step("true", async () => {
    const lengthBefore = reader.buffer.length;
    for (let i = 0; i < 10; ++i) {
      const deserialized = await reader.readObject("true", emptySchema);
      assertEquals(deserialized, true);
    }
    assertEquals(reader.buffer.length, lengthBefore);
  });

  await t.step("int", async () => {
    const deserialized = await reader.readObject("int", emptySchema);
    assertEquals(deserialized, int);
  });

  await t.step("Bool", async () => {
    let deserialized = await reader.readObject("Bool", emptySchema);
    assertEquals(deserialized, boolTrue);
    deserialized = await reader.readObject("Bool", emptySchema);
    assertEquals(deserialized, boolFalse);
  });

  await t.step("string", async () => {
    let deserialized = await reader.readObject("string", emptySchema);
    assertEquals(deserialized, string);
    deserialized = await reader.readObject("string", emptySchema);
    assertEquals(deserialized, string2);
  });
});

Deno.test("primitive vectors", async () => {
  const writer = new TLWriter();
  writer.writeInt32(VECTOR, false);
  const expected = new Array(1024).fill(null).map((_, i) => i * Math.random());
  writer.writeInt32(expected.length);
  for (const item of expected) {
    writer.writeDouble(item);
  }
  const deserialized = await new TLReader(writer.buffer).readObject("Vector<double>", emptySchema);
  assertEquals(deserialized, expected);
});

function createSchemaFromTlContent(tlContent: string): Schema {
  const definitions: Schema["definitions"] = {};

  const lines = tlContent
    .split("\n")
    .filter((v) => v)
    .filter((v) => !v.startsWith("-"))
    .map((v) => v.trim());

  upper: for (const line of lines) {
    const [nameId] = line.split(/\s/);
    if (!nameId) {
      continue;
    }
    const name = nameId.split("#")[0];
    if (!name) {
      continue;
    }
    const id = parseInt(nameId.split("#")[1], 16);
    if (!id) {
      continue;
    }
    const ret = line.split("=")[1]?.trim()?.replace(";", "");
    if (!ret) {
      continue;
    }
    const fields = line.split("=")[0]?.slice(nameId.length).trim();
    if (!fields) {
      continue;
    }
    const fields_ = new Array<[string, string]>();
    for (const field of fields.split(/\s/)) {
      const [identifier, type] = field.split(":");
      if (!identifier || !type) {
        continue upper;
      }
      fields_.push([identifier, type]);
    }
    definitions[name] = [id, fields_, ret];
  }

  return { definitions, identifierToName: Object.fromEntries(Object.entries(definitions).map(([k, [v]]) => [v, k])) };
}
